/* Minification failed. Returning unminified contents.
(2270,47-49): run-time error JS1006: Expected ')': =>
(2270,38-46): run-time error JS1317: Unable to convert from reference to binding: async ()
(2270,55): run-time error JS1004: Expected ';'
(2270,109): run-time error JS1004: Expected ';'
(2270,109-110): run-time error JS1195: Expected expression: )
(2282,31): run-time error JS1004: Expected ';'
(2282,41-42): run-time error JS1010: Expected identifier: (
(2297,26): run-time error JS1004: Expected ';'
(2313,14-15): run-time error JS1195: Expected expression: ,
(13689,23-24): run-time error JS1005: Expected '(': {
(13691,13-14): run-time error JS1006: Expected ')': }
(13691,13-14): run-time error JS1008: Expected '{': }
(13691,14-15): run-time error JS1195: Expected expression: ,
(13710,35-37): run-time error JS1006: Expected ')': =>
(13710,26-34): run-time error JS1317: Unable to convert from reference to binding: async ()
(13710,43): run-time error JS1004: Expected ';'
(13710,68): run-time error JS1004: Expected ';'
(13710,68-69): run-time error JS1195: Expected expression: )
(13725,31): run-time error JS1004: Expected ';'
(13725,41-42): run-time error JS1010: Expected identifier: (
(13741,26): run-time error JS1004: Expected ';'
(13758,14-15): run-time error JS1195: Expected expression: ,
(13884,6-7): run-time error JS1195: Expected expression: )
(16258,51-53): run-time error JS1006: Expected ')': =>
(16258,42-50): run-time error JS1317: Unable to convert from reference to binding: async ()
(16258,59): run-time error JS1004: Expected ';'
(16258,84): run-time error JS1004: Expected ';'
(16258,84-85): run-time error JS1195: Expected expression: )
(16282,31): run-time error JS1004: Expected ';'
(16282,41-42): run-time error JS1010: Expected identifier: (
(16298,26): run-time error JS1004: Expected ';'
(16320,14-15): run-time error JS1195: Expected expression: ,
(35170,35-37): run-time error JS1006: Expected ')': =>
(35170,26-34): run-time error JS1317: Unable to convert from reference to binding: async ()
(35170,43): run-time error JS1004: Expected ';'
(35170,73): run-time error JS1004: Expected ';'
(35170,73-74): run-time error JS1195: Expected expression: )
(35180,36): run-time error JS1004: Expected ';'
(35180,46-47): run-time error JS1010: Expected identifier: (
(35196,26): run-time error JS1004: Expected ';'
(35220,14-15): run-time error JS1195: Expected expression: ,
(13676,23-34): run-time error JS1301: End of file encountered before function is properly closed: function ()
(47875,1): run-time error JS1107: Expecting more source characters
(13664,5-113): run-time error JS1301: End of file encountered before function is properly closed: function ($, ko, config, router, messenger, datamanager, shell, presenter, model, viewmodel, modelmapper, _)
(47875,1): run-time error JS1107: Expecting more source characters
(47875,1): run-time error JS1006: Expected ')'
 */
define('viewmodels/vm.adminheader',
    ['jquery', 'ko', 'presenter', 'messenger', 'datamanager', 'config', 'router', 'underscore'],
    function ($, ko, presenter, messenger, datamanager, config, router, _) {

        var
            showReportedContent = ko.observable(false),
            showAdmins = ko.observable(false),
            memberIsSportswikAdmin = ko.observable(true),

            navigateToHome = {
                getHrefString: function () {
                    return '/';
                },
                toClick: function () {
                    router.navigateTo('/');
                }
            },

            navigateToAdminHome = {
                getHrefString: function () {
                    return config.hashes.admin;
                },
                toClick: function () {
                    router.navigateTo(config.hashes.admin);

                    closeSideMenu();
                }
            },

            navigateToAdminReportedItems = {
                getHrefString: function () {
                    return config.hashes.adminreporteditems;
                },
                toClick: function () {
                    router.navigateTo(config.hashes.adminreporteditems);

                    closeSideMenu();
                }
            },

            navigateToAdminMembers = {
                getHrefString: function () {
                    //return config.hashes.adminmembers;
                    return config.hashes.admin;
                },
                toClick: function () {
                    //router.navigateTo(config.hashes.adminmembers);
                    router.navigateTo(config.hashes.admin);

                    closeSideMenu();
                }
            },

            navigateToSystemAdministrators = {
                getHrefString: function () {
                    return config.hashes.systemadministrators;
                },
                toClick: function () {
                    router.navigateTo(config.hashes.systemadministrators);

                    closeSideMenu();
                }
            },

            navigateToAdminPayouts = {
                getHrefString: function () {
                    return config.hashes.adminpayouts;
                },
                toClick: function () {
                    router.navigateTo(config.hashes.adminpayouts);

                    closeSideMenu();
                }
            },

            closeSideMenu = function () {
                if ($('#sideMenu').hasClass('open'))
                    presenter.closeSideMenu();
            },

            init = function () {
                datamanager.initAdminHeader({
                    success: function (json) {
                        showAdmins(json.ShowAdmins);
                        showReportedContent(json.ShowReportedContent);                        
                    },
                    error: function (error) {
                        //console.log(error);
                    }
                })
            };

        init();

        return {
            showReportedContent: showReportedContent,
            showAdmins: showAdmins,
            memberIsSportswikAdmin: memberIsSportswikAdmin,

            navigateToHome: navigateToHome,
            navigateToAdminHome: navigateToAdminHome,
            navigateToAdminReportedItems: navigateToAdminReportedItems,
            navigateToAdminMembers: navigateToAdminMembers,
            navigateToSystemAdministrators: navigateToSystemAdministrators,
            navigateToAdminPayouts: navigateToAdminPayouts
        };
    });;
define('viewmodels/vm.adminmember',
    ['jquery', 'config', 'router', 'ko', 'messenger', 'viewmodels/vm.shell', 'viewmodels/vm.adminmembers', 'datamanager', 'models/viewmodel', 'toastr', 'helpers/sw.utils', 'underscore'],
    function ($, config, router, ko, messenger, shell,adminmembers, datamanager, viewmodel, toastr, utils, _) {

        var memberId = 0,
            currentViewName = '',
            currentTab = ko.observable(''),
            currentPage = ko.observable(''),
            memberHeader = ko.observable(),

            pictures = ko.observableArray(),
            videos = ko.observableArray(),
            genders = ko.observableArray(),
            years = ko.observableArray(),
            countries = ko.observableArray(),
            reports = ko.observableArray(),
            payments = ko.observableArray(),
            vouchers = ko.observableArray(),
            reportsByMember = ko.observableArray(),
            member = ko.observable(),
            memberPayment = ko.observable(),
            leagues = ko.observableArray(),
            roles = ko.observableArray(),
            teamsIFollow = ko.observableArray(),
            matchingMember = ko.observable(),
            memberMatchType = 0,
            memberInformationLocked = ko.observable(true),

            activate = function (routeData, callback) {
                routeData.subview = 'teamsandroles';
                messenger.publish.viewModelActivated();

                activatesubview(routeData);
            },

            activatesubview = function (routeData, callback) {
                // If we navigated to a new member, clear observables
                if (memberId !== Number(routeData.Id)) {
                    clearObservables();
                }

                if (routeData.Id !== undefined) {
                    memberId = Number(routeData.Id);
                }

                var currentView = routeData.subview;
                currentViewName = 'adminmember-' + currentView;
                currentTab(routeData.subview);
                currentPage(currentView);

                $('.adminmember-subview').hide();
                $('#adminmember-' + currentView).show();

                if (memberHeader() === undefined || memberHeader() === '') {
                    getMemberHeader(routeData, true);
                } else {
                    switch (currentTab()) {
                        case 'dashboard': {
                            break;
                        }
                        case 'edit': {
                            if (countries().length === 0 || genders().length === 0) {
                                datamanager.initEditMemberVariables({
                                    success: function (json) {
                                        fillVariableData(json);
                                        initEditMember(routeData);
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            } else {
                                initEditMember(routeData);
                            }


                            break;
                        }
                        case 'teamsandroles': {
                            if (leagues().length === 0 && roles().length === 0 && teamsIFollow().length === 0) {
                                datamanager.getMemberRoles(memberId, {
                                    success: function (json) {
                                        leagues([]);
                                        roles([]);
                                        teamsIFollow([]);

                                        var underlayingArray = leagues();

                                        for (var i = 0; i < json.Leagues.length; i++) {
                                            underlayingArray.push(json.Leagues[i]);
                                        }

                                        leagues.valueHasMutated();

                                        underlayingArray = roles();

                                        for (var j = 0; j < json.Roles.length; j++) {
                                            underlayingArray.push(json.Roles[j]);
                                        }

                                        roles.valueHasMutated();

                                        underlayingArray = teamsIFollow();

                                        for (var k = 0; k < json.TeamsIFollow.length; k++) {
                                            underlayingArray.push(json.TeamsIFollow[k]);
                                        }

                                        teamsIFollow.valueHasMutated();

                                        subViewLoaded();
                                    },
                                    error: function (error) {
                                        alert(error);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                subViewLoaded();
                            }

                            break;
                        }
                        case 'reporteditems': {
                            if (reports().length === 0) {
                                datamanager.getReportedItemsForMember(memberId, {
                                    success: function (json) {
                                        reports([]);

                                        var underlayingArray = reports();

                                        for (var i = 0; i < json.length; i++) {
                                            underlayingArray.push(json[i]);
                                        }

                                        reports.valueHasMutated();

                                        subViewLoaded();
                                    },
                                    error: function (error) {
                                        alert(error);

                                        subViewLoaded();
                                    }
                                });
                            }
                            else {
                                subViewLoaded();
                            }


                            break;
                        }
                        case 'reportedbymember': {
                            if (reportsByMember().length === 0) {
                                datamanager.getReportedItemsByReportedMember(memberId, {
                                    success: function (json) {
                                        reportsByMember([]);

                                        var underlayingArray = reportsByMember();

                                        for (var i = 0; i < json.length; i++) {
                                            underlayingArray.push(json[i]);
                                        }

                                        reportsByMember.valueHasMutated();

                                        subViewLoaded();
                                    },
                                    error: function (error) {
                                        alert(error);

                                        subViewLoaded();
                                    }
                                });
                            }
                            else {
                                subViewLoaded();
                            }
                            break;
                        }
                        case 'guardians': {
                            subViewLoaded();
                            break;
                        }
                        case 'payments': {
                            // Get purchases from backend
                            if (payments().length === 0) {
                                datamanager.getMemberPayments(memberId, {
                                    success: function (json) {
                                        payments([]);
                                        vouchers([]);

                                        var underlayingArray = payments();

                                        for (var i = 0; i < json.Subscriptions.length; i++) {
                                            underlayingArray.push(json.Subscriptions[i]);
                                        }

                                        payments.valueHasMutated();

                                        underlayingArray = vouchers();

                                        for (var j = 0; j < json.Vouchers.length; j++) {
                                            underlayingArray.push(json.Vouchers[j]);
                                        }

                                        vouchers.valueHasMutated();
                                    },
                                    error: function (error) {

                                    }
                                });
                            }

                            subViewLoaded();

                            break;
                        }
                        case 'uploaded': {
                            if (pictures().length === 0 && videos().length === 0) {
                                datamanager.getUploadedItemsForMember(memberId, {
                                    success: function (json) {
                                        pictures([]);
                                        videos([]);

                                        var underlayingArray = pictures();

                                        for (var i = 0; i < json.Pictures.length; i++) {
                                            underlayingArray.push(json.Pictures[i]);
                                        }

                                        pictures.valueHasMutated();

                                        underlayingArray = videos();

                                        for (var j = 0; j < json.Videos.length; j++) {
                                            underlayingArray.push(json.Videos[j]);
                                        }

                                        videos.valueHasMutated();

                                        subViewLoaded();
                                    },
                                    error: function (error) {
                                        subViewLoaded();

                                        alert(error);

                                    }
                                });
                            } else {
                                subViewLoaded();
                            }

                            break;
                        }
                    }
                }
            },

            subViewLoaded = function () {
                $("#" + currentViewName + " .beforeSubViewLoaded").hide();
                $("#" + currentViewName + " .afterSubViewLoaded").show();
            },

            initEditMember = function (routeData) {
                datamanager.getMemberForAdminEdit(memberId, {
                    success: function (model) {
                        member(model);

                        //disableField('#memberPersonalIdentityNumber');
                        //disableField('#memberFirstName');
                        //disableField('#memberLastName'); 

                        hidePreloader();
                    },
                    error: function (error) {
                        alert(error);
                        hidePreloader();
                    }
                });
            },

            fillVariableData = function (json) {
                countries([]);
                genders([]);
                years([]);


                /* FILL COUNTRIES */
                var underlayingArray = countries();

                for (var j = 0; j < json.Countries.length; j++) {
                    underlayingArray.push(json.Countries[j]);
                }

                countries.valueHasMutated();

                /* FILL GENDERS */
                underlayingArray = genders();

                for (var k = 0; k < json.Genders.length; k++) {
                    underlayingArray.push(json.Genders[k]);
                }
                genders.valueHasMutated();

                /* FILL YEARS */
                underlayingArray = years();

                for (var l = 0; l < json.Years.length; l++) {
                    underlayingArray.push(json.Years[l]);
                }

                years.valueHasMutated();
            },

            getMemberHeader = function (routeData, callSubView) {
                datamanager.getMemberHeader(memberId, {
                    success: function (json) {
                        memberHeader(json);

                        hidePreloader();

                        if (callSubView)
                            activatesubview(routeData);
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            hidePreloader = function () {
                $('#adminmember-view-preloader').hide();
                $('#adminmember-view-afterloaded').show();
            },

            //removePreloader = function (subviewname) {
            //    $('#' + subviewname + ' .preloader').hide();
            //    $('#' + subviewname + ' .afterloaded').show();
            //},

            onFieldFocus = function (data, event) {
                $(event.target).removeClass("input-validation-error");
            },

            onPersonalIdentityNumberFocusOut = function (data, event) {
                var personalIdentityNumber = $(event.target).val();

                if ($(event.target).hasClass("disabled-control") === false && personalIdentityNumber.length > 0 && personalIdentityNumber.length < 12) {
                    $(event.target).addClass("input-validation-error");
                }
            },

            onKeyPressAllowNumeric = function (d, e) {
                return utils.isNumericOrDelete(e);
            },

            onPersonalIdentityNumber = function (data, e) {
                // Only search if the last number we entered was a digit
                var searchForMember = utils.isNumeric(e);

                var personalIdentityNumber = $(e.target).val();

                if (personalIdentityNumber.length === 2) {
                    if (!(personalIdentityNumber === "20" || personalIdentityNumber === "19")) {
                        var year = parseInt(personalIdentityNumber);

                        // Everything after 2019 will default to 1919
                        if (year > 19) {
                            $(e.target).val("19" + year);
                        } else {
                            if (year < 10)
                                $(e.target).val("200" + year);
                            else
                                $(e.target).val("20" + year);
                        }
                    }
                }

                if (searchForMember)
                    onPersonalIdentityNumberHelper(data, e);
            },

            onPersonalIdentityNumberHelper = function (data, event) {
                var personalIdentityNumber = $(event.target).val();

                if (personalIdentityNumber.length === 12) {
                    searchMemberByPersonalNumber(personalIdentityNumber);
                }
            },

            searchMemberByPersonalNumber = function (personalIdentityNumber) {
                if (utils.validatePersonalNumber(personalIdentityNumber)) {
                    $(event.target).removeClass("input-validation-error");

                    datamanager.searchForMember(memberId, '', '', personalIdentityNumber, true, 0)
                        .then(function (json) {
                            if (json.length > 0) {
                                matchingMember(json[0]);

                                memberMatchType = 1; // We matched on PersonalIdentityNumber
                                $('.memberselect').show();
                            }
                        })
                        .fail(function (error) {
                            alert(error.responseText);
                        });
                } else {
                    $(event.target).addClass("input-validation-error");
                }
            },

            onPhoneKeyUp = function (data, event) {
                var phone = $(event.target).val();
                var countryCodePrefix = $('#' + event.target.id + 'NumberPrefix').val();

                // Only search if the last number we entered was a digit
                var searchForMember = utils.isNumeric(event);

                if (phone.length > 7 && searchForMember) {
                    searchMemberHelper(phone, countryCodePrefix);
                }
            },

            onPastePersonalIdentityNumber = function (data, event) {
                var personNumber = event.originalEvent.clipboardData.getData("text/plain");

                if (personNumber) {
                    personNumber = personNumber.replace(/\D/g, '');

                    console.log(personNumber);

                    if (personNumber.length > 12)
                        personNumber = personNumber.substring(0, 10);

                    $('#memberPersonalIdentityNumber').val(personNumber);

                    if (personNumber.length === 12) {
                        searchMemberByPersonalNumber(personNumber);
                    }

                    return false;
                }

                return true;
            },

            onPastePhoneNumber = function (data, event) {
                var phone = event.originalEvent.clipboardData.getData("text/plain");

                if (phone) {
                    phone = phone.replace(/\D/g, '');

                    if (phone.length > 10)
                        phone = phone.substring(0, 10);

                    $('#memberPhone').val(phone).change();

                    if (phone.length > 7) {
                        var countryCodePrefix = $('#memberPhoneNumberPrefix').val();

                        searchMemberHelper(phone, countryCodePrefix);
                    }
                }

                return false;
            },

            searchMemberHelper = function (phoneNumber, countryCodePrefix) {
                datamanager.searchForMember(memberId, countryCodePrefix, phoneNumber, '', true, 0)
                    .then(function (json) {
                        if (json.length > 0) {
                            matchingMember(json[0]);

                            memberMatchType = 2; // We matched on PhoneNumber
                            $('.memberselect').show();
                        }
                    })
                    .fail(function (error) {
                        alert(error.responseText);
                    });
            },

            navigateToLeagueView = function (league) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.leaguesite + '/' + league.LeagueID;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.leaguesite + '/' + league.LeagueID);
                    }
                };
                return navigationItem;
            },

            filteredReports = ko.computed(function () {
                return ko.utils.arrayFilter(reports(), function (item) {
                    return true;
                });
            }),

            navigateToItem = function (item) {
                switch (item.DeepLinkTypeID) {
                    case 69: // Team page
                        router.navigateTo('/' + config.hashes.team + '/' + item.ItemID);
                        break;
                    case 53: // Club
                        router.navigateTo('/' + config.hashes.club + '/' + item.ItemID);
                        break;
                    case 18: // League organizer
                        router.navigateTo('/' + config.hashes.leagueorganizersite + '/' + item.ItemID);
                        break;
                    default:
                        console.log('Unknown type clicked!');
                }
            },

            navigateToPost = function (data) {
                if (data.GameID) {
                    //router.navigateTo(config.hashes.livedetails + '/' + data.GameID + '/' + data.LiveTimeItemID + '/' + data.ItemType);
                    window.open('/' + config.hashes.livedetails + '/' + data.GameID + '/' + data.LiveTimeItemID + '/' + data.ItemType, '_blank');
                }
                else
                    console.log(data);
            },

            navigateToAdminMemberDashboard = function () {
                return createAdminMemberNavigationItem('dashboard');
            },

            navigateToAdminMemberTeamsAndRoles = function () {
                return createAdminMemberNavigationItem('teamsandroles');
            },

            navigateToAdminMemberReportedItems = function () {
                return createAdminMemberNavigationItem('reporteditems');
            },

            navigateToAdminMemberReportedByMember = function () {
                return createAdminMemberNavigationItem('reportedbymember');
            },

            navigateToAdminMemberUploaded = function () {
                return createAdminMemberNavigationItem('uploaded');
            },

            navigateToAdminMemberGuardians = function () {
                return createAdminMemberNavigationItem('guardians');
            },

            navigateToAdminMemberPayments = function () {
                return createAdminMemberNavigationItem('payments');
            },

            navigateToAdminMemberEdit = function () {
                router.navigateTo(config.hashes.adminmember + '/' + memberId + '/edit');
            },

            createAdminMemberNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.adminmember + '/' + memberId + '/' + endPath;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.adminmember + '/' + memberId + '/' + endPath);
                    }
                };
            },

            cancelMemberEdit = function () {
                router.navigateTo(config.hashes.adminmember + '/' + memberId);
            },

            saveMember = function () {
                $('#memberValidation').hide();

                var firstName = $('#memberFirstName').val();
                var lastName = $('#memberLastName').val();

                var personalIdentityNumber = $('#memberPersonalIdentityNumber').val();
                var countryCodePrefix = $('#memberPhoneNumberPrefix').val();
                var phoneNumber = $('#memberPhone').val();
                var email = $('#memberEmail').val();
                var genderId = $('#memberGender').val();
                var yearOfBirth = $('#memberYearOfBirth').val();

                var validationError = false;

                if (firstName.length === 0) {
                    $('#memberFirstName').addClass("input-validation-error");
                    validationError = true;
                }

                if (lastName.length === 0) {
                    $('#memberLastName').addClass("input-validation-error");
                    validationError = true;
                }

                if ($('#memberPersonalIdentityNumber').hasClass("disabled-control") === false && personalIdentityNumber.length > 0 && personalIdentityNumber.length !== 12) {
                    $('#memberPersonalIdentityNumber').addClass("input-validation-error");
                    validationError = true;
                }

                if (email.length > 0 && utils.validateEmail(email) === false) {
                    $('#memberEmail').addClass("input-validation-error");
                    validationError = true;
                }

                if (validationError) {
                    $('#memberValidation').show();
                    return true;
                }

                var editMember = new viewmodel.MemberForEditView()
                    .MemberID(memberId)
                    .GenderID(genderId)
                    .YearOfBirth(yearOfBirth)
                    .FirstName(firstName)
                    .LastName(lastName)
                    .Email(email)
                    .CountryCodePrefix(countryCodePrefix)
                    .MobilePhone(phoneNumber)
                    .PersonalIdentityNumber(personalIdentityNumber);

                var ep = ko.toJS(editMember);

                datamanager.updateAdminMember(ep, {
                    success: function () {
                        showToast('Användaren har sparats');
                        //Clear obserables to reflect changes
                        clearObservables();
                        router.navigateTo(config.hashes.adminmember + '/' + memberId);
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            deleteMember = function (data) {
                console.log(data);

                var r = confirm("Är du säker att du vill ta bort användaren?");

                if (r === true) {
                    $('#deleteMemberError').hide();
                    shell.showProgressIndicator('Tar bort användare...');

                    datamanager.deleteMember(data.MemberID, {
                        success: function (json) {
                            shell.hideProgressIndicator();
                            alert("Användaren har tagits bort");

                            //Clean member variables
                            clearObservables();

                            //Force search reload
                            adminmembers.searchMembers();
                            router.navigateTo(config.hashes.adminmembers);
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            $('#deleteMemberError').show();
                            $('#deleteMemberError p').text(error);
                            console.log(error);
                        }
                    });
                }
            },

            showPayment = function (data) {
                datamanager.getMemberPayment(data.MemberLiveStreamSubscriptionID, {
                    success: function (json) {
                        memberPayment(json);

                        $('.adminmember-subview').hide();
                        $('#adminmember-payment').show();
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            closePayment = function () {
                $('.adminmember-subview').hide();
                $('#adminmember-payments').show();
            },

            showGame = function (data) {
                window.open('/' + config.hashes.magazinegameview + '/' + data.GameID, '_blank');
            },

            disableField = function (fieldName) {
                $(fieldName).addClass('disabled-control');
                $(fieldName).prop('readonly', true);
            },

            enableField = function (fieldName) {
                $(fieldName).removeClass('disabled-control');
                $(fieldName).prop('readonly', false);
            },

            showToast = function (text) {
                if (toastr)
                    toastr.success(text);
                else
                    alert(text);
            },

            confirmMemberMerge = function () {
                var memberIdToKeep = matchingMember().MemberID;


                shell.showProgressIndicator('Slår ihop...');

                datamanager.mergeMembers(memberId, memberIdToKeep, {
                    success: function (json) {
                        shell.hideProgressIndicator();

                        router.navigateTo(config.hashes.adminmember + '/' + memberIdToKeep);
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    }
                });

                $('.memberselect').hide();
            },

            cancelMemberMerge = function () {
                switch (memberMatchType) {
                    case 1:
                        $('#memberPersonalIdentityNumber').val('');
                        $('#memberPersonalIdentityNumber').focus();
                        break;
                    case 2:
                        $('#memberPhone').val('');
                        $('#memberPhone').focus();
                        break;
                    default:
                        break;
                }
                $('.memberselect').hide();
            },

            createVoucher = function (data) {
                var r = confirm("Vill du skapa en rabattkupong för denna betalning?");

                if (r === true) {
                    datamanager.createLiveStreamVoucher(data.PayeePaymentReference)
                        .then(function (code) {
                            datamanager.getMemberPayment(data.MemberLiveStreamSubscriptionID, {
                                success: function (json) {
                                    memberPayment(json);

                                    // Get updated vouchers and payments
                                    datamanager.getMemberPayments(memberId, {
                                        success: function (json) {
                                            payments([]);
                                            vouchers([]);

                                            var underlayingArray = payments();

                                            for (var i = 0; i < json.Subscriptions.length; i++) {
                                                underlayingArray.push(json.Subscriptions[i]);
                                            }

                                            payments.valueHasMutated();

                                            underlayingArray = vouchers();

                                            for (var j = 0; j < json.Vouchers.length; j++) {
                                                underlayingArray.push(json.Vouchers[j]);
                                            }

                                            vouchers.valueHasMutated();
                                        },
                                        error: function (error) {

                                        }
                                    });
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        })
                        .fail(function (error) {
                            alert(error.responseText);
                        });
                }
            },

            cancelSubscription = function (data) {
                var r = confirm("Vill du avbryta prenumerationen?");

                if (r === true) {
                    shell.showProgressIndicator('Avbryter prenumeration...');

                    datamanager.cancelStripeSubscription(data.MemberLiveStreamSubscriptionID)
                        .then(function () {
                            datamanager.getMemberPayment(data.MemberLiveStreamSubscriptionID, {
                                success: function (json) {
                                    memberPayment(json);

                                    shell.hideProgressIndicator();
                                },
                                error: function (error) {
                                    console.log(error);

                                    shell.hideProgressIndicator();
                                }
                            });
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            alert(error.responseText);
                        });
                }
            },

            getReceipt = function (data) {
                if (data.PaymentTypeID === 1)
                    window.open('/payment/printpaymentreceiptpdf?paymentid=' + data.PaymentID, '_new');
                else if (data.PaymentTypeID === 2)
                    window.open('/payment/printstripepaymentreceiptpdf?paymentid=' + data.PaymentID, '_new');
            },

            clearObservables = function () {
                memberHeader('');
                member('');
                pictures([]);
                videos([]);
                leagues([]);
                roles([]);
                teamsIFollow([]);
                reports([]);
                reportsByMember([]);
                payments([]);
                vouchers([]);
                memberPayment('');

                $("#adminmember-view .beforeSubViewLoaded").show();
                $("#adminmember-view .afterSubViewLoaded").hide();
            },

            cleanup = function () {
            };            

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,

            navigateToAdminMemberDashboard: navigateToAdminMemberDashboard,             
            navigateToAdminMemberTeamsAndRoles: navigateToAdminMemberTeamsAndRoles,
            navigateToAdminMemberReportedItems: navigateToAdminMemberReportedItems,
            navigateToAdminMemberReportedByMember: navigateToAdminMemberReportedByMember,
            navigateToAdminMemberUploaded: navigateToAdminMemberUploaded,
            navigateToAdminMemberEdit: navigateToAdminMemberEdit, 
            navigateToAdminMemberGuardians: navigateToAdminMemberGuardians,
            navigateToAdminMemberPayments: navigateToAdminMemberPayments,

            navigateToLeagueView: navigateToLeagueView,
            navigateToItem: navigateToItem,
            navigateToPost: navigateToPost,
            onFieldFocus: onFieldFocus,
            onKeyPressAllowNumeric: onKeyPressAllowNumeric,
            onPersonalIdentityNumber: onPersonalIdentityNumber,
            onPersonalIdentityNumberFocusOut: onPersonalIdentityNumberFocusOut,
            onPhoneKeyUp: onPhoneKeyUp,
            onPastePersonalIdentityNumber: onPastePersonalIdentityNumber,
            onPastePhoneNumber: onPastePhoneNumber,            

            showPayment: showPayment,
            showGame: showGame,
            closePayment: closePayment,

            memberHeader: memberHeader,
            member: member,
            memberPayment: memberPayment,
            
            genders: genders,
            years: years,
            countries: countries,
            pictures: pictures,
            payments: payments,
            vouchers: vouchers,
            videos: videos,
            leagues: leagues,
            roles: roles,
            teamsIFollow: teamsIFollow,
            matchingMember: matchingMember,
            filteredReports: filteredReports,
            reportsByMember: reportsByMember,            

            saveMember: saveMember,
            cancelMemberEdit: cancelMemberEdit,
            deleteMember: deleteMember,
            confirmMemberMerge: confirmMemberMerge,
            cancelMemberMerge: cancelMemberMerge,
            createVoucher: createVoucher,
            cancelSubscription: cancelSubscription,
            getReceipt: getReceipt, 

            memberInformationLocked: memberInformationLocked,
            currentPage: currentPage
        };
    });;
define('viewmodels/vm.adminmembers',
    ['jquery', 'config', 'router', 'ko', 'messenger', 'viewmodels/vm.shell', 'datamanager', 'underscore'],
    function ($, config, router, ko, messenger, shell, datamanager, _) {

        var members = ko.observableArray(),
            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();
            },

            cleanup = function () {
            },

            onKeyPress = function (d, e) {
                if (e.which === 13)
                    searchMembers();

                return true;
            },

            copyNumber = function (item) {
                var $temp = $("<input>");
                $("body").append($temp);
                $temp.val(item.MobilePhone).select();
                document.execCommand("copy");
                $temp.remove();
            },

            navigateToMember = function (data) {                
                router.navigateTo(config.hashes.adminmember + '/' + data.MemberID);
            },

            searchMembers = function () {
                var searchText = $('#searchMemberText').val();

                if (searchText.length < 3)
                    return;

                shell.showProgressIndicator(MiscTexts.Searching);

                datamanager.adminSearchMember(searchText)
                    .then(function (json) {
                        shell.hideProgressIndicator();

                        members([]);

                        var underlayingArray = members();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        members.valueHasMutated();
                    })
                    .fail(function (error) {
                        alert(error.responseText);
                    });
            };

        return {
            activate: activate,
            cleanup: cleanup,

            members: members,

            navigateToMember: navigateToMember,

            copyNumber: copyNumber,
            onKeyPress: onKeyPress,
            searchMembers: searchMembers
        };
    });;
define('viewmodels/vm.adminpayouts',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, shell, _) {

        var payments = ko.observableArray(),
            clubPaymentId = 0,
            clubPaymentHeaderId = 0,
            payoutPreview = ko.observable(),
            clubPayout = ko.observable(),
            teamPayout = ko.observable(),
            clubPaymentSummary = ko.observable(),
            selectedDate = ko.observable(),
            leagueOrganizers = ko.observableArray(),

            activate = function (routeData, callback) {
                $('.adminpayouts-subview').hide();
                $('#adminpayouts-start').show();

                datamanager.initAdminPayouts({
                    success: function (model) {
                        payments([]);

                        var underlayingArray = payments();

                        for (var i = 0; i < model.Payments.length; i++) {
                            underlayingArray.push(model.Payments[i]);
                        }

                        payments.valueHasMutated();
                    },
                    error: function (error) {

                    }
                });
            },

            activatesubview = function (routeData, callback) {
                var currentView = routeData.subview;

                $('.adminpayouts-subview').hide();
                $('#adminpayouts-' + currentView).show();

                switch (currentView) {
                    case 'payment':
                        clubPaymentId = routeData.Id;

                        if (leagueOrganizers().length === 0) {
                            datamanager.getLeagueOrganizersForSelectList({
                                success: function (model) {
                                    leagueOrganizers([]);

                                    var underlayingArray = leagueOrganizers();

                                    for (var i = 0; i < model.length; i++) {
                                        underlayingArray.push(model[i]);
                                    }

                                    leagueOrganizers.valueHasMutated();
                                },
                                error: function (response, xhr) {
                                    alert(response);
                                }
                            });
                        }

                        break;
                    case 'paymentteams':
                        clubPaymentHeaderId = routeData.Id;

                        datamanager.getTeamPayoutRows(clubPaymentHeaderId, {
                            success: function (model) {
                                console.log(model);

                                teamPayout(model);
                            },
                            error: function (error) {
                                alert(error);
                            }
                        });

                        break;
                    case 'paymentsummary':
                        clubPaymentId = routeData.Id;


                        datamanager.getClubPaymentSummary(clubPaymentId, {
                            success: function (model) {
                                clubPaymentSummary(model);
                            },
                            error: function (response, xhr) {
                                alert(response);
                            }
                        });


                        break;
                    case 'createpayment':
                        $('#payout-step-4').hide();
                        $('.step-overlay').addClass("item-disabled");
                        $('.step-overlay button').attr("disabled", true);

                        $('#payout-step-1').removeClass("item-completed");
                        $('#payout-step-2').removeClass("item-completed");
                        $('#payout-step-3').removeClass("item-completed");

                        if (payoutPreview() !== undefined && payoutPreview().length !== 0) {
                            console.log(payoutPreview());

                            switch (payoutPreview().ClubPaymentStatusID) {
                                case 1:
                                case 2:
                                    $('#payout-step-1').addClass("item-completed");
                                    $('#payout-step-2 .step-overlay').removeClass("item-disabled");
                                    $('#payout-step-2 .step-overlay button').attr("disabled", false);
                                    break;
                                case 3:
                                    $('#payout-step-1').addClass("item-completed");
                                    $('#payout-step-2').addClass("item-completed");

                                    $('#payout-step-3 .step-overlay').removeClass("item-disabled");
                                    $('#payout-step-3 .step-overlay button').attr("disabled", false);
                                    break;
                                case 4:

                                    break;
                            }
                        } else {
                            $('#payout-step-1 .step-overlay').removeClass("item-disabled");
                            $('#payout-step-1 .step-overlay button').attr("disabled", false);
                        }
                        break;
                }
            },

            navigateToCreatePayment = function () {
                payoutPreview('');

                router.navigateTo(config.hashes.adminpayouts + '/createpayment');
            },

            navigateToStart = function () {
                router.navigateTo(config.hashes.adminpayouts);
            },

            navigateBack = function () {
                router.navigateBack();
            },

            selectLeagueOrganizer = function (data) {
                $('#adminpayouts-view .leagueorganizer-title').text(data.Name);

                datamanager.getClubPayoutRows(clubPaymentId, data.LeagueOrganizerID, {
                    success: function (model) {
                        clubPayout(model);
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            previewPayment = function () {
                if (selectedDate() === undefined) {
                    alert('Inget datum valt');
                    return;
                }

                var dateString = moment(selectedDate()).format('YYYY-MM-DD')

                shell.showProgressIndicator(MiscTexts.GettingData);

                datamanager.getPayoutsPreview(dateString, {
                    success: function (model) {
                        shell.hideProgressIndicator();

                        payoutPreview(model);
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            generatePayouts = function (data, event) {
                shell.showProgressIndicator(MiscTexts.CreatingPayment);

                $(event.target).attr("disabled", true);

                if (selectedDate() === undefined) {
                    alert('Inget datum valt');
                    return;
                }

                var dateString = moment(selectedDate()).format('YYYY-MM-DD')

                datamanager.generatePayoutsData(dateString)
                    .then(function (id) {
                        payoutPreview().ClubPaymentID = id;

                        shell.hideProgressIndicator();

                        $('#payout-step-1').addClass("item-completed");
                        $('#payout-step-1 .step-overlay').addClass("item-disabled");
                        $('#payout-step-2 .step-overlay').removeClass("item-disabled");
                        $('#payout-step-2 .step-overlay button').attr("disabled", false);
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        $(event.target).attr("disabled", false);

                        alert(error);
                    });
            },


            getClubsWithMissingInfo = function (data) {
                var dateString = moment(data.EndDate).format('YYYY-MM-DD');

                window.open('/download/getclubswithmissinginformation?endDate=' + dateString, '_new');

                //var clubIds = [];

                //for (var i = 0; i < data.ClubsMissingInformation.length; i++) {
                //    clubIds.push(data.ClubsMissingInformation[i]);
                //}

                //console.log(clubIds);

                //datamanager.getClubsWithMissingInformation(clubIds)
                //    .then(function (s) {
                //        console.log(s);
                //        //console.log('yes!');
                //    })
                //    .fail(function (error) {
                //        console.log(error);
                //    });
            },

            createPaymentFile = function (data, event) {
                window.open('/download/generatepayoutfile?paymentid=' + payoutPreview().ClubPaymentID, '_new');

                $(event.target).attr("disabled", true);
                $('#payout-step-2').addClass("item-completed");
                $('#payout-step-2 .step-overlay').addClass("item-disabled");

                $('#payout-step-3 .step-overlay').removeClass("item-disabled");
                $('#payout-step-3 .step-overlay button').attr("disabled", false);

                shell.hideProgressIndicator();

                //shell.showProgressIndicator('Skapar fil...');

                //$(event.target).attr("disabled", true);

                //datamanager.generatePayoutFile(payoutPreview().ClubPaymentID, {
                //    success: function (model) {
                //        $('#payout-step-2').addClass("item-completed");
                //        $('#payout-step-2 .step-overlay').addClass("item-disabled");

                //        $('#payout-step-3 .step-overlay').removeClass("item-disabled");
                //        $('#payout-step-3 .step-overlay button').attr("disabled", false);

                //        shell.hideProgressIndicator();
                //    },
                //    error: function (error) {
                //        shell.hideProgressIndicator();

                //        alert(error);
                //    }
                //});                
            },

            sendPaymentSpecifications = function (data, event) {
                shell.showProgressIndicator('Skickar specifikationer...');

                $(event.target).attr("disabled", true);

                datamanager.sendClubPayments(payoutPreview().ClubPaymentID, {
                    success: function (json) {
                        $('#payout-step-3').addClass("item-completed");
                        $('#payout-step-3 .step-overlay').addClass("item-disabled");
                        $('#payout-step-4').show();

                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    }
                });
            },

            editPayment = function (data) {
                datamanager.getPaymentForEditView(data.ClubPaymentID, {
                    success: function (model) {
                        payoutPreview(model);

                        router.navigateTo(config.hashes.adminpayouts + '/createpayment');
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            showPayment = function (data) {
                router.navigateTo(config.hashes.adminpayouts + '/payment/' + data.ClubPaymentID);
            },

            showPaymentSummary = function (data) {
                router.navigateTo(config.hashes.adminpayouts + '/paymentsummary/' + data.ClubPaymentID);
            },

            showClubTeamsPayment = function (data) {
                router.navigateTo(config.hashes.adminpayouts + '/paymentteams/' + data.ClubPaymentHeaderID);
            },


            getPDF = function (data) {
                window.open('/payment/getclubpaymentpdf?id=' + data.ClubPaymentHeaderID, '_new');
            },

            cleanup = function () {
            };

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,

            payoutPreview: payoutPreview,
            clubPayout: clubPayout,
            teamPayout: teamPayout,
            leagueOrganizers: leagueOrganizers,
            payments: payments,
            clubPaymentSummary: clubPaymentSummary,

            navigateToCreatePayment: navigateToCreatePayment,
            navigateToStart: navigateToStart,
            navigateBack: navigateBack,

            selectedDate: selectedDate,

            selectLeagueOrganizer: selectLeagueOrganizer,
            generatePayouts: generatePayouts,            
            getClubsWithMissingInfo: getClubsWithMissingInfo,
            createPaymentFile: createPaymentFile,
            sendPaymentSpecifications: sendPaymentSpecifications,

            getPDF: getPDF,

            previewPayment: previewPayment,
            showPayment: showPayment,
            showPaymentSummary: showPaymentSummary,
            editPayment: editPayment,
            showClubTeamsPayment: showClubTeamsPayment
        };
    });
;
define('viewmodels/vm.adminreporteditems',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, _) {

        var currentViewName = '',
            currentTab = ko.observable(''),
            currentPage = ko.observable(''),
            reports = ko.observableArray(),
            reportsByMember = ko.observableArray(),
            reportsByReportedMember = ko.observableArray(),
            reportsByGame = ko.observableArray(),
            reportsForGame = ko.observableArray(),
            reportItemStatus = ko.observable(0),
            reportItemType = ko.observable(0),
            currentFilterDate = ko.observable(),
            reportedContentSummary = ko.observable(),
            viewInitialized = false,
            startDate,

            activate = function (routeData, callback) {
                routeData.subview = 'start';
                messenger.publish.viewModelActivated();

                activatesubview(routeData);
            },

            activatesubview = function (routeData, callback) {
                var currentView = routeData.subview;
                currentViewName = 'adminreporteditems-' + currentView;
                currentTab(routeData.subview);
                currentPage(currentView);

                $('.adminreporteditems-subview').hide();
                $('#adminreporteditems-' + currentView).show();

                hidePreloader();

                if (viewInitialized === false) {
                    startDate = new Date();
                    startDate.setDate(startDate.getDate() - 30);

                    currentFilterDate(startDate);

                    $('#filterDate').datepicker({
                        autoClose: true,
                        startDate: startDate,
                        onSelect: function (fd, d, picker) {
                            currentFilterDate(d);

                            $('#filterDate').val(adminTexts.From + ' ' + moment(d).format("YYYY-MM-DD"));

                            initReports();
                        }
                    });

                    $('#filterDate').val(adminTexts.From + ' ' + moment(startDate).format("YYYY-MM-DD"));

                    datamanager.getReportsForAdminSummary(moment(currentFilterDate()).format("YYYY-MM-DD"), {
                        success: function (json) {
                            reportedContentSummary(json);
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });

                    viewInitialized = true;
                }

                switch (currentTab()) {
                    case 'start': {
                        if (reports().length === 0) {
                            datamanager.getReportsForAdmin(moment(currentFilterDate()).format("YYYY-MM-DD"), {
                                success: function (json) {
                                    var underlayingArray = reports();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    reports.valueHasMutated();

                                    subViewLoaded();
                                },
                                error: function () {
                                    subViewLoaded();
                                }
                            });
                        } else {
                            subViewLoaded();
                        }

                        break;
                    }
                    case 'games': {
                        if (reportsByGame().length === 0) {
                            datamanager.getReportsForAdminByGame(moment(currentFilterDate()).format("YYYY-MM-DD"), {
                                success: function (json) {
                                    reportsByGame([]);

                                    var underlayingArray = reportsByGame();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    reportsByGame.valueHasMutated();

                                    subViewLoaded();
                                },
                                error: function () {
                                    subViewLoaded();
                                }
                            });
                        } else {
                            subViewLoaded();
                        }

                        break;
                    }
                    case 'members': {
                        if (reportsByMember().length === 0) {
                            datamanager.getReportsForAdminByMember(moment(currentFilterDate()).format("YYYY-MM-DD"), {
                                success: function (json) {
                                    reportsByMember([]);

                                    var underlayingArray = reportsByMember();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    reportsByMember.valueHasMutated();

                                    subViewLoaded();
                                },
                                error: function () {
                                    subViewLoaded();
                                }
                            });
                        } else {
                            subViewLoaded();
                        }

                        break;
                    }
                    case 'reportedby': {
                        if (reportsByReportedMember().length === 0) {
                            datamanager.getReportsForAdminByReportedMember(moment(currentFilterDate()).format("YYYY-MM-DD"), {
                                success: function (json) {
                                    reportsByReportedMember([]);

                                    var underlayingArray = reportsByReportedMember();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    reportsByReportedMember.valueHasMutated();

                                    subViewLoaded();
                                },
                                error: function () {
                                    subViewLoaded();
                                }
                            });
                        } else {
                            subViewLoaded();
                        }

                        break;
                    }
                    case 'game':
                        datamanager.getReportedItemsForGame(routeData.subId, {
                            success: function (json) {
                                reportsForGame([]);

                                var underlayingArray = reportsForGame();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                reportsForGame.valueHasMutated();

                                subViewLoaded();
                            },
                            error: function (error) {
                                alert(error);

                                subViewLoaded();
                            }
                        });
                        break;
                }
            },

            initReports = function () {
                $("#adminreporteditems-view .beforeSubViewLoaded").show();
                $("#adminreporteditems-view .afterSubViewLoaded").hide();

                reportsByMember([]);
                reports([]);
                reportsByReportedMember([]);
                reportsByGame([]);

                datamanager.getReportsForAdminSummary(moment(currentFilterDate()).format("YYYY-MM-DD"), {
                    success: function (json) {
                        reportedContentSummary(json);
                    },
                    error: function (error) {
                        alert(error);
                    }
                });

                switch (currentTab()) {
                    case 'start':
                        datamanager.getReportsForAdmin(moment(currentFilterDate()).format("YYYY-MM-DD"), {
                            success: function (json) {
                                var underlayingArray = reports();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                reports.valueHasMutated();

                                subViewLoaded();
                            },
                            error: function () {
                                subViewLoaded();
                            }
                        });
                        break;
                    case 'members':
                        datamanager.getReportsForAdminByMember(moment(currentFilterDate()).format("YYYY-MM-DD"), {
                            success: function (json) {


                                var underlayingArray = reportsByMember();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                reportsByMember.valueHasMutated();

                                subViewLoaded();
                            },
                            error: function () {
                                subViewLoaded();
                            }
                        });
                        break;
                    case 'reportedby':
                        datamanager.getReportsForAdminByReportedMember(moment(currentFilterDate()).format("YYYY-MM-DD"), {
                            success: function (json) {
                                reportsByReportedMember([]);

                                var underlayingArray = reportsByReportedMember();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                reportsByReportedMember.valueHasMutated();

                                subViewLoaded();
                            },
                            error: function () {
                                subViewLoaded();
                            }
                        });
                        break;
                    case 'games':
                        datamanager.getReportsForAdminByGame(moment(currentFilterDate()).format("YYYY-MM-DD"), {
                            success: function (json) {
                                reportsByGame([]);

                                var underlayingArray = reportsByGame();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                reportsByGame.valueHasMutated();

                                subViewLoaded();
                            },
                            error: function () {
                                subViewLoaded();
                            }
                        });
                        break;
                }
            },

            hidePreloader = function () {
                $('#adminreporteditems-view-preloader').hide();
                $('#adminreporteditems-view-afterloaded').show();
            },

            subViewLoaded = function () {
                $("#" + currentViewName + " .beforeSubViewLoaded").hide();
                $("#" + currentViewName + " .afterSubViewLoaded").show();
            },

            navigateToMember = function () {

            },

            navigateToGame = function (data) {
                window.open('/' + config.hashes.magazinegameview + '/' + data.GameID, '_blank');
            },

            navigateToMemberReports = function (data) {
                router.navigateTo(config.hashes.adminmember + '/' + data.MemberID + '/reporteditems');
            },

            navigateToReportsByMember = function (data) {
                router.navigateTo(config.hashes.adminmember + '/' + data.MemberID + '/reportedbymember');
            },

            navigateToReportsForGame = function (data) {
                router.navigateTo(config.hashes.adminreporteditems + '/game/' + data.GameID);
            },

            navigateToItem = function (data) {
                if (data.GameID) {
                    //router.navigateTo(config.hashes.livedetails + '/' + data.GameID + '/' + data.LiveTimeItemID + '/' + data.ItemType);
                    window.open('/' + config.hashes.livedetails + '/' + data.GameID + '/' + data.LiveTimeItemID + '/' + data.ItemType, '_blank');
                }
                else
                    console.log(data);
            },

            navigateToAdminReportedItemsStart = function () {
                return createAdminReportedNavigationItem('start');
            },

            navigateToAdminReportedItemsGames = function () {
                return createAdminReportedNavigationItem('games');
            },

            navigateToAdminReportedItemsMembers = function () {
                return createAdminReportedNavigationItem('members');
            },

            navigateToAdminReportedItemsReportedBy = function () {
                return createAdminReportedNavigationItem('reportedby');
            },

            createAdminReportedNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.adminreporteditems + '/' + endPath;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.adminreporteditems + '/' + endPath);
                    }
                };
            },

            changeStatusFilter = function (type) {
                reportItemStatus(type);
            },

            changeTypeFilter = function (type) {
                reportItemType(type);
            },

            filteredReports = ko.computed(function () {
                return ko.utils.arrayFilter(reports(), function (item) {
                    var match = true;

                    if (reportItemStatus() === 1 && item.Deleted === false)
                        match = false;
                    else if (reportItemStatus() === 2 && item.Deleted)
                        match = false;

                    if (reportItemType() > 0 && reportItemType() !== item.ItemType)
                        match = false;

                    return match;
                });
            }),

            cleanup = function () {
            };

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,

            navigateToItem: navigateToItem,
            navigateToMember: navigateToMember,
            navigateToGame: navigateToGame,
            navigateToMemberReports: navigateToMemberReports,
            navigateToReportsByMember: navigateToReportsByMember,
            navigateToReportsForGame: navigateToReportsForGame,
            navigateToAdminReportedItemsStart: navigateToAdminReportedItemsStart,
            navigateToAdminReportedItemsGames: navigateToAdminReportedItemsGames,
            navigateToAdminReportedItemsMembers: navigateToAdminReportedItemsMembers,
            navigateToAdminReportedItemsReportedBy: navigateToAdminReportedItemsReportedBy,

            changeStatusFilter: changeStatusFilter,
            changeTypeFilter: changeTypeFilter,

            reportsByMember: reportsByMember,
            reportsByReportedMember: reportsByReportedMember,
            reportsForGame: reportsForGame,
            reportsByGame: reportsByGame,

            reportedContentSummary: reportedContentSummary,

            currentPage: currentPage,
            filteredReports: filteredReports
        };
    });
;
define('viewmodels/vm.appconfig',
    ['underscore'],
    function (_) {
        var
            defaultCountryCodeId = function () {
                if (Number(applicationID) === 4 || Number(applicationID) === 5)
                    return 45; // Schweiz?

                return 1; // Sweden
            },

            canCreateTeamStaff = function () {
                if (Number(applicationID) === 3)
                    return false;

                //if (Number(applicationID) === 4)
                //    return false;

                return true;
            },

            canCreatePlayer = function () {
                if (Number(applicationID) === 3)
                    return false;

                return true;
            },

            requirePersonalIdentityNumber = function () {
                if (Number(applicationID) === 4 || Number(applicationID) === 5)
                    return false;

                return true;
            },

            canDeleteTeamStaff = function () {
                if (Number(applicationID) === 3)
                    return false;

                //if (Number(applicationID) === 4)
                //    return false;

                return true;
            },

            canDeletePlayer = function () {
                if (Number(applicationID) === 3)
                    return false;

                //if (Number(applicationID) === 4)
                //    return false;

                return true;
            };

        return {    
            defaultCountryCodeId: defaultCountryCodeId,

            canCreateTeamStaff: canCreateTeamStaff,
            canCreatePlayer: canCreatePlayer,

            requirePersonalIdentityNumber: requirePersonalIdentityNumber,

            canDeleteTeamStaff: canDeleteTeamStaff,
            canDeletePlayer: canDeletePlayer
        };
    });;
define('viewmodels/vm.arena',
    ['jquery', 'ko', 'messenger', 'datamanager', 'googlemaps!', 'underscore'],
    function ($, ko, messenger, datamanager, gmap, _) {

        var arena = ko.observable(),
            arenaId = 0,
            map,
            markers = [],
            arenaHasMap = ko.observable(false),            

        activate = function (routeData, callback) {

            messenger.publish.viewModelActivated();

            $('#arena-view .preloader').show();
            $('#arena-view .afterloaded').hide();

            arenaId = routeData.arenaId;

            initArenaVC();

            if (_.isFunction(callback)) {
                callback();
            }
        },

        initArenaVC = function () {
            datamanager.getArenaForSelectList(arenaId, {
                success: function (model) {

                    arena(model);

                    initMap();

                    $('#arena-view .preloader').hide();
                    $('#arena-view .afterloaded').show();
                },
                error: function (response) {
                    $('#arena-view .preloader').hide();
                    $('#arena-view .afterloaded').show();
                }
            });
        },

        

        initMap = function() {
            if (arena().Latitude !== 0 && arena().Longitude !== 0) {
                arenaHasMap(true);
                $('#map-wrapper').show();

                console.log(map);

                if (map) {
                    for (var i = 0; i < markers.length; i++) {
                        markers[i].setMap(null);
                    }
                    markers = [];

                    var marker2 = new gmap.Marker({
                        position: { lat: arena().Latitude, lng: arena().Longitude },
                        map: map
                    });
                    map.setCenter(new gmap.LatLng(arena().Latitude, arena().Longitude), 15);
                    map.setZoom(15);
                    markers.push(marker2);                    
                }
                else
                {
                    var mapOptions = {
                        center: new gmap.LatLng(arena().Latitude, arena().Longitude),
                        zoom: 15,
                        mapTypeId: gmap.MapTypeId.ROADMAP
                    };

                    map = new gmap.Map(document.getElementById("arenaViewMap"), mapOptions);

                    //Create the marker.
                    var marker = new gmap.Marker({
                        position: { lat: arena().Latitude, lng: arena().Longitude },
                        map: map
                    });

                    markers.push(marker);
                }
            }
            else
            {
                arenaHasMap(false);
                $('#map-wrapper').hide();
            }
        },

        cleanup = function () {
        },

        navigateToEditArena = function () {
            window.location.href = '/arena/addedit/' + arena().ArenaID;
        };

        return {
            activate: activate,
            cleanup: cleanup,
            arena: arena,

            arenaHasMap: arenaHasMap,

            navigateToEditArena: navigateToEditArena
        };
    });
;
define('viewmodels/vm.assetinfo',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'helpers/sw.assetuploadmanager', 'toastr', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, shell, assetuploadmanager, toastr, _) {
        var selectedGame = ko.observable(),            
            liveTimeItemID = ko.observable(),
            liveTimelineItemTypeID = ko.observable(),
            livedetail = ko.observable(),
            assettext = ko.observable(''),
            assettype = ko.observable(''),

            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();

                // get type (game,team,..)
                assettype(routeData.type);
                    
                switch (assettype()) {
                    case 'game':
                        if (typeof routeData.gameId !== "undefined") {
                            // new picture or video from game
                            selectedGame(routeData.gameId);
                        } else {
                            // edit picture or video from game
                            selectedGame(routeData.typeId);
                            liveTimeItemID(routeData.itemTypeId);
                            liveTimelineItemTypeID(routeData.itemId);
                        }

                        if (typeof routeData.itemTypeId !== "undefined" && typeof routeData.typeId !== "undefined") {
                            if (!livedetail() || (routeData.itemId !== livedetail().LiveTimeItemID || routeData.itemTypeId !== livedetail().LiveTimelineItemTypeID)) {
                                datamanager.getTimelineBlurb(routeData.typeId, routeData.itemId, routeData.itemTypeId, {
                                    success: function (json) {
                                        if (json.PictureInfo) {
                                            if (json.PictureInfo.Description) {
                                                assettext(json.PictureInfo.Description);
                                            } else {
                                                assettext('');
                                            }
                                        } else if (json.VideoInfo) {
                                            if (json.VideoInfo.Description) {
                                                assettext(json.VideoInfo.Description);
                                            } else {
                                                assettext('');
                                            }
                                        }

                                        livedetail(json);
                                    },
                                    error: function (response) {
                                        toastr.error('Error when getting picture');
                                    }
                                });
                            }
                        }
                        break;
                    case 'gamevideo':
                        if (typeof routeData.gameId !== "undefined") {
                            // new picture or video from game
                            selectedGame(routeData.gameId);                            

                            if (livedetail() === undefined) {
                                router.navigateBack();
                                return;
                            }
                                
                            if (livedetail().File.size > 400 * 1000 * 1024) {
                                alert('Filen du har valt är för stor, den får maximalt vara 400MB');

                                router.navigateBack();
                            }
                            else {
                                /*shell.showProgressIndicator('Laddar fil...');*/

                                var fileReader = new FileReader();

                                fileReader.onloadend = function (event) {
                                    var blob = new Blob([event.target.result], { type: livedetail().File.type });

                                    createThumbnail(blob);

                                    /*shell.hideProgressIndicator();*/
                                };

                                fileReader.readAsArrayBuffer(livedetail().File);
                            }
                            
                        } else {
                            // edit picture or video from game
                            selectedGame(routeData.typeId);
                            liveTimeItemID(routeData.itemTypeId);
                            liveTimelineItemTypeID(routeData.itemId);
                        }

                        break;
                }

                if (_.isFunction(callback)) {
                    callback();
                }
            },

            createThumbnail = function (blob) {
                var url = URL.createObjectURL(blob);
                var video = document.createElement('video');

                var timeupdate = function () {
                    if (snapImage()) {
                        video.removeEventListener('timeupdate', timeupdate);
                        video.pause();
                    }
                };
                video.addEventListener('loadeddata', function () {
                    if (snapImage()) {
                        video.removeEventListener('timeupdate', timeupdate);
                    }
                });

                var snapImage = function () {
                    var canvas = document.createElement('canvas');

                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);

                    var image = canvas.toDataURL();
                    var success = image.length > 100000;

                    if (success) {
                        $('#assetThumbnail').attr("src", image);

                        var base64result = image.substr(image.indexOf(',') + 1);

                        livedetail().ThumbnailData = base64result;

                        URL.revokeObjectURL(url);
                    }
                    return success;
                };

                video.addEventListener('timeupdate', timeupdate);
                video.preload = 'metadata';
                video.src = url;

                video.muted = true;
                video.playsInline = true;
                video.play();
            },

            initialize = function (type, item, callback) {
                assettext('');

                switch (type) {
                    case 'game':
                        assettype('game');

                        livedetail(item);

                        console.log(item);

                        if (livedetail().PictureInfo) {
                            if (livedetail().PictureInfo.Description)
                                assettext(livedetail().PictureInfo.Description);
                        }
                        else {
                            if (livedetail().VideoInfo.Description)
                                assettext(livedetail().VideoInfo.Description);
                        }

                        break;
                    case 'gamevideo':
                        assettype('gamevideo');

                        livedetail(item);                
                        break;
                }

                //Call callback if there is one
                if (_.isFunction(callback)) {
                    callback();
                }

            },

            cancelAssetInfo = function () {
                goBackCmd();
            },

            updateAssetInfo = function () {
                switch (assettype()) {
                    case 'game':
                        if ($('#assetDescription').val()) {
                            livedetail().Description = $('#assetDescription').val();
                        }
                        assetuploadmanager.updateItemInfo(livedetail(), function (data) {
                            $('#timeline-afterloaded').show();
                            $('#timeline-preloader').hide();
                            router.navigateTo(config.hashes.magazinegameview + '/' + selectedGame());
                        });

                        break;
                    case 'gamevideo':
                        {
                            shell.showPartialProgressIndicator(MiscTexts.Uploading);

                            var description = $('#assetDescription').val();

                            console.log(description);

                            datamanager.postAzureVideo(livedetail().UploadAssetId, livedetail().GameId, 1, description, livedetail().ThumbnailData)
                                .then(function (data) {
                                    console.log(data);

                                    const containerURL = new azblob.ContainerURL(data.SasToken, azblob.StorageURL.newPipeline(new azblob.AnonymousCredential));

                                    (async () => await uploadFile(containerURL, data.FileName, data.VideoID))();
                                })
                                .fail(function (error) {
                                    console.log(error);
                                });
                        }
                        
                        break;
                }

            },

            uploadFile = async function (containerURL, fileName, VideoID) {
                try {
                    const promises = [];

                    const blockBlobURL = azblob.BlockBlobURL.fromContainerURL(containerURL, fileName);

                    var blockSize = livedetail().File.size > 1024 * 1024 * 32 ? 1024 * 1024 * 4 : 1024 * 512;
                    var options = {
                        storeBlobContentMD5: false,
                        blockSize: blockSize,
                        progress: ev => shell.updateProgress(Math.round((ev.loadedBytes / livedetail().File.size) * 100))
                    };

                    promises.push(azblob.uploadBrowserDataToBlockBlob(
                        azblob.Aborter.none, livedetail().File, blockBlobURL, options));
                    await Promise.all(promises);

                    datamanager.updateAzureMedia(VideoID, 1, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            goBackCmd();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });

                } catch (error) {
                    console.log(error.body.message);
                }
            },

            cleanup = function () {
                livedetail('');
                assettext('');
            },

            goBackCmd = function () {
                router.navigateBack();
            },

            init = function () { };

        init();

        return {
            activate: activate,
            cleanup: cleanup,
            initialize: initialize,
            cancelAssetInfo: cancelAssetInfo,
            updateAssetInfo: updateAssetInfo,
            livedetail: livedetail,
            assettext: assettext
        };
    });
;
define('viewmodels/vm.audience',
    ['ko', 'router', 'presenter', 'messenger', 'datamanager', 'models/viewmodel', 'viewmodels/vm.shell', 'underscore'],
    function (ko, router, presenter, messenger, datamanager, viewmodel, shell, _) {
        var previousTab = 'start',

            audienceString = ko.observable(InfoItemTexts.FilterAll),

            currentClubId = 0,
            audienceId = 0,

            sliderFromValue = ko.observable(1900),
            sliderToValue = ko.observable(new Date().getFullYear()),

            audienceLoaded = false,
            audienceFilterData = null,

            audiencePersonFilterTypes = ko.observableArray(),
            audienceTeamFilterTypes = ko.observableArray(),

            audienceClubs = ko.observableArray(),
            audienceTeams = ko.observableArray(),

            audienceTeamSportCategories = ko.observableArray(),
            audienceTeamGenderCategories = ko.observableArray(),
            audienceTeamAgeCategories = ko.observableArray(),
            audienceLeagueOrganizerCategories = ko.observableArray(),

            audiencePersonGenderCategories = ko.observableArray(),
            audiencePersonTeamRoleCategories = ko.observableArray(),
            audiencePersonCountryCategories = ko.observableArray(),

            clubTeamWarningShown = false,

            selectedTeams = [],
            previouslySelectedItems = [],

            clubsSearchString = ko.observable(''),
            teamsSearchString = ko.observable(''),

            callbackMethod,

            activate = function (id, audienceTypeId, callback) {
                cleanUpView();

                audienceId = id;

                callbackMethod = callback;

                $('#audience-view').show();
                $('#audience-view .fade-overlay').addClass('active');

                datamanager.initAudienceForPartnerEditView(audienceId, audienceTypeId, {
                    success: function (json) {
                        audiencePersonFilterTypes([]);
                        audienceTeamFilterTypes([]);

                        var underlayingArray = audiencePersonFilterTypes();

                        for (var i = 0; i < json.AudiencePersonFilterTypes.length; i++) {
                            underlayingArray.push(json.AudiencePersonFilterTypes[i]);
                        }

                        audiencePersonFilterTypes.valueHasMutated();

                        underlayingArray = audienceTeamFilterTypes();

                        for (var j = 0; j < json.AudienceTeamFilterTypes.length; j++) {
                            underlayingArray.push(json.AudienceTeamFilterTypes[j]);
                        }

                        audienceTeamFilterTypes.valueHasMutated();

                        if (json.AudienceFilterData) {
                            audienceFilterData = json.AudienceFilterData;

                            parseAudienceFilterData(json.AudienceFilterData);
                        }
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });

                showTabHelper('start');
            },

            cleanUpView = function () {
                audienceId = 0;
                audienceLoaded = false;
                clubTeamWarningShown = false;

                audiencePersonFilterTypes([]);
                audienceTeamFilterTypes([]);

                $("input[name=audienceAgeRB][value='0']").prop("checked", true);

                resetAudienceFilters();
            },

            resetAudienceFilters = function () {
                audienceString(InfoItemTexts.FilterAll);

                selectedTeams = [];

                audienceClubs([]);
                audienceTeams([]);

                audienceTeamSportCategories([]);
                audienceTeamGenderCategories([]);
                audienceTeamAgeCategories([]);
                audienceLeagueOrganizerCategories([]);

                audiencePersonGenderCategories([]);
                audiencePersonTeamRoleCategories([]);
                audiencePersonCountryCategories([]);

                $('#audience-view .listSelector li').removeClass('checked');
                $('#audience-view .listSelector li.selectAll').addClass('checked');
                $('#audience-view .audienceFilter .filterText').text(InfoItemTexts.FilterAll);

                sliderFromValue(1900);
                sliderToValue(new Date().getFullYear());

                audienceFilterData = null;
            },

            showAudienceFilter = function () {
                if (!audienceLoaded) {
                    audienceLoaded = true;

                    datamanager.initAudienceForEditView(infoItemType, infoItem().AudienceID, {
                        success: function (json) {
                            audiencePersonFilterTypes([]);
                            audienceTeamFilterTypes([]);

                            var underlayingArray = audiencePersonFilterTypes();

                            for (var i = 0; i < json.AudiencePersonFilterTypes.length; i++) {
                                underlayingArray.push(json.AudiencePersonFilterTypes[i]);
                            }

                            audiencePersonFilterTypes.valueHasMutated();

                            underlayingArray = audienceTeamFilterTypes();

                            for (var j = 0; j < json.AudienceTeamFilterTypes.length; j++) {
                                underlayingArray.push(json.AudienceTeamFilterTypes[j]);
                            }

                            audienceTeamFilterTypes.valueHasMutated();

                            if (json.AudienceFilterData) {
                                audienceFilterData = json.AudienceFilterData;

                                parseAudienceFilterData(json.AudienceFilterData);
                            }
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }

                showTabHelper('start');
            },

            parseAudienceFilterData = function (data) {
                if (data.AudienceFilterTypeClubData.length > 0) {
                    // 3 is club/team
                    var clubHtmlSpan = $('#audience-type-3 .filterText');

                    clubHtmlSpan.text(data.AudienceFilterTypeClubData.length);

                    data.AudienceFilterTypeClubData.forEach(function (item) {
                        if (item.SelectedTeams.length > 0) {
                            item.SelectedTeams.forEach(function (team) {
                                var clubteam = {
                                    ClubID: item.ClubID,
                                    TeamID: team
                                };

                                selectedTeams.push(clubteam);

                            });
                        }
                    });

                    if (selectedTeams.length === 0)
                        $('#audience-type-4 .filterText').text(InfoItemTexts.FilterAll);
                    else
                        $('#audience-type-4 .filterText').text(selectedTeams.length);
                }

                for (var i = 0; i < data.AudienceFilterTypeData.length; i++) {
                    // Special case for age
                    if (data.AudienceFilterTypeData[i].AudienceFilterTypeID === 7) {
                        if (data.AudienceFilterTypeData[i].AudienceFilterTypeValues.length === 2) {
                            sliderFromValue(data.AudienceFilterTypeData[i].AudienceFilterTypeValues[0]);
                            sliderToValue(data.AudienceFilterTypeData[i].AudienceFilterTypeValues[1]);

                            toggleShowAudienceAge(1);

                            $('#audience-type-7 .filterText').text(sliderFromValue() + ' - ' + sliderToValue());
                            $("input[name=audienceAgeRB][value='1']").prop("checked", true);
                        }
                    }
                    else {
                        if (data.AudienceFilterTypeData[i].AudienceFilterTypeValues.length > 0) {
                            // Find the correct span-tag based on the ID
                            var item = $('#audience-type-' + data.AudienceFilterTypeData[i].AudienceFilterTypeID + ' .filterText');

                            // Set the text to the amount of selected items
                            item.text(data.AudienceFilterTypeData[i].AudienceFilterTypeValues.length);
                        }
                    }

                }
            },

            saveAudience = function () {
                var audienceDataString = ko.toJS(generateAudienceFilter());

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.insertAudienceForPartner(audienceDataString)
                    .then(function (json) {
                        audienceId = Number(json.AudienceID);

                        shell.hideProgressIndicator();

                        previousTab = 'start';
                        showTabHelper(previousTab);

                        closeDialog();
                    })
                    .fail(function (error) {
                        console.log(error);

                        shell.hideProgressIndicator();

                        alert('Error');
                    });
            },

            showTeamsTab = function (data) {
                var filterData = new viewmodel.InitAudienceForFilterTypeParameters()
                    .AudienceFilterTypeID(0)
                    .AudienceFilterItemID(data.AudienceFilterTypeValueID)
                    .AudienceFilterData(generateAudienceFilter());

                shell.showProgressIndicator(MiscTexts.GettingTeams);

                datamanager.initAudienceForFilterTypeTeam(ko.toJS(filterData), {
                    success: function (json) {
                        currentClubId = data.AudienceFilterTypeValueID;

                        audienceTeams([]);

                        var underlayingArray = audienceTeams();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        audienceTeams.valueHasMutated();

                        if (selectedTeams.length > 0) {
                            const items = selectedTeams.filter(w => w.ClubID === data.AudienceFilterTypeValueID);

                            if (items.length > 0) {
                                $("#audience-view .audienceTeamsList li.selectAll").removeClass('checked');

                                items.forEach(function (item) {
                                    $("#audience-view .audienceTeamsList li.teamListContainer").not('.selectAll').each(function (key, value) {
                                        var data = ko.contextFor(value).$data;

                                        if (Number(data.TeamID) === Number(item.TeamID)) {
                                            $(this).addClass('checked');
                                            return false;
                                        }
                                    });
                                });
                            } else {
                                $("#audience-view .audienceTeamsList li.selectAll").addClass('checked');
                            }
                        } else {
                            $("#audience-view .audienceTeamsList li.selectAll").addClass('checked');
                        }

                        previousTab = 'clubfilter';
                        showTabHelper('teamfilter');

                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        console.log(error);
                        shell.hideProgressIndicator();
                    }
                });
            },

            backToHome = function () {
                showTabHelper('start');
            },

            selectAll = function (listClass, id, data, event) {
                $("#audience-view " + listClass + " li").removeClass('checked');
                $(event.target).closest('li').addClass('checked');

                $('#audience-type-' + id + ' .filterText').text(InfoItemTexts.FilterAll);

                if (listClass === '.audienceTeamsList') {
                    // Remove all teams with the current club
                    selectedTeams = selectedTeams.reduce((p, c) => (c.ClubID !== currentClubId && p.push(c), p), []);
                } else if (listClass === '.audienceClubList') {
                    selectedTeams = [];

                    // Loop every row and change the text
                    $("#audience-view .audienceClubList li .teamsButton").each(function (key, value) {
                        $(this).text(InfoItemTexts.AllTeams);
                    });
                }
            },

            selectItem = function (listClass, id, data, event) {
                $("#audience-view " + listClass + " li.selectAll").removeClass('checked');
                $(event.target).closest('li').toggleClass('checked');

                if (!$("#audience-view " + listClass + " li.checked").length) {
                    $("#audience-view " + listClass + " li.selectAll").addClass('checked');

                    $('#audience-type-' + id + ' .filterText').text(InfoItemTexts.FilterAll);
                }
                else {
                    $('#audience-type-' + id + ' .filterText').text($('#audience-view ' + listClass + " li.checked").size());
                }

                // Special case for clubs                
                if (listClass === '.audienceClubList') {
                    // Special case for clubs
                    if ($(event.target).closest('li').hasClass('checked') === false) {
                        // Remove all teams in that club
                        selectedTeams = selectedTeams.reduce((p, c) => (c.ClubID !== data.AudienceFilterTypeValueID && p.push(c), p), []);

                        // Set the text to 'All                        
                        $(event.target).closest('li').find('.teamsButton').first().text(InfoItemTexts.AllTeams)
                    }
                }
            },

            selectTeam = function (listClass, id, data, event) {
                $("#audience-view " + listClass + " li.selectAll").removeClass('checked');
                $(event.target).closest('li.teamListContainer').toggleClass('checked');

                if (!$("#audience-view " + listClass + " li.checked").length) {
                    $("#audience-view " + listClass + " li.selectAll").addClass('checked');

                    $('#audience-type-' + id + ' .filterText').text(InfoItemTexts.FilterAll);
                }
                else {
                    $('#audience-type-' + id + ' .filterText').text($('#audience-view ' + listClass + " li.checked").size());
                }

                if ($(event.target).closest('li.teamListContainer').hasClass('checked')) {
                    if (selectedTeams.filter(w => w.ClubID === currentClubId && w.TeamID === data.TeamID).length === 0) {
                        var clubteam = {
                            ClubID: currentClubId,
                            TeamID: data.TeamID
                        };

                        selectedTeams.push(clubteam);
                    }
                } else {
                    var deleteIndex = -1;

                    for (let i = 0; i < selectedTeams.length; i++) {
                        if (selectedTeams[i].ClubID === currentClubId && selectedTeams[i].TeamID === data.TeamID) {
                            deleteIndex = i;
                            break;
                        }
                    }

                    if (deleteIndex > -1)
                        selectedTeams.splice(deleteIndex, 1);
                }

            },

            checkClubTeamsFilter = function (listname) {
                // Check previously checked items
                var currentValues = getCurrentCheckedValues(listname);

                if (currentValues.length === 0 && previouslySelectedItems.length > 0) {
                    // Something was selected, but now it's 'All'
                    clearClubsAndTeams()
                } else if (previouslySelectedItems.length === 0 && currentValues.length > 0) {
                    // We previously had nothing selected and now we have selected some filter
                    // Clear the clubs/teams
                    clearClubsAndTeams();
                } else {
                    var itemIsMissing = false;
                    // Loop the previously selected items
                    previouslySelectedItems.forEach(function (item) {
                        if (currentValues.filter(p => p === item).length === 0) {
                            itemIsMissing = true;
                        }
                    });

                    if (itemIsMissing) {
                        // Clear clubs and teams
                        clearClubsAndTeams();
                    }
                }
            },

            clearClubsAndTeams = function () {
                selectedTeams = [];
                audienceTeams([]);
                audienceClubs([]);

                if (audienceFilterData) {
                    audienceFilterData.AudienceFilterTypeClubData = [];
                }

                $('#audience-type-3 .filterText').text(InfoItemTexts.FilterAll);
                $('#audience-type-4 .filterText').text(InfoItemTexts.FilterAll);
            },

            navigateBackFromAudience = function (type) {
                switch (type) {
                    case 2:
                        checkClubTeamsFilter('audienceLeagueOrganizerList');
                        break;
                    case 5:
                        checkClubTeamsFilter('audienceSportList');
                        break;
                    case 8:
                        checkClubTeamsFilter('audienceGenderList');
                        break;
                    case 10:
                        checkClubTeamsFilter('audienceTeamAgeCategoryList');
                        break;
                    case 7:
                        if (Number($('input[name=audienceAgeRB]:checked').val()) === 1) {
                            if (sliderFromValue() > sliderToValue()) {
                                alert('Från och med kan inte vara lägre än till och med');
                                return;
                            }

                            $('#audience-type-7 .filterText').text(sliderFromValue() + ' - ' + sliderToValue());
                        } else {
                            $('#audience-type-7 .filterText').text(InfoItemTexts.FilterAll);
                        }
                        break;

                }

                showTabHelper(previousTab);
            },

            navigateBack = function () {
                showTabHelper(previousTab);
            },

            showTabHelper = function (currentView) {
                if (currentView === 'start')
                    previousTab = 'start';
                else if (currentView === 'clubfilter') {
                    // When we show the clubfilter tab we need to calculate the correct teams on every selected club
                    previousTab = 'start';
                    setSavedTeamAudienceValues();
                }

                $('.audience-subview').hide();
                $('#audience-' + currentView).show();
            },

            checkIfWarningShouldBeShown = function () {
                if (!clubTeamWarningShown) {

                    // Check if any clubs/teams are selected
                    var clubsSelected = false;
                    $('#audience-view .audienceClubList' + " li.checked").not('.selectAll').each(function (key, value) {
                        clubsSelected = true;
                    });

                    if (clubsSelected === false && audienceFilterData !== null) {
                        const items = audienceFilterData.AudienceFilterTypeClubData;

                        clubsSelected = (items.length > 0);
                    }

                    if (clubsSelected) {
                        var r = confirm('Om du lägger till ett filter på sport, kön eller ålderskategori så kommer ditt urval av föreningar och lag att återställas.');

                        clubTeamWarningShown = true;

                        // If the user answers ok, just carry on as normal
                        if (r === false)
                            return true;
                    }
                    else if (selectedTeams.length > 0) {
                        var r1 = confirm('Om du lägger till ett filter på sport, kön eller ålderskategori så kommer ditt urval av föreningar och lag att återställas.');

                        clubTeamWarningShown = true;

                        // If the user answers ok, just carry on as normal
                        if (r1 === false)
                            return true;
                    }
                }

                return false;
            },

            showFilterType = function (data) {
                previousTab = 'start';

                switch (data.AudienceFilterTypeID) {
                    case 1: // Federation
                        break;
                    case 2: // LeagueOrganizer
                        if (checkIfWarningShouldBeShown())
                            return false;

                        if (audienceLeagueOrganizerCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audienceLeagueOrganizerCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audienceLeagueOrganizerCategories.valueHasMutated();

                                    setSavedAudienceValues("audienceLeagueOrganizerList", data.AudienceFilterTypeID);
                                    setPreviouslyCheckedValues("audienceLeagueOrganizerList");
                                    showTabHelper('leagueorganizerfilter');
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        } else {
                            setPreviouslyCheckedValues("audienceLeagueOrganizerList");
                            showTabHelper('leagueorganizerfilter');
                        }

                        break;
                    case 3: // Club
                        if (audienceClubs().length === 0) {
                            var filterData = new viewmodel.InitAudienceForFilterTypeParameters()
                                .AudienceFilterTypeID(0)
                                .AudienceFilterItemID(0)
                                .AudienceFilterData(generateAudienceFilter());

                            shell.showProgressIndicator(MiscTexts.GettingClubs);

                            // TODO: 
                            datamanager.initAudienceForFilterTypeClub(ko.toJS(filterData), {
                                success: function (json) {
                                    var underlayingArray = audienceClubs();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audienceClubs.valueHasMutated();

                                    setSavedClubAudienceValues("audienceClubList");

                                    shell.hideProgressIndicator();

                                    showTabHelper('clubfilter');
                                },
                                error: function (error) {
                                    shell.hideProgressIndicator();

                                    console.log(error);
                                }
                            });
                        }
                        else {
                            showTabHelper('clubfilter');
                        }

                        break;
                    case 4: // Team 
                        {
                            if (audienceTeams().length === 0) {
                                var teamFilterData = new viewmodel.InitAudienceForFilterTypeParameters()
                                    .AudienceFilterTypeID(0)
                                    .AudienceFilterItemID(0)
                                    .AudienceFilterData(generateAudienceFilter());

                                shell.showProgressIndicator(MiscTexts.GettingTeams);

                                datamanager.initAudienceForFilterTypeTeam(ko.toJS(teamFilterData), {
                                    success: function (json) {
                                        currentClubId = infoItem().AudienceEntityID;

                                        audienceTeams([]);

                                        var underlayingArray = audienceTeams();

                                        for (var i = 0; i < json.length; i++) {
                                            underlayingArray.push(json[i]);
                                        }

                                        audienceTeams.valueHasMutated();

                                        if (selectedTeams.length > 0) {
                                            const items = selectedTeams.filter(w => w.ClubID === infoItem().AudienceEntityID);

                                            if (items.length > 0) {
                                                $("#audience-view .audienceTeamsList li.selectAll").removeClass('checked');

                                                items.forEach(function (item) {
                                                    $("#audience-view .audienceTeamsList li.teamListContainer").not('.selectAll').each(function (key, value) {
                                                        var data = ko.contextFor(value).$data;

                                                        if (Number(data.TeamID) === Number(item.TeamID)) {
                                                            $(this).addClass('checked');
                                                            return false;
                                                        }
                                                    });
                                                });
                                            } else {
                                                $("#audience-view .audienceTeamsList li.selectAll").addClass('checked');
                                            }
                                        } else {
                                            $("#audience-view .audienceTeamsList li.selectAll").addClass('checked');
                                        }

                                        showTabHelper('teamfilter');

                                        shell.hideProgressIndicator();
                                    },
                                    error: function (error) {
                                        console.log(error);
                                        shell.hideProgressIndicator();
                                    }
                                });
                            }
                            else {
                                showTabHelper('teamfilter');
                            }
                        }
                        break;
                    case 5: // Sport
                        if (checkIfWarningShouldBeShown())
                            return false;

                        if (audienceTeamSportCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audienceTeamSportCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audienceTeamSportCategories.valueHasMutated();

                                    setSavedAudienceValues("audienceSportList", data.AudienceFilterTypeID);
                                    setPreviouslyCheckedValues("audienceSportList");
                                    showTabHelper('sportfilter');
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        } else {
                            setPreviouslyCheckedValues("audienceSportList");
                            showTabHelper('sportfilter');
                        }

                        break;
                    case 6: // MemberGender
                        if (audiencePersonGenderCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audiencePersonGenderCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audiencePersonGenderCategories.valueHasMutated();

                                    setSavedAudienceValues("audiencePersonGenderList", data.AudienceFilterTypeID);
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        }
                        showTabHelper('persongenderfilter');
                        break;
                    case 7: // MemberAge
                        showTabHelper('personagefilter');
                        break;
                    case 8: // TeamGender
                        if (checkIfWarningShouldBeShown())
                            return false;

                        if (audienceTeamGenderCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audienceTeamGenderCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audienceTeamGenderCategories.valueHasMutated();

                                    setSavedAudienceValues("audienceGenderList", data.AudienceFilterTypeID);
                                    setPreviouslyCheckedValues("audienceGenderList");
                                    showTabHelper('genderfilter');
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        } else {
                            setPreviouslyCheckedValues("audienceGenderList");
                            showTabHelper('genderfilter');
                        }

                        break;
                    case 9: // TeamRole
                        if (audiencePersonTeamRoleCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audiencePersonTeamRoleCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audiencePersonTeamRoleCategories.valueHasMutated();

                                    setSavedAudienceValues("audiencePersonTeamRoleList", data.AudienceFilterTypeID);
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        }
                        showTabHelper('personteamrolefilter');
                        break;
                    case 10: // TeamAgeCategory
                        if (checkIfWarningShouldBeShown())
                            return false;

                        if (audienceTeamAgeCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audienceTeamAgeCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audienceTeamAgeCategories.valueHasMutated();

                                    setSavedAudienceValues("audienceTeamAgeCategoryList", data.AudienceFilterTypeID);
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        }

                        showTabHelper('agecategoryfilter');
                        break;
                    case 11: // MemberCountry
                        if (audiencePersonCountryCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audiencePersonCountryCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audiencePersonCountryCategories.valueHasMutated();

                                    setSavedAudienceValues("audiencePersonCountryList", data.AudienceFilterTypeID);
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        }
                        showTabHelper('personcountryfilter');
                        break;
                }
            },

            setPreviouslyCheckedValues = function (listname) {
                previouslySelectedItems = [];

                $("#audience-view ." + listname + " li.checked").not('.selectAll').each(function (key, value) {
                    previouslySelectedItems.push(ko.contextFor(value).$data.AudienceFilterTypeValueID);
                });
            },

            getCurrentCheckedValues = function (listname) {
                var ret = [];

                $("#audience-view ." + listname + " li.checked").not('.selectAll').each(function (key, value) {
                    ret.push(ko.contextFor(value).$data.AudienceFilterTypeValueID);
                });

                return ret;
            },

            setSavedAudienceValues = function (listname, audienceFilterTypeID) {
                if (audienceFilterData !== null) {
                    const items = audienceFilterData.AudienceFilterTypeData.filter(w => w.AudienceFilterTypeID === audienceFilterTypeID);

                    // We have som custom data, remove the "All"-selection
                    if (items.length > 0 && items[0].AudienceFilterTypeValues.length > 0) {
                        $("#audience-view ." + listname + " li.selectAll").removeClass('checked');

                        items[0].AudienceFilterTypeValues.forEach(function (item) {
                            $("#audience-view ." + listname + " li").not('.selectAll').each(function (key, value) {
                                var data = ko.contextFor(value).$data;

                                if (Number(data.AudienceFilterTypeValueID) === Number(item)) {
                                    $(this).addClass('checked');
                                    return false;
                                }
                            });
                        });
                    }
                }
            },

            setSavedClubAudienceValues = function (listname) {
                if (audienceFilterData !== null) {
                    const items = audienceFilterData.AudienceFilterTypeClubData;

                    // We have som custom data, remove the "All"-selection
                    if (items.length > 0) {
                        $("#audience-view ." + listname + " li.selectAll").removeClass('checked');

                        items.forEach(function (item) {
                            $("#audience-view ." + listname + " li").not('.selectAll').each(function (key, value) {
                                var data = ko.contextFor(value).$data;

                                if (Number(data.AudienceFilterTypeValueID) === Number(item.ClubID)) {
                                    $(this).addClass('checked');
                                    return false;
                                }
                            });
                        });
                    }
                }
            },

            setSavedTeamAudienceValues = function () {
                $('#audience-view .audienceClubList' + " li.checked").not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    if (selectedTeams.length > 0) {
                        var numberSelectedTeams = selectedTeams.filter(w => w.ClubID === data.AudienceFilterTypeValueID).length;
                        var buttonText = '';

                        if (numberSelectedTeams > 0)
                            buttonText = numberSelectedTeams + ' lag';
                        else
                            buttonText = InfoItemTexts.AllTeams;

                        $(this).find('.teamsButton').first().text(buttonText)
                    }
                    else {
                        $(this).find('.teamsButton').first().text(InfoItemTexts.AllTeams)
                    }
                });
            },

            toggleShowAudienceAge = function (showAudienceAge) {
                if (showAudienceAge) {
                    $('#audienceAgeContainer').show();
                } else {
                    $('#audienceAgeContainer').hide();
                }

                return true;
            },

            generateAudienceFilter = function () {
                //var filter = new viewmodel.AudienceFilterData()
                //    .AudienceID(infoItem().AudienceID)
                //    .AudienceEntityID(infoItem().AudienceEntityID)
                //    .InfoItemID(infoItem().InfoItemID)
                //    .InfoItemType(infoItem().InfoItemType);

                var filter = new viewmodel.AudienceFilterData()
                    .AudienceID(audienceId)
                    .AudienceEntityID(0)
                    .InfoItemID(0)
                    .InfoItemType(0);

                var leagueOrganizerFilterType = leagueOrganizerFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(2);

                filter.AudienceFilterTypeData.push(leagueOrganizerFilterType);

                $('#audience-view .audienceLeagueOrganizerList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    leagueOrganizerFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                // If the tab is not yet loaded and we have previously saved data, load that instead
                if (audienceLeagueOrganizerCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(leagueOrganizerFilterType, 2);
                }

                $('#audience-view .audienceClubList' + " li.checked").not('.selectAll').each(function (key, value) {
                    var clubFilterType = new viewmodel.AudienceFilterTypeClubData();
                    var data = ko.contextFor(value).$data;

                    clubFilterType.ClubID(data.AudienceFilterTypeValueID);

                    if (selectedTeams.length > 0) {
                        selectedTeams.filter(w => w.ClubID === data.AudienceFilterTypeValueID).forEach(function (item) {
                            clubFilterType.SelectedTeams.push(item.TeamID);
                        });
                    }

                    filter.AudienceFilterTypeClubData.push(clubFilterType);
                });

                if (filter.AudienceFilterTypeClubData().length === 0 && audienceClubs().length === 0 && audienceFilterData !== null) {
                    loadDefaultClubData(filter);
                }

                var sportFilterType = sportFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(5);

                filter.AudienceFilterTypeData.push(sportFilterType);

                $('#audience-view .audienceSportList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    sportFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                if (audienceTeamSportCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(sportFilterType, 5);
                }

                var personGenderFilterType = personGenderFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(6);

                filter.AudienceFilterTypeData.push(personGenderFilterType);

                $('#audience-view .audiencePersonGenderList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    personGenderFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                if (audiencePersonGenderCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(personGenderFilterType, 6);
                }

                var memberAgeFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(7);

                filter.AudienceFilterTypeData.push(memberAgeFilterType);

                if (Number($('input[name=audienceAgeRB]:checked').val()) === 1) {
                    memberAgeFilterType.AudienceFilterTypeValues.push(sliderFromValue());
                    memberAgeFilterType.AudienceFilterTypeValues.push(sliderToValue());
                }

                var genderFilterType = genderFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(8);

                filter.AudienceFilterTypeData.push(genderFilterType);

                $('#audience-view .audienceGenderList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    genderFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                if (audienceTeamGenderCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(genderFilterType, 8);
                }

                var personTeamRoleFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(9);

                filter.AudienceFilterTypeData.push(personTeamRoleFilterType);

                $('#audience-view .audiencePersonTeamRoleList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    personTeamRoleFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                if (audiencePersonTeamRoleCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(personTeamRoleFilterType, 9);
                }

                /**** TEAM AGE CATEGORY ****/
                // Always add an empty filter
                var teamAgeFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(10);

                filter.AudienceFilterTypeData.push(teamAgeFilterType);

                $('#audience-view .audienceTeamAgeCategoryList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    teamAgeFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                if (audienceTeamAgeCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(teamAgeFilterType, 10);
                }
                /*************************/


                /**** MEMBER COUNTRY ****/
                // Always add an empty filter
                var memberCountryFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(11);

                filter.AudienceFilterTypeData.push(memberCountryFilterType);

                $('#audience-view .audiencePersonCountryList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    memberCountryFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                if (audiencePersonCountryCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(memberCountryFilterType, 11);
                }
                /*************************/
                return filter;
            },

            loadDefaultData = function (filterType, audienceFilterTypeId) {
                const items = audienceFilterData.AudienceFilterTypeData.filter(w => w.AudienceFilterTypeID === audienceFilterTypeId);

                if (items.length > 0 && items[0].AudienceFilterTypeValues.length > 0) {
                    items[0].AudienceFilterTypeValues.forEach(function (item) {
                        filterType.AudienceFilterTypeValues.push(item);
                    });
                }
            },

            loadDefaultClubData = function (filter) {
                const items = audienceFilterData.AudienceFilterTypeClubData;

                if (items.length > 0) {
                    items.forEach(function (item) {
                        var clubFilterType = new viewmodel.AudienceFilterTypeClubData();

                        clubFilterType.ClubID(item.ClubID);

                        if (selectedTeams.length > 0) {
                            selectedTeams.filter(w => w.ClubID === item.ClubID).forEach(function (t) {
                                clubFilterType.SelectedTeams.push(t.TeamID);
                            });
                        }

                        filter.AudienceFilterTypeClubData.push(clubFilterType);
                    });
                }
            },

            searchCountriesKeyUp = function (data, event) {
                if (event.keyCode === 9)
                    return;

                var countriesSearchString = $(event.target).val();

                if (countriesSearchString.length === 0) {
                    $('#audience-view .audiencePersonCountryList li').each(function (key, value) {
                        $(this).removeClass('hidden');
                    });
                } else {
                    $('#audience-view .audiencePersonCountryList li').each(function (key, value) {
                        var data = ko.contextFor(value).$data;

                        if (!data.Title) {
                            $(this).addClass('hidden');
                        }
                        else if (data.Title.toLowerCase().indexOf(countriesSearchString.toLowerCase()) !== -1) {
                            $(this).removeClass('hidden');
                        } else {
                            $(this).addClass('hidden');
                        }
                    });
                }
            },

            showSelectedCountriesClick = function (data, event) {
                var isChecked = $(event.target).is(":checked");

                if (isChecked) {
                    $('#audience-view .audiencePersonCountryList li').each(function (key, value) {
                        $(this).addClass('hidden');
                    });

                    $('#audience-view .audiencePersonCountryList li.checked').each(function (key, value) {
                        $(this).removeClass('hidden');
                    });
                }
                else {              
                    var countriesSearchString = $('#audience-personcountryfilter .clubSearchInput').val();

                    if (countriesSearchString.length === 0) {
                        $('#audience-view .audiencePersonCountryList li').each(function (key, value) {
                            $(this).removeClass('hidden');
                        });
                    } else {
                        $('#audience-view .audiencePersonCountryList li').each(function (key, value) {
                            var data = ko.contextFor(value).$data;

                            if (!data.Title) {
                                $(this).addClass('hidden');
                            }
                            else if (data.Title.toLowerCase().indexOf(countriesSearchString.toLowerCase()) !== -1) {
                                $(this).removeClass('hidden');
                            } else {
                                $(this).addClass('hidden');
                            }
                        });
                    }                  
                }

                return true;
            },

            searchClubsKeyUp = function (data, event) {
                if (event.keyCode === 9)
                    return;

                clubsSearchString($(event.target).val());

                if (clubsSearchString().length === 0) {
                    $('#audience-view .audienceClubList li').not('.selectAll').each(function (key, value) {
                        $(this).removeClass('hidden');
                    });
                } else {
                    $('#audience-view .audienceClubList li').not('.selectAll').each(function (key, value) {
                        var data = ko.contextFor(value).$data;

                        if (data.Title.toLowerCase().indexOf(clubsSearchString().toLowerCase()) !== -1) {
                            $(this).removeClass('hidden');
                        } else {
                            $(this).addClass('hidden');
                        }
                    });
                }
            },

            searchTeamsKeyUp = function (data, event) {
                if (event.keyCode === 9)
                    return;

                teamsSearchString($(event.target).val());

                if (teamsSearchString().length === 0) {
                    $('#audience-view .audienceTeamsList li.teamListContainer').not('.selectAll').each(function (key, value) {
                        $(this).removeClass('hidden');
                    });
                } else {
                    $('#audience-view .audienceTeamsList li.teamListContainer').not('.selectAll').each(function (key, value) {
                        var item = ko.contextFor(value).$data;
                        var match = false;

                        var s = teamsSearchString().toLowerCase().replace(" ", "");

                        // Search the team name
                        match = item.TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1;

                        // Search the team alias if it is set
                        if (item.TeamAlias.toLowerCase().replace(" ", "").indexOf(s) !== -1)
                            match = true;

                        for (var i = 0; i < item.TeamStaffForClubTeamView.length; i++) {
                            // Search TeamStaff for the name
                            if (item.TeamStaffForClubTeamView[i].FullName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }

                        for (var j = 0; j < item.Leagues.length; j++) {
                            // Search Leagues for the TeamName
                            if (item.Leagues[j].TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }

                            // Search Leagues for the LeagueName
                            if (item.Leagues[j].LeagueName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }

                        if (match)
                            $(this).removeClass('hidden');
                        else
                            $(this).addClass('hidden');
                    });
                }
            },            

            showTeamFilterInfoText = function () {
                alert(InfoItemTexts.TeamFilterDescription);
            },

            showMemberFilterInfoText = function () {
                alert(InfoItemTexts.PersonFilterDescription);
            },

            sliderValueChanged = function (data, event) {
                $('#audience-from-age').text($(event.target).val());
            },

            sliderToValueChanged = function (data, event) {
                $('#audience-to-age').text($(event.target).val());
            },

            closeDialog = function () {
                $('#audience-view').hide();
                $('#audience-view .fade-overlay').removeClass('active');

                if (callbackMethod)
                    callbackMethod(audienceId);
            };

        return {
            activate: activate,
            closeDialog: closeDialog,

            sliderValueChanged: sliderValueChanged,
            sliderToValueChanged: sliderToValueChanged,

            audiencePersonFilterTypes: audiencePersonFilterTypes,
            audienceTeamFilterTypes: audienceTeamFilterTypes,

            audienceClubs: audienceClubs,
            audienceTeams: audienceTeams,

            audienceTeamAgeCategories: audienceTeamAgeCategories,
            audienceTeamSportCategories: audienceTeamSportCategories,
            audienceTeamGenderCategories: audienceTeamGenderCategories,
            audienceLeagueOrganizerCategories: audienceLeagueOrganizerCategories,

            audiencePersonGenderCategories: audiencePersonGenderCategories,
            audiencePersonCountryCategories: audiencePersonCountryCategories,
            audiencePersonTeamRoleCategories: audiencePersonTeamRoleCategories,

            audienceString: audienceString,
            saveAudience: saveAudience,

            showAudienceFilter: showAudienceFilter,
            showTeamsTab: showTeamsTab,

            showFilterType: showFilterType,
            
            toggleShowAudienceAge: toggleShowAudienceAge,

            selectAll: selectAll,
            selectItem: selectItem,
            selectTeam: selectTeam,

            searchClubsKeyUp: searchClubsKeyUp,
            searchTeamsKeyUp: searchTeamsKeyUp,
            searchCountriesKeyUp: searchCountriesKeyUp,

            showTeamFilterInfoText: showTeamFilterInfoText,
            showMemberFilterInfoText: showMemberFilterInfoText,
            showSelectedCountriesClick: showSelectedCountriesClick,

            backToHome: backToHome,
            navigateBack: navigateBack,
            navigateBackFromAudience: navigateBackFromAudience,

            sliderFromValue: sliderFromValue,
            sliderToValue: sliderToValue
        };
    });;
define('viewmodels/vm.blurbtest',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, _) {

        var gameBlurb = ko.observable(),
            gameId = 0,
            blurbTypeId = 0,

            activate = function (routeData, callback) {
                blurbTypeId = routeData.blurbTypeId;
                gameId = routeData.gameId;

                datamanager.getMagazineBlurb(blurbTypeId, gameId, {
                    success: function (json) {                        
                        gameBlurb(json);
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            navigateToMagazineGameView = function (item) {
                var navigationItem;

                if (item.GameID !== 0) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.magazinegameview + '/' + item.GameID;
                        },
                        toClick: function () {
                            router.navigateTo(config.hashes.magazinegameview + '/' + item.GameID);
                        }
                    };
                } else {
                    navigationItem = {
                        getHrefString: function () {
                            return "";
                        },
                        toClick: function () {
                        }
                    };
                }

                return navigationItem;
            },

            navigateToLeague = function (data) {

            },

            toggleFullscreen = function (data) {
                $('#blurbtest-view .pagewrapper').toggleClass('pageWrapperHalfPage');
                $('#blurbtest-view .fullpage-wrapper').toggleClass('half-page');
            },

            showBlurbType = function (type, data, event) {
                router.navigateTo(config.hashes.blurbtest + '/' + type + '/' + gameId);
            },

            cleanup = function () {
                gameBlurb('');

                $('#blurbtest-view .pagewrapper').addClass('pageWrapperHalfPage');
                $('#blurbtest-view .fullpage-wrapper').addClass('half-page');
            };

        return {
            activate: activate,
            cleanup: cleanup,

            navigateToLeague: navigateToLeague,
            navigateToMagazineGameView: navigateToMagazineGameView,
            gameBlurb: gameBlurb,
            toggleFullscreen: toggleFullscreen,
            showBlurbType: showBlurbType
        };
    });;
define('viewmodels/vm.calendar',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.magazinegameview', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, magazinegameview, _) {

        var comingGames = ko.observableArray(),
            games = ko.observableArray(),
            pastGames = ko.observableArray(),
            gettingGamesFuture = ko.observable(false),
            gettingGamesPast = ko.observable(false),
            noMoreGamesToGetFuture = ko.observable(false),
            noMoreGamesToGetPast = ko.observable(false),
            currentActiveTabId = ko.observable(2),

            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();

                if (games().length === 0) {
                    initialize();
                }             

                $(window).scroll(infiniteScrolling);

                if (_.isFunction(callback)) { callback(); }
            },

            initialize = function () {
                getGames(2);
            },

            cleanup = function () {
                $(window).unbind('scroll', infiniteScrolling);
                gettingGamesFuture(false);
                gettingGamesPast(false);
                noMoreGamesToGetFuture(false);
                noMoreGamesToGetPast(false);
            },

            togglePast = function() {
                currentActiveTabId(1);
                window.scrollTo(0, 0);

                $('#pastGamesList').show();
                $('#presentGamesList').hide();
                $('#futureGamesList').hide();

                if (pastGames().length === 0)
                    getGames(1);
            },

            togglePresent = function() {
                currentActiveTabId(2);
                window.scrollTo(0, 0);

                $('#pastGamesList').hide();
                $('#presentGamesList').show();
                $('#futureGamesList').hide();
            },

            toggleFuture = function() {
                currentActiveTabId(3);
                window.scrollTo(0, 0);

                $('#pastGamesList').hide();
                $('#presentGamesList').hide();
                $('#futureGamesList').show();

                if (comingGames().length === 0)
                    getGames(3);
                
            },

            infiniteScrolling = function () {

                switch(currentActiveTabId())
                {
                    case 1:
                        {
                            if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && pastGames().length !== 0) {
                                if (!gettingGamesPast() && !noMoreGamesToGetPast()) {
                                    getGames(1);
                                }
                            }
                        }
                        break;
                    case 3:
                        {
                            if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && comingGames().length !== 0) {
                                if (!gettingGamesFuture() && !noMoreGamesToGetFuture()) {
                                    getGames(3);
                                }
                            }
                    
                        }
                        break;
                    default:
                        break;
                }
            },

            addToGameList = function (json, currentListid) {
                var days = json;
                var underlayingArray;

                switch(currentListid)
                {
                    case 1:
                        {
                            underlayingArray = pastGames();
                        }
                        break;
                    case 2:
                        {
                            underlayingArray = games();
                        }
                        break;
                    case 3:
                        {
                            underlayingArray = comingGames();
                        }
                        break;
                    default:                
                        break;
                }

                if (currentListid === 2) {
                    for (var i = 0; i < json.length; i++) {
                        underlayingArray.push(json[i]);
                    }
                } else {
                    for (var j = 0; j < days.length; j++) {
                        underlayingArray.push({
                            Date: days[j].Date,
                            GameID: 0
                        });

                        for (var k = 0; k < days[j].Games.length; k++) {
                            underlayingArray.push(days[j].Games[k]);
                        }
                    }
                }

                switch(currentListid)
                {
                    case 1:
                        {
                            pastGames.valueHasMutated();
                        }
                        break;
                    case 2:
                        {
                            games.valueHasMutated();
                        }
                        break;
                    case 3:
                        {
                            comingGames.valueHasMutated();
                        }
                        break;
                    default:                
                        break;
                }                

                $('#calendar-view-preloader').hide();
                $('#calendar-view .afterloaded').show();
            },            

            getGames = function(currentListid) {
                var gameId;

                switch(currentListid)
                {
                    case 1:
                        {
                            gettingGamesPast(true);

                            gameId = pastGames().length ?  pastGames()[pastGames().length - 1].GameID : 0; 

                            datamanager.getMemberCalendarGames(true, gameId, {
                                success: function (json) {
                                    gettingGamesPast(false);

                                    if (json.length !== 0) {
                                        addToGameList(json, 1);
                                    }
                                    else {
                                        $('#calendar-view-preloader .preloader-text').text('Your teams does not have any games');
                                        noMoreGamesToGetPast(true);
                                    }
                                },
                                error: function (response) {
                                    gettingGamesPast(false);
                                }
                            });
                        }
                        break;
                    case 2:
                        {
                            datamanager.initMemberCalendar({
                                success: function (json) {
                                    if (json.GamesToday.length !== 0) {
                                        addToGameList(json.GamesToday, 2);
                                    }
                                    else {                                    
                                        //$('#calendar-view-preloader .preloader-text').text('Your teams does not have any games');
                                    }

                                    $('#calendar-view-preloader').hide();
                                    $('#calendar-view .afterloaded').show();
                                },
                                error: function (response) {                                    
                                    $('#calendar-view-preloader').hide();
                                    $('#calendar-view .afterloaded').show();
                                }
                            });
                        }
                        break;
                    case 3:
                        {
                            gettingGamesFuture(true);

                            gameId = comingGames().length ?  comingGames()[comingGames().length - 1].GameID : 0;

                            datamanager.getMemberCalendarGames(false, gameId, {
                                success: function (json) {
                                    gettingGamesFuture(false);
                                    if (json.length !== 0) {
                                        addToGameList(json, 3);
                                    }
                                    else {
                                        $('#calendar-view-preloader .preloader-text').text('Your teams does not have any games');
                                        noMoreGamesToGetFuture(true);
                                    }
                                },
                                error: function (response) {
                                    gettingGamesFuture(false);
                                }
                            });
                        }
                        break;
                    default:                
                        break;
                }
            },

            navigateToGame = function (game, callback) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.magazinegameview + '/' + game.GameID;
                    },
                    toClick: function () {
                        magazinegameview.setGameHeaderInfo(game);
                        router.navigateTo(config.hashes.magazinegameview + '/' + game.GameID);
                    }
                };
                return navigationItem;
            },    

            navigateToLeague = function (data) {
                router.navigateTo('/' + config.hashes.leaguesite + '/' + data.LeagueID);
            },

            showGame = function (game, callback) {
            
                magazinegameview.setGameHeaderInfo(game);
                router.navigateTo(config.hashes.magazinegameview + '/' + game.GameID);

                //If there was a callback sent in, call it
                if (_.isFunction(callback)) {
                    callback();
                }
            };

        return {
            activate: activate,
            initialize: initialize,
            cleanup: cleanup,
            showGame: showGame,
            games: games,
            comingGames: comingGames,
            pastGames: pastGames,            
            getGames: getGames,
            gettingGamesFuture: gettingGamesFuture,
            gettingGamesPast: gettingGamesPast,
            noMoreGamesToGetFuture: noMoreGamesToGetFuture,
            noMoreGamesToGetPast: noMoreGamesToGetPast,
            navigateToGame: navigateToGame,
            navigateToLeague: navigateToLeague,
            currentActiveTabId: currentActiveTabId,

            togglePast: togglePast,
            togglePresent: togglePresent,
            toggleFuture: toggleFuture
        };
    });;
define('viewmodels/vm.club',
    ['ko', 'underscore', 'config', 'router', 'messenger', 'datamanager', 'navigation', 'viewmodels/vm.magazinegameview', 'models/model', 'viewmodels/vm.infoitem', 'viewmodels/vm.shell'],
    function (ko, _, config, router, messenger, datamanager, navigation, magazinegameview, model, infoitem, shell) {
        var clubId = 0,
            clubHeader = ko.observable(),
            breadCrumb = ko.observable(),

            initClubModel = ko.observable(),
            initClubPicsAndVideosModel = ko.observable(),
            initClubPartnersModel = ko.observable(),
            initPlayPage = ko.observable(),

            pictures = ko.observableArray(),
            videos = ko.observableArray(),
            highlights = ko.observableArray(),
            replays = ko.observableArray(),
            liveGames = ko.observableArray(),
            plannedGames = ko.observableArray(),
            posts = ko.observableArray(),

            sports = ko.observableArray(),
            genders = ko.observableArray(),
            seasons = ko.observableArray(),
            clubTeams = ko.observableArray(),            
            initInfoItem = ko.observable(),

            blurbsInFeed = ko.observableArray(),            
            pastGames = ko.observableArray(),
            comingGames = ko.observableArray(),
            filterString = ko.observable(),
            partnerFeaturesEnabled = ko.observable(false),
            lastScrollPosition = 0,
            selectedGender = ko.observable(0),
            selectedSport = ko.observable(0),
            postsFilterType = ko.observable(0),
            selectedSeason = ko.observable(),
            teamSearchString = ko.observable('-'),
                       
            gettingPages = false,
            gettingMoreInfoPosts = false,
            gettingPictures = ko.observable(false),
            gettingVideos = ko.observable(false),
            gettingHighlights = ko.observable(false),
            gettingReplays = ko.observable(false),
            gettingLiveGames = ko.observable(false),
            gettingPlannedGames = ko.observable(false),
            gettingGamesPast = ko.observable(false),
            gettingGamesComing = ko.observable(false),
            
            noMoreHighlightsToGet = false,
            noMoreReplaysToGet = false,
            noMorePlannedGamesToGet = false,
            noMoreLiveGamesToGet = false,     
            noMorePagesToGet = false,
            noMorePicturesToGet = false,
            noMoreVideosToGet = false,
            noMoreInfoPostsToGet = false,
            noMoreGamesToGetPast = false,
            noMoreGamesToGetComing = false,


            activeTeamsTab = ko.observable(1),
            currentViewName = '',
            //blurbsSuitableForHalfPage = [0, 1, 9, 12, 17, 18, 901, 903, 904, 905],
            blurbsSuitableForHalfPage = [0, 1, 9, 17, 18, 40, 41, 50, 901, 903, 904, 905],
            currentTab = ko.observable(''),            
            memberIsLoggedIn = ko.observable(false),
            currentActiveTabId = 1,

            activate = function (routeData, callback) {
                routeData.subview = 'start';
                currentTab(routeData.subview);
                messenger.publish.viewModelActivated();

                if (routeData.Id !== undefined) {
                    clubId = routeData.Id;
                }                

                activatesubview(routeData);
            },

            activatesubview = function (routeData, callback) {
                if (_.isObject(shell.currentMember)) {
                    memberIsLoggedIn(true);
                }

                if (clubHeader() === undefined || routeData.Id !== undefined && clubHeader() !== undefined && clubHeader().ClubID !== Number(routeData.Id)) {
                    clearObservables();
                }

                if (routeData.Id !== undefined) {
                    clubId = routeData.Id;
                }

                var currentView = routeData.subview;
                currentViewName = 'club-' + currentView;
                currentTab(routeData.subview);                

                breadCrumb(currentView);

                // Really really really ugly hack for Innebandy... don't like this one                
                if (Number(applicationID) === 3 && shell.showAdminView() === false) {
                    if (currentView !== 'teams') {
                        router.navigateTo(config.hashes.club + '/' + clubId + '/teams');
                        return;
                    }
                }

                $('.club-subview').hide();
                $('#club-' + currentView).show();
                $('.moreMenuItemsList').addClass('hiddenOnWideDisplay');

                if (shell.showAdminView()) {
                    $(".innebandy-special").each(function () {
                        $(this).removeClass('innebandy-special');
                    });
                }

                if (clubHeader() === undefined || clubHeader() === '') {
                    getClubHeader(routeData, true);
                } else {
                    switch (currentTab()) {
                        case 'start': {
                            // Only do init if we haven't done it already
                            if (initClubModel() === undefined || initClubModel() === '') {
                                showPreloader();

                                window.scrollTo(0, 0);

                                datamanager.initClub(clubId, {
                                    success: function (model) {
                                        initClubModel(model);

                                        styleBlurbs(model.MagazineBlurbs);                                        

                                        hidePreloader();
                                    },
                                    error: function (response, xhr) {
                                        hidePreloader();
                                    }
                                });
                            }

                            if (initClubPicsAndVideosModel() === undefined || initClubPicsAndVideosModel() === '') {
                                datamanager.initClubPicsAndVideos(clubId, {
                                    success: function (model) {
                                        initClubPicsAndVideosModel(model);
                                        if (model.Pictures.length > 0) {
                                            //$('#clubStartPicturesBlock').show();
                                        } else {
                                            $('#clubStartPicturesBlock').hide();
                                        }
                                    },
                                    error: function (response, xhr) {

                                    }
                                });
                            }

                            break;
                        }
                        case 'teams': {
                            if (clubTeams().length === 0) {
                                datamanager.initClubTeams(clubId, {
                                    success: function (json) {
                                        seasons([]);
                                        clubTeams([]);                                        

                                        var underlayingArray = clubTeams;

                                        for (var i = 0; i < json.Teams.length; i++) {
                                            underlayingArray.push(json.Teams[i]);
                                        }

                                        clubTeams.valueHasMutated();                                        

                                        underlayingArray = genders();

                                        for (var k = 0; k < json.Genders.length; k++) {
                                            underlayingArray.push(json.Genders[k]);
                                        }
                                        genders.valueHasMutated();

                                        if (genders().length > 1)
                                            $('#clubGenderDefaultChoice').show();
                                        else if (genders().length === 1) {
                                            selectGender(genders()[0]);

                                            $('#clubGenderDefaultChoice').hide();
                                        }

                                        underlayingArray = seasons;

                                        for (var l = 0; l < json.Seasons.length; l++) {
                                            underlayingArray.push(json.Seasons[l]);

                                            if (json.Seasons[l].IsDefault) {
                                                selectedSeason(json.Seasons[l].SeasonID);

                                                $('#clubSeasonDropDownTitle').text(MiscTexts.Season);
                                            }
                                        }

                                        seasons.valueHasMutated();

                                        subViewLoaded();
                                        hidePreloader();
                                    },
                                    error: function (json) {
                                    }
                                });
                            }

                            break;
                        }

                        case 'magazine': {
                            if (blurbsInFeed().length === 0) {
                                showPreloader();
                                getPagesFromServer();
                                window.scrollTo(0, 0);
                            }
                            else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }                        
                        case 'play': {
                            // Only do init if we haven't done it already
                            if (initPlayPage() === undefined || initPlayPage() === '') {
                                showPreloader();

                                window.scrollTo(0, 0);

                                datamanager.initClubPlayPage(clubId, {
                                    success: function (model) {
                                        initPlayPage(model);

                                        subViewLoaded();
                                        hidePreloader();
                                    },
                                    error: function (response) {
                                        hidePreloader();

                                        alert(response);
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'pictures': {
                            breadCrumb('play');

                            if (pictures().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getClubPictures(clubId, 8, 0, {
                                    success: function (model) {
                                        console.log(model);

                                        var underlayingArray = pictures();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        pictures.valueHasMutated();

                                        subViewLoaded();
                                        hidePreloader();                                        
                                    },
                                    error: function (response, xhr) {
                                        alert(response);
                                        subViewLoaded();
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'highlights': {
                            breadCrumb('play');

                            if (highlights().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getHighlightsForClub(clubId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = highlights();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        highlights.valueHasMutated();

                                        if (model.length < 8)
                                            noMoreHighlightsToGet = true;

                                        hidePreloader();
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'replays': {
                            breadCrumb('play');

                            if (replays().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getReplaysForClub(clubId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = replays();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        replays.valueHasMutated();

                                        if (model.length < 8)
                                            noMoreReplaysToGet = true;

                                        hidePreloader();
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'planned': {
                            breadCrumb('play');

                            if (plannedGames().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getPlannedGamesForClub(clubId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = plannedGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        plannedGames.valueHasMutated();

                                        if (model.length < 8)
                                            noMorePlannedGamesToGet = true;

                                        hidePreloader();
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'live': {
                            breadCrumb('play');

                            if (liveGames().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getLiveGamesForClub(clubId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = liveGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        liveGames.valueHasMutated();

                                        if (model.length < 8)
                                            noMoreLiveGamesToGet = true;

                                        hidePreloader();
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'posts': {
                            if (posts().length === 0) {
                                datamanager.initClubInfoItems(clubId, {
                                    success: function (model) {
                                        posts([]);

                                        initInfoItem(model);

                                        var underlayingArray = posts();

                                        for (var i = 0; i < model.InfoItemBlurbs.length; i++) {
                                            underlayingArray.push(model.InfoItemBlurbs[i]);
                                        }

                                        posts.valueHasMutated();

                                        hidePreloader();

                                        if (posts().length === 0)
                                            noMoreInfoPostsToGet = true;
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            } else {
                                hidePreloader();
                            }

                            break;
                        }
                        case 'videos': {
                            breadCrumb('play');

                            if (videos().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getClubVideos(clubId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = videos();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        videos.valueHasMutated();

                                        subViewLoaded();
                                        hidePreloader();                                        
                                    },
                                    error: function (response, xhr) {
                                        alert(response);
                                        subViewLoaded();
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'fixtures': {
                            if (comingGames().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getComingClubGames(clubId, 0, {
                                    success: function (model) {
                                        comingGames([]);
                                        var underlayingArray = comingGames();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        comingGames.valueHasMutated();

                                        if (comingGames().length === 0) {
                                            noMoreGamesToGetComing = true;

                                            togglePastClubGames();
                                        }


                                        subViewLoaded();
                                    },
                                    error: function (response) {
                                        subViewLoaded();
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            // If we haven't loaded any past games, load the first 10 games
                            if (pastGames().length === 0) {
                                getGames(2);
                            }
                            break;
                        }
                        case 'partners': {
                            datamanager.initClubPartners(clubId, {
                                success: function (model) {
                                    initClubPartnersModel(model);
                                },
                                error: function (response) {
                                    alert(response);
                                    console.log(response);
                                }
                            });
                        }
                            break;

                    }
                }

                // Set up infinitescrolling
                $(window).scroll(infiniteScrolling);
            },

            subViewLoaded = function () {
                $("#" + currentViewName + " .afterSubViewLoaded").show();
                $("#" + currentViewName + " .beforeSubViewLoaded").hide();
            },


            getClubHeader = function (routeData, callSubView) {
                datamanager.getClubHeaderInfo(clubId, {
                    success: function (model) {
                        clubHeader(model);

                        partnerFeaturesEnabled(model.PartnerFeaturesEnabled);

                        hidePreloader();

                        if (callSubView)
                            activatesubview(routeData);
                    },
                    error: function (response, xhr) {
                        if (xhr.status === 403) {
                            router.navigateTo("/");
                        }

                        hidePreloader();
                    }
                });
            },

            getClubPictures = function () {
                gettingPictures(true);

                var lastPictureID = 0;

                if (pictures().length !== 0) {
                    var lastPageInCache = pictures()[pictures().length - 1];

                    lastPictureID = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getClubPictures(clubId, 9, lastPictureID, {
                    success: function (model) {
                        var underlayingArray = pictures();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        pictures.valueHasMutated();

                        if (model.length < 9) {
                            noMorePicturesToGet = true;
                        }

                        gettingPictures(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingPictures(false);
                    }
                });
            },

            getClubVideos = function () {
                gettingVideos(true);

                var lastVideoID = 0;

                if (videos().length !== 0) {
                    var lastPageInCache = videos()[videos().length - 1];

                    lastVideoID = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getClubVideos(clubId, 9, lastVideoID, {
                    success: function (model) {
                        var underlayingArray = videos();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        videos.valueHasMutated();

                        if (model.length < 9) {
                            noMoreVideosToGet = true;                            
                        }

                        gettingVideos(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingVideos(false);
                    }
                });
            },            

            getHighlights = function () {
                gettingHighlights(true);

                var lastGameId = 0;

                if (highlights().length !== 0) {
                    var lastPageInCache = highlights()[highlights().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getHighlightsForClub(clubId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = highlights();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        highlights.valueHasMutated();

                        if (model.length < 9) {
                            noMoreHighlightsToGet = true;
                        }

                        gettingHighlights(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingHighlights(false);
                    }
                });
            },

            getPlannedGames = function () {
                gettingPlannedGames(true);

                var lastGameId = 0;

                if (plannedGames().length !== 0) {
                    var lastPageInCache = plannedGames()[plannedGames().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getPlannedGamesForClub(clubId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = plannedGames();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        plannedGames.valueHasMutated();

                        if (model.length < 9) {
                            noMorePlannedGamesToGet = true;
                        }

                        gettingPlannedGames(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingPlannedGames(false);
                    }
                });
            },

            getLiveGames = function () {
                gettingLiveGames(true);

                var lastGameId = 0;

                if (liveGames().length !== 0) {
                    var lastPageInCache = liveGames()[liveGames().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getLiveGamesForClub(clubId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = liveGames();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        liveGames.valueHasMutated();

                        if (model.length < 9) {
                            noMoreLiveGamesToGet = true;
                        }

                        gettingLiveGames(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingLiveGames(false);
                    }
                });
            },

            getReplays = function () {
                gettingReplays(true);

                var lastGameId = 0;

                if (replays().length !== 0) {
                    var lastPageInCache = replays()[replays().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getReplaysForClub(clubId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = replays();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        replays.valueHasMutated();

                        if (model.length < 9) {
                            noMoreReplaysToGet = true;
                        }

                        gettingReplays(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingReplays(false);
                    }
                });
            },            

            // Called when we navigate to a different club
            clearObservables = function () {
                clubHeader('');
                initClubModel('');
                initClubPicsAndVideosModel('');
                initClubPartnersModel('');
                initPlayPage('');
                initInfoItem('');
                teamSearchString('');
                pictures([]);
                videos([]);
                highlights([]);
                replays([]);
                liveGames([]);
                plannedGames([]);
                sports([]);
                seasons([]);
                genders([]);
                clubTeams([]);                
                blurbsInFeed([]);                
                selectedGender(0);
                selectedSport(0);
                postsFilterType(0);
                posts([]);

                noMoreHighlightsToGet = false;
                noMoreReplaysToGet = false;
                noMorePlannedGamesToGet = false;
                noMoreLiveGamesToGet = false;
                noMorePagesToGet = false;
                noMorePicturesToGet = false;
                noMoreVideosToGet = false;
                noMoreInfoPostsToGet = false;
                noMoreGamesToGetPast = false;
                noMoreGamesToGetComing = false;

                $('#teamSearchField').val('');

                $('.club-subview .afterSubViewLoaded').hide();
            },

            cleanup = function () {
                gettingPages = false;
                gettingPictures(false);
                gettingVideos(false);
                gettingGamesPast(false);
                gettingGamesComing(false);                                
                gettingMoreInfoPosts = false;

                gettingHighlights(false);
                gettingReplays(false);
                gettingLiveGames(false);
                gettingPlannedGames(false);                

                $(window).unbind('scroll', infiniteScrolling);
                lastScrollPosition = $(window).scrollTop();
            },

            getPagesFromServer = function () {
                var lastPageInCache, lastGameTime, lastGameId;

                gettingPages = true;

                //Loop through the current pages in the feed                
                var lastThreeBlurbTypes = [];

                if (blurbsInFeed().length !== 0) {
                    lastPageInCache = blurbsInFeed()[blurbsInFeed().length - 1];
                    gameIds = [];

                    for (var i = 0; i < blurbsInFeed().length; i++) {
                        var _gameID = blurbsInFeed()[i].GameID;
                        if (_.isNumber(_gameID)) gameIds.push(_gameID);
                    }

                    if (blurbsInFeed().length > 2) {
                        for (i = blurbsInFeed().length - 3; i < blurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else if (blurbsInFeed().length > 1) {
                        for (i = 0; i < blurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else {
                        lastThreeBlurbTypes.push(blurbsInFeed()[0].MagazineBlurbTypeID);
                    }

                    lastGameTime = lastPageInCache.TimeStamp;
                    lastGameId = lastPageInCache.GameID;
                } else {
                    blurbsInFeed.removeAll();
                    gameIds = null;
                    lastGameTime = new Date();
                    lastGameId = 0;
                }

                //Get the next three pages from the server                
                datamanager.GetClubMagazineBlurbs(clubId, moment(lastGameTime).utc().format('YYYY-MM-DD HH:mm:ss.SSS'), lastGameId, lastThreeBlurbTypes, gameIds)
                    .then(function (json) {
                        styleBlurbs(json);

                        var underlayingArray = blurbsInFeed();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        blurbsInFeed.valueHasMutated();
                        gettingPages = false;

                        hidePreloader();

                        if (json.length < 3) {
                            noMorePagesToGet = true;
                            $('#clubMagazineInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfYourFeed + " " + MagazineTexts.TotalNumberOfPages.replace("{0}", blurbsInFeed().length));
                        }

                        if (blurbsInFeed().length === 0) {
                            noMorePagesToGet = true;
                            $('#clubMagazineInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfYourFeed + " " + MagazineTexts.TotalNumberOfPages.replace("{0}", blurbsInFeed().length));
                        }

                    })
                    .fail(function (error) {
                        gettingPages = false;
                    });

            },            

            getGames = function (currentListid) {
                switch (currentListid) {
                    case 1:
                        {
                            gettingGamesComing(true);

                            var gameId = comingGames().length ? comingGames()[comingGames().length - 1].GameID : 0;
                            datamanager.getComingClubGames(clubId, gameId, {
                                success: function (model) {
                                    gettingGamesComing(false);

                                    if (model.length !== 0) {
                                        var underlayingArray = comingGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        comingGames.valueHasMutated();

                                    }
                                    else {
                                        noMoreGamesToGetComing = true;
                                    }
                                },
                                error: function (response) {
                                    gettingGamesComing(false);
                                }
                            });
                        }
                        break;
                    case 2:
                        {
                            gettingGamesPast(true);

                            var lastPastGameId = pastGames().length ? pastGames()[pastGames().length - 1].GameID : 0;

                            datamanager.getPreviousClubGames(clubId, lastPastGameId, {
                                success: function (model) {
                                    gettingGamesPast(false);

                                    if (model.length !== 0) {
                                        var underlayingArray = pastGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        pastGames.valueHasMutated();
                                    }
                                    else {
                                        noMoreGamesToGetPast = true;
                                    }
                                },
                                error: function (response) {
                                    gettingGamesPast(false);
                                }
                            });
                        }
                        break;
                }
            },

            clearSelectedSport = function () {
                selectedSport(0);

                $('#clubSportDropDownTitle').text('Sport');
            },

            clearSelectedGender = function () {
                selectedGender(0);

                $('#clubGenderDropDownTitle').text(MemberTexts.Gender);
            },

            searchTeamsKeyDown = function (data, event) {
                if (event.keyCode === 13) {
                    searchTeams();
                }
            },

            searchTeams = function () {
                teamSearchString($('#teamSearchField').val());

                if (teamSearchString().length === 0)
                    teamSearchString('-');
            },

            selectSport = function (item) {
                selectedSport(item.SportID);

                $('#clubSportDropDownTitle').text(item.Name);
            },

            selectSeason = function (item) {
                selectedSeason(item.SeasonID);

                $('#clubSeasonDropDownTitle').text(item.SeasonName);

                datamanager.getTeamsForClub(clubId, item.SeasonID, {
                    success: function (json) {
                        clubTeams([]);

                        var underlayingArray = clubTeams;

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        clubTeams.valueHasMutated();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });                
            },

            selectGender = function (item) {
                selectedGender(item.GenderID);

                switch (item.GenderID) {
                    case 1:
                        $('#clubGenderDropDownTitle').text(MemberTexts.Gender);
                        break;
                    case 2:
                    case 3:
                        $('#clubGenderDropDownTitle').text(item.Name);
                        break;
                }
            },

            filteredSports = ko.computed(function () {
                return ko.utils.arrayFilter(sports(), function (item) {

                    if (selectedSport() === 0)
                        return true;

                    return item.SportID === selectedSport();
                });
            }),

            filteredGenders = function (sport) {
                return ko.utils.arrayFilter(sport.values, function (item) {

                    if (selectedGender() === 0)
                        return true;

                    return item.GenderID === selectedGender();
                });

                //return sport.values;
            },

            filteredTeams = function (model) {
                return ko.utils.arrayFilter(model.teams, function (item) {

                    if (teamSearchString() === '-')
                        return true;

                    return item.Name.toLowerCase().indexOf(teamSearchString().toLowerCase()) !== -1;
                });
            },

            filterPosts = function (type) {
                if (type === postsFilterType()) {
                    return;
                }

                postsFilterType(type);
                posts([]);
                reloadInfoItems();
            },

            reloadInfoItems = function () {
                gettingMoreInfoPosts = true;
                noMoreInfoPostsToGet = false;

                if (postsFilterType() === 0) {
                    datamanager.getMoreClubInfoItems(clubId, 0, {
                        success: function (json) {
                            posts([]);

                            gettingMoreInfoPosts = false;

                            if (json.length === 0) {
                                noMoreInfoPostsToGet = true;
                            } else {
                                var underlayingArray = posts();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                posts.valueHasMutated();
                            }
                        },
                        error: function (error) {

                        }
                    });
                }
                else if (postsFilterType() === 1) {
                    datamanager.getMoreManagedClubInfoItems(clubId, 0, true, {
                        success: function (json) {
                            posts([]);

                            gettingMoreInfoPosts = false;

                            if (json.length === 0) {
                                noMoreInfoPostsToGet = true;
                            } else {

                                var underlayingArray = posts();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                posts.valueHasMutated();
                            }
                        },
                        error: function (error) {

                        }
                    });
                } else if (postsFilterType() === 2) {
                    datamanager.getMoreManagedClubInfoItems(clubId, 0, false, {
                        success: function (json) {
                            posts([]);

                            gettingMoreInfoPosts = false;

                            if (json.length === 0) {
                                noMoreInfoPostsToGet = true;
                            } else {
                                var underlayingArray = posts();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                posts.valueHasMutated();
                            }
                        },
                        error: function (error) {

                        }
                    });
                }
            },

            clubTeamsFiltered = ko.computed(function () {
                return ko.utils.arrayFilter(clubTeams(), function (item) {
                    var match = false;

                    if (selectedGender() === 0)
                        match = true;
                    else {
                        match = item.GenderID === selectedGender();

                        // If the gender is selected and doesn't match, we can return here
                        if (!match)
                            return false;
                    }

                    if (teamSearchString() !== '-') {
                        var s = teamSearchString().toLowerCase().replace(" ", "");

                        // Search the team name
                        match = item.TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1;

                        // Search the team alias if it is set
                        if (item.TeamAlias.toLowerCase().replace(" ", "").indexOf(s) !== -1)
                            match = true;

                        for (var i = 0; i < item.TeamStaffForClubTeamView.length; i++) {
                            // Search TeamStaff for the name
                            if (item.TeamStaffForClubTeamView[i].FullName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }

                        //for (var i = 0; i < item.TeamStaff.length; i++) {
                        //    // Search TeamStaff for the name
                        //    if (item.TeamStaff[i].toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                        //        match = true;
                        //        break;
                        //    }
                        //}

                        for (var j = 0; j < item.Leagues.length; j++) {
                            // Search Leagues for the TeamName
                            if (item.Leagues[j].TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }

                            // Search Leagues for the LeagueName
                            if (item.Leagues[j].LeagueName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }
                    }

                    return match;
                });
            }),            

            deleteClub = function () {
                var r = confirm(teamAdminTexts.AreYouSureYouWantToDeleteThisClub);
                if (r === true) {
                    datamanager.deleteClub(clubId, {
                        success: function (json) {
                            router.navigateTo(config.hashes.teams);
                        },
                        error: function (json) {
                            alert(json);
                        }
                    });
                }
            },

            memberIsSportswikAdmin = ko.computed(function () {
                if (_.isObject(shell.currentMember)) {
                    return shell.currentMember.IsSportswikAdmin;
                }

                return false;
            }),

            infiniteScrolling = function () {
                switch (currentTab()) {
                    case 'magazine': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && blurbsInFeed().length !== 0) {
                            if (!gettingPages && !noMorePagesToGet) {
                                $('#clubMagazineInfiniteScrollStatus').html(MagazineTexts.GettingMorePages);

                                getPagesFromServer();
                            }
                        }
                        break;
                    }                   
                    case 'pictures': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && pictures().length !== 0) {
                            if (!gettingPictures() && !noMorePicturesToGet) {
                                getClubPictures();
                            }
                        }

                        break;
                    }
                    case 'videos': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && videos().length !== 0) {
                            if (!gettingVideos() && !noMoreVideosToGet) {
                                getClubVideos();
                            }
                        }

                        break;
                    }
                    case 'planned': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && plannedGames().length !== 0) {
                            if (!gettingPlannedGames() && !noMorePlannedGamesToGet) {
                                getPlannedGames();
                            }
                        }

                        break;
                    }
                    case 'live': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && liveGames().length !== 0) {
                            if (!gettingLiveGames() && !noMoreLiveGamesToGet) {
                                getLiveGames();
                            }
                        }

                        break;
                    }
                    case 'highlights': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && highlights().length !== 0) {
                            if (!gettingHighlights() && !noMoreHighlightsToGet) {
                                getHighlights();
                            }
                        }

                        break;
                    }
                    case 'replays': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && replays().length !== 0) {
                            if (!gettingReplays() && !noMoreReplaysToGet) {
                                getReplays();
                            }
                        }
                        break;
                    }  
                    case 'fixtures': {
                        if (currentActiveTabId === 1) {
                            if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && comingGames().length !== 0) {
                                if (!gettingGamesComing() && !noMoreGamesToGetComing) {
                                    getGames(1);
                                }
                            }
                        } else {
                            if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && pastGames().length !== 0) {
                                if (!gettingGamesPast() && !noMoreGamesToGetPast) {
                                    getGames(2);
                                }
                            }
                        }
                        break;
                    }
                    case 'posts': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && posts().length !== 0) {
                            if (!gettingMoreInfoPosts && !noMoreInfoPostsToGet) {
                                gettingMoreInfoPosts = true;

                                var infoItemId = posts().length ? posts()[posts().length - 1].InfoItemID : 0;

                                switch (postsFilterType()) {
                                    case 0:
                                        datamanager.getMoreClubInfoItems(clubId, infoItemId, {
                                            success: function (json) {
                                                gettingMoreInfoPosts = false;

                                                if (json.length === 0) {
                                                    noMoreInfoPostsToGet = true;
                                                } else {
                                                    var underlayingArray = posts();

                                                    for (var i = 0; i < json.length; i++) {
                                                        underlayingArray.push(json[i]);
                                                    }

                                                    posts.valueHasMutated();
                                                }
                                            },
                                            error: function (error) {

                                            }
                                        });
                                        break;
                                    case 1:
                                        datamanager.getMoreManagedClubInfoItems(clubId, infoItemId, true, {
                                            success: function (json) {
                                                gettingMoreInfoPosts = false;

                                                if (json.length === 0) {
                                                    noMoreInfoPostsToGet = true;
                                                } else {

                                                    var underlayingArray = posts();

                                                    for (var i = 0; i < json.length; i++) {
                                                        underlayingArray.push(json[i]);
                                                    }

                                                    posts.valueHasMutated();
                                                }
                                            },
                                            error: function (error) {

                                            }
                                        });
                                        break;
                                    case 2:
                                        datamanager.getMoreManagedClubInfoItems(clubId, infoItemId, false, {
                                            success: function (json) {
                                                gettingMoreInfoPosts = false;

                                                if (json.length === 0) {
                                                    noMoreInfoPostsToGet = true;
                                                } else {

                                                    var underlayingArray = posts();

                                                    for (var i = 0; i < json.length; i++) {
                                                        underlayingArray.push(json[i]);
                                                    }

                                                    posts.valueHasMutated();
                                                }
                                            },
                                            error: function (error) {

                                            }
                                        });
                                        break;
                                }
                            }
                        }
                        break;
                    }
                }
            },

            showTeamFeedDetails = function (data) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.teamfeeddetails + '/' + data.TeamID + '/' + data.TeamFeedItemID + '/' + data.TeamFeedItemTypeID;
                    },
                    toClick: function () {
                        if (memberIsLoggedIn())
                            router.navigateTo(config.hashes.teamfeeddetails + '/' + data.TeamID + '/' + data.TeamFeedItemID + '/' + data.TeamFeedItemTypeID);
                    }
                };
                return navigationItem;
            },

            showRegistration = function () {
                alert(teamAdminTexts.TeamCreateOnlyInApp);
            },

            followTeam = function (data) {
                router.navigateTo(config.hashes.team + '/' + data.TeamID);
            },

            followTheTeam = function (data, event) {
                // I know, ugly hack to prevent the button from being pressed again
                if ($(event.target).hasClass('btn-gray-inverted'))
                    return;

                var teamID = 0;

                if (data.ItemID)
                    teamID = data.ItemID;
                else if (data.TeamID)
                    teamID = data.TeamID;

                shell.showProgressIndicator(MemberTexts.Following);

                datamanager.followTeam(teamID)
                    .then(function (json) {
                        shell.hideProgressIndicator();

                        console.log(json);

                        if (json === 0) {
                            // Succesful follow
                        } else {
                            // Request
                            alert('Förfrågan skickad! För att följa detta lag måste den godkännas av en lagadministratör.');
                        }

                        $(event.target).removeClass('btn-blue').addClass('btn-gray-inverted').html(MemberTexts.Following);
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    });
            },            

            navigateToEditClub = function () {
                window.location.href = '/club/addedit/' + clubId;
            },

            navigateToClubAdmin = function () {
                router.navigateTo(config.hashes.clubadmin + '/' + clubId);
            },

            navigateToGame = function (game, callback) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.magazinegameview + '/' + game.GameID;
                    },
                    toClick: function () {
                        magazinegameview.setGameHeaderInfo(game);
                        router.navigateTo(config.hashes.magazinegameview + '/' + game.GameID);
                    }
                };
                return navigationItem;
            },

            //navigateToGame = function (game, callback) {
            //    magazinegameview.setGameHeaderInfo(game);
            //    router.navigateTo(config.hashes.magazinegameview + '/' + game.GameID);
            //},

            navigateToTeamView = function (selectedTeam) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.team + '/' + selectedTeam.TeamID;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.team + '/' + selectedTeam.TeamID);
                    }
                };
                return navigationItem;
            },

            navigateToTeam = function (item) {
                if (item.ItemID)
                    router.navigateTo(config.hashes.team + '/' + item.ItemID);
                else if (item.TeamID)
                    router.navigateTo(config.hashes.team + '/' + item.TeamID);
            },

            navigateToClubHome = function () {
                return createClubNavigationItem('start');
            },

            navigateToClubMagazine = function () {
                return createClubNavigationItem('magazine');
            },

            navigateToClubTeams = function () {
                return createClubNavigationItem('teams');
            },

            navigateToClubLiveStreams = function () {
                return createClubNavigationItem('livestreams');
            },

            navigateToClubPictures = function () {
                return createClubNavigationItem('pictures');
            },

            navigateToClubPosts = function () {
                return createClubNavigationItem('posts');
            },

            navigateToClubVideos = function () {
                return createClubNavigationItem('videos');
            },

            navigateToClubFixtures = function () {
                return createClubNavigationItem('fixtures');
            },

            navigateToClubPartners = function () {
                return createClubNavigationItem('partners');
            },

            navigateToClubPlay = function () {
                return createClubNavigationItem('play');
            },

            listInfoItems = function () {
                router.navigateTo(config.hashes.club + '/' + clubId + '/myposts');
            },            

            toggleComingClubGames = function () {
                currentActiveTabId = 1;
                window.scrollTo(0, 0);
                $('#clubToggleComingLeagueGames').addClass('active');
                $('#clubTogglePastLeagueGames').removeClass('active');

                $('#clubComingLeagueGamesList').show();
                $('#clubPastLeagueGamesList').hide();
            },

            togglePastClubGames = function () {
                currentActiveTabId = 2;
                window.scrollTo(0, 0);
                $('#clubToggleComingLeagueGames').removeClass('active');
                $('#clubTogglePastLeagueGames').addClass('active');

                $('#clubComingLeagueGamesList').hide();
                $('#clubPastLeagueGamesList').show();
            },

            toggleMoreItemList = function () {
                $('.moreMenuItemsList').toggleClass('hiddenOnWideDisplay');
            },                       

            createClubNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.club + '/' + clubId + '/' + endPath;
                    },
                    toClick: function () {
                        $('.moreMenuItemsList').addClass('hiddenOnWideDisplay');

                        router.navigateTo(config.hashes.club + '/' + clubId + '/' + endPath);
                    }
                };
            },

            createInfoItem = function () {
                // First parameter is the enum, 3 is Club
                // Second parameter is the ID of the entity, in this case the ClubId
                // Third parameter is used if we are editing an item, in this case we pass 0

                infoitem.activate(3, clubId, 0, null, infoItemCallback);
            },

            editInfoItem = function (data) {
                // First parameter is the enum, 3 is Club
                // Second parameter is the ID of the entity, if we are editing an item we do not need to pass this in
                // Third parameter is used if we are editing an item

                infoitem.activate(data.InfoItemTypeID, 0, data.InfoItemID, null, infoItemCallback);
            },

            deleteInfoItem = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                console.log(data);

                if (r === true) {                    
                    datamanager.deleteInfoItem(data.InfoItemID, data.InfoItemTypeID, {
                        success: function (json) {
                            var existingItem = ko.utils.arrayFirst(posts(), function (line) {
                                return line.InfoItemID === data.InfoItemID;
                            });

                            if (existingItem)
                                posts.remove(existingItem);                            
                        },
                        error: function (error) {
                            alert('Ett fel upstod');

                            console.log(error);
                        }
                    });
                } 
            },

            infoItemCallback = function () {
                reloadInfoItems();                
            },

            matchesFilterQuery = function (team) {
                if (filterString())
                    return team.Name.toLowerCase().indexOf(filterString().toLowerCase()) !== -1;
                else
                    return true;
            },

            navigateToTeams = function () {
                router.navigateTo(config.hashes.club + '/' + clubId + '/teams');
            },

            navigateToInfoItem = function (data, event) {
                // Because info items has nested context menu, we need to prevent the bubbling when the context menu is clicked
                if ($(event.target).hasClass('preventBubble') === false) {
                    router.navigateTo(config.hashes.infoitemdetails + '/' + data.InfoItemID);
                }
            },

            navigateToLeague = function (data) {
                if (memberIsLoggedIn()) {
                    router.navigateTo(config.hashes.leaguesite + '/' + data.LeagueID);
                } else {
                    router.navigateTo(config.hashes.leaguesite + '/' + data.LeagueID);
                }
            },

            navigateToSportswikEditClub = function () {
                router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/edit');
            },

            navigateToDeepLink = function (data, event) {
                navigation.navigateToDeepLink(data);
            },

            navigateToMagazineGameView = function (selectedGame) {
                var navigationItem;

                if (selectedGame.GameID !== 0) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.magazinegameview + '/' + selectedGame.GameID;
                        },
                        toClick: function () {
                            magazinegameview.setGameHeaderInfo(selectedGame.GameHeaderInfo);
                            router.navigateTo(config.hashes.magazinegameview + '/' + selectedGame.GameID);
                        }
                    };
                }

                else {
                    navigationItem = {
                        getHrefString: function () {
                            return "";
                        },
                        toClick: function () {
                        }
                    };
                }

                return navigationItem;
            },

            navigateToPicture = function (picture) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.livedetails + '/' + picture.GameID + '/' + picture.PictureID + '/2';
                    },
                    toClick: function () {
                        if (memberIsLoggedIn()) {
                            router.navigateTo(config.hashes.livedetails + '/' + picture.GameID + '/' + picture.PictureID + '/2');
                        } else {
                            alert(MemberTexts.SignUpRequired);
                        }

                    }
                };
                return navigationItem;
            },

            navigateToVideo = function (video) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.livedetails + '/' + video.GameID + '/' + video.VideoID + '/5';
                    },
                    toClick: function () {
                        if (memberIsLoggedIn()) {
                            router.navigateTo(config.hashes.livedetails + '/' + video.GameID + '/' + video.VideoID + '/5');
                        } else {
                            alert(MemberTexts.SignUpRequired);
                        }
                    }
                };
                return navigationItem;
            },

            styleBlurbs = function (json) {
                for (var i = 0; i < json.length; i++) {
                    json[i].isHalfPageLeft = false;
                    json[i].isHalfPageRight = false;
                }

                for (i = 0; i < json.length - 1; i++) {
                    if (_.contains(blurbsSuitableForHalfPage, json[i].MagazineBlurbTypeID) && _.contains(blurbsSuitableForHalfPage, json[i + 1].MagazineBlurbTypeID)) {
                        json[i].isHalfPageLeft = true;
                        json[i + 1].isHalfPageRight = true;

                        i = i + 1;

                        if (i > json.length - 2) {
                            break;
                        }
                    }
                }
            },            

            hidePreloader = function () {
                $('#club-view-preloader').hide();
                $('#club-view-afterloaded').show();

                if (shell.showAdminView()) {
                    $(".innebandy-special").each(function () {
                        $(this).removeClass('innebandy-special');
                    });
                }
            },

            showPreloader = function () {
                $('#club-view-preloader').show();
                $('#club-view-afterloaded').hide();
            };

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,            
            breadCrumb: breadCrumb, 

            clubHeader: clubHeader,
            initClubModel: initClubModel,
            initClubPicsAndVideosModel: initClubPicsAndVideosModel,
            initClubPartnersModel: initClubPartnersModel,
            initPlayPage: initPlayPage,

            gettingGamesComing: gettingGamesComing,            
            gettingGamesPast: gettingGamesPast,
            gettingPictures: gettingPictures,
            gettingVideos: gettingVideos,
            gettingHighlights: gettingHighlights,
            gettingReplays: gettingReplays,
            gettingLiveGames: gettingLiveGames,
            gettingPlannedGames: gettingPlannedGames,

            blurbsInFeed: blurbsInFeed,                        

            pictures: pictures,
            videos: videos,
            highlights: highlights,
            replays: replays,
            liveGames: liveGames,
            plannedGames: plannedGames,

            sports: sports,
            genders: genders,            
            seasons: seasons,
            pastGames: pastGames,
            comingGames: comingGames,
            partnerFeaturesEnabled: partnerFeaturesEnabled, 
            filteredSports: filteredSports,
            filteredGenders: filteredGenders,
            filteredTeams: filteredTeams,            
            clubTeamsFiltered: clubTeamsFiltered,
            posts: posts,            
            postsFilterType: postsFilterType,

            deleteClub: deleteClub,
            searchTeams: searchTeams,
            searchTeamsKeyDown: searchTeamsKeyDown,
            clearSelectedSport: clearSelectedSport,
            clearSelectedGender: clearSelectedGender,
            selectSport: selectSport,
            selectGender: selectGender,
            selectSeason: selectSeason,
            memberIsSportswikAdmin: memberIsSportswikAdmin,
            initInfoItem: initInfoItem,
            filterString: filterString,
            activeTeamsTab: activeTeamsTab,

            showTeamFeedDetails: showTeamFeedDetails,
            showRegistration: showRegistration,
            followTeam: followTeam,
            followTheTeam: followTheTeam,
            createInfoItem: createInfoItem,
            editInfoItem: editInfoItem,
            deleteInfoItem: deleteInfoItem,
            listInfoItems: listInfoItems,
            
            navigateToEditClub: navigateToEditClub,
            navigateToClubAdmin: navigateToClubAdmin,
            navigateToClubPartners: navigateToClubPartners,
            navigateToGame: navigateToGame,
            navigateToTeamView: navigateToTeamView,
            navigateToTeam: navigateToTeam,
            navigateToClubHome: navigateToClubHome,
            navigateToClubMagazine: navigateToClubMagazine,
            navigateToClubTeams: navigateToClubTeams,
            navigateToClubLiveStreams: navigateToClubLiveStreams,
            navigateToClubPictures: navigateToClubPictures,
            navigateToClubPosts: navigateToClubPosts,
            navigateToClubVideos: navigateToClubVideos,
            navigateToClubFixtures: navigateToClubFixtures,  
            navigateToClubPlay: navigateToClubPlay,
            navigateToLeague: navigateToLeague,
            navigateToMagazineGameView: navigateToMagazineGameView,
            navigateToPicture: navigateToPicture,
            navigateToVideo: navigateToVideo,
            navigateToTeams: navigateToTeams,
            navigateToInfoItem: navigateToInfoItem,
            navigateToSportswikEditClub: navigateToSportswikEditClub,
            navigateToDeepLink: navigateToDeepLink,

            filterPosts: filterPosts,
            matchesFilterQuery: matchesFilterQuery,                        

            togglePastClubGames: togglePastClubGames,
            toggleComingClubGames: toggleComingClubGames,
            toggleMoreItemList: toggleMoreItemList
        };
    });;
define('viewmodels/vm.clubadmin',
    ['ko', 'underscore', 'config', 'viewmodels/vm.shell', 'viewmodels/vm.imagecropper', 'viewmodels/vm.appconfig', 'router', 'helpers/sw.utils', 'messenger', 'datamanager'],
    function (ko, _, config, shell, imagecropper, appconfig, router, utils, messenger, datamanager) {
        var clubId = 0,
            clubPartnerId = ko.observable(0),
            clubHeaderInfo = ko.observable(),
            clubAdminInfo = ko.observable(),
            clubForEditView = ko.observable(),
            currentPage = ko.observable(),
            teams = ko.observableArray(),
            admins = ko.observableArray(),
            partners = ko.observableArray(),
            genders = ko.observableArray(),
            countries = ko.observableArray(),
            seasons = ko.observableArray(),
            clubstaff = ko.observableArray(),

            liveStreamPaymentRows = ko.observableArray(),
            liveStreamGamePaymentRows = ko.observableArray(),
            liveStreamTeamPaymentRows = ko.observableArray(),
            payoutSummaryRows = ko.observableArray(),

            initClubLiveStreamStatistics = ko.observable(),
            initClubBillboard = ko.observable(),
            partnerForEditView = ko.observable(),
            selectedSeasonId = ko.observable(0),
            selectedTeamStaffGender = ko.observable(1),
            selectedTeamGender = ko.observable(1),
            selectedActionType = ko.observable(1),
            selectedTeamAgeCategory = ko.observable(0),
            selectedTeamForBannerUpload = '',
            teamSearchString = ko.observable('-'),

            searchAdminParams = ko.observable(),

            selectedLiveStreamTeamAgeCategory = ko.observable(0),
            selectedLiveStreamTeamGender = ko.observable(1),
            liveStreamTeamSearchString = ko.observable('-'),
            bannerElementForPreview = '',
            partnerTypeId = 0,
            imageAspectX = 0,
            imageAspectY = 0,
            useRoundImage = false,
            imagePreviewId,

            activate = function (routeData, callback) {
                routeData.subview = 'teams';
                messenger.publish.viewModelActivated();

                activatesubview(routeData);
            },

            activatesubview = function (routeData, callback) {
                if (routeData.Id !== undefined) {
                    clubId = Number(routeData.Id);
                }

                if (routeData.itemId !== undefined) {
                    clubPartnerId(Number(routeData.itemId));
                } else {
                    clubPartnerId(0);
                }

                var currentView = routeData.subview;
                currentViewName = 'clubadmin-' + currentView;
                currentPage(currentView);

                $('.clubadmin-subview').hide();
                $('#clubadmin-' + currentView).show();

                if (clubHeaderInfo() !== undefined) {
                    if (clubHeaderInfo().ClubID !== clubId) {
                        teams([]);
                        admins([]);
                        partners([]);
                        clubstaff([]);
                        liveStreamPaymentRows([]);
                        liveStreamGamePaymentRows([]);
                        liveStreamTeamPaymentRows([]);
                        payoutSummaryRows([]);
                        clubAdminInfo('');
                        clubPartnerId(0);

                        getClubHeaderInfo();
                    }
                }
                else {
                    getClubHeaderInfo();
                }

                switch (currentView) {
                    case 'start':
                        {
                            // TODO
                        }
                        break;
                    case 'teams':
                        {
                            //getClubTeamInfo();
                            getClubAdminInfo();

                            if (genders().length === 0) {
                                datamanager.getGenders({
                                    success: function (model) {
                                        genders([]);

                                        var underlayingArray = genders();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        genders.valueHasMutated();
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            }

                            if (seasons().length === 0) {
                                datamanager.getSeasons({
                                    success: function (model) {
                                        seasons([]);

                                        var underlayingArray = seasons();

                                        for (var j = 0; j < model.length; j++) {
                                            underlayingArray.push(model[j]);

                                            if (model[j].IsDefault) {
                                                $('#clubAdminSeasonText').text(model[j].SeasonName);

                                                console.log(model[j].SeasonName);
                                            }

                                        }

                                        seasons.valueHasMutated();
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            }

                        }
                        break;
                    case 'partner':
                        {
                            datamanager.getClubPartner(clubPartnerId(), {
                                success: function (model) {
                                    partnerForEditView(model);
                                },
                                error: function (error) {

                                }
                            });
                        }
                        break;
                    case 'partners':
                        {
                            datamanager.getClubPartners(clubId, {
                                success: function (model) {
                                    partners([]);

                                    var underlayingArray = partners();

                                    for (var i = 0; i < model.length; i++) {
                                        underlayingArray.push(model[i]);
                                    }

                                    partners.valueHasMutated();
                                },
                                error: function (error) {
                                    alert(error);
                                }
                            });

                            datamanager.initClubBillboard(clubId, {
                                success: function (model) {
                                    initClubBillboard(model);
                                },
                                error: function (error) {
                                    alert(error);
                                }
                            });
                        }
                        break;
                    case 'admin':
                        {
                            clubstaff([]);

                            datamanager.initClubAdminSearch(clubId, {
                                success: function (model) {
                                    genders([]);
                                    countries([]);

                                    var underlayingArray = genders();

                                    for (var i = 0; i < model.Genders.length; i++) {
                                        underlayingArray.push(model.Genders[i]);
                                    }

                                    genders.valueHasMutated();

                                    underlayingArray = countries();

                                    for (var j = 0; j < model.Countries.length; j++) {
                                        underlayingArray.push(model.Countries[j]);
                                    }

                                    countries.valueHasMutated();

                                    searchAdminParams({
                                        Name: '',
                                        PersonalIdentityNumber: '',
                                        MobilePhoneNumber: '',
                                        MobileCountryId: model.DefaultMobileCountryID
                                    });
                                    
                                },
                                error: function (response) {
                                    alert(response);
                                }
                            });

                            //if (genders().length === 0) {
                            //    datamanager.getGenders({
                            //        success: function (model) {
                            //            genders([]);

                            //            var underlayingArray = genders();

                            //            for (var i = 0; i < model.length; i++) {
                            //                underlayingArray.push(model[i]);
                            //            }

                            //            genders.valueHasMutated();
                            //        },
                            //        error: function (response) {
                            //            alert(response);
                            //        }
                            //    });
                            //}
                        }
                        break;
                    case 'admins':
                        {
                            datamanager.getClubAdministrators(clubId, {
                                success: function (model) {
                                    admins([]);

                                    var underlayingArray = admins();

                                    for (var i = 0; i < model.length; i++) {
                                        underlayingArray.push(model[i]);
                                    }

                                    admins.valueHasMutated();

                                    $('#clubadmin-admins .preloader').hide();
                                    $('#clubadmin-admins .afterloaded').show();
                                },
                                error: function (error) {
                                    alert('Något gick fel');
                                    console.log(error);
                                }
                            });
                        }
                        break;
                    case 'stream':
                        {
                            if (genders().length === 0) {
                                datamanager.getGenders({
                                    success: function (model) {
                                        genders([]);

                                        var underlayingArray = genders();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        genders.valueHasMutated();
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            }

                            datamanager.initClubLiveStreamStatistics(clubId, {
                                success: function (model) {
                                    initClubLiveStreamStatistics(model);
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });

                            if (liveStreamPaymentRows().length === 0) {
                                datamanager.getClubAdminLiveStreamStatistics(clubId, {
                                    success: function (model) {
                                        liveStreamPaymentRows([]);

                                        var underlayingArray = liveStreamPaymentRows();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        liveStreamPaymentRows.valueHasMutated();
                                    },
                                    error: function (error) {
                                        console.log(error);
                                    }
                                });
                            }
                        }
                        break;
                    case 'edit':
                        datamanager.getClubForEditView(clubId, {
                            success: function (json) {
                                clubForEditView(json);
                            },
                            error: function (error) {
                                alert(error);
                            }
                        });
                        break;
                    case 'billboard':
                        {
                            datamanager.initClubBillboard(clubId, {
                                success: function (model) {
                                    initClubBillboard(model);

                                    console.log(model);
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        }
                        break;
                }
            },

            getClubHeaderInfo = function () {
                datamanager.getClubHeaderInfo(clubId, {
                    success: function (model) {
                        clubHeaderInfo(model);

                        removePreloader();
                    },
                    error: function (response) {
                    }
                });
            },

            getClubTeamInfo = function () {                
                shell.showProgressIndicator(MiscTexts.GettingInformation);
                teams([]);

                datamanager.getClubAdminTeamInfo(clubId, selectedSeasonId(), {
                    success: function (model) {
                        shell.hideProgressIndicator();

                        var underlayingArray = teams();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        teams.valueHasMutated();
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();

                        alert(response);
                    }
                });
            },

            getClubAdminInfo = function () {
                shell.showProgressIndicator(MiscTexts.GettingData);
                teams([]);

                datamanager.getClubAdminInfo(clubId, selectedSeasonId(), {
                    success: function (model) {
                        clubAdminInfo(model);

                        var underlayingArray = teams();

                        for (var i = 0; i < model.Teams.length; i++) {
                            underlayingArray.push(model.Teams[i]);
                        }

                        teams.valueHasMutated();

                        shell.hideProgressIndicator();
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();
                    }
                });
            },

            uploadTeamBannerClick = function (item, event) {
                bannerElementForPreview = event.target;
                selectedTeamForBannerUpload = item;

                $('#clubadmin-view .bannerFilePicker').focus().trigger('click');
            },

            removePreloader = function () {
                $('#clubadmin-view .main-preloader').hide();
                $('#clubadmin-view .main-afterloaded').show();
            },

            handleFileSelect = function (evt) {
                var f = evt.target.files[0];

                if (f.type.match('image.*')) {
                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var pictureBase64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            imagecropper.activate(pictureBase64data, imageAspectX, imageAspectY, useRoundImage, cropperCallback);
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },

            handlePartnerSelect = function (evt) {
                var f = evt.target.files[0];

                if (f.type.match('image.*')) {
                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var pictureBase64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            imagecropper.activate(pictureBase64data, imageAspectX, imageAspectY, useRoundImage, partnerCropperCallback);
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },

            handleLogoSelect = function (evt) {
                var f = evt.target.files[0];

                if (f.type.match('image.*')) {
                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var pictureBase64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            imagecropper.activate(pictureBase64data, imageAspectX, imageAspectY, useRoundImage, logoCropperCallback);
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },

            partnerCropperCallback = function (cropData, croppedData, base64data) {
                console.log(imagePreviewId);
                $('#' + imagePreviewId + ' .imageMaskContain').show();
                $('#' + imagePreviewId + ' .imageMaskContain').css('background-image', 'url(' + croppedData + ')');
                $('#' + imagePreviewId + ' img').hide();

                if (imagePreviewId === 'partner-preview-small') {
                    partnerForEditView().FileBase64Small = base64data;
                    partnerForEditView().SmallCropData = cropData;
                } else if (imagePreviewId === 'partner-preview-medium') {
                    partnerForEditView().FileBase64Medium = base64data;
                    partnerForEditView().MediumCropData = cropData;
                } else if (imagePreviewId === 'partner-preview-large') {
                    partnerForEditView().FileBase64Large = base64data;
                    partnerForEditView().LargeCropData = cropData;
                }
            },

            logoCropperCallback = function (cropData, croppedData, base64data) {
                $('#' + imagePreviewId + ' .imageMaskContain').show();
                $('#' + imagePreviewId + ' .imageMaskContain').css('background-image', 'url(' + croppedData + ')');
                $('#' + imagePreviewId + ' img').hide();

                clubForEditView().Base64Logo = base64data;
                clubForEditView().LogoCropData = cropData;
            },

            cropperCallback = function (cropData, croppedData, base64data) {
                $('#' + imagePreviewId + ' .imageMaskContain').show();
                $('#' + imagePreviewId + ' .imageMaskContain').css('background-image', 'url(' + croppedData + ')');
                $('#' + imagePreviewId + ' img').hide();

                if (imagePreviewId === 'club-billboard-landscape') {
                    initClubBillboard().Base64BillboardLandscape = base64data;
                    initClubBillboard().BillboardLandscapeCropData = cropData;
                }
                else {
                    initClubBillboard().Base64BillboardPortrait = base64data;
                    initClubBillboard().BillboardPortraitCropData = cropData;
                }
            },

            partnerDataSelected = function (base64Data, item) {
                item.css('background-image', 'url(' + 'data:image/jpg;base64,' + base64Data + ')');
            },

            selectSmallPartnerImageClick = function () {
                partnerTypeId = 1;

                $('#clubadmin-view .partnerImagePicker').focus().trigger('click');
            },

            selectMediumPartnerImageClick = function () {
                partnerTypeId = 2;

                $('#clubadmin-view .partnerImagePicker').focus().trigger('click');
            },

            selectLargePartnerImageClick = function () {
                partnerTypeId = 3;

                $('#clubadmin-view .partnerImagePicker').focus().trigger('click');
            },

            savePartner = function () {
                var formInstance = $(event.target).closest('form').parsley();

                if (formInstance.validate()) {
                    shell.showProgressIndicator(MiscTexts.Saving);

                    if (partnerForEditView().ClubPartnerID === 0) {
                        partnerForEditView().ClubID = clubId;

                        datamanager.insertClubPartner(partnerForEditView())
                            .then(function (json) {
                                shell.hideProgressIndicator();
                                shell.showToast(MiscTexts.Saved);

                                router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/partners');
                            })
                            .fail(function (error) {
                                shell.hideProgressIndicator();
                            });
                    }
                    else {
                        datamanager.updateClubPartner(partnerForEditView())
                            .then(function (json) {
                                shell.hideProgressIndicator();
                                shell.showToast(MiscTexts.Saved);

                                router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/partners');
                            })
                            .fail(function (error) {
                                shell.hideProgressIndicator();
                            });
                    }
                }
            },

            saveClub = function () {
                var formInstance = $(event.target).closest('form').parsley();

                if (formInstance.validate()) {
                    shell.showProgressIndicator(MiscTexts.Saving);

                    datamanager.updateClub(clubForEditView())
                        .then(function (json) {
                            shell.hideProgressIndicator();
                            shell.showToast(MiscTexts.Saved);

                            clubHeaderInfo('');

                            router.navigateTo(config.hashes.clubadmin + '/' + clubId);
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();
                        });
                }
            },

            deletePartner = function () {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteClubPartner(clubPartnerId(), {
                        success: function (json) {
                            router.navigateBack();
                        },
                        error: function (e) {
                            alert(e);
                        }
                    });
                }
            },

            deleteAdmin = function (item) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteClubAdministrator(item.ClubAdministratorID, {
                        success: function (json) {
                            admins.remove(function (s) {
                                return s.ClubAdministratorID === item.ClubAdministratorID;
                            });
                        },
                        error: function (e) {
                            alert(e);
                        }
                    });
                }
            },

            updatePartnerBillboard = function () {
                var error = false;

                if (initClubBillboard().BillboardLandscapePicture === null && initClubBillboard().Base64BillboardLandscape.length === 0) {
                    error = true;
                }

                //if (initClubBillboard().BillboardPortraitPicture === null && initClubBillboard().Base64BillboardPortrait.length === 0) {
                //    error = true;
                //}

                if (error) {
                    alert(clubAdminTexts.LandscapeAndPortraitRequired);
                    return;
                }


                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.updateClubBillboard(initClubBillboard(), {
                    success: function (json) {
                        console.log('Woho!');

                        shell.hideProgressIndicator();

                        router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/partners');
                    },
                    error: function (error) {
                        console.log(error);

                        shell.hideProgressIndicator();
                    }
                });
            },

            cancelPartnerBillboard = function () {
                router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/partners');
            },

            deletePartnerBillboard = function () {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteClubBillboard(clubId, {
                        success: function (json) {
                            router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/partners');
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            addNewPartner = function () {
                router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/partner');
            },

            editBillboards = function () {
                router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/billboard');
            },

            selectPicture = function (aspectX, aspectY, roundImage, data, event) {
                imageAspectX = aspectX;
                imageAspectY = aspectY;
                useRoundImage = roundImage;
                imagePreviewId = $(event.target).attr('data-container');

                $('#clubadmin-view .billboardFilePicker').focus().trigger('click');
            },

            selectPartnerPicture = function (aspectX, aspectY, roundImage, data, event) {
                imageAspectX = aspectX;
                imageAspectY = aspectY;
                useRoundImage = roundImage;
                imagePreviewId = $(event.target).attr('data-container');

                $('#clubadmin-view .partnerFilePicker').focus().trigger('click');
            },

            selectClubLogo = function (aspectX, aspectY, roundImage, data, event) {
                imageAspectX = aspectX;
                imageAspectY = aspectY;
                useRoundImage = roundImage;
                imagePreviewId = $(event.target).attr('data-container');

                $('#clubadmin-view .clubLogoFilePicker').focus().trigger('click');
            },

            navigateToClubAdminStart = function () {
                return createClubAdminNavigationItem('start');
            },

            navigateToClubAdminTeams = function () {
                return createClubAdminNavigationItem('teams');
            },

            navigateToClubAdminPartners = function () {
                return createClubAdminNavigationItem('partners');
            },

            navigateToClubAdminAdmins = function () {
                return createClubAdminNavigationItem('admins');
            },

            navigateToClubAdminStream = function () {
                return createClubAdminNavigationItem('stream');
            },

            navigateToAddAdmin = function () {
                return createClubAdminNavigationItem('admin');
            },

            createClubAdminNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.clubadmin + '/' + clubId + '/' + endPath;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/' + endPath);
                    }
                };
            },

            navigateToEditPartner = function (item) {
                return {
                    getHrefString: function () {
                        return config.hashes.clubadmin + '/' + clubId + '/partner/' + item.PartnerItemID;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/partner/' + item.PartnerItemID);
                    }
                };
            },

            editPartner = function (item) {
                router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/partner/' + item.PartnerItemID);
            },

            editClub = function () {
                router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/edit');
            },

            navigateToTeam = function (item) {
                router.navigateTo(config.hashes.team + '/' + item.TeamID);
            },

            navigateToClub = function () {
                router.navigateTo(config.hashes.club + '/' + clubId);
            },

            navigateToTeamAdmin = function (item) {
                router.navigateTo(config.hashes.teamadmin + '/' + item.TeamID);
            },

            navigateToConnectTeam = function (item) {
                router.navigateTo(config.hashes.teamadmin + '/' + item.TeamID + '/connect');
            },

            navigateToImport = function (item) {
                router.navigateTo(config.hashes.teamadmin + '/' + item.TeamID + '/members');
            },

            cleanup = function (cleanup) {

            },

            inviteAllTeamMembers = function (item, event) {
                console.log(item);

                if (item.ImportStatus !== 3) {
                    $(event.target).hide();
                    $(event.target).closest('.teamActionContainer').children().find('.teamActionInviteTeamMember').hide();
                } else {
                    $(event.target).closest('.teamActionContainer').hide();
                }

                shell.showProgressIndicator(MiscTexts.Sending);

                datamanager.inviteAllTeamMembers(item.TeamID, {
                    success: function () {
                        shell.hideProgressIndicator();
                        showToast(clubAdminTexts.InvitesSent);
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();

                        console.log(response);

                        alert(response);
                    }
                });
            },

            filteredTeams = ko.computed(function () {
                return ko.utils.arrayFilter(teams(), function (item) {
                    var match = true;

                    switch (selectedActionType()) {
                        case 2:
                            match = item.IsOnboarded === true;
                            break;
                        case 3:
                            match = item.IsOnboarded === false;
                            break;
                    }

                    if (match === false)
                        return false;

                    if (selectedTeamGender() > 1) {
                        match = item.GenderID === selectedTeamGender();

                        if (match === false)
                            return false;
                    }

                    if (selectedTeamAgeCategory() > 0) {
                        match = item.AgeCategoryID === selectedTeamAgeCategory();
                    }

                    if (teamSearchString() !== '-') {
                        match = false;
                        var s = teamSearchString().toLowerCase().replace(" ", "");

                        // Search the team name
                        match = item.TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1;

                        // Search the team alias if it is set
                        if (item.TeamAlias.toLowerCase().replace(" ", "").indexOf(s) !== -1)
                            match = true;

                        for (var i = 0; i < item.TeamStaff.length; i++) {
                            // Search TeamStaff for the name
                            if (item.TeamStaff[i].toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }

                        for (var j = 0; j < item.Leagues.length; j++) {
                            // Search Leagues for the TeamName
                            if (item.Leagues[j].TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }

                            // Search Leagues for the LeagueName
                            if (item.Leagues[j].LeagueName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }
                    }

                    return match;
                });
            }),

            liveStreamPaymentRowsFiltered = ko.computed(function () {
                return ko.utils.arrayFilter(liveStreamPaymentRows(), function (item) {
                    var match = true;

                    if (selectedLiveStreamTeamGender() > 1) {
                        match = item.Team.GenderID === selectedLiveStreamTeamGender();

                        if (match === false)
                            return false;
                    }

                    if (selectedLiveStreamTeamAgeCategory() > 0) {
                        match = item.AgeCategoryID === selectedLiveStreamTeamAgeCategory();

                        if (match === false)
                            return false;
                    }

                    if (liveStreamTeamSearchString() !== '-') {
                        match = false;
                        var s = liveStreamTeamSearchString().toLowerCase().replace(" ", "");

                        // Search the team name
                        match = item.Team.TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1;

                        // Search the team alias if it is set
                        if (item.Team.TeamAlias.toLowerCase().replace(" ", "").indexOf(s) !== -1)
                            match = true;

                        for (var i = 0; i < item.Team.TeamStaffForClubTeamView.length; i++) {
                            // Search TeamStaff for the name
                            if (item.Team.TeamStaffForClubTeamView[i].FullName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }

                        for (var j = 0; j < item.Team.Leagues.length; j++) {
                            // Search Leagues for the TeamName
                            if (item.Team.Leagues[j].TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }

                            // Search Leagues for the LeagueName
                            if (item.Team.Leagues[j].LeagueName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }
                    }

                    return match;
                });
            }),

            onSearchTeamsKeyDown = function (data, event) {
                var s = $(event.target).val();

                if (s.length === 0)
                    s = '-';

                teamSearchString(s);
            },

            onSearchLiveStreamTeamsKeyDown = function (data, event) {
                var s = $(event.target).val();

                if (s.length === 0)
                    s = '-';

                liveStreamTeamSearchString(s);
            },

            showLiveStreamPaymentDetails = function (data) {
                shell.showProgressIndicator(MiscTexts.GettingData);

                if (data.LiveStreamSubscriptionID === 1) {
                    // Game ticket
                    datamanager.getLiveStreamStatisticsPerGame(data.TeamID, {
                        success: function (json) {
                            shell.hideProgressIndicator();
                            liveStreamGamePaymentRows([]);

                            var underlayingArray = liveStreamGamePaymentRows();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            liveStreamGamePaymentRows.valueHasMutated();

                            $('#clubadmin-view .gameDetailsOverview').show();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            console.log(error);
                        }
                    });
                }
                else {
                    datamanager.getLiveStreamStatisticsPerTeam(data.TeamID, {
                        success: function (json) {
                            shell.hideProgressIndicator();
                            liveStreamTeamPaymentRows([]);

                            var underlayingArray = liveStreamTeamPaymentRows();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            liveStreamTeamPaymentRows.valueHasMutated();

                            $('#clubadmin-view .subscriptionDetailsOverview').show();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            console.log(error);
                        }
                    });
                }
            },

            showLiveStreamPayoutDetails = function (data) {
                shell.showProgressIndicator(MiscTexts.GettingData);

                datamanager.getTeamPayoutSummary(data.TeamID, data.LiveStreamSubscriptionID, {
                    success: function (json) {
                        shell.hideProgressIndicator();
                        payoutSummaryRows([]);

                        if (json.length > 0) {
                            var underlayingArray = payoutSummaryRows();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            payoutSummaryRows.valueHasMutated();

                            $('#clubadmin-view .payoutSummaryOverview').show();
                        }                        
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            selectSeason = function (item, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                selectedSeasonId(item.SeasonID);

                getClubTeamInfo();
            },

            selectActionType = function (actionType, data, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                selectedActionType(actionType);
            },

            selectTeamGender = function (item, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                selectedTeamGender(item.GenderID);
            },

            selectLiveStreamTeamGender = function (item, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                selectedLiveStreamTeamGender(item.GenderID);
            },

            selectTeamStaffGender = function (item, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                selectedTeamStaffGender(item.GenderID);
            },

            selectTeamAgeCategory = function (ageCategoryType, data, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                selectedTeamAgeCategory(ageCategoryType);
            },

            selectLiveStreamTeamAgeCategory = function (ageCategoryType, data, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                selectedLiveStreamTeamAgeCategory(ageCategoryType);
            },

            onKeyPressAllowNumeric = function (d, e) {
                return utils.isNumericOrDelete(e);
                /*return e.metaKey || e.which <= 0 || e.which === 8 || /[0-9]/.test(String.fromCharCode(e.which));*/
            },

            searchTeamStaff = function (data) {
                shell.showProgressIndicator(MiscTexts.Searching);

                datamanager.searchClubTeamAdmin(clubId, data.Name, data.PersonalIdentityNumber, selectedTeamStaffGender(), data.MobilePhoneNumber, data.MobileCountryId)
                    .then(function (json) {
                        $('.clubAdminSearch.postSearch').show();
                        clubstaff([]);

                        var underlayingArray = clubstaff();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        clubstaff.valueHasMutated();
                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        alert(error.responseText);

                        shell.hideProgressIndicator();
                    });
            },

            searchAdminByPhoneNumber = function (data) {  
                if (data.MobilePhoneNumber.length === 0)
                    return;

                shell.showProgressIndicator(MiscTexts.Searching);

                datamanager.searchClubTeamAdminByPhoneNumber(clubId, data.MobilePhoneNumber, data.MobileCountryId)
                    .then(function (json) {
                        $('.clubAdminSearch.postSearch').show();
                        clubstaff([]);

                        var underlayingArray = clubstaff();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        clubstaff.valueHasMutated();
                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        alert(error.responseText);

                        shell.hideProgressIndicator();
                    });
            }, 
            handleTeamBannerSelect = function (evt) {
                var files = evt.target.files;

                for (var i = 0; i < files.length; i++) {
                    var f = files[i];

                    if (!f.type.match('image.*')) {
                        continue;
                    }

                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var base64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);
                            var teamId = selectedTeamForBannerUpload.TeamID;

                            datamanager.updateTeamBanner(teamId, base64data)
                                .then(function (json) {
                                    selectedTeamForBannerUpload = '';
                                    bannerElementForPreview = '';
                                })
                                .fail(function (error) {
                                    alert(error.responseText);
                                });

                            teamBannerDataSelected(teamId, base64data);
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },

            teamBannerDataSelected = function (teamId, base64Data) {
                //var itemRowID = "#memberRow-" + teamRoleID + "-" + teamItemID;

                $(bannerElementForPreview).css('background-image', 'url(' + 'data:image/jpg;base64,' + base64Data + ')');
                //$(itemRowID + " .testBanner").css('background-image', 'url(' + 'data:image/jpg;base64,' + base64Data + ')');
            },

            clubTeamStaffClicked = function (item) {
                var r = confirm(clubAdminTexts.AreYouSureYouWantToAdd + item.FullName + clubAdminTexts.AsClubAdministrator);

                if (r === true) {
                    datamanager.insertClubAdministrator(clubId, item.MemberID)
                        .then(function (json) {
                            admins([]);

                            $('.clubAdminSearch.postSearch').hide();

                            router.navigateTo(config.hashes.clubadmin + '/' + clubId + '/admins');
                        })
                        .fail(function (error) {
                            alert(error.responseText);
                        });
                }
            },

            closeDetailsOverlay = function () {
                $('#clubadmin-view .gameDetailsOverview').hide();
            },

            closeSubscriptionsOverlay = function () {
                $('#clubadmin-view .subscriptionDetailsOverview').hide();
            },

            closePayoutSummaryOverlay = function () {
                $('#clubadmin-view .payoutSummaryOverview').hide();
            },

            init = function () {                                
                $(document).on('change', '#clubadmin-view .bannerFilePicker', function (evt) {
                    handleTeamBannerSelect(evt);
                    evt.target.value = '';
                });
                
                $(document).on('change', '#clubadmin-view .partnerFilePicker', function (evt) {
                    handlePartnerSelect(evt);
                    evt.target.value = '';
                });

                $(document).on('change', '#clubadmin-view .clubLogoFilePicker', function (evt) {
                    handleLogoSelect(evt);
                    evt.target.value = '';
                });

                $(document).on('change', '#clubadmin-view .billboardFilePicker', function (evt) {
                    handleFileSelect(evt);
                    evt.target.value = '';
                });
            };

        init();

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,

            onKeyPressAllowNumeric: onKeyPressAllowNumeric,
            selectTeamStaffGender: selectTeamStaffGender,
            selectLiveStreamTeamGender: selectLiveStreamTeamGender,
            searchTeamStaff: searchTeamStaff,
            searchAdminByPhoneNumber: searchAdminByPhoneNumber,
            clubTeamStaffClicked: clubTeamStaffClicked,
            closeDetailsOverlay: closeDetailsOverlay,
            closeSubscriptionsOverlay: closeSubscriptionsOverlay,
            closePayoutSummaryOverlay: closePayoutSummaryOverlay,

            filteredTeams: filteredTeams,
            onSearchTeamsKeyDown: onSearchTeamsKeyDown,
            onSearchLiveStreamTeamsKeyDown: onSearchLiveStreamTeamsKeyDown,
            admins: admins,
            partners: partners,
            genders: genders,
            countries: countries,
            seasons: seasons,
            clubstaff: clubstaff,
            clubHeaderInfo: clubHeaderInfo,
            currentPage: currentPage,
            clubPartnerId: clubPartnerId,
            clubAdminInfo: clubAdminInfo,
            liveStreamPaymentRowsFiltered: liveStreamPaymentRowsFiltered,
            liveStreamGamePaymentRows: liveStreamGamePaymentRows,
            liveStreamTeamPaymentRows: liveStreamTeamPaymentRows,
            payoutSummaryRows: payoutSummaryRows,
            initClubLiveStreamStatistics: initClubLiveStreamStatistics,
            initClubBillboard: initClubBillboard,
            partnerForEditView: partnerForEditView,
            clubForEditView: clubForEditView,

            showLiveStreamPaymentDetails: showLiveStreamPaymentDetails,
            showLiveStreamPayoutDetails: showLiveStreamPayoutDetails,

            saveClub: saveClub,
            savePartner: savePartner,
            deletePartner: deletePartner,
            deleteAdmin: deleteAdmin,            
            updatePartnerBillboard: updatePartnerBillboard,
            cancelPartnerBillboard: cancelPartnerBillboard,
            deletePartnerBillboard: deletePartnerBillboard,

            selectSmallPartnerImageClick: selectSmallPartnerImageClick,
            selectMediumPartnerImageClick: selectMediumPartnerImageClick,
            selectLargePartnerImageClick: selectLargePartnerImageClick,

            searchAdminParams: searchAdminParams,

            addNewPartner: addNewPartner,
            editBillboards: editBillboards,
            selectPicture: selectPicture,
            selectPartnerPicture: selectPartnerPicture,
            selectClubLogo: selectClubLogo,
            selectSeason: selectSeason,
            selectActionType: selectActionType,            
            selectTeamGender: selectTeamGender,
            selectTeamAgeCategory: selectTeamAgeCategory,
            selectLiveStreamTeamAgeCategory: selectLiveStreamTeamAgeCategory,
            
            uploadTeamBannerClick: uploadTeamBannerClick,
            inviteAllTeamMembers: inviteAllTeamMembers,

            editPartner: editPartner,
            editClub: editClub,

            navigateToClubAdminStart: navigateToClubAdminStart,
            navigateToClubAdminTeams: navigateToClubAdminTeams,
            navigateToClubAdminPartners: navigateToClubAdminPartners,
            navigateToClubAdminAdmins: navigateToClubAdminAdmins,
            navigateToClubAdminStream: navigateToClubAdminStream,
            navigateToEditPartner: navigateToEditPartner,
            navigateToTeam: navigateToTeam,
            navigateToConnectTeam: navigateToConnectTeam,
            navigateToImport: navigateToImport,

            navigateToClub: navigateToClub,
            navigateToAddAdmin: navigateToAddAdmin,
            navigateToTeamAdmin: navigateToTeamAdmin
        };
    });;
define('viewmodels/vm.clubselect',
    ['ko', 'router', 'presenter', 'messenger', 'datamanager', 'models/viewmodel', 'viewmodels/vm.shell', 'underscore'],
    function (ko, router, presenter, messenger, datamanager, viewmodel, shell, _) {
        var callbackMethod,
            showClubEmptyState = ko.observable(false),
            clubs = ko.observableArray(),
            newClub = ko.observable(),
            searchString = '',

            activate = function (callback) {
                callbackMethod = callback;

                $('#clubselect-view').show();
                $('#clubselect-view .fade-overlay').addClass('active');

                $('.clubselect-subview').hide();
                $('#clubselect-clubs').show();
            },

            addClub = function () {
                $('.clubselect-subview').hide();
                $('#clubselect-new').show();

                newClub({ 'Name': searchString });
            },

            saveClub = function (data) {
                var formInstance = $('#newClubForm').parsley();

                if (formInstance.validate() === false)
                    return;

                $('#clubselect-view').hide();
                $('#clubselect-view .fade-overlay').removeClass('active');

                if (callbackMethod)
                    callbackMethod(0, data.Name);
            },

            cancelAddClub = function () {
                $('.clubselect-subview').hide();
                $('#clubselect-clubs').show();
            },

            selectClub = function (data) {
                $('#clubselect-view').hide();
                $('#clubselect-view .fade-overlay').removeClass('active');

                if (callbackMethod)
                    callbackMethod(data.EntityID, data.Title);
            },

            searchClubsKeyUp = function (data, event) {
                searchString = $(event.target).val();

                if (searchString.length > 2) {
                    showClubEmptyState(true);

                    datamanager.searchClubs(searchString, {
                        success: function (model) {
                            clubs([]);

                            var underlayingTeamFeedArray = clubs();

                            for (var i = 0; i < model.length; i++) {
                                underlayingTeamFeedArray.push(model[i]);
                            }

                            clubs.valueHasMutated();
                        },
                        error: function (response, xhr) {
                            console.log(response);
                        }
                    });
                }
                else {
                    showClubEmptyState(false);
                    clubs([]);
                }
            },

            closeDialog = function () {
                $('#clubselect-view').hide();
                $('#clubselect-view .fade-overlay').removeClass('active');
            };

        return {
            activate: activate,
            closeDialog: closeDialog,

            clubs: clubs,
            newClub: newClub,
            saveClub: saveClub,
            cancelAddClub: cancelAddClub,

            showClubEmptyState: showClubEmptyState,
            addClub: addClub,
            selectClub: selectClub,
            searchClubsKeyUp: searchClubsKeyUp
        };
    });;
define('viewmodels/vm.competition',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'underscore', 'viewmodels/vm.magazinegameview'],
    function ($, ko, config, router, messenger, datamanager, _, magazinegameview) {

        var competitionId = 0,
            currentViewName = '',
            lastScrollPosition = 0,
            blurbsSuitableForHalfPage = [0, 1, 9, 12, 17, 18, 23, 40, 41, 50, 901, 903, 904, 905],
            selectedLeagueId = 0,
            selectedRound = 0,
            selectedLeagueTableId = 0,

            competitionHeader = ko.observable(),
            initCompetitionModel = ko.observable(),
            blurbsInFeed = ko.observableArray(),
            liveStreamBlurbsInFeed = ko.observableArray(),
            leagueTabs = ko.observableArray(),
            leagueTableTabs = ko.observableArray(),
            games = ko.observableArray(),
            teams = ko.observableArray(),
            leagueTableRows = ko.observableArray(),
            gameRounds = ko.observableArray(),
            tableStatisticsBlurb = ko.observable(),


            gettingMagazineBlurbs = ko.observable(false),
            noMoreMagazineBlurbsToGet = ko.observable(false),

            gettingLiveStreamPages = ko.observable(false),
            noMoreLiveStreamPagesToGet = ko.observable(false),

            currentTab = '',
            currentPage = ko.observable(''),

            activate = function (routeData, callback) {
                routeData.subview = 'start';
                currentTab = routeData.subview;
                messenger.publish.viewModelActivated();

                if (routeData.Id !== undefined) {
                    competitionId = routeData.Id;
                }

                activatesubview(routeData);
            },

            activatesubview = function (routeData, callback) {
                if (competitionHeader() === undefined || routeData.Id !== undefined && competitionHeader() !== undefined && competitionHeader().CompetitionID !== Number(routeData.Id)) {
                    clearObservables();
                }

                if (routeData.Id !== undefined) {
                    competitionId = routeData.Id;
                }

                var currentView = routeData.subview;
                currentViewName = 'competition-' + currentView;
                currentTab = routeData.subview;
                currentPage(currentView);

                $('.competition-subview').hide();
                $('#competition-' + currentView).show();
                $('.moreMenuItemsList').addClass('hiddenOnWideDisplay');

                if (competitionHeader() === undefined || competitionHeader() === '') {
                    getCompetitionHeader(routeData, true);
                } else {
                    switch (currentTab) {
                        case 'start': {
                            if (initCompetitionModel() === undefined || initCompetitionModel() === '') {
                                showPreloader();

                                datamanager.initCompetition(competitionId, {
                                    success: function (model) {
                                        initCompetitionModel(model);

                                        styleBlurbs(model.MagazineBlurbs);

                                        window.scrollTo(0, 0);
                                        hidePreloader();
                                    },
                                    error: function (response, xhr) {
                                        hidePreloader();
                                    }
                                });
                            }
                            break;
                        }
                        case 'magazine': {
                            if (blurbsInFeed().length === 0) {
                                showPreloader();
                                getMagazineBlurbs();
                                window.scrollTo(0, 0);
                            }
                            else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'fixtures': {
                            if (leagueTabs().length === 0) {
                                showPreloader();

                                datamanager.initCompetitionFixtures(competitionId, {
                                    success: function (json) {
                                        console.log(json);

                                        var underlayingArray = leagueTabs();

                                        for (var i = 0; i < json.Tabs.length; i++) {
                                            underlayingArray.push(json.Tabs[i]);

                                            if (json.Tabs[i].IsDefault) {
                                                var gameRoundName = '';

                                                selectedLeagueId = json.Tabs[i].LeagueID;
                                                selectedRound = json.Tabs[i].CurrentGameRound;

                                                var underlayingRoundArray = gameRounds();

                                                for (var j = 0; j < json.Tabs[i].GameRounds.length; j++) {
                                                    underlayingRoundArray.push(json.Tabs[i].GameRounds[j]);

                                                    if (json.Tabs[i].GameRounds[j].GameRoundID === selectedRound) {
                                                        gameRoundName = json.Tabs[i].GameRounds[j].Name;
                                                    }
                                                }

                                                gameRounds.valueHasMutated();

                                                $('#gameRoundDropDownTitle').text(gameRoundName);
                                            }
                                        }

                                        leagueTabs.valueHasMutated();

                                        if (selectedLeagueId > 0)
                                            getGames();

                                        hidePreloader();
                                    },
                                    error: function (error) {
                                        hidePreloader();

                                        console.log(error);
                                    }
                                });

                                window.scrollTo(0, 0);
                            }
                            else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'teams': {
                            if (teams().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getCompetitionTeams(competitionId, {
                                    success: function (model) {
                                        teams(model);

                                        hidePreloader();
                                    },
                                    error: function (response) {
                                        hidePreloader();
                                    }
                                });
                            }
                            else {
                                hidePreloader();
                            }

                            break;
                        }
                        case 'livestreams': {
                            if (liveStreamBlurbsInFeed().length === 0) {
                                showPreloader();
                                getLiveStreamBlurbs();
                                window.scrollTo(0, 0);
                            }
                            else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'table': {
                            if (leagueTableTabs().length === 0) {
                                showPreloader();

                                datamanager.initCompetitionTable(competitionId, {
                                    success: function (json) {
                                        console.log(json);

                                        var underlayingArray = leagueTableTabs();

                                        for (var i = 0; i < json.Tabs.length; i++) {
                                            underlayingArray.push(json.Tabs[i]);

                                            if (json.Tabs[i].IsDefault) {
                                                selectedLeagueTableId = json.Tabs[i].LeagueID;
                                            }
                                        }

                                        leagueTableTabs.valueHasMutated();

                                        if (selectedLeagueTableId > 0)
                                            getLeagueTable();

                                        hidePreloader();
                                    },
                                    error: function (error) {
                                        hidePreloader();
                                    }
                                });
                            }
                        }
                    }
                }

                $(window).scroll(infiniteScrolling);
            },

            infiniteScrolling = function () {
                switch (currentTab) {
                    case 'magazine': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && blurbsInFeed().length !== 0) {
                            if (!gettingMagazineBlurbs() && !noMoreMagazineBlurbsToGet()) {
                                getMagazineBlurbs();
                            }
                        }
                        break;
                    }
                    case 'livestreams': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && liveStreamBlurbsInFeed().length !== 0) {
                            if (!gettingLiveStreamPages() && !noMoreLiveStreamPagesToGet()) {
                                getLiveStreamBlurbs();
                            }
                        }
                        break;
                    }
                }
            },

            clearObservables = function () {
                competitionHeader('');
                initCompetitionModel('');

                blurbsInFeed([]);
                liveStreamBlurbsInFeed([]);
                leagueTabs([]);
                leagueTableTabs([]);
                leagueTableRows([]);
                games([]);
                teams([]);

                noMoreLiveStreamPagesToGet(false);
                noMoreMagazineBlurbsToGet(false);

                gettingMagazineBlurbs(false);
                gettingLiveStreamPages(false);

                $('.competition-subview .afterSubViewLoaded').hide();
            },

            getMagazineBlurbs = function () {
                var lastPageInCache, lastGameTime;

                gettingMagazineBlurbs(true);

                //Loop through the current pages in the feed                
                var lastThreeBlurbTypes = [];

                if (blurbsInFeed().length !== 0) {
                    lastPageInCache = blurbsInFeed()[blurbsInFeed().length - 1];
                    gameIds = [];

                    for (var i = 0; i < blurbsInFeed().length; i++) {
                        //Exclude all blurbs that does not have a gameID (some 90X like "unpaid season ticket")
                        var _gameID = blurbsInFeed()[i].GameID;
                        if (_.isNumber(_gameID)) gameIds.push(_gameID);
                    }

                    if (blurbsInFeed().length > 2) {
                        for (i = blurbsInFeed().length - 3; i < blurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else if (blurbsInFeed().length > 1) {
                        for (i = 0; i < blurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else {
                        lastThreeBlurbTypes.push(blurbsInFeed()[0].MagazineBlurbTypeID);
                    }

                    lastGameTime = lastPageInCache.TimeStamp;
                }
                else {
                    blurbsInFeed.removeAll();
                    gameIds = null;
                    lastGameTime = new Date();
                }

                //Get the next three pages from the server
                datamanager.getCompetitionMagazineBlurbs(competitionId, moment(lastGameTime).utc().format('YYYY-MM-DD HH:mm:ss.SSS'), lastThreeBlurbTypes, gameIds)
                    .then(function (json) {
                        styleBlurbs(json);

                        var underlayingArray = blurbsInFeed();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        blurbsInFeed.valueHasMutated();
                        gettingMagazineBlurbs(false);

                        hidePreloader();
                        subViewLoaded();

                        if (json.length < 3 || blurbsInFeed().length === 0) {
                            noMoreMagazineBlurbsToGet(true);
                        }
                    })
                    .fail(function (error) {
                        gettingMagazineBlurbs(false);

                        subViewLoaded();
                    });

            },

            getLeagueTable = function () {
                leagueTableRows([]);

                datamanager.initLeagueTable(selectedLeagueTableId, {
                    success: function (model) {
                        tableStatisticsBlurb(model.Statistics);

                        if (model.LeagueTable.Rows) {
                            var underlayingArray = leagueTableRows();

                            for (var i = 0; i < model.LeagueTable.Rows.length; i++) {
                                underlayingArray.push(model.LeagueTable.Rows[i]);
                            }

                            leagueTableRows.valueHasMutated();
                        }

                        hidePreloader();
                        subViewLoaded();
                    },
                    error: function (error) {
                        alert(error);
                        subViewLoaded();
                    }
                });
            },

            styleBlurbs = function (json) {
                for (var i = 0; i < json.length; i++) {
                    json[i].isHalfPageLeft = false;
                    json[i].isHalfPageRight = false;
                }

                for (i = 0; i < json.length - 1; i++) {
                    if (_.contains(blurbsSuitableForHalfPage, json[i].MagazineBlurbTypeID) && _.contains(blurbsSuitableForHalfPage, json[i + 1].MagazineBlurbTypeID)) {
                        json[i].isHalfPageLeft = true;
                        json[i + 1].isHalfPageRight = true;

                        i = i + 1;

                        if (i > json.length - 2) {
                            break;
                        }
                    }
                }
            },

            getCompetitionHeader = function (routeData, callSubView) {
                datamanager.getCompetitionHeader(competitionId, {
                    success: function (model) {
                        competitionHeader(model);

                        hidePreloader();

                        if (callSubView)
                            activatesubview(routeData);
                    },
                    error: function (response, xhr) {
                        if (xhr.status === 403) {
                            router.navigateTo("/");
                        }

                        hidePreloader();
                    }
                });
            },

            selectLeague = function (data, event) {
                console.log(data);

                $('#competition-fixtures .league-tabs button').removeClass('active');

                $(event.target).addClass('active');

                selectedLeagueId = data.LeagueID;

                gameRounds([])
                games([]);
                selectedRound = data.CurrentGameRound;

                var gameRoundName = '';
                var underlayingArray = gameRounds();

                for (var i = 0; i < data.GameRounds.length; i++) {
                    underlayingArray.push(data.GameRounds[i]);

                    if (data.GameRounds[i].GameRoundID === selectedRound) {
                        gameRoundName = data.GameRounds[i].Name;
                    }
                }

                gameRounds.valueHasMutated();

                if (gameRounds().length > 0) {
                    $('#gameRoundDropDownTitle').text(gameRoundName);
                }

                getGames();
            },

            selectLeagueTable = function (data, event) {
                console.log(data);

                $('#competition-table .league-table-tabs button').removeClass('active');

                $(event.target).addClass('active');

                selectedLeagueTableId = data.LeagueID;

                getLeagueTable();
            },

            selectRound = function (data, event) {
                games([]);

                $('#gameRoundDropDownTitle').text(data.Name);

                selectedRound = data.GameRoundID;

                getGames();
            },

            followTeam = function (data) {
                router.navigateTo(config.hashes.team + '/' + data.TeamID);
            },

            getGames = function () {
                datamanager.getCompetitionGames(selectedLeagueId, 0, selectedRound, {
                    success: function (json) {
                        var underlayingArray = games();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        games.valueHasMutated();
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            getLiveStreamBlurbs = function () {
                gettingLiveStreamPages(true);

                //Loop through the current pages in the feed                
                var lastThreeBlurbTypes = [];
                var numberOfBlurbsInFeed = liveStreamBlurbsInFeed().length;

                if (liveStreamBlurbsInFeed().length !== 0) {
                    if (liveStreamBlurbsInFeed().length > 2) {
                        for (i = liveStreamBlurbsInFeed().length - 3; i < liveStreamBlurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(liveStreamBlurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else if (liveStreamBlurbsInFeed().length > 1) {
                        for (i = 0; i < liveStreamBlurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(liveStreamBlurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else {
                        lastThreeBlurbTypes.push(liveStreamBlurbsInFeed()[0].MagazineBlurbTypeID);
                    }
                } else {
                    liveStreamBlurbsInFeed.removeAll();
                }

                //Get the next three pages from the server                
                datamanager.getLeagueLivestreamBlurbs(competitionId, numberOfBlurbsInFeed, lastThreeBlurbTypes)
                    .then(function (json) {
                        styleBlurbs(json);

                        var underlayingArray = liveStreamBlurbsInFeed();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        liveStreamBlurbsInFeed.valueHasMutated();
                        gettingLiveStreamPages(false);

                        hidePreloader();
                        subViewLoaded();

                        if (json.length < 6) {
                            noMoreLiveStreamPagesToGet(true);
                        }

                        if (liveStreamBlurbsInFeed().length === 0) {
                            noMoreLiveStreamPagesToGet(true);
                        }

                    })
                    .fail(function (error) {
                        gettingLiveStreamPages(false);

                        subViewLoaded();
                    });
            },

            subViewLoaded = function () {
                $("#" + currentViewName + " .afterSubViewLoaded").show();
            },

            hidePreloader = function () {
                $('#competition-view .preloader').hide();
                $('#competition-view .afterloaded').show();
            },

            showPreloader = function () {
                $('#competition-view .preloader').show();
                $('#competition-view .afterloaded').hide();
            },

            navigateToCompetitionHome = function () {
                return createCompetitionNavigationItem('start');
            },

            navigateToCompetitionMagazine = function () {
                return createCompetitionNavigationItem('magazine');
            },

            navigateToCompetitionTable = function () {
                return createCompetitionNavigationItem('table');
            },

            navigateToCompetitionFixtures = function () {
                return createCompetitionNavigationItem('fixtures');
            },

            navigateToCompetitionTeams = function () {
                return createCompetitionNavigationItem('teams');
            },


            navigateToCompetitionLiveStreams = function () {
                return createCompetitionNavigationItem('livestreams');
            },

            navigateToCompetitionPictures = function () {
                return createCompetitionNavigationItem('pictures');
            },

            navigateToCompetitionVideos = function () {
                return createCompetitionNavigationItem('videos');
            },

            createCompetitionNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.competition + '/' + competitionId + '/' + endPath;
                    },
                    toClick: function () {
                        $('.moreMenuItemsList').addClass('hiddenOnWideDisplay');

                        router.navigateTo(config.hashes.competition + '/' + competitionId + '/' + endPath);
                    }
                };
            },            

            navigateToMagazineGameView = function (item) {
                return navigationItem = {
                    getHrefString: function () {
                        return "/" + config.hashes.magazinegameview + '/' + item.GameID;
                    },
                    toClick: function () {
                        magazinegameview.setGameHeaderInfo(item.GameHeaderInfo);
                        router.navigateTo("/" + config.hashes.magazinegameview + '/' + item.GameID);
                    }
                };
            },

            navigateToGame = function (game, callback) {
                navigationItem = {
                    getHrefString: function () {
                        return '/' + config.hashes.magazinegameview + '/' + game.GameID;
                    },
                    toClick: function () {
                        magazinegameview.setGameHeaderInfo(game);
                        router.navigateTo('/' + config.hashes.magazinegameview + '/' + game.GameID);
                    }
                };
                return navigationItem;
            },

            navigateToTeamView = function (selectedTeam) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.team + '/' + selectedTeam.TeamID;
                    },
                    toClick: function () {
                        if (selectedTeam.IsSportswikTeam) {
                            router.navigateTo('/' + config.hashes.team + '/' + selectedTeam.TeamID);
                        } else {
                            // Allow navigation if member is sportswik-admin
                            if (shell.currentMember.IsSportswikAdmin) {
                                router.navigateTo('/' + config.hashes.team + '/' + selectedTeam.TeamID);
                            } else {
                                alert(teamAdminTexts.TeamMissingTeamPage);
                            }
                        }

                    }
                };
                return navigationItem;
            },

            navigateToLeague = function (data) {
                router.navigateTo('/' + config.hashes.leaguesite + '/' + leagueId);
            },

            cleanup = function () {
                lastScrollPosition = $(window).scrollTop();                

                $(window).unbind('scroll', infiniteScrolling);
            };

        return {
            activate: activate,
            activatesubview: activatesubview,
            currentPage: currentPage,

            competitionHeader: competitionHeader,
            initCompetitionModel: initCompetitionModel,

            blurbsInFeed: blurbsInFeed,
            liveStreamBlurbsInFeed: liveStreamBlurbsInFeed,
            leagueTabs: leagueTabs,
            leagueTableTabs: leagueTableTabs,
            games: games,
            teams: teams,
            gameRounds: gameRounds,
            leagueTableRows: leagueTableRows,
            tableStatisticsBlurb: tableStatisticsBlurb,

            selectLeague: selectLeague,
            selectLeagueTable: selectLeagueTable,
            selectRound: selectRound,
            followTeam: followTeam,

            gettingLiveStreamPages: gettingLiveStreamPages,
            gettingMagazineBlurbs: gettingMagazineBlurbs,
            noMoreLiveStreamPagesToGet: noMoreLiveStreamPagesToGet,
            noMoreMagazineBlurbsToGet: noMoreMagazineBlurbsToGet,

            navigateToCompetitionHome: navigateToCompetitionHome,
            navigateToCompetitionMagazine: navigateToCompetitionMagazine,
            navigateToCompetitionTable: navigateToCompetitionTable,
            navigateToCompetitionFixtures: navigateToCompetitionFixtures,
            navigateToCompetitionTeams: navigateToCompetitionTeams,
            navigateToCompetitionLiveStreams: navigateToCompetitionLiveStreams,
            navigateToCompetitionPictures: navigateToCompetitionPictures,
            navigateToCompetitionVideos: navigateToCompetitionVideos,

            navigateToMagazineGameView: navigateToMagazineGameView,            
            navigateToGame: navigateToGame,
            navigateToTeamView: navigateToTeamView,
            navigateToLeague: navigateToLeague,

            cleanup: cleanup            
        };
    });
;
define('viewmodels/vm.competitions',
    ['jquery', 'ko', 'config', 'router', 'datamanager', 'underscore'],
    function ($, ko, config, router, datamanager, _) {
        var initCompetitionCalendar = ko.observable(),
            currentPage = ko.observable(),
            competitionsSearchString = ko.observable(''),
            previousCompetitions = ko.observableArray(),
            currentCompetitions = ko.observableArray(),
            comingCompetitions = ko.observableArray(),

        activate = function (routeData, callback) {
            routeData.subview = 'current';

            activatesubview(routeData);            
        },

        activatesubview = function (routeData) {
            var currentView = routeData.subview;
            $('#competitions-' + currentView).show();
            //currentViewName = 'team-' + currentView;
            currentPage(currentView);

            if (initCompetitionCalendar() === undefined) {
                datamanager.initCompetitionCalendar({
                    success: function (json) {
                        initCompetitionCalendar(json);

                        previousCompetitions(json.PreviousCompetitions);
                        currentCompetitions(json.CurrentCompetitions);
                        comingCompetitions(json.ComingCompetitions);

                        hidePreloader();
                    },
                    error: function (response) {
                        hidePreloader();

                        alert('Oh noes! ' + response);
                    }
                });
            }
        },

        filterCompetitions = function () {
            var searchstring = $('#competitionsSearchField').val();
            competitionsSearchString(searchstring);
        },

        searchCompetitionsKeyDown = function (data, event) {
            filterCompetitions();

            //if (event.keyCode === 13) {
            //    filterCompetitions();
            //}
        },

        filteredPreviousCompetitions = ko.computed(function () {
            return ko.utils.arrayFilter(previousCompetitions(), function (item) {
                if (competitionsSearchString().length === 0)
                    return true;

                return item.Name.toLowerCase().indexOf(competitionsSearchString().trim().toLowerCase()) > -1;
            });
        }),

        filteredCurrentCompetitions = ko.computed(function () {
            return ko.utils.arrayFilter(currentCompetitions(), function (item) {
                if (competitionsSearchString().length === 0)
                    return true;

                return item.Name.toLowerCase().indexOf(competitionsSearchString().trim().toLowerCase()) > -1;
            });
        }),

        filteredComingCompetitions = ko.computed(function () {
            return ko.utils.arrayFilter(comingCompetitions(), function (item) {
                if (competitionsSearchString().length === 0)
                    return true;

                return item.Name.toLowerCase().indexOf(competitionsSearchString().trim().toLowerCase()) > -1;
            });
        }),

        hidePreloader = function () {
            $('#competitions-view .preloader').hide();
            $('#competitions-view .afterloaded').show();
        },

        navigateToPreviousTab = function (game, callback) {
            navigationItem = {
                getHrefString: function () {
                    return config.hashes.competitions + '/previous';
                },
                toClick: function () {                    
                    router.navigateTo(config.hashes.competitions + '/previous');
                }
            };
            return navigationItem;
        },

        navigateToCurrentTab = function (game, callback) {
            navigationItem = {
                getHrefString: function () {
                    return config.hashes.competitions + '/current';
                },
                toClick: function () {
                    router.navigateTo(config.hashes.competitions + '/current');
                }
            };
            return navigationItem;
        },

        navigateToComingTab = function (game, callback) {
            navigationItem = {
                getHrefString: function () {
                    return config.hashes.competitions + '/coming';
                },
                toClick: function () {
                    router.navigateTo(config.hashes.competitions + '/coming');
                }
            };
            return navigationItem;
        },

        navigateToCompetition = function (competition) {
            navigationItem = {
                getHrefString: function () {
                    return config.hashes.leagueorganizersite + '/' + competition.ItemID;
                },
                toClick: function () {
                    router.navigateTo(config.hashes.leagueorganizersite + '/' + competition.ItemID);                    
                }
            };
            return navigationItem;
        },

        cleanup = function () {
            $('.competitions-subview').hide();            
            $('.competitions-subview .preloader').show();
            $('.competitions-subview .afterloaded').hide();
        };

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,            
            
            filteredPreviousCompetitions: filteredPreviousCompetitions,
            filteredCurrentCompetitions: filteredCurrentCompetitions,
            filteredComingCompetitions: filteredComingCompetitions,
            currentPage: currentPage,

            filterCompetitions: filterCompetitions,
            searchCompetitionsKeyDown: searchCompetitionsKeyDown,

            navigateToPreviousTab: navigateToPreviousTab,
            navigateToCurrentTab: navigateToCurrentTab,
            navigateToComingTab: navigateToComingTab,
            navigateToCompetition: navigateToCompetition
        };
    });;
define('viewmodels/vm.discover',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'viewmodels/vm.magazinegameview', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, shell, magazinegameview, _) {
        var categoryId = ko.observable(1),
            subCategoryId = ko.observable(0),
            blurbsSuitableForHalfPage = [0, 1, 9, 17, 18, 23, 40, 41, 50, 70, 71, 901, 903, 904, 905],
            gettingPages = false,
            noMorePagesToGet = false,
            lastScrollPosition = 0,
            categories = ko.observableArray(),
            selectedCategory = ko.observable(),
            subCategories = ko.observableArray(),
            blurbsInFeed = ko.observableArray(),

            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();

                $('#discover-view .preloader').show();
                $('#discover-view .afterloaded').hide();

                if (_.isFunction(callback)) {
                    callback();
                }

                if (categories().length === 0) {
                    initDiscoverFeed();
                } else {
                    $('#discover-view .preloader').hide();
                    $('#discover-view .afterloaded').show();

                    $('html,body').animate({ scrollTop: lastScrollPosition }, 1);
                }

                $(window).scroll(infiniteScrolling);
            },

            initDiscoverFeed = function () {                
                datamanager.initDiscoverFeed(1, 0, {
                    success: function (model) {
                        styleBlurbs(model.MagazineBlurbs);

                        var underlayingArray = blurbsInFeed();

                        for (var i = 0; i < model.MagazineBlurbs.length; i++) {
                            underlayingArray.push(model.MagazineBlurbs[i]);
                        }

                        blurbsInFeed.valueHasMutated();

                        underlayingArray = categories();

                        for (var j = 0; j < model.Categories.length; j++) {
                            underlayingArray.push(model.Categories[j]);
                        }

                        categories.valueHasMutated();

                        selectedCategory(categories()[0]);

                        $('#discover-view .preloader').hide();
                        $('#discover-view .afterloaded').show();

                        if (model.MagazineBlurbs.length === 0) {
                            noMorePagesToGet = true;
                            $('.discoverInfiniteScrollStatus').hide();
                            $('.discoverInfiniteScrollStatusEnd').show();
                        }
                    },
                    error: function (response, xhr) {
                        $('#discover-view .preloader').hide();
                        $('#discover-view .afterloaded').show();
                    }
                });
            },

            getMoreBlurbs = function () {
                var lastThreeBlurbTypes = [];

                if (blurbsInFeed().length !== 0) {
                    if (blurbsInFeed().length > 2) {
                        for (var i = blurbsInFeed().length - 3; i < blurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else if (blurbsInFeed().length > 1) {
                        for (var j = 0; j < blurbsInFeed().length; j++) {
                            lastThreeBlurbTypes.push(blurbsInFeed()[j].MagazineBlurbTypeID);
                        }
                    } else {
                        lastThreeBlurbTypes.push(blurbsInFeed()[0].MagazineBlurbTypeID);
                    }
                }

                gettingPages = true;

                datamanager.GetBlurbsForDiscoverFeed(categoryId(), subCategoryId(), lastThreeBlurbTypes, blurbsInFeed().length)
                    .then(function (json) {
                        styleBlurbs(json);

                        if (json.length === 0) {
                            noMorePagesToGet = true;
                            $('.discoverInfiniteScrollStatus').hide();
                            $('.discoverInfiniteScrollStatusEnd').show();
                        }

                        var underlayingArray = blurbsInFeed();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        blurbsInFeed.valueHasMutated();
                        gettingPages = false;

                    })
                    .fail(function (error) {
                        gettingPages = false;
                    });
            },

            styleBlurbs = function (json) {
                for (var i = 0; i < json.length; i++) {
                    json[i].isHalfPageLeft = false;
                    json[i].isHalfPageRight = false;
                }

                for (var j = 0; j < json.length - 1; j++) {
                    if (_.contains(blurbsSuitableForHalfPage, json[j].MagazineBlurbTypeID) && _.contains(blurbsSuitableForHalfPage, json[j + 1].MagazineBlurbTypeID)) {
                        json[j].isHalfPageLeft = true;
                        json[j + 1].isHalfPageRight = true;

                        j = j + 1;

                        if (j > json.length - 2) {
                            break;
                        }
                    }
                }
            },

            navigateToMagazineGameView = function (data) {
                var navigationItem;

                if (data.MagazineBlurbTypeID === 124) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.leaguesite + '/' + data.LeagueID + '/highlights';
                        },
                        toClick: function () {
                            router.navigateTo(config.hashes.leaguesite + '/' + data.LeagueID + '/highlights');
                        }
                    };
                }
                else {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.magazinegameview + '/' + data.GameID;
                        },
                        toClick: function () {
                            magazinegameview.setGameHeaderInfo(data.GameHeaderInfo);
                            router.navigateTo(config.hashes.magazinegameview + '/' + data.GameID);
                        }
                    };
                }
                

                return navigationItem;
            },

            navigateToLeague = function (data) {
                router.navigateTo('/' + config.hashes.leaguesite + '/' + data.LeagueID);
            },

            selectCategory = function (data) {
                if (data.DiscoverCategoryID !== categoryId()) {
                    categoryId(data.DiscoverCategoryID);
                    subCategoryId(0);
                    selectedCategory(data);

                    noMorePagesToGet = false;
                    $('.discoverInfiniteScrollStatus').show();
                    $('.discoverInfiniteScrollStatusEnd').hide();

                    blurbsInFeed([]);
                    getMoreBlurbs();
                }
            },

            selectSubCategory = function (data) {
                if (data.DiscoverSubCategoryID !== subCategoryId())
                    subCategoryId(data.DiscoverSubCategoryID);
                else
                    subCategoryId(0);

                noMorePagesToGet = false;
                $('.discoverInfiniteScrollStatus').show();
                $('.discoverInfiniteScrollStatusEnd').hide();

                blurbsInFeed([]);
                getMoreBlurbs();
            },

            infiniteScrolling = function () {
                if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && blurbsInFeed().length !== 0) {
                    if (!gettingPages && !noMorePagesToGet) {
                        getMoreBlurbs();
                    }
                }
            },

            cleanup = function () {
                $(window).unbind('scroll', infiniteScrolling);
                lastScrollPosition = $(window).scrollTop();                
            },

            init = function () {
                var templ = Hogan.compile([
                        '<div class="{{isActiveCss}}">',
                        '<div class="teamLogo imageMaskContain transparentBg" style="background-image:url({{LogoURL}})"></div>',
                        '<div>',
                        '<h5>{{Title}}</h5>',
                        '<h4>{{Subtitle}}</h4>',
                        '<h4>{{Description}}</h4>',
                        '</div>',
                        '</div>'
                    ].join(''));

                searchteams = new Bloodhound({
                    datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Name'),
                    queryTokenizer: Bloodhound.tokenizers.whitespace,
                    remote:
                    {
                        url: '/api/searchapi/searchclubsleagues?searchstring=%QUERY',
                        ajax: {
                            beforeSend: function (xhr) {
                                $(".searchSpinner").fadeIn();
                            }
                        },
                        filter: function (parsedResponse) {
                            $(".searchSpinner").fadeOut();

                            var dataset = [];

                            for (i = 0; i < parsedResponse.length; i++) {
                                parsedResponse[i].searchterm = parsedResponse[i].Name;
                                dataset.push(parsedResponse[i]);
                            }

                            return dataset;
                        }
                    },
                    valueKey: 'searchterm',
                    limit: 100
                });

                searchteams.initialize();

                teamSearch = $('#clubsearch').typeahead(null,
                    {
                        name: 'teams-searchview',
                        displayKey: 'Title',
                        source: searchteams.ttAdapter(),
                        templates: {
                            suggestion: function (data) {
                                return templ.render(data);
                            }
                        }
                    });

                // Event handler for search selected team
                teamSearch.on('typeahead:selected', function (evt, data) {
                    if (data.Type === 1) {
                        router.navigateTo(config.hashes.club + '/' + data.EntityID + '/teams');
                    }
                    else {
                        router.navigateTo(config.hashes.leaguesite + '/' + data.EntityID);
                    }
                });
            };

        init();

        return {
            activate: activate,
            cleanup: cleanup,

            categories: categories,
            subCategories: subCategories,
            blurbsInFeed: blurbsInFeed,

            selectedCategory: selectedCategory,
            categoryId: categoryId,
            subCategoryId: subCategoryId,
            selectCategory: selectCategory,
            selectSubCategory: selectSubCategory,

            navigateToMagazineGameView: navigateToMagazineGameView,
            navigateToLeague: navigateToLeague
        };
    });
;
define('viewmodels/vm.discussionpostdetails',
    ['ko', 'config', 'router', 'presenter', 'messenger', 'helpers/sw.imagehelper', 'viewmodels/vm.shell', 'datamanager', 'models/model', 'models/viewmodel', 'toastr', 'underscore', 'helpers/sw.socialentityhelper', 'models/viewmodel.mapper', 'viewmodels/vm.assetinfo'],
    function (ko, config, router, presenter, messenger, swimagehelper, shell, datamanager, model, viewmodel, toastr, _, socialentityhelper, viewmodelmapper, assetinfo) {
        var discussionPostId = ko.observable(),
            discussionPost = ko.observable(),

            activate = function (routeData, callback) {
                window.scrollTo(0, 0);

                discussionPostId(routeData.Id);

                getDiscussionPost();

                //Call callback if there is one
                if (_.isFunction(callback)) {
                    callback();
                }
            },

            cleanup = function () {
                $("#discussionpostdetails-view .socialEntityDetailCommentText").val('');
            },

            goBackCmd = function () {
                presenter.toggleActivity(false);
                router.navigateBack();
            },

            getDiscussionPost = function () {
                datamanager.getDiscussionPostForDetailsView(discussionPostId(), {
                    success: function (json) {
                        discussionPost(json);
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            deleteDiscussionPost = function (disussionPostId) {
                var answer = confirm("Delete discussion post?");
                if (answer) {
                    datamanager.deleteDiscussionPost(disussionPostId, {
                        success: function (json) {
                            router.navigateBack();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
                else {
                    toastr.success("Canceled deleting disussionpost!");
                }
            },

            reportContent = function (disussionPostId) {
                var answer = confirm("Report content?");
                if (answer) {
                    var reportContentModel = new viewmodel.ReportContent()
                        .ReportTypeID(3)
                        .ReportContentID(disussionPostId)
                        .ReportContentTypeID(1)
                        .ReportContentGameID(0)
                        .ReportContentReason('');

                    datamanager.reportContentWithReason(viewmodelmapper.reportcontent.toDto(reportContentModel), {
                        success: function () {
                            toastr.success('Content successfully reported!');
                            goBackCmd();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
                else {
                    toastr.success("Canceled reporting content!");
                }
            },

            onSocialEntityCommentPostClick = function (data) {

                var commentText = $("#discussionpostdetails-view .socialEntityDetailCommentText").val();

                if (commentText !== '') {

                    var socialEntityComment = new model.SocialEntityComment()
                        .SocialEntityID(data.SocialEntityInfo.SocialEntityID)
                        .Text(commentText);

                    datamanager.insertSocialEntityComment(ko.toJS(socialEntityComment), {
                        success: function (result) {
                            cleanup();
                            getDiscussionPost();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }
            },

            //onSocialEntityEditClick = function (data) {
            //    router.navigateTo(config.hashes.discussionpost + '/' + discussionPostId());            
            //},

            //onSocialEntityDeleteClick = function (data) {
            //    deleteDiscussionPost(data.DiscussionPostID);
            //},

            //onSocialEntityReportClick = function (data) {
            //    reportContent(data.DiscussionPostID);
            //},

            onSocialEntityCommentDeleteClick = function (data) {

                if (data.SocialEntityCommentID !== '') {
                    datamanager.deleteSocialEntityComment(data.SocialEntityCommentID, {
                        success: function (result) {
                            cleanup();
                            getDiscussionPost();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }

            },

            onSocialEntityCommentReportClick = function (data) {

                if (data.SocialEntityCommentID !== '') {
                    var reportContentModel = new viewmodel.ReportContent()
                        .ReportTypeID(1)
                        .ReportContentID(data.SocialEntityCommentID)
                        .ReportContentTypeID(8)
                        .ReportContentGameID(0)
                        .ReportContentReason('');

                    datamanager.reportContentWithReason(viewmodelmapper.reportcontent.toDto(reportContentModel), {
                        success: function () {
                            cleanup();
                            getDiscussionPost();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }
            };

        return {
            activate: activate,
            cleanup: cleanup,
            discussionPost: discussionPost,
            goBackCmd: goBackCmd,
            socialentityhelper: socialentityhelper,            
            onSocialEntityCommentPostClick: onSocialEntityCommentPostClick,
            onSocialEntityCommentDeleteClick: onSocialEntityCommentDeleteClick,
            onSocialEntityCommentReportClick: onSocialEntityCommentReportClick,
            socialEntityTexts: socialEntityTexts
        };
    });;
define('viewmodels/vm.districts',
    ['jquery', 'config', 'router', 'ko', 'datamanager', 'viewmodels/vm.shell', 'underscore'],
    function ($, config, router, ko, datamanager, shell, _) {

        var
            initCompetitionsPage = ko.observable(),
            leagueOrganizers = ko.observableArray(),
            topLeagues = ko.observableArray(),

            popular = ko.observableArray(),
            districts = ko.observableArray(),
            pastevents = ko.observableArray(),
            currentevents = ko.observableArray(),
            upcomingevents = ko.observableArray(),

            seasons = ko.observableArray(),
            leaguecategories = ko.observableArray(),
            league = ko.observableArray(),

            seasonName = ko.observable('Season'),
            leagueName = ko.observable(''),
            leagueCategoryName = ko.observable(''),

            defaultLeagueCategoryName = '',
            defaultLeagueName = '',

            selectedLeagueOrganizerId = 0,
            selectedLeagueId = 0,

            activate = function (routeData, callback) {
                if (initCompetitionsPage() === undefined) {
                    datamanager.initCompetitionsPage({
                        success: function (model) {
                            initCompetitionsPage(model);

                            if (model.Tabs.length > 0) {
                                // Init the first tab
                                showType(model.Tabs[0].TypeID);
                            }

                            /*$('#districts-view .preloader').hide();*/
                            $('#districts-view .afterloaded').show();
                        },
                        error: function (error) {
                            /*$('#districts-view .preloader').hide();*/
                            $('#districts-view .afterloaded').show();

                            alert(error);
                        }
                    });
                }

                if (_.isFunction(callback)) {
                    callback();
                };
            },

            selectTab = function (data, event) {
                $('#districts-view .btn-group-sm .btn-default').removeClass('active');

                $(event.target).addClass('active');

                $(".districts-subview").hide();

                showType(data.TypeID);
            },

            selectSeason = function (data, event) {
                seasonName(data.SeasonName);

                leagueCategoryName(defaultLeagueCategoryName);
                leagueName(defaultLeagueName)

                datamanager.getLeagueCategoriesBySeasonId(selectedLeagueOrganizerId, data.SeasonID, {
                    success: function (json) {
                        leaguecategories([]);

                        selectedLeagueId = 0;                        

                        var underlayingArray = leaguecategories;

                        for (var j = 0; j < json.length; j++) {
                            underlayingArray.push(json[j]);
                        }

                        leaguecategories.valueHasMutated();
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            selectLeagueCategory = function (data, event) {
                leagueCategoryName(data.Name)
                league([]);

                var underlayingArray = league;

                for (var i = 0; i < data.Leagues.length; i++) {
                    underlayingArray.push(data.Leagues[i]);
                }

                league.valueHasMutated();
                
                leagueName(defaultLeagueName)
                selectedLeagueId = 0;
            },

            selectLeague = function (data, event) {
                leagueName(data.LeagueShortName);

                selectedLeagueId = data.LeagueID;
            },

            showType = function (typeId) {
                switch (typeId) {
                    case 1: // Competitions (Swiss)
                        $('#districts-competitions').show();

                        initCompetitions();
                        break;
                    case 3: // Current events                 
                        $('#districts-currentevents').show();

                        initCurrentEvents();
                        break;

                    case 4: // Previous events                        
                        $('#districts-pastevents').show();

                        initPastEvents();
                        break;
                    case 5: // Upcoming events
                        $('#districts-upcomingevents').show();

                        initUpcomingEvents();
                        break;
                    case 6: // Populära
                        $('#districts-popular').show();

                        initPopular();
                        break;
                    case 7: // Distrikt
                        $('#districts-districts').show();

                        initDistricts();
                        break;
                    case 8: // Browse leagues
                        $('#districts-browseleagues').show();

                        initBrowseLeagues();
                        break;
                }
            },

            initPopular = function () {
                if (popular().length === 0) {
                    datamanager.initPopular({
                        success: function (json) {
                            popular([]);

                            var underlayingArray = popular;

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            popular.valueHasMutated();

                            $('#districts-popular .preloader').hide();
                        },
                        error: function (error) {
                            console.log(error);

                            $('#districts-popular .preloader').hide();
                        }
                    });
                }
                else
                    $('#districts-popular .preloader').hide();
            },

            initDistricts = function () {
                if (districts().length === 0) {
                    datamanager.initDistricts({
                        success: function (json) {
                            districts([]);

                            var underlayingArray = districts;

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            districts.valueHasMutated();

                            $('#districts-districts .preloader').hide();
                        },
                        error: function (error) {
                            console.log(error);

                            $('#districts-districts .preloader').hide();
                        }
                    });
                }
                else
                    $('#districts-districts .preloader').hide();
            },

            initBrowseLeagues = function () {
                if (seasons().length === 0) {
                    datamanager.initBrowseLeagues({
                        success: function (json) {
                            seasons([]);
                            leaguecategories([]);                            

                            leagueOrganizers(json.FeaturedMisc);
                            topLeagues(json.FeaturedLeagues);

                            var underlayingArray = seasons;

                            for (var i = 0; i < json.Seasons.length; i++) {
                                underlayingArray.push(json.Seasons[i]);

                                if (json.Seasons[i].IsDefault) {
                                    seasonName(json.Seasons[i].SeasonName);
                                }
                            }

                            seasons.valueHasMutated();

                            var underlayingArray = leaguecategories;

                            for (var j = 0; j < json.LeagueCategories.length; j++) {
                                underlayingArray.push(json.LeagueCategories[j]);
                            }

                            leaguecategories.valueHasMutated();

                            if (json.LeagueOrganizers.length > 0) {
                                selectedLeagueOrganizerId = json.LeagueOrganizers[0].LeagueOrganizerID;
                            }

                            defaultLeagueCategoryName = json.LeagueCategorySelectorPlaceholder;
                            defaultLeagueName = json.LeagueSelectorPlaceholder;

                            leagueCategoryName(defaultLeagueCategoryName);
                            leagueName(defaultLeagueName)

                            $('#districts-browseleagues .preloader').hide();
                            $('#districts-browseleagues .afterSubViewLoaded').show();                            
                        },
                        error: function (error) {
                            console.log(error);

                            $('#districts-browseleagues .preloader').hide();
                        }
                    });
                }
            },

            initPastEvents = function () {
                if (pastevents().length === 0) {
                    datamanager.initPastEvents({
                        success: function (json) {
                            pastevents([]);

                            var underlayingArray = pastevents;

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            pastevents.valueHasMutated();

                            $('#districts-pastevents .preloader').hide();
                        },
                        error: function (error) {
                            console.log(error);

                            $('#districts-pastevents .preloader').hide();
                        }
                    });
                }
                else
                    $('#districts-pastevents .preloader').hide();
            },

            initCurrentEvents = function () {
                if (currentevents().length === 0) {
                    datamanager.initCurrentEvents({
                        success: function (json) {
                            currentevents([]);

                            console.log(json);

                            var underlayingArray = currentevents;

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            currentevents.valueHasMutated();

                            $('#districts-currentevents .preloader').hide();
                        },
                        error: function (error) {
                            console.log(error);

                            $('#districts-currentevents .preloader').hide();
                        }
                    });
                }
                else
                    $('#districts-currentevents .preloader').hide();
            },

            initUpcomingEvents = function () {
                if (upcomingevents().length === 0) {
                    datamanager.initUpcomingEvents({
                        success: function (json) {
                            upcomingevents([]);

                            var underlayingArray = upcomingevents;

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            upcomingevents.valueHasMutated();

                            $('#districts-upcomingevents .preloader').hide();
                        },
                        error: function (error) {
                            console.log(error);

                            $('#districts-upcomingevents .preloader').hide();
                        }
                    });
                }
                else
                    $('#districts-upcomingevents .preloader').hide();
            },

            initCompetitions = function () {
                datamanager.initCompetitions({
                    success: function (json) {
                        leagueOrganizers(json.LeagueOrganizers);
                        topLeagues(json.TopLeagues);

                        $('#districts-competitions .preloader').hide();
                    },
                    error: function (json) {
                        $('#districts-competitions .preloader').hide();

                        alert(json);
                    }
                });
            },

            navigateToLeagueOrganizerSite = function (item) {
                var prefix = '';

                if (shell.memberIsLoggedIn())
                    prefix = '/';

                navigationItem = {
                    getHrefString: function () {
                        return prefix + config.hashes.leagueorganizersite + '/' + item.ItemID;
                    },
                    toClick: function () {
                        router.navigateTo(prefix + config.hashes.leagueorganizersite + '/' + item.ItemID);
                    }
                };
                return navigationItem;
            },

            navigateToCompetition = function (item) {
                var prefix = '';

                if (shell.memberIsLoggedIn())
                    prefix = '/';

                switch (item.CompetitionType) {
                    case 1: // League organizer
                        {
                            navigationItem = {
                                getHrefString: function () {
                                    return prefix + config.hashes.leagueorganizersite + '/' + item.ItemID;
                                },
                                toClick: function () {
                                    router.navigateTo(prefix + config.hashes.leagueorganizersite + '/' + item.ItemID);
                                }
                            };
                            return navigationItem;
                        }
                    case 2: // Club
                        {
                            var navigationItem = {
                                getHrefString: function () {
                                    return prefix + config.hashes.club + '/' + item.ItemID;
                                },
                                toClick: function () {
                                    router.navigateTo(prefix + config.hashes.club + '/' + item.ItemID);
                                }
                            };

                            return navigationItem;
                        }
                    case 3: // League
                        {
                            var navigationItem = {
                                getHrefString: function () {
                                    return prefix + config.hashes.leaguesite + '/' + item.ItemID;
                                },
                                toClick: function () {
                                    router.navigateTo(prefix + config.hashes.leaguesite + '/' + item.ItemID);
                                }
                            };

                            return navigationItem;
                        }
                }
            },

            navigateToLeagueSite = function (item) {
                var prefix = '';

                if (shell.memberIsLoggedIn())
                    prefix = '/';

                navigationItem = {
                    getHrefString: function () {
                        return prefix + config.hashes.leaguesite + '/' + item.ItemID;
                    },
                    toClick: function () {
                        router.navigateTo(prefix + config.hashes.leaguesite + '/' + item.ItemID);
                    }
                };
                return navigationItem;
            },

            navigateToLeague = function () {
                var prefix = '';

                if (shell.memberIsLoggedIn())
                    prefix = '/';

                if (selectedLeagueId > 0)
                    router.navigateTo(prefix + config.hashes.leaguesite + '/' + selectedLeagueId);
            },

            cleanup = function () {
            };

        return {
            activate: activate,
            cleanup: cleanup,
            
            initCompetitionsPage: initCompetitionsPage,
            leagueOrganizers: leagueOrganizers,
            topLeagues: topLeagues,

            popular: popular,
            districts: districts,
            pastevents: pastevents,
            currentevents: currentevents,
            upcomingevents: upcomingevents,

            seasons: seasons,
            leaguecategories: leaguecategories,
            league: league,

            seasonName: seasonName,
            leagueName: leagueName,
            leagueCategoryName: leagueCategoryName,

            selectTab: selectTab,
            selectSeason: selectSeason,
            selectLeagueCategory: selectLeagueCategory,
            selectLeague: selectLeague,

            navigateToCompetition: navigateToCompetition,
            navigateToLeagueOrganizerSite: navigateToLeagueOrganizerSite,
            navigateToLeagueSite: navigateToLeagueSite,
            navigateToLeague: navigateToLeague,
        };
    });
;
define('viewmodels/vm.eventreporting',
    ['ko', 'datamanager', 'config', 'toastr', 'underscore', 'models/viewmodel'],
    function (ko, datamanager, config, toastr, _, viewmodel) {
        var
            currentLanguage = ko.observable("sv"),

            scrollToReport = function () {
                $('html, body').animate({
                    scrollTop: $("#contentToolbar").offset().top - 180
                }, 200);
            },

            resetEventReporting = function () {
                //eventToAddObs('');
                //eventToAdd = null;

                //$('#eventReportText').val('');

                //$('.eventReportSubMenu').hide();
                //$('#eventReportMainMenu').show();

                //eventReportShowOwnGoal(false);
                //eventReportPlayerSelectIndex = 0;

                //scrollToReport();
            };
        return {
        };
    });;
define('viewmodels/vm.events',
    ['jquery', 'config', 'router', 'ko', 'messenger', 'datamanager', 'underscore'],
    function ($, config, router, ko, messenger, datamanager, _) {

        var currentEvents = ko.observableArray(),
            pastEvents = ko.observableArray(),
            upcomingEvents = ko.observableArray(),

            activate = function (routeData, callback) {
                datamanager.initCompetitionEvents({
                    success: function (model) {
                        currentEvents([]);
                        pastEvents([]);
                        upcomingEvents([]);

                        var underlayingArray = currentEvents();

                        for (var i = 0; i < model.CurrentEvents.length; i++) {
                            underlayingArray.push(model.CurrentEvents[i]);
                        }

                        currentEvents.valueHasMutated();

                        underlayingArray = pastEvents();

                        for (var j = 0; j < model.PastEvents.length; j++) {
                            underlayingArray.push(model.PastEvents[j]);
                        }

                        pastEvents.valueHasMutated();

                        underlayingArray = upcomingEvents();

                        for (var k = 0; k < model.UpcomingEvents.length; k++) {
                            underlayingArray.push(model.UpcomingEvents[k]);
                        }

                        upcomingEvents.valueHasMutated();

                        hidePreloader();
                    },
                    error: function (error) {
                        console.log(error);

                        hidePreloader();
                    }
                });
            },

            toggleEventTab = function (type, data, event) {
                $('#events-view .btn-group .btn').removeClass('active');
                $(event.target).addClass('active');

                $('.event-tabs').hide();

                if (type === 1) {
                    $('#past-events').show();
                } else if (type === 2) {
                    $('#current-events').show();
                } else if (type === 3) {
                    $('#upcoming-events').show();
                }
            },

            hidePreloader = function () {
                $('#events-view .preloader').hide();
                $('#events-view .afterloaded').show();
            },

            navigateToLeagueOrganizerSite = function (item) {
                navigationItem = {
                    getHrefString: function () {
                        return '/' + config.hashes.leagueorganizersite + '/' + item.ItemID;
                    },
                    toClick: function () {
                        router.navigateTo('/' + config.hashes.leagueorganizersite + '/' + item.ItemID);
                    }
                };
                return navigationItem;
            },

            cleanup = function () {
            };

        return {
            activate: activate,
            cleanup: cleanup,

            currentEvents: currentEvents,
            pastEvents: pastEvents,
            upcomingEvents: upcomingEvents,

            toggleEventTab: toggleEventTab,

            navigateToLeagueOrganizerSite: navigateToLeagueOrganizerSite
        };
    });
;
define('viewmodels/vm.game',
    ['ko', 'underscore', 'config', 'router', 'messenger', 'datamanager', 'models/viewmodel', 'helpers/sw.utils', 'viewmodels/vm.shell'],
    function (ko, _, config, router, messenger, datamanager, viewmodel, utils, shell) {
        var teamId = 0,
            gameId = 0,
            currentViewName = '',
            currentView = '',
            awayTeamSelected = false,
            errorTimer,
            editMode = ko.observable(false),
            currentPage = ko.observable(''),
            game = ko.observable(),
            clubs = ko.observableArray(),
            teams = ko.observableArray(),
            referees = ko.observableArray(),
            refereesFromSearch = ko.observableArray(),
            clubTeams = ko.observableArray(),
            arenas = ko.observableArray(),
            genders = ko.observableArray(),
            leagues = ko.observableArray(),
            gameHeaderInfo = ko.observable(),
            isHomeGame = ko.observable(true),
            isPracticeGame = ko.observable(true),
            showClubEmptyState = ko.observable(false),
            selectedGender = ko.observable(0),
            arenaName = ko.observable(),
            teamToReplace = ko.observable(),
            genderName = ko.observable(''),
            arenaId = 1,
            selectedLeagueName = ko.observable(),
            leagueId = -1,
            opponentClubLogoUrl = ko.observable(),
            opponentClubName = ko.observable(),
            opponentTeamName = ko.observable(),
            opponentClubID = ko.observable(-1),
            currentGameDate = ko.observable(),
            currentGameTime = ko.observable(),

            goalieStatistics = ko.observable(),
            homeTeamGoalies = ko.observableArray(),
            awayTeamGoalies = ko.observableArray(),
            availableGoalies = ko.observableArray(),

            refereeSearchString = ko.observable(''),

            teamSearchString = ko.observable(''),

            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();

                if (routeData.subId !== undefined) {
                    teamId = routeData.subId;
                }

                if (routeData.Id !== undefined) {
                    gameId = routeData.Id;
                }

                currentView = routeData.subview;
                currentViewName = 'team-' + currentView;
                currentPage(currentView);

                $('.game-subview').hide();
                $('#game-' + currentView).show();

                // TODO: Log at the currentView instead
                if (gameId > 0)
                    editMode(true);
                else
                    editMode(false);

                switch (currentView) {
                    case 'add':
                    case 'edit':
                        datamanager.initGameForEditView(teamId, gameId, {
                            success: function (json) {
                                game(json);

                                var newdate = moment(json.GameTime).local().toDate();

                                currentGameDate(newdate);

                                // Can't bind this until here since knockout 'with' screws with the binding
                                //$('#gameDate').datepicker({
                                //    autoClose: true,
                                //    startDate: newdate,
                                //    onSelect: function (fd, d, picker) {
                                //        currentGameDate(d);
                                //    }
                                //});

                                $('#gameDate').val(moment(json.GameTime).format("YYYY-MM-DD"));
                                $('#gameTime').val(moment(json.GameTime).format("HH:mm"));

                                isHomeGame(json.IsHomeGame);
                                isPracticeGame(json.IsPracticeGame);

                                opponentClubName(json.OpponentClubName);
                                opponentTeamName(json.OpponentTeamName);
                                opponentClubLogoUrl(json.OpponentClubLogoURL);

                                arenaId = json.ArenaID;
                                leagueId = json.LeagueID;
                                opponentClubID(json.OpponentClubID);
                                currentGameTime(moment(json.GameTime).format("HH:mm"));

                                selectedLeagueName(json.LeagueName);
                                arenaName(json.ArenaName);

                                $('#game-start').show();
                            },
                            error: function (error) {
                                alert(error);
                            }
                        });
                        break;
                    case 'referee':
                        {
                            datamanager.initGameReferees(gameId, {
                                success: function (model) {
                                    referees([]);

                                    gameHeaderInfo(model.GameHeaderInfo);

                                    var underlayingArray = referees();

                                    for (var i = 0; i < model.Referees.length; i++) {
                                        underlayingArray.push(model.Referees[i]);
                                    }

                                    referees.valueHasMutated();

                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        }
                        break;
                    case 'teams':
                        datamanager.initGameTeams(gameId, {
                            success: function (model) {
                                //referees([]);

                                gameHeaderInfo(model.GameHeaderInfo);

                                var underlayingArray = teams();

                                for (var i = 0; i < model.Teams.length; i++) {
                                    underlayingArray.push(model.Teams[i]);
                                }

                                teams.valueHasMutated();

                            },
                            error: function (error) {
                                console.log(error);
                            }
                        });
                        break;
                    case 'goaliestatistics':
                        datamanager.initGameGoalieStatistics(gameId, {
                            success: function (model) {
                                gameHeaderInfo(model.GameHeaderInfo);

                                var underlayingArray = homeTeamGoalies();

                                for (var i = 0; i < model.HomeTeamGoalies.length; i++) {
                                    underlayingArray.push(model.HomeTeamGoalies[i]);
                                }

                                homeTeamGoalies.valueHasMutated();

                                underlayingArray = awayTeamGoalies();

                                for (var j = 0; j < model.AwayTeamGoalies.length; j++) {
                                    underlayingArray.push(model.AwayTeamGoalies[j]);
                                }

                                awayTeamGoalies.valueHasMutated();

                                goalieStatistics(model);
                            },
                            error: function (error) {
                                console.log(error);
                            }
                        });
                        break;
                }
            },

            homeTeamClubName = ko.computed(function () {
                if (typeof game() !== 'undefined') {
                    if (isHomeGame()) {
                        return game().ClubName;
                    }
                    else {
                        if (opponentClubName() !== undefined && opponentClubName().length > 0)
                            return opponentClubName();
                    }
                }

                return "";
            }),

            homeTeamTeamName = ko.computed(function () {
                if (typeof game() !== 'undefined') {
                    if (isHomeGame()) {
                        return game().TeamName;
                    }
                    else {
                        return "";
                    }
                }

                return "";
            }),

            homeTeamClubLogo = ko.computed(function () {
                if (typeof game() !== 'undefined') {
                    if (isHomeGame()) {
                        return game().ClubLogoURL;
                    }
                    else {
                        if (opponentClubLogoUrl() !== undefined && opponentClubLogoUrl().length > 0)
                            return opponentClubLogoUrl();
                    }
                }

                return "https://minfotboll.blob.core.windows.net/clublogos/defaultclublogo.png";
            }),

            awayTeamClubName = ko.computed(function () {
                if (typeof game() !== 'undefined') {
                    if (isHomeGame()) {
                        if (opponentClubName() !== undefined && opponentClubName().length > 0)
                            return opponentClubName();
                    }
                    else {
                        return game().ClubName;
                    }
                }

                return "";
            }),

            awayTeamTeamName = ko.computed(function () {
                if (typeof game() !== 'undefined') {
                    if (isHomeGame()) {
                        return "";
                    }
                    else {
                        return game().TeamName;
                    }
                }

                return "";
            }),

            awayTeamClubLogo = ko.computed(function () {
                if (typeof game() !== 'undefined') {
                    if (isHomeGame()) {
                        if (opponentClubLogoUrl() !== undefined && opponentClubLogoUrl().length > 0)
                            return opponentClubLogoUrl();
                    }
                    else {
                        return game().ClubLogoURL;
                    }
                }

                return "https://minfotboll.blob.core.windows.net/clublogos/defaultclublogo.png";
            }),

            gameDatePart = ko.computed(function () {
                if (currentGameDate() !== undefined)
                    return currentGameDate();

                return "";
            }),

            gameTimePart = ko.computed(function () {
                if (currentGameTime() !== undefined)
                    return currentGameTime();

                return "";
            }),

            leagueName = ko.computed(function () {
                if (isPracticeGame()) {
                    if (swconstants.applicationId === 2 || swconstants.applicationId === 3 ) {
                        return "Träningsmatch";
                    } else if (swconstants.applicationId === 4) {
                        return "Freundschaftsspiele";
                    } else  {
                        return "Friendly game";
                    }
                }

                return selectedLeagueName();
            }),

            opponentName = ko.computed(function () {
                if (opponentClubName() !== undefined && opponentClubName().length > 0)
                    return opponentClubName();

                if (typeof game() !== 'undefined') {
                    return game().OpponentClubName;
                }

                return "Välj motståndare";
            }),

            teamName = ko.computed(function () {
                if (opponentTeamName() !== undefined && opponentTeamName().length > 0)
                    return opponentTeamName();

                if (typeof game() !== 'undefined') {
                    return game().OpponentTeamName;
                }

                return teamAdminTexts.SelectTeam;
            }),

            gameDateChanged = function (data, event) {
                currentGameDate(event.target.value);
            },

            onSearchClubInput = function (data, event) {
                var searchString = $(event.target).val();

                if (searchString.length > 2) {
                    showClubEmptyState(true);

                    datamanager.searchClubs(searchString, {
                        success: function (model) {
                            clubs([]);

                            var underlayingTeamFeedArray = clubs();

                            for (var i = 0; i < model.length; i++) {
                                underlayingTeamFeedArray.push(model[i]);
                            }

                            clubs.valueHasMutated();
                        },
                        error: function (response, xhr) {
                            console.log(response);
                        }
                    });
                }
                else {
                    showClubEmptyState(false);
                    clubs([]);
                }
            },

            onSearchArenaInput = function (data, event) {
                var searchString = $(event.target).val();

                if (searchString.length > 2) {
                    datamanager.searchArenas(searchString, {
                        success: function (model) {
                            arenas([]);

                            var underlayingTeamFeedArray = arenas();

                            for (var i = 0; i < model.length; i++) {
                                underlayingTeamFeedArray.push(model[i]);
                            }

                            arenas.valueHasMutated();
                        },
                        error: function (response, xhr) {
                            console.log(response);
                        }
                    });
                }
                else {
                    arenas([]);
                }
            },

            selectClub = function (item) {
                opponentClubLogoUrl(item.LogoURL);
                opponentClubName(item.Title);
                opponentClubID(item.EntityID);


                clubTeams([]);

                opponentTeamName(teamAdminTexts.SelectTeam);
                game().OpponentTeamID = 0;

                removeError('opponentNameValidation');

                cancelSelection();
            },

            selectTeam = function (item) {
                opponentTeamName(item.TeamName);
                game().OpponentTeamID = item.TeamID;

                cancelSelection();
            },

            selectArena = function (item) {
                arenaName(item.ArenaName);
                arenaId = item.ArenaID;

                cancelSelection();
            },

            cancelSelectTeam = function (item) {
                opponentTeamName(teamAdminTexts.SelectTeam);
                game().OpponentTeamID = 0;

                cancelSelection();
            },

            selectLeague = function (item) {
                selectedLeagueName(item.LeagueName);
                leagueId = item.LeagueID;

                removeError('leagueNameValidation');

                cancelSelection();
            },

            selectGender = function (data, event) {
                genderName(data.Name);
                selectedGender(data.GenderID);
            },

            selectReplacementTeam = function (data, event) {
                if (awayTeamSelected) {
                    gameHeaderInfo().AwayTeamClubName = data.ClubName;
                    gameHeaderInfo().AwayTeamTeamName = data.Name;
                    gameHeaderInfo().AwayTeamClubLogoURL = data.ClubLogoURL;
                    gameHeaderInfo().AwayTeamID = data.TeamID;
                } else {
                    gameHeaderInfo().HomeTeamClubName = data.ClubName;
                    gameHeaderInfo().HomeTeamTeamName = data.Name;
                    gameHeaderInfo().HomeTeamClubLogoURL = data.ClubLogoURL;
                    gameHeaderInfo().HomeTeamID = data.TeamID;
                }

                gameHeaderInfo.valueHasMutated();

                teamToReplace('');
            },

            addClub = function () {
                $('#game-view .addclub').show();

                $('#addClubName').focus();
            },

            addLeague = function () {
                $('#game-view .addleague').show();

                $('#addLeagueName').focus();
            },

            addReferee = function (data) {
                datamanager.addRefereeToGame(gameId, data.RefereeID, {
                    success: function (json) {
                        datamanager.initGameReferees(gameId, {
                            success: function (model) {
                                referees([]);

                                var underlayingArray = referees();

                                for (var i = 0; i < model.Referees.length; i++) {
                                    underlayingArray.push(model.Referees[i]);
                                }

                                referees.valueHasMutated();
                            },
                            error: function (error) {
                                console.log(error);
                            }
                        });

                        refereeSearchString('');
                        refereesFromSearch([]);
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            addHomeTeamGoalie = function (data, event) {
                datamanager.getGameGoalies(gameId, data.HomeTeamID, {
                    success: function (model) {
                        availableGoalies([]);

                        var underlayingArray = availableGoalies();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        availableGoalies.valueHasMutated();

                        $('#game-view .selectgoalie').show();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            addAwayTeamGoalie = function (data, event) {
                datamanager.getGameGoalies(gameId, data.AwayTeamID, {
                    success: function (model) {
                        availableGoalies([]);

                        var underlayingArray = availableGoalies();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        availableGoalies.valueHasMutated();

                        $('#game-view .selectgoalie').show();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            selectGoalie = function (data, event) {
                // Check so that the goalie isn't already in the selection
                if (data.TeamID === goalieStatistics().HomeTeamID) {
                    var existingItem = ko.utils.arrayFirst(homeTeamGoalies(), function (goalie) {
                        return goalie.PlayerID === data.PlayerID;
                    });

                    if (!existingItem)
                        homeTeamGoalies.push(data);
                } else {
                    var existingItem = ko.utils.arrayFirst(awayTeamGoalies(), function (goalie) {
                        return goalie.PlayerID === data.PlayerID;
                    });

                    if (!existingItem)
                        awayTeamGoalies.push(data);
                }                                

                $('#game-view .selectgoalie').hide();
            },

            deleteReferee = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteGameReferee(data.GameRefereeID)
                        .then(function (model) {
                            datamanager.initGameReferees(gameId, {
                                success: function (model) {
                                    referees([]);

                                    var underlayingArray = referees();

                                    for (var i = 0; i < model.Referees.length; i++) {
                                        underlayingArray.push(model.Referees[i]);
                                    }

                                    referees.valueHasMutated();
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        })
                        .fail(function (error) {
                            alert(error);
                        });
                }
            },

            confirmCreateClub = function () {
                $('#game-view .overlay').hide();

                opponentClubLogoUrl('https://minfotboll.blob.core.windows.net/clublogos/defaultclublogo.png');
                opponentClubName($('#addClubName').val());
                opponentClubID(0);

                removeError('opponentNameValidation');

                cancelSelection();
            },

            confirmCreateLeague = function () {
                $('#game-view .overlay').hide();

                selectedLeagueName($('#addLeagueName').val());
                leagueId = 0;

                removeError('leagueNameValidation');

                cancelSelection();
            },

            cancelOverlay = function () {
                $('#game-view .overlay').hide();
            },            

            displayError = function (id, text) {
                clearTimeout(errorTimer);

                $('#' + id).removeClass("hidden");
                $('#' + id + ' .validationText').text(text);

                //errorTimer = setTimeout(function () {
                //    $('#' + id).addClass("hidden");

                //}, 5000);
            },

            removeError = function (id) {
                $('#' + id).addClass("hidden");
            },

            validateGame = function () {
                var hasError = false;

                $('.alert-validation').addClass("hidden");

                if (leagueId < 0 && isPracticeGame() === false) {
                    displayError('leagueNameValidation', 'Välj en tävling eller cup');
                    hasError = true;
                }

                if (opponentClubID() < 0) {
                    displayError('opponentNameValidation', 'Välj en motståndare');
                    hasError = true;
                }

                var currentGameDate = $('#gameDate').val();
                var currentGameTime = $('#gameTime').val();

                if (currentGameDate.length === 0) {
                    displayError('gameDateValidation', 'Välj ett speldatum');
                    hasError = true;
                }

                if (currentGameTime.length === 0) {
                    displayError('gameTimeValidation', 'Välj en tid');
                    hasError = true;
                }
                if (currentGameDate.length > 0 && currentGameTime.length > 0) {
                    if (moment(currentGameDate + "T" + currentGameTime).utc().isValid() === false) {
                        displayError('gameTimeValidation', 'Tiden är på ett felaktigt format, ange tiden som timmar och minuter (hh:mm)');
                        hasError = true;
                    }
                }

                if (hasError)
                    return;

                // Show 'is this correct' screen

                if (gameId === 0) {
                    $('.game-editview').hide();
                    $('#game-confirmsave').show();
                    $('#game-confirmsaveheader').show();
                } else {
                    saveGame();
                }
            },

            saveGame = function () {
                var currentGameDate = $('#gameDate').val();
                var currentGameTime = $('#gameTime').val();

                var gameTime = moment(currentGameDate + "T" + currentGameTime).utc().format("YYYY-MM-DD HH:mm:ss");

                //var gameForUpdate = new viewmodel.GameForEditView()
                //    .GameID(gameId)
                //    .TeamID(teamId)
                //    .LeagueID(leagueId)
                //    .LeagueName(selectedLeagueName)
                //    .ArenaID(arenaId)
                //    .GameTime(gameTime)
                //    .OpponentClubID(opponentClubID())
                //    .OpponentClubName(opponentClubName)
                //    .IsHomeGame(isHomeGame)
                //    .IsPracticeGame(isPracticeGame);

                //var ts = ko.toJS(gameForUpdate);

                game().ArenaID = arenaId;
                game().GameTime = gameTime;
                game().IsHomeGame = isHomeGame;
                game().IsPracticeGame = isPracticeGame;
                game().LeagueID = leagueId;
                game().LeagueName = selectedLeagueName;
                game().OpponentClubID = opponentClubID();
                game().OpponentClubName = opponentClubName;

                var ts = ko.toJS(game);

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.saveGame(ts, {
                    success: function (result) {
                        shell.hideProgressIndicator();

                        shell.showToast(MiscTexts.MatchIsSaved);

                        router.navigateBack();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    }
                });
            },

            saveStats = function (data, event) {
                shell.showProgressIndicator(MiscTexts.Saving);

                var tempStorage = [];

                ko.utils.arrayForEach(homeTeamGoalies(), function (item) {
                    tempStorage.push(item);
                });

                ko.utils.arrayForEach(awayTeamGoalies(), function (item) {
                    tempStorage.push(item);
                });

                datamanager.insertGameGoalieStatistics(tempStorage)
                    .then(function () {                        
                        datamanager.insertGoalStatistics(gameId)
                            .then(function () {
                                shell.hideProgressIndicator();

                                router.navigateTo(config.hashes.magazinegameview + '/' + gameId);
                            })
                            .fail(function (error) {
                                shell.hideProgressIndicator();
                            });
                        
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    });
            },

            updateTeams = function () {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Saving);

                    var gameVM = {
                        GameID: gameHeaderInfo().GameID,
                        HomeTeamID: gameHeaderInfo().HomeTeamID,
                        AwayTeamID: gameHeaderInfo().AwayTeamID,
                    };

                    datamanager.updateTeams(gameVM, {
                        success: function () {
                            shell.hideProgressIndicator();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                }
            },

            onKeyPressTime = function (d, e) {
                return e.metaKey || e.which <= 0 || e.which === 8 || e.which === 58 || /[0-9]/.test(String.fromCharCode(e.which));
            },

            onKeyUpTime = function (d, e) {
                var t = $('#gameTime').val();

                if (t.length > 0)
                    currentGameTime($('#gameTime').val());
                else
                    currentGameTime('-');
            },

            onTeamClicked = function (isAwayTeam, data, event) {
                awayTeamSelected = isAwayTeam;

                if (isAwayTeam) {
                    teamToReplace({
                        ClubName: data.AwayTeamClubName,
                        TeamName: data.AwayTeamTeamName,
                        ClubLogoURL: data.AwayTeamClubLogoURL
                    });
                } else {
                    teamToReplace({
                        ClubName: data.HomeTeamClubName,
                        TeamName: data.HomeTeamTeamName,
                        ClubLogoURL: data.HomeTeamClubLogoURL
                    });

                }

                // TODO: Show the team
                // TODO: Show potential teams to select
            },

            searchReferees = function () {
                if (refereeSearchString().length < 2) {
                    return;
                }

                datamanager.searchRefereesBySearchString(refereeSearchString(), {
                    success: function (model) {
                        refereesFromSearch([]);

                        var underlayingArray = refereesFromSearch();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        refereesFromSearch.valueHasMutated();

                        if (model.length === 0)
                            $('#game-view .referees-empty-state').show();
                        else
                            $('#game-view .referees-empty-state').hide();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            cancelSelection = function () {
                $('.game-editview').hide();
                $('#game-start').show();

                window.scrollTo(0, 0);
            },

            showArenaSelect = function () {
                window.scrollTo(0, 0);

                $('.game-editview').hide();
                $('#game-arena').show();

                $("#gameAddSearchArena").focus();
            },

            showLeagueSelect = function () {
                window.scrollTo(0, 0);

                $('.game-editview').hide();
                $('#game-league').show();

                if (leagues().length === 0) {
                    datamanager.getCreatedLeaguesForTeam(teamId, {
                        success: function (model) {
                            leagues([]);

                            var underlayingArray = leagues();

                            for (var i = 0; i < model.length; i++) {
                                underlayingArray.push(model[i]);
                            }

                            leagues.valueHasMutated();
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            showClubSelect = function () {
                window.scrollTo(0, 0);

                $('.game-editview').hide();
                $('#game-club').show();

                $("#gameAddSearchClub").focus();
            },

            showTeamSelect = function () {
                window.scrollTo(0, 0);


                $('.game-editview').hide();
                $('#game-team').show();

                $("#gameAddSearchClub").focus();

                shell.showProgressIndicator(MiscTexts.GettingTeams);

                selectedGender(game().GenderID);
                genderName(game().GenderName);

                if (genders().length === 0) {
                    datamanager.getGenders({
                        success: function (json) {
                            genders([]);

                            var underlayingArray = genders;

                            for (var j = 0; j < json.length; j++) {
                                underlayingArray.push(json[j]);
                            }

                            genders.valueHasMutated();
                        },
                        error: function (error) {

                        }
                    });
                }


                datamanager.getTeamsForClubAndGame(opponentClubID(), teamId, {
                    success: function (json) {
                        clubTeams([]);

                        var underlayingArray = clubTeams;

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        clubTeams.valueHasMutated();

                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        alert(error);

                        shell.hideProgressIndicator();
                    }
                });
            },

            navigateToLeague = function () {

            },

            navigateToGame = function (data) {
                router.navigateTo(config.hashes.magazinegameview + '/' + data.GameID);
            },

            toggleHomeGame = function () {
                isHomeGame(true);
            },

            toggleAwayGame = function () {
                isHomeGame(false);
            },

            togglePracticeGame = function () {
                isPracticeGame(true);
            },

            toggleCompetitionGame = function () {
                isPracticeGame(false);
            },

            clubTeamsFiltered = ko.computed(function () {
                return ko.utils.arrayFilter(clubTeams(), function (item) {
                    var match = false;

                    if (selectedGender() === 0)
                        match = true;
                    else {
                        match = item.GenderID === selectedGender();

                        // If the gender is selected and doesn't match, we can return here
                        if (!match)
                            return false;
                    }

                    if (teamSearchString().length > 0) {
                        var s = teamSearchString().toLowerCase().replace(" ", "");

                        // Search the team name
                        match = item.TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1;

                        // Search the team alias if it is set
                        if (item.TeamAlias.toLowerCase().replace(" ", "").indexOf(s) !== -1)
                            match = true;

                        for (var i = 0; i < item.TeamStaffForClubTeamView.length; i++) {
                            // Search TeamStaff for the name
                            if (item.TeamStaffForClubTeamView[i].FullName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }

                        for (var j = 0; j < item.Leagues.length; j++) {
                            // Search Leagues for the TeamName
                            if (item.Leagues[j].TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }

                            // Search Leagues for the LeagueName
                            if (item.Leagues[j].LeagueName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }
                    } else {
                        return true;
                    }

                    return match;
                });
            }),

            cleanup = function () {
                clearTimeout(errorTimer);

                $('.game-editview').hide();

                editMode(false); 
                isHomeGame(true);
                isPracticeGame(true);
                showClubEmptyState(false);
                gameId = 0;
                leagueId = -1;
                opponentClubID(-1);
                leagues([]);
                clubTeams([]);
                genders([]);
                homeTeamGoalies([]);
                awayTeamGoalies([]);
                goalieStatistics('');
            };

        return {
            activate: activate,
            cleanup: cleanup,

            game: game,
            clubs: clubs,
            teams: teams,
            arenas: arenas,
            leagues: leagues,
            genders: genders,
            clubTeamsFiltered: clubTeamsFiltered,
            isHomeGame: isHomeGame,
            isPracticeGame: isPracticeGame,
            editMode: editMode,
            gameHeaderInfo: gameHeaderInfo,
            refereeSearchString: refereeSearchString,
            referees: referees,
            refereesFromSearch: refereesFromSearch,

            homeTeamClubName: homeTeamClubName,
            homeTeamTeamName: homeTeamTeamName,
            homeTeamClubLogo: homeTeamClubLogo,

            awayTeamClubName: awayTeamClubName,
            awayTeamTeamName: awayTeamTeamName,
            awayTeamClubLogo: awayTeamClubLogo,

            gameDatePart: gameDatePart,
            gameTimePart: gameTimePart,            
            arenaName: arenaName,
            leagueName: leagueName,
            opponentName: opponentName,
            teamName: teamName,
            teamSearchString: teamSearchString,
            opponentClubID: opponentClubID,
            selectedGender: selectedGender,
            genderName: genderName,
            teamToReplace: teamToReplace,
            goalieStatistics: goalieStatistics,
            homeTeamGoalies: homeTeamGoalies,
            awayTeamGoalies: awayTeamGoalies,
            availableGoalies: availableGoalies,

            toggleHomeGame: toggleHomeGame,
            toggleAwayGame: toggleAwayGame,
            togglePracticeGame: togglePracticeGame,
            toggleCompetitionGame: toggleCompetitionGame,

            gameDateChanged: gameDateChanged,

            onSearchClubInput: onSearchClubInput,
            onSearchArenaInput: onSearchArenaInput,
            onKeyPressTime: onKeyPressTime,
            onKeyUpTime: onKeyUpTime,

            navigateToLeague: navigateToLeague,
            navigateToGame: navigateToGame,


            onTeamClicked: onTeamClicked,
            searchReferees: searchReferees,

            selectClub: selectClub,
            selectArena: selectArena,
            selectLeague: selectLeague,
            selectTeam: selectTeam,
            selectGender: selectGender,
            selectReplacementTeam: selectReplacementTeam,
            selectGoalie: selectGoalie,

            addClub: addClub,
            addLeague: addLeague,
            addReferee: addReferee,
            addHomeTeamGoalie: addHomeTeamGoalie,
            addAwayTeamGoalie: addAwayTeamGoalie,
            deleteReferee: deleteReferee,

            confirmCreateClub: confirmCreateClub,
            confirmCreateLeague: confirmCreateLeague,
            cancelOverlay: cancelOverlay,

            showArenaSelect: showArenaSelect,
            showClubSelect: showClubSelect,
            showTeamSelect: showTeamSelect,
            showLeagueSelect: showLeagueSelect,
            showClubEmptyState: showClubEmptyState,
            cancelSelection: cancelSelection,
            cancelSelectTeam: cancelSelectTeam,
            validateGame: validateGame,
            saveGame: saveGame,
            saveStats: saveStats,
            updateTeams: updateTeams
        };
    });;
define('viewmodels/vm.gamecomment',
    ['jquery', 'ko', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'toastr', 'presenter', 'models/model', 'models/model.mapper', 'underscore'],
    function ($, ko, router, messenger, datamanager, shell, toastr, presenter, model, modelmapper, _) {
        var currentGameDiscussionPostId = ko.observable(),
            gameDiscussionPostId = ko.observable(),
            gameDiscussionPost = ko.observable(),
            currentGameId = ko.observable(),

        canEditGameDiscussionPost = ko.computed(function () {
            return gameDiscussionPost() && shell.currentMember && (gameDiscussionPost().InsertMemberID() === shell.currentMember.MemberID || shell.currentMember.IsSportswikAdmin);
        }),

        activate = function (routeData, callback) {
//            window.scrollTo(0,0);
            messenger.publish.viewModelActivated();
            currentGameId(routeData.gameId);
            currentGameDiscussionPostId("");
            gameDiscussionPostId("");
            gameDiscussionPost("");

            if (!routeData.Id) {
                // creates new gameDiscussionPost
                var gameDiscussionPostModel = new model.GameDiscussionPost()
                    .InsertMemberID(shell.currentMember.MemberID)
                    .UpdateMemberID(shell.currentMember.MemberID)
                    .MemberID(shell.currentMember.MemberID)
                    .Member(shell.currentMember)
                    .GameID(currentGameId());
                gameDiscussionPost(gameDiscussionPostModel);                
            }
            else {
                // get current gameDiscussionPost
                currentGameDiscussionPostId(routeData.Id);
                getGameDiscussionPost(callback);                
            }

            if (_.isFunction(callback)) {
                callback();
            }
        },

        getGameDiscussionPost = function (callback) {
            datamanager.getGameDiscussionPost(currentGameDiscussionPostId(), {
                success: function (json) {
                    gameDiscussionPost(modelmapper.gamediscussionpost.fromDto(json[0]));
                    if (_.isFunction(callback)) {
                        callback();
                    }
                },
                error: function (response) {
                    toastr.error(response);
                }
            });
        },

        validationErrors = ko.computed(function () {
            var valArray = gameDiscussionPost() ? ko.validation.group(gameDiscussionPost())() : [];
            return valArray;
        }),

        isValid = ko.computed(function () {
            return canEditGameDiscussionPost() ? validationErrors().length === 0 : true;
        }),

        cancelCmd = function () {
            goBackCmd();
        },

        insertCmd = function () {
            if (isValid()) {
                datamanager.insertGameDiscussionPost(modelmapper.gamediscussionpost.toDto(gameDiscussionPost()), {
                    success: function (json) {
                        goBackCmd();
                    },
                    error: function (response) {
                        alert(response);
                        presenter.toggleActivity(false);
                    }
                });
            }
        },

        saveCmd = function() {
            if (canEditGameDiscussionPost()) {
                if (currentGameDiscussionPostId()) {
                    updateCmd();
                }
                else {
                    insertCmd();
                }
            }
        },

        updateCmd = function () {
            if (isValid()) {
                // Updates post with datamanger
                presenter.toggleActivity(true);
                datamanager.updateGameDiscussionPost(modelmapper.gamediscussionpost.toDto(gameDiscussionPost()), {
                    success: function (json) {
                        goBackCmd();
                    },
                    error: function (response) {
                        alert(response);
                        presenter.toggleActivity(false);
                    }
                });
            }
        },

        deleteCmd = function () {
            if (canEditGameDiscussionPost()) {
                // Updates post with datamanger
                presenter.toggleActivity(true);
                datamanager.deleteGameDiscussionPost(gameDiscussionPost().GameDiscussionPostID(), {
                    success: function (json) {
                        goBackCmd();
                    },
                    error: function (response) {
                        alert(response);
                        presenter.toggleActivity(false);
                    }
                });
            }
        },

        goBackCmd = function () {
            router.navigateBack();
        },

        tmplName = function () {
            return canEditGameDiscussionPost() ? 'gamecomment.edit' : 'gamecomment.view';
        };
      
        return {
            activate: activate,
            gameDiscussionPost: gameDiscussionPost,
            tmplName: tmplName,
            cancelCmd: cancelCmd,
            deleteCmd: deleteCmd,
            saveCmd: saveCmd
        };
    });
;
define('viewmodels/vm.gameheadernavigation',
    ['ko', 'config', 'router', 'datamanager'],
    function (ko, config, router, datamanager) {
        var gameHeaderInfo = ko.observable(),

        activate = function(routeData) {
            datamanager.getGameHeaderInfo(routeData.gameId, {
                success: function(json) {
                    gameHeaderInfo(json);
                },
                error: function() {

                }
            });
        },

        cleanup = function() {
        },

        navigateToTeamView = function(teamId) {
            navigationItem = {
                getHrefString: function(){
                    return config.hashes.team + '/' + teamId;
                },
                toClick: function(){
                    router.navigateTo(config.hashes.team + '/' + teamId);
                }
            };
            return navigationItem;
        },
            
        navigateToLeague = function (leagueId) {
            navigationItem = {
                getHrefString: function () {
                    return config.hashes.leaguesite + '/' + leagueId;
                },
                toClick: function () {
                    router.navigateTo(config.hashes.leaguesite + '/' + leagueId);
                }
            };
            return navigationItem;
        };

        return {
            activate: activate,
            gameHeaderInfo: gameHeaderInfo,
            navigateToTeamView: navigateToTeamView,
            navigateToLeague: navigateToLeague
        };
    });;
define('viewmodels/vm.gamehighlights',
    ['jquery', 'ko', 'router', 'config', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'toastr', 'presenter', 'underscore'],
    function ($, ko, router, config, messenger, datamanager, shell, toastr, presenter, _) {
        var gameId = 0,
            gameEvents = ko.observableArray(),
            videos = ko.observableArray(),
            highlights = ko.observableArray(),
            availableEvents = ko.observableArray(),
            suggestedEREvents = ko.observableArray(),
            game = ko.observable(),
            video = ko.observable(),
            connectedEREvent = ko.observable(),
            selectedHighlight = ko.observable(),
            player = null,
            adjustTimeString = ko.observable(),
            newClipLength = ko.observable(),
            selectedEREvent = ko.observable(),
            newStartTime = 0,
            newEndTime = 0,
            playbackRate = 1.0,
            videoDescription = ko.observable(''),
            listenersAdded = false,
            isPlaying = ko.observable(false),

            activate = function (routeData, callback) {
                if (routeData.Id !== undefined) {
                    // TODO:
                }

                if (routeData.gameId !== undefined) {
                    gameId = routeData.gameId;
                }

                datamanager.initGameLiveStreamHighlights(gameId, {
                    success: function (json) {
                        videos([]);
                        highlights([]);
                        gameEvents([]);

                        var underlayingArray = videos();

                        for (var i = 0; i < json.LiveStreams.length; i++) {
                            underlayingArray.push(json.LiveStreams[i]);
                        }

                        videos.valueHasMutated();

                        underlayingArray = highlights();

                        for (var j = 0; j < json.Highlights.length; j++) {
                            underlayingArray.push(json.Highlights[j]);
                        }

                        highlights.valueHasMutated();

                        underlayingArray = gameEvents();

                        for (var k = 0; k < json.EREvents.length; k++) {
                            underlayingArray.push(json.EREvents[k]);
                        }

                        gameEvents.valueHasMutated();
                        game(json.Game);
                        video(json.LiveStreams[0]);

                        loadVideoURL(json.LiveStreams[0].VideoURL);

                        setSelectedClip(video().LiveStreamID);
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            loadVideoURL = function (url) {
                //if (player) {
                //    player.removeEventListener("timeupdate");
                //    player.removeEventListener("play");
                //    player.removeEventListener("Paused");
                //}


                $("#highlightVideoPlayer > source").attr("src", url);
                $("#highlightVideoPlayer").load();

                player = $('#highlightVideoPlayer').get(0);
                player.playbackRate = playbackRate;


                if (!listenersAdded) {
                    player.addEventListener("timeupdate", function () {
                        var currentTime = parseInt(this.currentTime, 10);

                        adjustTimeString(fancyTimeFormat(currentTime));
                    });

                    player.addEventListener("play", function () {
                        isPlaying(true);
                    });

                    player.addEventListener("pause", function () {
                        isPlaying(false);
                    });

                    listenersAdded = true;
                }

            },

            insertHighlight = function () {
                var secondsFromStart = parseInt(player.currentTime, 10);
                var threshhold = 90;

                player.pause();

                if (!selectedEREvent()) {
                    // If there are EREvents loaded for this game, seach them to see if we can suggest one for the user
                    var suggestedEvents = ko.utils.arrayFilter(gameEvents(), function (item) {
                        if (item.LiveStreamID === video().LiveStreamID && item.LiveStreamHighlightID === 0) {

                            var diff = Math.abs(secondsFromStart - item.LiveStreamOffset);

                            if (diff < threshhold)
                                return true;

                            return false;
                        }


                        return false;
                    });

                    if (suggestedEvents.length > 0) {
                        suggestedEREvents([]);

                        var underlayingArray = suggestedEREvents();

                        for (var i = 0; i < suggestedEvents.length; i++) {
                            underlayingArray.push(suggestedEvents[i]);
                        }

                        suggestedEREvents.valueHasMutated();
                        $('#gamehighlights-view .suggestedEREventsSelect').show();

                        return;
                    }
                }

                createHighlightHelper();
            },

            createHighlightHelper = function () {
                var thumbnailData = createThumbnail();

                var secondsFromStart = parseInt(player.currentTime, 10);
                var liveStreamId = video().LiveStreamID;
                var teamId = game().HomeTeamID;
                var eventTime = new Date();
                var highlightTypeId = 1; // Goal
                var description = '';

                if (selectedEREvent()) {
                    teamId = selectedEREvent().TeamID;
                }

                shell.showProgressIndicator('Skapar highlight...');

                datamanager.insertGameHighlight(teamId, liveStreamId, eventTime, secondsFromStart, highlightTypeId, 2, description, thumbnailData)
                    .then(function (newId) {
                        if (selectedEREvent()) {
                            datamanager.updateEREventWithHighlight(gameId, newId, selectedEREvent().ItemID)
                                .then(function (json) {
                                    loadGameHighlights();
                                    
                                    reloadEREvents(newId);

                                    selectedEREvent('');

                                    shell.hideProgressIndicator();
                                })
                                .fail(function (error) {
                                    alert(error.responseText);
                                });
                        }
                        else {
                            loadGameHighlights();

                            shell.hideProgressIndicator();
                        }
                    })
                    .fail(function (error) {
                        alert(error.responseText);
                    });
            },

            loadGameHighlights = function () {
                datamanager.getLiveStreamHighlightsForGame(gameId, {
                    success: function (json) {
                        highlights([]);

                        var underlayingArray = highlights();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        highlights.valueHasMutated();

                        if (selectedHighlight())
                            setSelectedHighlight(selectedHighlight().LiveStreamHighlightID);
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            deleteHighlight = function (data) {
                var r = confirm('Är du säker på att du vill ta bort denna highlight?');

                if (r === true) {
                    datamanager.deleteGameLiveStreamHighlight(data.LiveStreamHighlightID, {
                        success: function (json) {
                            loadGameHighlights();

                            // TODO: Only reload if the item was connected to an EREvent
                            reloadEREvents(0);
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
            },

            selectVideo = function (data, event) {
                $('.clipList li').removeClass('selectedItem');
                $('.highlightList li').removeClass('selectedItem');
                $(".EREventList li").removeClass('selectedItem');

                $(event.target).closest('li').addClass('selectedItem');

                $('#highlightVideoWindow').show();
                $('#highlightPreviewWindow').hide();

                video(data);

                loadVideoURL(data.VideoURL);
                videoDescription(video().Description);

                // Clear selection of EREvent
                selectedEREvent('');

                // Clear selection of Highlight
                selectedHighlight('');

                connectedEREvent('');
                availableEvents([]);

            },

            selectEREvent = function (data, event) {
                $('.EREventList li').removeClass('selectedItem');
                $('.highlightList li').removeClass('selectedItem');

                $(event.target).closest('li').addClass('selectedItem');

                connectedEREvent('');
                selectedHighlight('');
                availableEvents([]);

                var existingVideo = ko.utils.arrayFirst(videos(), function (item) {
                    return data.LiveStreamID === item.LiveStreamID;
                });

                if (existingVideo) {
                    videoDescription(existingVideo.Description);

                    if (video().LiveStreamID !== existingVideo.LiveStreamID) {
                        $('.clipList li').removeClass('selectedItem');

                        setSelectedClip(existingVideo.LiveStreamID);                        
                    }

                    video(existingVideo);
                }

                if (data.LiveStreamHighlightID > 0) {
                    selectedEREvent('');

                    $('#highlightVideoWindow').hide();
                    $('#highlightPreviewWindow').show();

                    setSelectedHighlight(data.LiveStreamHighlightID);                    

                    if (selectedHighlight() && selectedHighlight().HighlightURL) {
                        loadVideoURL(selectedHighlight().HighlightURL);
                    } else if (existingVideo) {
                        loadVideoURL(existingVideo.VideoURL);

                        if (selectedHighlight()) {
                            player.currentTime = selectedHighlight().Offset
                        }
                    }
                } else {
                    selectedEREvent(data);

                    $('#highlightVideoWindow').show();
                    $('#highlightPreviewWindow').hide();

                    if (existingVideo) {
                        loadVideoURL(existingVideo.VideoURL);

                        player.currentTime = data.LiveStreamOffset;
                    }
                }
            },

            showHighlight = function (data) {
                var url = "";

                selectedEREvent('');

                if (data.HighlightURL) {
                    url = data.HighlightURL;
                } else {
                    url = data.LiveStreamURL + '#t=' + data.Offset + ',' + (data.Offset + data.Length);
                }

                $('.clipList li').removeClass('selectedItem');
                $('.highlightList li').removeClass('selectedItem');
                $(".EREventList li").removeClass('selectedItem');

                $(event.target).closest('li').addClass('selectedItem');

                $('#highlightVideoWindow').hide();
                $('#highlightPreviewWindow').show();
                $('#highlightToolbar').show();
                $('.timeSubView').hide();

                selectedHighlight(data);

                getEventsForHighlight(data.LiveStreamHighlightID);
                loadVideoURL(url);

                setSelectedEREvent(data.LiveStreamHighlightID);
                setSelectedClip(data.LiveStreamID);
            },

            setSelectedClip = function (id) {
                $(".clipList li").each(function (key, value) {
                    var clipData = ko.contextFor(value).$data;

                    if (clipData.LiveStreamID === id) {
                        $(this).addClass('selectedItem');

                        videoDescription(clipData.Description);
                    }
                });
            },

            setSelectedHighlight = function (id) {
                $(".highlightList li").each(function (key, value) {
                    var highlightData = ko.contextFor(value).$data;

                    if (highlightData.LiveStreamHighlightID === id) {
                        selectedHighlight(highlightData);
                        getEventsForHighlight(selectedHighlight().LiveStreamHighlightID);
                        $(this).addClass('selectedItem');
                    }
                });
            },

            setSelectedEREvent = function (id) {
                console.log(id);

                $(".EREventList li").each(function (key, value) {
                    var EREventData = ko.contextFor(value).$data;

                    if (EREventData.LiveStreamHighlightID === id) {
                        $(this).addClass('selectedItem');

                        var scrollPos = $(".EREventList").scrollTop() + $(this).position().top;

                        $('.EREventList').animate({  //scroll to specific offset on click 
                            scrollTop: scrollPos
                        }, 400);
                    }
                });
            },

            processGameHighlights = function () {
                datamanager.processGameHighlights(gameId)
                    .then(function (model) {
                        alert('Videon skickad till Batch!');
                    })
                    .fail(function (error) {
                        alert(error.responseText);
                    });
            },

            play = function () {
                if (player)
                    player.play();
            },

            pause = function () {
                if (player)
                    player.pause();
            },

            seekInVideo = function (offset) {
                if (player)
                    player.currentTime = parseInt(player.currentTime, 10) + offset;
            },

            setPlaybackRate = function (rate, data, event) {
                $('.playbackRateButtons .btn').removeClass('active');                
                $(event.target).addClass('active');

                playbackRate = rate;

                player.playbackRate = playbackRate;
                // might have to use defaultPlaybackRate aswell
                // defaultPlaybackRate  
            },

            createThumbnail = function () {
                var canvas = document.createElement('canvas'),
                    ctx = canvas.getContext('2d');

                // Might need to extract the ratio from player.videoWidth / player.videoHeight
                //var w = 320;
                //var h = 180;

                // Same as Android
                var w = 640;
                var h = 360;


                canvas.width = w;
                canvas.height = h;

                ctx.drawImage(player, 0, 0, w, h);

                var image = canvas.toDataURL('image/jpeg', 0.5);
                //var image = canvas.toDataURL();
                var base64result = image.substr(image.indexOf("base64,") + 7);

                return base64result;
            },

            removeConnectedEvent = function () {
                shell.showProgressIndicator(MiscTexts.Updating);

                datamanager.deleteHighlightFromEREvent(gameId, connectedEREvent().LiveTimeItemID, {
                    success: function (json) {
                        getEventsForHighlight(selectedHighlight().LiveStreamHighlightID);
                        reloadEREvents();
                        loadGameHighlights();                        

                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            reloadEREvents = function (selectedHighlightId) {
                datamanager.getEREventsForGame(gameId, {
                    success: function (json) {
                        gameEvents([]);

                        var underlayingArray = gameEvents();

                        for (var k = 0; k < json.length; k++) {
                            underlayingArray.push(json[k]);
                        }

                        gameEvents.valueHasMutated();


                        if (selectedHighlightId > 0)
                            setSelectedEREvent(selectedHighlightId);                        
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            eventSelected = function (data) {
                shell.showProgressIndicator(MiscTexts.Updating);

                datamanager.updateEREventWithHighlight(gameId, selectedHighlight().LiveStreamHighlightID, data.LiveTimeItemID)
                    .then(function (model) {                        
                        getEventsForHighlight(selectedHighlight().LiveStreamHighlightID);                        
                        reloadEREvents(selectedHighlight().LiveStreamHighlightID);

                        loadGameHighlights();

                        $('#gamehighlights-view .erEventSelect').hide();

                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        alert(error.responseText);
                    });
            },

            suggestedEventSelected = function (data) {
                console.log(data);

                var secondsFromStart = parseInt(player.currentTime, 10);
                var liveStreamId = video().LiveStreamID;
                var teamId = game().HomeTeamID;
                var eventTime = new Date();
                var highlightTypeId = 1; // Goal
                var description = '';
                var thumbnailData = createThumbnail();

                shell.showProgressIndicator('Skapar highlight...');

                $('#gamehighlights-view .suggestedEREventsSelect').hide();

                datamanager.insertGameHighlight(teamId, liveStreamId, eventTime, secondsFromStart, highlightTypeId, 2, description, thumbnailData)
                    .then(function (newId) {
                        datamanager.updateEREventWithHighlight(gameId, newId, data.ItemID)
                            .then(function (json) {
                                loadGameHighlights();
                                reloadEREvents(newId);

                                selectedEREvent('');

                                shell.hideProgressIndicator();
                            })
                            .fail(function (error) {
                                alert(error.responseText);
                            });

                    })
                    .fail(function (error) {
                        alert(error.responseText);
                    });
            },

            selectEvent = function () {
                $('#gamehighlights-view .erEventSelect').show();
            },

            closeEREventSelection = function () {
                $('#gamehighlights-view .erEventSelect').hide();                
            },

            closeSuggestedEREventSelection = function () {
                $('#gamehighlights-view .suggestedEREventsSelect').hide();

                createHighlightHelper();
            },

            adjustTime = function () {
                $('#highlightToolbar').hide();
                $('#highlightAdjustStartTime').show();

                // If we are playing a processed clip, load the original highlight-URL
                if (selectedHighlight().HighlightURL && selectedHighlight().HighlightURL.length > 0) {
                    loadVideoURL(selectedHighlight().LiveStreamURL);                    
                }

                player.currentTime = selectedHighlight().Offset;
                player.pause();                
            },

            cancelAdjustTime = function () {
                $('.timeSubView').hide();
                $('#highlightToolbar').show();

                // If we are playing a processed clip, load the highlight-URL
                if (selectedHighlight().HighlightURL && selectedHighlight().HighlightURL.length > 0) {
                    loadVideoURL(selectedHighlight().HighlightURL);
                }
            },

            setStartTime = function () {
                newStartTime = parseInt(player.currentTime, 10);

                player.currentTime = selectedHighlight().Offset + selectedHighlight().Length;
                player.pause();

                $('.timeSubView').hide();
                $('#highlightAdjustEndTime').show();
            },

            setEndTime = function () {
                newEndTime = parseInt(player.currentTime, 10);

                if (newEndTime - newStartTime < 0) {
                    alert('Klippet kan inte sluta före det börjar');
                    return;
                }

                player.pause();

                $('.timeSubView').hide();
                $('#highlightAdjustTimeConfirm').show();

                newClipLength('Klippets nya tid är mellan ' + fancyTimeFormat(newStartTime) + ' - ' + fancyTimeFormat(newEndTime));
            },

            saveTime = function () {
                var newLength = newEndTime - newStartTime;

                shell.showProgressIndicator(MiscTexts.Updating);

                datamanager.updateLivestreamHighlightTime(selectedHighlight().LiveStreamHighlightID, newStartTime, newLength)
                    .then(function (model) {
                        selectedHighlight(model);

                        var url = "";

                        if (model.HighlightURL) {
                            url = model.HighlightURL;
                        } else {
                            url = model.LiveStreamURL + '#t=' + model.Offset + ',' + (model.Offset + model.Length);
                        }
                        
                        loadVideoURL(url);                                               
                        loadGameHighlights();

                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });

                $('#highlightToolbar').show();
                $('.timeSubView').hide();
            },

            replayClip = function (data) {
                if (selectedHighlight().HighlightURL && selectedHighlight().HighlightURL.length > 0) {
                    player.currentTime = 0;                       
                } else {
                    player.currentTime = selectedHighlight().Offset;
                }
                
                player.play();
            },            

            fancyTimeFormat = function(duration) {   
                // Hours, minutes and seconds
                var hrs = ~~(duration / 3600);
                var mins = ~~((duration % 3600) / 60);
                var secs = ~~duration % 60;

                // Output like "1:01" or "4:03:59" or "123:03:59"
                var ret = "";

                if (hrs > 0) {
                    ret += "" + hrs + ":" + (mins < 10 ? "0" : "");
                }

                ret += "" + mins + ":" + (secs < 10 ? "0" : "");
                ret += "" + secs;
                return ret;
            },

            getEventsForHighlight = function (id) {
                availableEvents([]);

                datamanager.getEREventsForHighlight(id, {
                    success: function (json) {
                        connectedEREvent(json.SelectedEvent);

                        var underlayingArray = availableEvents();

                        for (var i = 0; i < json.AvailableEvents.length; i++) {
                            underlayingArray.push(json.AvailableEvents[i]);
                        }

                        availableEvents.valueHasMutated();
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            navigateToLeague = function (data) {
                router.navigateTo(config.hashes.leaguesite + '/' + data.LeagueID);
            },

            cleanup = function () {
                //gameId = 0,
                gameEvents([]);
                videos([]);
                highlights([]);
                availableEvents([]);
                suggestedEREvents([]);
                game(''); 
                video(''); 
                connectedEREvent('');
                selectedHighlight('');
                //player = null,
                adjustTimeString('');
                newClipLength('');
                selectedEREvent('');
                playbackRate = 1.0;
                videoDescription(''); 
                    //listenersAdded = false,
                isPlaying(false);

                $('#highlightVideoWindow').show();
                $('#highlightPreviewWindow').hide();
            };

        return {
            activate: activate,
            cleanup: cleanup,

            video: video,
            connectedEREvent: connectedEREvent,
            selectedEREvent: selectedEREvent,
            selectedHighlight: selectedHighlight,
            videos: videos,
            highlights: highlights,
            gameEvents: gameEvents,
            availableEvents: availableEvents,
            suggestedEREvents: suggestedEREvents,
            isPlaying: isPlaying,

            insertHighlight: insertHighlight,
            deleteHighlight: deleteHighlight,
            selectVideo: selectVideo,
            showHighlight: showHighlight,
            removeConnectedEvent: removeConnectedEvent,
            selectEvent: selectEvent,
            eventSelected: eventSelected,
            suggestedEventSelected: suggestedEventSelected,
            closeEREventSelection: closeEREventSelection,
            closeSuggestedEREventSelection: closeSuggestedEREventSelection,
            adjustTime: adjustTime,
            cancelAdjustTime: cancelAdjustTime,
            setStartTime: setStartTime,
            setEndTime: setEndTime,
            saveTime: saveTime,
            replayClip: replayClip,
            createThumbnail: createThumbnail,

            videoDescription: videoDescription,
            newClipLength: newClipLength,
            adjustTimeString: adjustTimeString,

            play: play,
            pause: pause,
            seekInVideo: seekInVideo,
            setPlaybackRate: setPlaybackRate,
            selectEREvent: selectEREvent,
            processGameHighlights: processGameHighlights,

            navigateToLeague: navigateToLeague,
            game: game
        };
    });
;
define('viewmodels/vm.gamemediaitem',
    ['ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'underscore'],
    function (ko, config, router, messenger, datamanager, shell, _) {

        var gameMediaItem = ko.observable(),
            logItems = ko.observableArray([]),

            activate = function (routeData, callback) {
                updateLog();
            },

            cleanup = function () {
                logItems([]);
            },

            updateLog = function () {
                if (gameMediaItem()) {
                    datamanager.getLiveStreamLogItems(gameMediaItem().GameMediaItemID, {
                        success: function (json) {
                            logItems([]);

                            var underlayingArray = logItems();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            logItems.valueHasMutated();
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            playVideo = function (item, event) {
                var elem = $(event.target).closest('.gameMediaRoot');

                elem.find('.streamSubscriptionInfo').hide();
                elem.find('.overlay-container').hide();
                elem.find('.swVideoPlayer').show();
                elem.find('.vjs-tech').show();
                elem.find('.vjs-tech').get(0).play();

                event.preventDefault();
                event.stopPropagation();
            },

            initialize = function (data) {
                gameMediaItem(data);
            };            

        return {
            activate: activate,
            cleanup: cleanup,
            initialize: initialize,

            playVideo: playVideo,
            updateLog: updateLog,
            
            gameMediaItem: gameMediaItem,
            logItems: logItems
            
        };
    });
;
define('viewmodels/vm.gamereport',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'presenter', 'models/model', 'models/viewmodel', 'models/model.mapper', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, shell, presenter, model, viewmodel, modelmapper, _) {
        var currentGameReportId = ko.observable(),
            gameGameReportId = ko.observable(),
            gameReport = ko.observable(),
            currentGameId = 0,
            pictureBase64data = '',
            gameReportTypeID = ko.observable(),

            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();
                currentGameId = Number(routeData.gameId);
                currentGameReportId("");
                gameGameReportId("");
                gameReport("");

                gameReportTypeID(Number(routeData.typeId));

                if (!routeData.Id) {
                    datamanager.initGameReportForEditView(currentGameId, gameReportTypeID(), {
                        success: function (json) {
                            console.log(json);

                            gameReport(json);
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
                else {
                    // get current gameReport
                    currentGameReportId(routeData.Id);
                    getGameReport(callback);
                }

                if (_.isFunction(callback)) {
                    callback();
                }
            },

            getGameReport = function (callback) {
                datamanager.getGameReport(currentGameReportId(), {
                    success: function (json) {
                        gameReport(json);

                        if (_.isFunction(callback)) {
                            callback();
                        }
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            selectGameReportPicture = function () {
                $('.gameReportFilePicker').focus().trigger('click');
            },

            removePicture = function () {
                pictureBase64data = '';
                gameReport().PictureEntityID = 0;

                $(".gameReportPicturePlaceholder .imageMask").show();
                $(".gameReportPicturePlaceholder").css('background-image', 'none');
            },

            handleGameReportPictureSelected = function (evt) {
                var files = evt.target.files;

                for (var i = 0; i < files.length; i++) {
                    var f = files[i];

                    if (!f.type.match('image.*')) {
                        continue;
                    }

                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            pictureBase64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            $(".gameReportPicturePlaceholder .imageMask").hide();
                            $(".gameReportPicturePlaceholder").css('background-image', 'url(' + 'data:image/jpg;base64,' + pictureBase64data + ')');
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },            

            cancelCmd = function () {
                goBackCmd();
            },
            
            saveCmd = function (data) {   
                if (data.GameReportID > 0) {
                    updateCmd(data);
                }
                else {
                    insertCmd(data);
                }
                
            },

            updateCmd = function (data) {
                var picBase64 = null;

                if (pictureBase64data.length > 0) {
                    picBase64 = pictureBase64data;
                }

                var report = new viewmodel.GameReportForEditView()
                    .GameReportID(data.GameReportID)          
                    .PictureEntityID(data.PictureEntityID)
                    .Title(data.Title)
                    .Text(data.Text)
                    .PictureBase64(picBase64);

                var m = ko.toJS(report);

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.updateGameReport(m, {
                    success: function (json) {
                        shell.hideProgressIndicator();

                        goBackCmd();
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();

                        alert(response);
                        presenter.toggleActivity(false);
                    }
                });
            },

            insertCmd = function (data) {
                var picBase64 = null;

                if (pictureBase64data.length > 0) {
                    picBase64 = pictureBase64data;
                }

                var report = new viewmodel.GameReportForEditView()
                    .GameID(data.GameID)
                    .GameReportTypeID(data.GameReportTypeID)
                    .Title(data.Title)
                    .Text(data.Text)
                    .PictureBase64(picBase64);

                var m = ko.toJS(report);

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.insertGameReport(m, {
                    success: function (json) {
                        shell.hideProgressIndicator();

                        goBackCmd();
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();

                        alert(response);
                        presenter.toggleActivity(false);
                    }
                });
            },

            deleteCmd = function () {                
                presenter.toggleActivity(true);

                datamanager.deleteGameReport(currentGameReportId(), {
                    success: function (json) {
                        goBackCmd();
                    },
                    error: function (response) {
                        alert(response);
                        presenter.toggleActivity(false);
                    }
                });                
            },

            goBackCmd = function () {
                presenter.toggleActivity(false);
                router.navigateTo(config.hashes.magazinegameview + '/' + currentGameId);
            },

            init = function () {
                $(document).on('change', '.gameReportFilePicker', function (evt) {
                    handleGameReportPictureSelected(evt);
                    evt.target.value = '';
                });

                $(document)
                    .one('#gamereport-view focus.textarea', '#gamereport-view .autoExpand', function () {
                        var savedValue = this.value;
                        this.value = '';
                        this.baseScrollHeight = this.scrollHeight;
                        this.value = savedValue;
                    })
                    .on('#gamereport-view input.textarea', '#gamereport-view .autoExpand', function () {
                        var minRows = this.getAttribute('data-min-rows') | 0,
                            rows;
                        this.rows = minRows;
                        rows = Math.ceil((this.scrollHeight - this.baseScrollHeight) / 20);
                        this.rows = minRows + rows;
                    });                
            };

        init();
            
        return {
            activate: activate,
            gameReport: gameReport,
            selectGameReportPicture: selectGameReportPicture,
            removePicture: removePicture,
            gameReportTypeID: gameReportTypeID,

            cancelCmd: cancelCmd,
            deleteCmd: deleteCmd,
            saveCmd: saveCmd
        };
    });
;
define('viewmodels/vm.gameteamrequest',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, _) {
        var id = 0,
            initModel = ko.observable(),

            activate = function (routeData, callback) {
                id = routeData.Id;

                datamanager.initGameRequest(id, {
                    success: function (json) {
                        initModel(json);

                        $('#gameteamrequest-view .main-preloader').hide();
                        $('#gameteamrequest-view .main-afterloaded').show();
                    },
                    error: function (error) {
                        $('#gameteamrequest-view .main-preloader').hide();
                        $('#gameteamrequest-view .main-afterloaded').show();

                        alert(error);
                    }
                });
            },

            acceptRequest = function () {
                datamanager.acceptGameRequest(id, {
                    success: function () {
                        router.navigateTo(config.hashes.magazinegameview + '/' + initModel().Game.GameID);
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            denyRequest = function () {
                router.navigateTo(config.hashes.magazine);
            },

            navigateToGame = function () {
                router.navigateTo(config.hashes.magazinegameview + '/' + initModel().Game.GameID);
            },

            cleanup = function () {
                id = 0;

                initModel('');

                $('#gameteamrequest-view .main-preloader').show();
                $('#gameteamrequest-view .main-afterloaded').hide();
            };

        return {
            activate: activate,
            cleanup: cleanup,

            initModel: initModel,

            acceptRequest: acceptRequest,
            denyRequest: denyRequest,
            navigateToGame: navigateToGame
        };
    });
;
define('viewmodels/vm.gameteamroster',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'viewmodels/vm.sockethelper', 'models/viewmodel', 'helpers/sw.utils', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, shell, socket, viewmodel, utils, _) {

        var id = 0,
            players = ko.observableArray(),
            staff = ko.observableArray(),
            games = ko.observableArray(),
            gameTeamRoster = ko.observable(),
            genders = ko.observableArray(),
            warnings = ko.observableArray(),

            initGamePlayersView = ko.observable(),
            initGameStaffView = ko.observable(),

            genderName = ko.observable('Kön'),
            playerSearchString = ko.observable(''),
            teamStaffSearchString = ko.observable(''),

            externalUserName = ko.observable('Ej kopplat'),

            selectedGender = ko.observable(0),
            selectedPlayer = ko.observable(),
            selectedStaff = ko.observable(),
            selectedPlayerInfo = ko.observable(),
            selectedTeamStaffInfo = ko.observable(),

            teamPlayers = ko.observableArray(),
            clubPlayers = ko.observableArray(),

            disclaimerTitle = ko.observable(),
            disclaimerText = ko.observable(),

            teamStaff = ko.observableArray(),
            clubStaff = ko.observableArray(),            

            changeDateObservable = ko.observable(),

            playerPositions = ko.observableArray(),
            teamStaffRoles = ko.observableArray(),

            canEdit = ko.observable(),

            externalAccountValid = ko.observable(false),
            externalAccountGameTeamValid = ko.observable(false),

            gamesType,

            activate = function (routeData, callback) {
                routeData.subview = 'start';

                messenger.publish.viewModelActivated();

                activatesubview(routeData);

                setupSockets();
            },

            activatesubview = function (routeData) {
                if (Number(routeData.Id) !== id) {
                    id = Number(routeData.Id);

                    cleanObservables();
                }

                var currentView = routeData.subview;

                $('.gameteamroster-subview').hide();
                $('#gameteamroster-' + currentView).show();

                var _data = {
                    GameTeamRosterID: id,
                    ExternalSystemParameters: getExternalParameters()
                };

                if (gameTeamRoster() === undefined || gameTeamRoster().length === 0) {
                    datamanager.initGameTeamRoster(_data)
                        .then(function (model) {
                            if (model) {
                                players([]);
                                staff([]);
                                warnings([]);

                                gameTeamRoster(model.GameTeamRosterHeader);                                

                                disclaimerTitle(model.FogisDisclaimerTitle);
                                disclaimerText(model.FogisDisclaimerText);

                                canEdit(model.GameTeamRosterHeader.CanEdit);

                                var underlayingArray = players();

                                for (var i = 0; i < model.Players.length; i++) {
                                    underlayingArray.push(model.Players[i]);
                                }

                                players.valueHasMutated();

                                underlayingArray = staff();

                                for (var j = 0; j < model.TeamStaff.length; j++) {
                                    underlayingArray.push(model.TeamStaff[j]);
                                }

                                staff.valueHasMutated();

                                underlayingArray = warnings();

                                for (var k = 0; k < model.Warnings.length; k++) {
                                    underlayingArray.push(model.Warnings[k]);
                                }

                                warnings.valueHasMutated();

                                activatesubview(routeData);

                            }
                            else
                                shell.hideProgressIndicator();
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        });
                } else {
                    switch (currentView) {
                        case 'start':
                            {
                                if (gameTeamRoster().RequiresExternalAccount && gameTeamRoster().MemberHasAccess === false) {
                                    showFogisConnection();
                                }
                                // If the gameTeamRoster is an external GameTeamRoster
                                else if (gameTeamRoster().IsFromExternalSystem) {
                                    if (externalAccountValid() === false) {

                                        if ($.cookie('encryptionKey')) {
                                            var encryptionKey = $.cookie('encryptionKey');
                                            var externalCredentialsId = $.cookie('externalCredentialsId');

                                            /*shell.showProgressIndicator("Validerar...");*/

                                            datamanager.validateExternalLogin(2, externalCredentialsId, encryptionKey)
                                                .then(function (json) {
                                                    /*shell.hideProgressIndicator();*/

                                                    externalUserName($.cookie('externalUserName'));
                                                    externalAccountValid(true);

                                                    hidePreloader();
                                                })
                                                .fail(function (error) {
                                                    /*shell.hideProgressIndicator();*/

                                                    // Error from login, clear cookies and show login
                                                    clearCookies();
                                                    showFogisConnection();

                                                    hidePreloader();
                                                });
                                        }
                                    }
                                    else {
                                        hidePreloader();
                                    }
                                }
                                else {
                                    // Else just hide the preloader
                                    hidePreloader();
                                }
                            }
                            break;
                        case 'games':
                            gamesType = Number(routeData.subId);

                            if (games().length === 0) {
                                datamanager.getGamesWithTeamRoster(gameTeamRoster().TeamID, gameTeamRoster().GameID, {
                                    success: function (model) {
                                        games([]);

                                        var underlayingArray = games();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        games.valueHasMutated();

                                        hidePreloader();
                                    },
                                    error: function (error) {
                                        hidePreloader();
                                    }
                                });
                            } else {
                                hidePreloader();
                            }

                            break;
                        case 'players':
                            datamanager.initGamePlayersView(id, {
                                success: function (model) {
                                    initGamePlayersView(model);

                                    teamPlayers([]);

                                    var underlayingArray = teamPlayers();

                                    for (var i = 0; i < model.NotSelectedPlayers.length; i++) {
                                        underlayingArray.push(model.NotSelectedPlayers[i]);
                                    }

                                    teamPlayers.valueHasMutated();

                                    hidePreloader();
                                },
                                error: function (error) {
                                    hidePreloader();
                                }
                            });
                            break;
                        case 'clubplayers':
                            datamanager.initGamePlayersViewFromClub(id, {
                                success: function (model) {
                                    initGamePlayersView(model);

                                    clubPlayers([]);
                                    genders([]);

                                    var underlayingArray = clubPlayers();

                                    for (var i = 0; i < model.NotSelectedPlayers.length; i++) {
                                        underlayingArray.push(model.NotSelectedPlayers[i]);
                                    }

                                    clubPlayers.valueHasMutated();

                                    underlayingArray = genders();

                                    for (var j = 0; j < model.Genders.length; j++) {
                                        underlayingArray.push(model.Genders[j]);
                                    }

                                    genders.valueHasMutated();

                                    hidePreloader();
                                },
                                error: function (error) {
                                    hidePreloader();
                                }
                            });
                            break;
                        case 'copyplayers':
                            datamanager.initGamePlayersViewForCopy(id, routeData.subId, {
                                success: function (model) {
                                    initGamePlayersView(model);

                                    teamPlayers([]);

                                    var underlayingArray = teamPlayers();

                                    for (var i = 0; i < model.NotSelectedPlayers.length; i++) {
                                        underlayingArray.push(model.NotSelectedPlayers[i]);
                                    }

                                    teamPlayers.valueHasMutated();

                                    hidePreloader();
                                },
                                error: function (error) {
                                    hidePreloader();
                                }
                            });
                            break;
                        case 'copystaff':
                            datamanager.initGameTeamStaffViewForCopy(id, routeData.subId, {
                                success: function (model) {
                                    initGameStaffView(model);

                                    teamStaff([]);

                                    var underlayingArray = teamStaff();

                                    for (var i = 0; i < model.NotSelectedTeamStaff.length; i++) {
                                        underlayingArray.push(model.NotSelectedTeamStaff[i]);
                                    }

                                    teamStaff.valueHasMutated();

                                    hidePreloader();
                                },
                                error: function (error) {
                                    hidePreloader();
                                }
                            });
                            break;
                        case 'staff':
                            datamanager.initGameTeamStaffView(id, {
                                success: function (model) {
                                    initGameStaffView(model);
                                    teamStaff([]);

                                    var underlayingArray = teamStaff();

                                    for (var i = 0; i < model.NotSelectedTeamStaff.length; i++) {
                                        underlayingArray.push(model.NotSelectedTeamStaff[i]);
                                    }

                                    teamStaff.valueHasMutated();

                                    hidePreloader();
                                },
                                error: function (error) {
                                    hidePreloader();
                                }
                            });
                            break;
                        case 'clubstaff':
                            datamanager.initGameTeamStaffViewFromClub(id, {
                                success: function (model) {
                                    initGameStaffView(model);
                                    clubStaff([]);

                                    var underlayingArray = clubStaff();

                                    for (var i = 0; i < model.NotSelectedTeamStaff.length; i++) {
                                        underlayingArray.push(model.NotSelectedTeamStaff[i]);
                                    }

                                    clubStaff.valueHasMutated();

                                    hidePreloader();
                                },
                                error: function (error) {
                                    hidePreloader();
                                }
                            });
                            break;
                        case 'login':
                            if (externalAccountValid() === false) {
                                if ($.cookie('encryptionKey')) {

                                    var encryptionKey = $.cookie('encryptionKey');
                                    var externalCredentialsId = $.cookie('externalCredentialsId');

                                    shell.showProgressIndicator("Validerar...");

                                    datamanager.validateExternalLogin(2, externalCredentialsId, encryptionKey)
                                        .then(function (json) {
                                            shell.hideProgressIndicator();

                                            externalUserName($.cookie('externalUserName'));
                                            externalAccountValid(true);
                                            hidePreloader();
                                        })
                                        .fail(function (error) {
                                            shell.hideProgressIndicator();

                                            // Error from login, clear cookies and show login
                                            clearCookies();
                                            showFogisConnection();

                                            hidePreloader();
                                        });
                                } else {
                                    hidePreloader();
                                }
                            } else {
                                hidePreloader();
                            }

                            break;
                        case 'notallowed':
                            hidePreloader();
                            break;
                    }
                }
            },

            setupSockets = function () {
                socket.onGamePlayerUpdateListener(function (data) {
                    if (data.GameTeamRosterID !== Number(id))
                        return;

                    var existingItem = ko.utils.arrayFirst(players(), function (f) {
                        return f.GamePlayerID === data.GamePlayerID;
                    });

                    if (existingItem) {
                        // Deep copy
                        var item = JSON.parse(JSON.stringify(existingItem));

                        item.Status = data.Status;

                        players.replace(existingItem, item);
                    }
                });

                socket.onGameTeamStaffUpdateListener(function (data) {
                    if (data.GameTeamRosterID !== Number(id))
                        return;

                    var existingItem = ko.utils.arrayFirst(staff(), function (f) {
                        return f.GameTeamStaffID === data.GameTeamStaffID;
                    });

                    if (existingItem) {
                        var item = JSON.parse(JSON.stringify(existingItem));

                        item.Status = data.Status;

                        staff.replace(existingItem, item);
                    }

                });

                socket.connectToHub(function () {
                    socket.hub.server.subscribeToGameTeamRoster(id);
                });
            },

            navigateToStart = function () {
                router.navigateTo(config.hashes.gameteamroster + '/' + id);
            },

            navigateToPlayerGames = function () {
                router.navigateTo(config.hashes.gameteamroster + '/' + id + '/games/2');
            },

            navigateToStaffGames = function () {
                router.navigateTo(config.hashes.gameteamroster + '/' + id + '/games/1');
            },

            navigateToGame = function () {                    
                router.navigateTo(config.hashes.magazinegameview + '/' + gameTeamRoster().GameID);
                cleanObservables();
            },

            navigateToPlayers = function () {
                router.navigateTo(config.hashes.gameteamroster + '/' + id + '/players');
            },

            navigateToClubPlayers = function () {
                router.navigateTo(config.hashes.gameteamroster + '/' + id + '/clubplayers');
            },

            navigateToStaff = function () {
                router.navigateTo(config.hashes.gameteamroster + '/' + id + '/staff');
            },

            navigateToClubStaff = function () {
                router.navigateTo(config.hashes.gameteamroster + '/' + id + '/clubstaff');
            },

            navigateToLineUp = function () {
                router.navigateTo(config.hashes.lineup + '/' + gameTeamRoster().GameID + '/' + gameTeamRoster().TeamID + '/edit');
            },

            showPublishNowOverlay = function (data) {
                if (data.Published === false && (players().length > 0 || staff().length > 0)) {
                    $('#gameteamroster-view .publishnowoverlay').show();
                }
                else {
                    navigateToGame();
                }
            },

            toggleReplacement = function (data, event) {
                cancelOverlay();

                var param = new viewmodel.ConnectGamePlayerToGameParameters();

                param.GameTeamRosterID = id;
                param.ExternalSystemParameters = getExternalParameters();

                var newItem = getNewPlayerItem(data);

                newItem.IsSubstitute = !data.IsSubstitute;

                param.GamePlayersForGame.push(newItem);

                datamanager.updateGamePlayers(param)
                    .then(function (ret) {
                        var updatedPlayer = ko.utils.arrayFirst(ret, function (f) {
                            return f.GamePlayerID === data.GamePlayerID;
                        });

                        var existingItem = ko.utils.arrayFirst(players(), function (f) {
                            return f.GamePlayerID === data.GamePlayerID;
                        });

                        if (updatedPlayer && updatedPlayer.ErrorText.length > 0) {
                            alert(updatedPlayer.ErrorText);
                        }

                        if (updatedPlayer && existingItem) {
                            var item = JSON.parse(JSON.stringify(existingItem));

                            item.IsSubstitute = updatedPlayer.IsSubstitute;
                            item.Status = updatedPlayer.Status;

                            players.replace(existingItem, item);

                            if (updatedPlayer.Status > 0) {
                                getGameTeamRosterWarnings();
                            }
                        }
                    })
                    .fail(function (error) {
                        console.log(error);
                    });
            },

            togglePlayingTeamStaff = function (data, event) {
                cancelOverlay();

                var param = new viewmodel.ConnectGamePlayerToGameParameters();

                param.GameTeamRosterID = id;
                param.ExternalSystemParameters = getExternalParameters();

                var newItem = getNewPlayerItem(data);

                newItem.IsPlayingTeamStaff = !data.IsPlayingTeamStaff;

                param.GamePlayersForGame.push(newItem);

                datamanager.updateGamePlayers(param)
                    .then(function (ret) {
                        var updatedPlayer = ko.utils.arrayFirst(ret, function (f) {
                            return f.GamePlayerID === data.GamePlayerID;
                        });

                        var existingItem = ko.utils.arrayFirst(players(), function (f) {
                            return f.GamePlayerID === data.GamePlayerID;
                        });

                        if (updatedPlayer && updatedPlayer.ErrorText.length > 0) {
                            alert(updatedPlayer.ErrorText);
                        }

                        if (updatedPlayer && existingItem) {
                            var item = JSON.parse(JSON.stringify(existingItem));

                            item.IsPlayingTeamStaff = updatedPlayer.IsPlayingTeamStaff;
                            item.Status = updatedPlayer.Status;

                            players.replace(existingItem, item);

                            if (updatedPlayer.Status > 0) {
                                getGameTeamRosterWarnings();
                            }
                        }
                    })
                    .fail(function (error) {
                        console.log(error);
                    });
            },

            toggleCaptain = function (data, event) {
                cancelOverlay();

                var param = new viewmodel.ConnectGamePlayerToGameParameters();

                param.GameTeamRosterID = id;
                param.ExternalSystemParameters = getExternalParameters();

                var newItem = getNewPlayerItem(data);

                newItem.IsTeamCaptain = !data.IsTeamCaptain;

                param.GamePlayersForGame.push(newItem);

                datamanager.updateGamePlayers(param)
                    .then(function (ret) {
                        var updatedPlayer = ko.utils.arrayFirst(ret, function (f) {
                            return f.GamePlayerID === data.GamePlayerID;
                        });

                        var existingItem = ko.utils.arrayFirst(players(), function (f) {
                            return f.GamePlayerID === data.GamePlayerID;
                        });

                        if (updatedPlayer && updatedPlayer.ErrorText.length > 0) {
                            alert(updatedPlayer.ErrorText);
                        }

                        if (updatedPlayer && existingItem) {
                            var item = JSON.parse(JSON.stringify(existingItem));

                            item.IsTeamCaptain = updatedPlayer.IsTeamCaptain;
                            item.Status = updatedPlayer.Status;

                            players.replace(existingItem, item);

                            if (updatedPlayer.Status > 0) {
                                getGameTeamRosterWarnings();
                            }
                        }
                    })
                    .fail(function (error) {
                        console.log(error);
                    });
            },

            toggleContactPerson = function (data, event) {
                cancelOverlay();

                var param = new viewmodel.ConnectGamePlayerToGameParameters();

                param.GameTeamRosterID = id;
                param.ExternalSystemParameters = getExternalParameters();

                var newItem = getNewPlayerItem(data);

                newItem.IsContactPerson = !data.IsContactPerson;

                // If the player is contact person, they also need to be PlayingTeamStaff
                if (newItem.IsContactPerson)
                    newItem.IsPlayingTeamStaff = true;

                param.GamePlayersForGame.push(newItem);

                datamanager.updateGamePlayers(param)
                    .then(function (ret) {
                        var updatedPlayer = ko.utils.arrayFirst(ret, function (f) {
                            return f.GamePlayerID === data.GamePlayerID;
                        });

                        var existingItem = ko.utils.arrayFirst(players(), function (f) {
                            return f.GamePlayerID === data.GamePlayerID;
                        });

                        if (updatedPlayer && updatedPlayer.ErrorText.length > 0) {
                            alert(updatedPlayer.ErrorText);
                        }

                        if (updatedPlayer && existingItem) {
                            var item = JSON.parse(JSON.stringify(existingItem));

                            item.IsContactPerson = updatedPlayer.IsContactPerson;
                            item.IsPlayingTeamStaff = updatedPlayer.IsPlayingTeamStaff;
                            item.Status = updatedPlayer.Status;

                            players.replace(existingItem, item);

                            if (updatedPlayer.Status > 0) {
                                getGameTeamRosterWarnings();
                            }
                        }
                    })
                    .fail(function (error) {
                        console.log(error);
                    });
            },

            toggleTeamStaffContactPerson = function (data, event) {
                cancelOverlay();

                var param = new viewmodel.ConnectGameTeamStaffToGameParameters();

                param.GameTeamRosterID = id;
                param.ExternalSystemParameters = getExternalParameters();

                var newItem = new viewmodel.GameTeamStaffForGame();

                newItem.GameTeamStaffID = data.GameTeamStaffID;
                newItem.TeamStaffID = data.TeamStaffID;
                newItem.TeamStaffRoleID = data.TeamStaffRoleID;
                newItem.IsContactPerson = !data.IsContactPerson;

                param.GameTeamStaffForGame.push(newItem);

                datamanager.updateGameTeamStaff(param)
                    .then(function (ret) {
                        var updatedTeamStaff = ko.utils.arrayFirst(ret, function (f) {
                            return f.GameTeamStaffID === data.GameTeamStaffID;
                        });

                        var existingItem = ko.utils.arrayFirst(staff(), function (f) {
                            return f.GameTeamStaffID === data.GameTeamStaffID;
                        });

                        if (updatedTeamStaff && updatedTeamStaff.ErrorText.length > 0) {
                            alert(updatedTeamStaff.ErrorText);
                        }

                        if (updatedTeamStaff && existingItem) {
                            console.log(updatedTeamStaff);

                            var item = JSON.parse(JSON.stringify(existingItem));

                            item.TeamStaffRoleID = updatedTeamStaff.TeamStaffRoleID;
                            item.Status = updatedTeamStaff.Status;
                            item.IsContactPerson = updatedTeamStaff.IsContactPerson;                            

                            staff.replace(existingItem, item);

                            if (updatedTeamStaff.Status > 0) {
                                getGameTeamRosterWarnings();
                            }
                        }
                    })
                    .fail(function (error) {
                        console.log(error);

                        shell.hideProgressIndicator();
                    });
            },

            getNewPlayerItem = function (data) {
                var newItem = new viewmodel.GamePlayersForGame();

                newItem.GamePlayerID = data.GamePlayerID;
                newItem.PlayerID = data.PlayerID;
                newItem.PlayerPositionID = data.PlayerPositionID;
                newItem.ThumbnailURL = data.ThumbnailURL;
                newItem.ShirtNumber = data.ShirtNumber;
                newItem.IsTeamCaptain = data.IsTeamCaptain;
                newItem.IsSubstitute = data.IsSubstitute;
                newItem.IsContactPerson = data.IsContactPerson;
                newItem.IsPlayingTeamStaff = data.IsPlayingTeamStaff;

                return newItem;
            },
        
            changePlayerNumber = function (data) {
                cancelOverlay();

                if (playerPositions().length === 0) {
                    datamanager.getPlayerPositions(gameTeamRoster().SportID, {
                        success: function (model) {
                            var underlayingArray = playerPositions();

                            for (var i = 0; i < model.length; i++) {
                                underlayingArray.push(model[i]);
                            }

                            playerPositions.valueHasMutated();

                            selectedPlayer(data);

                            $('#gameteamroster-view .playerselect').show();
                        },
                        error: function (error) {

                        }
                    });
                }
                else {
                    selectedPlayer(data);

                    $('#gameteamroster-view .playerselect').show();
                }
            },

            changeTeamStaffRole = function (data) {
                cancelOverlay();

                if (teamStaffRoles().length === 0) {
                    datamanager.getTeamStaffRoles(gameTeamRoster().SportID, {
                        success: function (model) {
                            var underlayingArray = teamStaffRoles();

                            for (var i = 0; i < model.length; i++) {
                                underlayingArray.push(model[i]);
                            }

                            teamStaffRoles.valueHasMutated();

                            selectedStaff(data);

                            $('#gameteamroster-view .teamstaffselect').show();
                        },
                        error: function (error) {

                        }
                    });
                }
                else {
                    selectedStaff(data);

                    $('#gameteamroster-view .teamstaffselect').show();
                }
            },

            removeGamePlayer = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Deleting);

                    var param = new viewmodel.GamePlayerParameters();

                    param.GamePlayerID = data.GamePlayerID;
                    param.ExternalSystemParameters = getExternalParameters();

                    datamanager.deleteGamePlayer(param)
                        .then(function () {
                            players.remove(function (f) {
                                return f.GamePlayerID === data.GamePlayerID;
                            });

                            shell.hideProgressIndicator();

                            getGameTeamRosterWarnings();
                            cancelOverlay();
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                            cancelOverlay();
                        });
                }
            },

            removeTeamStaff = function (data) {

                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Deleting);

                    var param = new viewmodel.GameTeamStaffParameters();

                    param.GameTeamStaffID = data.GameTeamStaffID;
                    param.ExternalSystemParameters = getExternalParameters();

                    datamanager.deleteGameTeamStaff(param)
                        .then(function () {
                            staff.remove(function (f) {
                                return f.GameTeamStaffID === data.GameTeamStaffID;
                            });

                            shell.hideProgressIndicator();

                            getGameTeamRosterWarnings();
                            cancelOverlay();
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        });
                }
            },

            cancelOverlay = function () {
                $('#gameteamroster-view .overlay').hide();
            },

            deleteGameTeamRoster = function () {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Deleting);

                    datamanager.deleteGameTeamRoster(id, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            router.navigateTo(config.hashes.magazinegameview + '/' + gameTeamRoster().GameID);
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);

                            console.log(error);
                        }
                    });
                }
            },

            publishGameTeamRoster = function () {
                var _data = {
                    GameTeamRosterID: id,
                    PublishNow: true,
                    PublishAtGameStart: false,
                    ExternalSystemParameters: getExternalParameters()
                };

                shell.showProgressIndicator(MiscTexts.Publishing);

                datamanager.publishGameTeamRoster(_data)
                    .then(function (json) {
                        //reloadGameTeamRoster();
                        shell.hideProgressIndicator();

                        router.navigateTo(config.hashes.magazinegameview + '/' + gameTeamRoster().GameID);
                        cleanObservables();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            unpublishGameTeamRoster = function () {
                var _data = {
                    GameTeamRosterID: id,
                    PublishNow: false,
                    PublishAtGameStart: false,
                    ExternalSystemParameters: getExternalParameters()
                };

                shell.showProgressIndicator(MiscTexts.Unpublishing);

                datamanager.publishGameTeamRoster(_data)
                    .then(function (json) {
                        reloadGameTeamRoster();

                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            publishAtGameStart = function (goToGame, data, event) {
                var _data = {
                    GameTeamRosterID: id,
                    PublishNow: false,
                    PublishAtGameStart: true,
                    ExternalSystemParameters: getExternalParameters()
                };

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.publishGameTeamRoster(_data)
                    .then(function (json) {
                        if (goToGame) {
                            shell.hideProgressIndicator();

                            router.navigateTo(config.hashes.magazinegameview + '/' + gameTeamRoster().GameID);
                            cleanObservables();
                        }
                        else {
                            reloadGameTeamRoster();
                            shell.hideProgressIndicator();
                        }


                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            reloadGameTeamRoster = function () {

                var _data = {
                    GameTeamRosterID: id,
                    ExternalSystemParameters: getExternalParameters()
                };

                datamanager.initGameTeamRoster(_data)
                    .then(function (model) {
                        if (model) {
                            players([]);
                            staff([]);
                            warnings([]);

                            gameTeamRoster(model.GameTeamRosterHeader);

                            var underlayingArray = players();

                            for (var i = 0; i < model.Players.length; i++) {
                                underlayingArray.push(model.Players[i]);
                            }

                            players.valueHasMutated();

                            underlayingArray = staff();

                            for (var j = 0; j < model.TeamStaff.length; j++) {
                                underlayingArray.push(model.TeamStaff[j]);
                            }

                            staff.valueHasMutated();

                            underlayingArray = warnings();

                            for (var k = 0; k < model.Warnings.length; k++) {
                                underlayingArray.push(model.Warnings[k]);
                            }

                            warnings.valueHasMutated();
                        }
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    });
            },

            getGameTeamRosterWarnings = function () {
                datamanager.getGameTeamRosterWarnings(id, {
                    success: function (json) {
                        warnings([]);

                        var underlayingArray = warnings();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        warnings.valueHasMutated();
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            showDisclaimerText = function () {
                $('#gameteamroster-view .disclaimertextoverlay').show();
            },

            showChangePublishTime = function () {
                if (gameTeamRoster().PublishTime) {
                    var dateModel = {
                        DatePart: moment(gameTeamRoster().PublishTime).format("YYYY-MM-DD"),
                        TimePart: moment(gameTeamRoster().PublishTime).format("HH:mm")
                    };

                    changeDateObservable(dateModel);
                } else {
                    var defaultDateModel = {
                        DatePart: moment(new Date()).format("YYYY-MM-DD"),
                        TimePart: moment(new Date()).format("HH:mm")
                    };

                    changeDateObservable(defaultDateModel);
                }
                

                $('#gameteamroster-view .publishtimeoverlay').show();
            },

            showPlayerInformation = function (data) {
                shell.showProgressIndicator(MiscTexts.GettingInformation);

                var param = new viewmodel.GamePlayerParameters();

                param.GamePlayerID = data.GamePlayerID;
                param.ExternalSystemParameters = getExternalParameters();

                datamanager.initGamePlayerForDetailsView(param)
                    .then(function (json) {
                        shell.hideProgressIndicator();

                        selectedPlayerInfo(json);

                        $('#gameteamroster-view .playerinformation').show();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        console.log(error);
                    });
            },

            showTeamStaffInformation = function (data) {
                shell.showProgressIndicator('Hämtar ledare...');

                var param = new viewmodel.GameTeamStaffParameters();

                param.GameTeamStaffID = data.GameTeamStaffID;
                param.ExternalSystemParameters = getExternalParameters();

                datamanager.initGameTeamStaffForDetailsView(param)
                    .then(function (json) {
                        shell.hideProgressIndicator();

                        selectedTeamStaffInfo(json);

                        $('#gameteamroster-view .teamstaffinformation').show();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        console.log(error);
                    });
            },

            saveTeamStaff = function (data) {
                shell.showProgressIndicator(MiscTexts.Updating);

                var param = new viewmodel.ConnectGameTeamStaffToGameParameters();

                param.GameTeamRosterID = id;
                param.ExternalSystemParameters = getExternalParameters();

                var newItem = new viewmodel.GameTeamStaffForGame();

                newItem.GameTeamStaffID = data.GameTeamStaffID;
                newItem.TeamStaffID = data.TeamStaffID;
                newItem.TeamStaffRoleID = data.TeamStaffRoleID;
                newItem.IsContactPerson = data.IsContactPerson;

                var role = ko.utils.arrayFirst(teamStaffRoles(), function (f) {
                    return f.TeamStaffRoleID === data.TeamStaffRoleID;
                });

                param.GameTeamStaffForGame.push(newItem);

                datamanager.updateGameTeamStaff(param)
                    .then(function (ret) {
                        var updatedTeamStaff = ko.utils.arrayFirst(ret, function (f) {
                            return f.GameTeamStaffID === data.GameTeamStaffID;
                        });

                        var existingItem = ko.utils.arrayFirst(staff(), function (f) {
                            return f.GameTeamStaffID === data.GameTeamStaffID;
                        });

                        if (updatedTeamStaff && updatedTeamStaff.ErrorText.length > 0) {
                            alert(updatedTeamStaff.ErrorText);
                        }

                        if (updatedTeamStaff && existingItem) {
                            console.log(updatedTeamStaff);
                            var item = JSON.parse(JSON.stringify(existingItem));

                            item.TeamStaffRoleID = updatedTeamStaff.TeamStaffRoleID;
                            item.Status = updatedTeamStaff.Status;
                            item.TeamStaffRoleName = role.Name;

                            staff.replace(existingItem, item);

                            if (updatedTeamStaff.Status > 0) {
                                getGameTeamRosterWarnings();
                            }
                        }

                        shell.hideProgressIndicator();

                        $('#gameteamroster-view .teamstaffselect').hide();
                    })
                    .fail(function (error) {
                        console.log(error);

                        shell.hideProgressIndicator();
                    });
            },

            savePlayer = function (data) {
                shell.showProgressIndicator(MiscTexts.Updating);

                var param = new viewmodel.ConnectGamePlayerToGameParameters();

                param.GameTeamRosterID = id;
                param.ExternalSystemParameters = getExternalParameters();

                var newItem = new viewmodel.GamePlayersForGame();

                newItem.GamePlayerID = data.GamePlayerID;
                newItem.PlayerID = data.PlayerID;
                newItem.PlayerPositionID = data.PlayerPositionID;
                newItem.ThumbnailURL = data.ThumbnailURL;
                newItem.ShirtNumber = data.ShirtNumber;
                newItem.IsTeamCaptain = data.IsTeamCaptain;
                newItem.IsSubstitute = data.IsSubstitute;
                newItem.IsContactPerson = data.IsContactPerson;
                newItem.IsPlayingTeamStaff = data.IsPlayingTeamStaff;

                param.GamePlayersForGame.push(newItem);

                datamanager.updateGamePlayers(param)
                    .then(function (ret) {
                        var updatedPlayer = ko.utils.arrayFirst(ret, function (f) {
                            return f.GamePlayerID === data.GamePlayerID;
                        });

                        var existingItem = ko.utils.arrayFirst(players(), function (f) {
                            return f.GamePlayerID === data.GamePlayerID;
                        });

                        if (updatedPlayer && updatedPlayer.ErrorText.length > 0) {
                            alert(updatedPlayer.ErrorText);
                        }

                        if (updatedPlayer && existingItem) {
                            console.log(updatedPlayer);

                            var item = JSON.parse(JSON.stringify(existingItem));

                            item.PlayerPositionID = updatedPlayer.PlayerPositionID;
                            item.ShirtNumber = updatedPlayer.ShirtNumber;
                            item.Status = updatedPlayer.Status;
                            item.Position = updatedPlayer.Position;

                            players.replace(existingItem, item);

                            if (updatedPlayer.Status > 0) {
                                getGameTeamRosterWarnings();
                            }
                        }

                        shell.hideProgressIndicator();

                        $('#gameteamroster-view .playerselect').hide();
                    })
                    .fail(function (error) {
                        console.log(error);

                        shell.hideProgressIndicator();
                    });
            },

            markAllPlayers = function () {
                $('#gameteamroster-view .teamPlayerList li').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    if (data.Unselectable === false)
                        $(this).addClass('checked');
                });
            },

            unmarkAllPlayers = function () {
                $('#gameteamroster-view .teamPlayerList li').each(function (key, value) {
                    $(this).removeClass('checked');
                });
            },

            insertPlayersFromTeam = function () {
                insertPlayersHelper("teamPlayerList");
            },

            insertPlayersFromClub = function () {
                insertPlayersHelper("clubPlayerList");
            },

            insertPlayersFromGameCopy = function () {
                insertPlayersHelper("gameCopyPlayerList");
            },

            insertTeamStaffFromTeam = function () {
                insertTeamStaffHelper("teamTeamStaffList");
            },

            insertTeamStaffFromClub = function () {
                insertTeamStaffHelper("clubTeamStaffList");
            },

            insertTeamStaffFromGameCopy = function () {
                insertTeamStaffHelper("gameCopyTeamStaffList");
            },

            insertPlayersHelper = function (classname) {
                var param = new viewmodel.ConnectGamePlayerToGameParameters();

                param.GameTeamRosterID = id;
                param.ExternalSystemParameters = getExternalParameters();

                $("#gameteamroster-view ." + classname + " li.checked").each(function (key, value) {
                    var data = ko.contextFor(value).$data;
                    var newItem = new viewmodel.GamePlayersForGame();

                    newItem.PlayerID = data.PlayerID;
                    newItem.PlayerPositionID = data.PlayerPositionID;
                    newItem.ThumbnailURL = data.ThumbnailURL;
                    newItem.ShirtNumber = data.ShirtNumber;

                    param.GamePlayersForGame.push(newItem);
                });

                if (param.GamePlayersForGame.length > 0) {
                    shell.showProgressIndicator(MiscTexts.Adding);

                    datamanager.insertGamePlayersForGame(param)
                        .then(function (json) {
                            teamPlayers([]);
                            clubPlayers([]);
                            players([]);
                            staff([]);
                            gameTeamRoster('');
                            shell.hideProgressIndicator();

                            parseErrorString(json);

                            router.navigateTo(config.hashes.gameteamroster + '/' + id);
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        });
                } else {
                    router.navigateTo(config.hashes.gameteamroster + '/' + id);
                }
            },

            insertTeamStaffHelper = function (classname) {
                var param = new viewmodel.ConnectGameTeamStaffToGameParameters();

                param.GameTeamRosterID = id;
                param.ExternalSystemParameters = getExternalParameters();

                $("#gameteamroster-view ." + classname + " li.checked").each(function (key, value) {
                    var data = ko.contextFor(value).$data;
                    var newItem = new viewmodel.GameTeamStaffForGame();

                    if (data.TeamStaffID > 0) {
                        newItem.TeamStaffID = data.TeamStaffID;
                        newItem.TeamStaffRoleID = data.TeamStaffRoleID;
                    } else {
                        newItem.MemberID = data.MemberID;
                    }


                    param.GameTeamStaffForGame.push(newItem);
                });

                if (param.GameTeamStaffForGame.length > 0) {
                    shell.showProgressIndicator(MiscTexts.Adding);

                    datamanager.insertGameTeamStaffForGame(param)
                        .then(function (json) {
                            teamPlayers([]);
                            clubPlayers([]);
                            players([]);
                            staff([]);
                            gameTeamRoster('');
                            shell.hideProgressIndicator();

                            parseErrorString(json);

                            router.navigateTo(config.hashes.gameteamroster + '/' + id);
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        });
                } else {
                    router.navigateTo(config.hashes.gameteamroster + '/' + id);
                }
            },

            getExternalParameters = function () {
                var externalParams = new viewmodel.ExternalSystemParameters();

                if ($.cookie('encryptionKey')) {
                    var encryptionKey = $.cookie('encryptionKey');
                    var externalCredentialsId = $.cookie('externalCredentialsId');

                    externalParams.ExternalDataSourceID = 2;
                    externalParams.ExternalCredentialsID = externalCredentialsId;
                    externalParams.EncryptionKey = encryptionKey;
                }

                return externalParams;
            },

            parseErrorString = function (json) {
                if (json !== null && json.length !== 0) {
                    var newLine = "\r\n";
                    var errorString = "";

                    for (var i = 0; i < json.length; i++) {
                        errorString += json[i];
                        errorString += newLine;
                    }

                    alert(errorString);
                }
            },

            synchronizeGameTeamRoster = function () {
                if ($.cookie('encryptionKey')) {
                    shell.showProgressIndicator(MiscTexts.Updating);

                    var param = new viewmodel.GameTeamRosterForSynchronization();

                    param.GameTeamRosterID = id;
                    param.ExternalSystemParameters = getExternalParameters();

                    datamanager.synchronizeGameTeamRoster(param)
                        .then(function (json) {
                            shell.hideProgressIndicator();

                            reloadGameTeamRoster();

                            parseErrorString(json);
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            alert('Error!');
                        });
                } else {
                    showFogisConnection();
                }
            },

            synchronizeGamePlayer = function (data) {
                if ($.cookie('encryptionKey')) {
                    var encryptionKey = $.cookie('encryptionKey');
                    var externalCredentialsId = $.cookie('externalCredentialsId');

                    shell.showProgressIndicator(MiscTexts.Updating);

                    datamanager.synchronizeGamePlayer(data.GamePlayerID, 2, externalCredentialsId, encryptionKey)
                        .then(function (json) {
                            var existingItem = ko.utils.arrayFirst(players(), function (f) {
                                return f.GamePlayerID === data.GamePlayerID;
                            });

                            // DeepCopy the item
                            var item = JSON.parse(JSON.stringify(existingItem));

                            item.Status = json.Status;

                            // Replace the item
                            players.replace(existingItem, item);

                            shell.hideProgressIndicator();
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            alert(error.responseText);
                        });

                } else {
                    alert('Please login before synchronizing');
                }
            },

            synchronizeGameTeamStaff = function (data) {
                if ($.cookie('encryptionKey')) {
                    var encryptionKey = $.cookie('encryptionKey');
                    var externalCredentialsId = $.cookie('externalCredentialsId');

                    shell.showProgressIndicator(MiscTexts.Updating);

                    datamanager.synchronizeGameTeamStaff(data.GameTeamStaffID, 2, externalCredentialsId, encryptionKey)
                        .then(function (json) {
                            var existingItem = ko.utils.arrayFirst(staff(), function (f) {
                                return f.GameTeamStaffID === data.GameTeamStaffID;
                            });

                            var item = JSON.parse(JSON.stringify(existingItem));

                            item.Status = json.Status;

                            staff.replace(existingItem, item);

                            shell.hideProgressIndicator();
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            alert(error.responseText);
                        });

                } else {
                    alert('Please login before synchronizing');
                }
            },

            showFogisConnection = function () {
                router.navigateTo(config.hashes.gameteamroster + '/' + id + '/login');
            },

            showFogisNotAllowed = function () {
                router.navigateTo(config.hashes.gameteamroster + '/' + id + '/notallowed');
            },

            clearCookies = function () {
                $.removeCookie('encryptionKey', { path: '/' });
                $.removeCookie('externalCredentialsId', { path: '/' });
                $.removeCookie('externalUserName', { path: '/' });
                $.removeCookie('login-dismissed', { path: '/' });

                externalUserName('Ej kopplat');
                externalAccountValid(false);
                externalAccountGameTeamValid(false);

                gameTeamRoster('');

                router.navigateTo(config.hashes.gameteamroster + '/' + id);
            },

            fogisLogin = function () {
                var username = $('#fogisLoginUsername').val();
                var password = $('#fogisLoginPassword').val();

                if (username.length === 0 || password.length === 0)
                    return;

                shell.showProgressIndicator("Loggar in...");

                datamanager.createLoginForExternalSystem(2, username, password)
                    .then(function (json) {
                        shell.hideProgressIndicator();

                        // Save as a cookie
                        $.cookie('encryptionKey', json.EncryptionKey);
                        $.cookie('externalCredentialsId', json.ExternalCredentialsID);
                        $.cookie('externalUserName', username);

                        externalUserName(username);
                        externalAccountValid(true);

                        gameTeamRoster('');

                        router.navigateTo(config.hashes.gameteamroster + '/' + id);
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            remindMeLater = function () {
                $.cookie('login-dismissed', true, {
                    expires: 1
                });

                router.navigateTo(config.hashes.gameteamroster + '/' + id);
            },

            noExternalAccount = function () {
                $.cookie('login-dismissed', true);

                router.navigateTo(config.hashes.gameteamroster + '/' + id);
            },

            addFredrik = function () {
                var param = new viewmodel.ConnectGameTeamStaffToGameParameters();

                param.GameTeamRosterID = id;
                param.ExternalSystemParameters = getExternalParameters();

                var newItem = new viewmodel.GameTeamStaffForGame();

                newItem.TeamStaffID = 0;
                newItem.TeamStaffRoleID = 0;
                newItem.MemberID = 2;

                param.GameTeamStaffForGame.push(newItem);

                shell.showProgressIndicator(MiscTexts.Adding);

                datamanager.insertGameTeamStaffForGame(param)
                    .then(function (json) {
                        teamPlayers([]);
                        clubPlayers([]);
                        players([]);
                        staff([]);
                        gameTeamRoster('');
                        shell.hideProgressIndicator();

                        parseErrorString(json);

                        reloadGameTeamRoster();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    });
            },

            updatePublishTime = function (data) {
                var publishTime = moment(data.DatePart + "T" + data.TimePart).utc().toDate();

                if (gameTeamRoster().LatestPublishTime) {
                    if (publishTime > moment(gameTeamRoster().LatestPublishTime).utc().toDate()) {
                        alert('Du kan inte sätta ett publiceringsdatum senare än ' + moment(gameTeamRoster().LatestPublishTime).format("YYYY-MM-DD HH:mm"));

                        return;
                    }
                }

                // Check if publishtime has passed and warn the user
                if (publishTime < new Date()) {
                    var r = confirm("Tiden du har angett har passerats, matchtruppen kommer att publiceras direkt. Stämmer detta?");

                    if (r === false)
                        return;
                }

                gameTeamRoster().PublishTime = publishTime;

                var _data = {
                    GameTeamRosterID: id,
                    PublishTime: publishTime,
                    ExternalSystemParameters: getExternalParameters()
                };

                shell.showProgressIndicator(MiscTexts.Updating);

                datamanager.updatePublishTime(_data)
                    .then(function (json) {
                        datamanager.getGameTeamRosterHeader(_data)
                            .then(function (model) {
                                gameTeamRoster(model);

                                shell.hideProgressIndicator();

                                cancelOverlay();
                            })
                            .fail(function (error) {
                                shell.hideProgressIndicator();

                                cancelOverlay();
                            });
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            //getFogisTeamRoster = function () {
            //    var _data = {
            //        GameTeamRosterID: id,
            //        ExternalSystemParameters: getExternalParameters()
            //    };

            //    //console.log(_data);
            //    //console.log(JSON.stringify(_data));

            //    //return;

            //    shell.showProgressIndicator(MiscTexts.Adding);

            //    datamanager.initGameTeamRosterFromExternalSystem(_data)
            //        .then(function (json) {
            //            if (json) {
            //                console.log('Ladda om');

            //                datamanager.initGameTeamRoster(id, {
            //                    success: function (model) {
            //                        players([]);
            //                        staff([]);
            //                        warnings([]);

            //                        gameTeamRoster(model.GameTeamRosterHeader);
            

            //                        disclaimerTitle(model.FogisDisclaimerTitle);
            //                        disclaimerText(model.FogisDisclaimerText);

            //                        var underlayingArray = players();

            //                        for (var i = 0; i < model.Players.length; i++) {
            //                            underlayingArray.push(model.Players[i]);
            //                        }

            //                        players.valueHasMutated();

            //                        underlayingArray = staff();

            //                        for (var j = 0; j < model.TeamStaff.length; j++) {
            //                            underlayingArray.push(model.TeamStaff[j]);
            //                        }

            //                        staff.valueHasMutated();

            //                        underlayingArray = warnings();

            //                        for (var k = 0; k < model.Warnings.length; k++) {
            //                            underlayingArray.push(model.Warnings[k]);
            //                        }

            //                        warnings.valueHasMutated();
            //                        shell.hideProgressIndicator();
            //                    },
            //                    error: function (error) {
            //                        console.log(error);

            //                        shell.hideProgressIndicator();
            //                    }
            //                });
            //            }
            //            else
            //                shell.hideProgressIndicator();
            //        })
            //        .fail(function (error) {
            //            shell.hideProgressIndicator();

            //            alert(error);
            //        });
            //},

            isLoginDismissed = function () {
                if ($.cookie('login-dismissed')) {
                    return $.cookie('login-dismissed');
                }

                return false;
            },

            playersComputed = ko.computed(function () {
                return ko.utils.arrayFilter(players(), function (item) {
                    return item.IsSubstitute === false;
                });
            }),

            replacements = ko.computed(function () {
                return ko.utils.arrayFilter(players(), function (item) {
                    return item.IsSubstitute === true;
                });
            }),

            selectPlayer = function (data, event) {
                $(event.target).closest('li').toggleClass('checked');
            },

            selectStaff = function (data, event) {
                $(event.target).closest('li').toggleClass('checked');
            },

            selectGender = function (data) {
                genderName(data.Name);

                selectedGender(data.GenderID);
                searchPlayers();
            },

            selectGame = function (data) {

                if (gamesType === 1) {
                    router.navigateTo(config.hashes.gameteamroster + '/' + id + '/copystaff/' + data.GameTeamRosterID);
                } else if (gamesType === 2) {
                    router.navigateTo(config.hashes.gameteamroster + '/' + id + '/copyplayers/' + data.GameTeamRosterID);
                }

            },

            searchPlayersKeyUp = function (data, event) {
                if (event.keyCode === 9)
                    return;

                playerSearchString($(event.target).val());

                searchPlayers();
            },

            searchTeamStaffKeyUp = function (data, event) {
                if (event.keyCode === 9)
                    return;

                teamStaffSearchString($(event.target).val());

                searchTeamStaff();
            },

            onKeyPressAllowNumeric = function (d, e) {
                return utils.isNumericOrDelete(e);
            },

            searchPlayers = function () {
                if (playerSearchString().length === 0 && selectedGender() === 0) {
                    $('#gameteamroster-view .clubPlayerList li').each(function (key, value) {
                        $(this).removeClass('hidden');
                    });
                } else {
                    $('#gameteamroster-view .clubPlayerList li').each(function (key, value) {
                        var data = ko.contextFor(value).$data;

                        var match = true;

                        if (selectedGender() > 0 && data.GenderID !== selectedGender())
                            match = false;

                        if (match === true && playerSearchString().length > 0) {
                            match = false;

                            if (data.FullName.toLowerCase().indexOf(playerSearchString().toLowerCase()) > -1)
                                match = true;

                            if (data.PersonalIdentityNumber.indexOf(playerSearchString()) > -1)
                                match = true;

                        }

                        if (match)
                            $(this).removeClass('hidden');
                        else
                            $(this).addClass('hidden');
                    });
                }
            },

            searchTeamStaff = function () {
                if (teamStaffSearchString().length === 0) {
                    $('#gameteamroster-view .clubTeamStaffList li').each(function (key, value) {
                        $(this).removeClass('hidden');
                    });
                } else {
                    $('#gameteamroster-view .clubTeamStaffList li').each(function (key, value) {
                        var data = ko.contextFor(value).$data;

                        var match = true;

                        if (teamStaffSearchString().length > 0 && data.FullName.toLowerCase().indexOf(teamStaffSearchString().toLowerCase()) === -1)
                            match = false;

                        if (match)
                            $(this).removeClass('hidden');
                        else
                            $(this).addClass('hidden');
                    });
                }
            },

            showPreloader = function () {
                $('#gameteamroster-view .main-preloader').show();
                $('#gameteamroster-view .main-afterloaded').hide();
            },

            hidePreloader = function () {
                $('#gameteamroster-view .main-preloader').hide();
                $('#gameteamroster-view .main-afterloaded').show();
            },

            cleanObservables = function () {
                cancelOverlay();

                gameTeamRoster('');
                players([]);
                staff([]);
                games([]);
                teamPlayers([]);
                clubPlayers([]);
            },

            cleanup = function () {
                showPreloader();

                socket.connectToHub(function () {
                    socket.hub.server.unsubscribeToGameTeamRoster(id);
                });
            };

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,

            navigateToStart: navigateToStart,
            navigateToPlayerGames: navigateToPlayerGames,
            navigateToStaffGames: navigateToStaffGames,
            navigateToGame: navigateToGame,
            navigateToPlayers: navigateToPlayers,
            navigateToClubPlayers: navigateToClubPlayers,
            navigateToStaff: navigateToStaff,
            navigateToClubStaff: navigateToClubStaff,
            navigateToLineUp: navigateToLineUp,

            selectedPlayer: selectedPlayer,
            selectedStaff: selectedStaff,
            selectedPlayerInfo: selectedPlayerInfo,
            selectedTeamStaffInfo: selectedTeamStaffInfo,

            toggleReplacement: toggleReplacement,
            toggleCaptain: toggleCaptain,
            togglePlayingTeamStaff: togglePlayingTeamStaff,
            toggleContactPerson: toggleContactPerson,
            toggleTeamStaffContactPerson: toggleTeamStaffContactPerson,

            changePlayerNumber: changePlayerNumber,
            changeTeamStaffRole: changeTeamStaffRole,
            removeGamePlayer: removeGamePlayer,
            removeTeamStaff: removeTeamStaff,
            cancelOverlay: cancelOverlay,
            savePlayer: savePlayer,
            saveTeamStaff: saveTeamStaff,

            initGamePlayersView: initGamePlayersView,
            initGameStaffView: initGameStaffView,

            showPlayerInformation: showPlayerInformation,
            showTeamStaffInformation: showTeamStaffInformation,
            showPublishNowOverlay: showPublishNowOverlay,

            publishGameTeamRoster: publishGameTeamRoster,
            unpublishGameTeamRoster: unpublishGameTeamRoster,
            publishAtGameStart: publishAtGameStart,
            deleteGameTeamRoster: deleteGameTeamRoster,
            synchronizeGameTeamRoster: synchronizeGameTeamRoster,
            synchronizeGamePlayer: synchronizeGamePlayer,
            synchronizeGameTeamStaff: synchronizeGameTeamStaff,
            showFogisConnection: showFogisConnection,
            showFogisNotAllowed: showFogisNotAllowed,
            showDisclaimerText: showDisclaimerText,
            showChangePublishTime: showChangePublishTime,
            clearCookies: clearCookies,
            fogisLogin: fogisLogin,
            externalAccountValid: externalAccountValid,
            externalAccountGameTeamValid: externalAccountGameTeamValid,
            externalUserName: externalUserName,            
            disclaimerTitle: disclaimerTitle,
            disclaimerText: disclaimerText,
            changeDateObservable: changeDateObservable,

            markAllPlayers: markAllPlayers,
            unmarkAllPlayers: unmarkAllPlayers,

            insertPlayersFromTeam: insertPlayersFromTeam,
            insertPlayersFromClub: insertPlayersFromClub,
            insertPlayersFromGameCopy: insertPlayersFromGameCopy,

            insertTeamStaffFromTeam: insertTeamStaffFromTeam,
            insertTeamStaffFromClub: insertTeamStaffFromClub,
            insertTeamStaffFromGameCopy: insertTeamStaffFromGameCopy,

            selectPlayer: selectPlayer,
            selectStaff: selectStaff,
            selectGender: selectGender,
            selectGame: selectGame,

            genderName: genderName,
            playerSearchString: playerSearchString,
            teamStaffSearchString: teamStaffSearchString,
            gameTeamRoster: gameTeamRoster,

            searchPlayersKeyUp: searchPlayersKeyUp,
            searchTeamStaffKeyUp: searchTeamStaffKeyUp,
            onKeyPressAllowNumeric: onKeyPressAllowNumeric,

            remindMeLater: remindMeLater,
            noExternalAccount: noExternalAccount,
            addFredrik: addFredrik,
            updatePublishTime: updatePublishTime,

            players: players,
            playersComputed: playersComputed,
            replacements: replacements,
            staff: staff,
            games: games,
            genders: genders,
            warnings: warnings,
            teamPlayers: teamPlayers,
            clubPlayers: clubPlayers,
            teamStaff: teamStaff,
            clubStaff: clubStaff,
            playerPositions: playerPositions,
            teamStaffRoles: teamStaffRoles,
            canEdit: canEdit
        };
    });;
define('viewmodels/vm.gamevideo',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'presenter', 'models/model', 'models/viewmodel', 'models/model.mapper', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, shell, presenter, model, viewmodel, modelmapper, _) {
        var currentGameId = 0,
            videoTypeID = ko.observable(),
            newAsset,
            MAX_FILE_SIZE = 1000 * 1024 * 2000,            

            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();
                currentGameId = Number(routeData.gameId);
                videoTypeID(Number(routeData.typeId));
            },

            cleanup = function () {
                $('#gameVideoFileName').text('');
                $('#btnSaveGameVideo').prop("disabled", true);
                $('#gameVideoDescription').val('');
                $('#gameVideoError').hide();

                newAsset = '';

                var img = document.getElementById('gameVideoPreview');

                try {
                    img.parentNode.removeChild(img);
                }
                catch { }
                
            },

            selectGameVideo = function () {
                $('.gameVideoFilePicker').focus().trigger('click');
            },

            saveCmd = function () {
                if ($('#gameVideoDescription').val()) {
                    newAsset.Description = $('#gameVideoDescription').val();
                }

                shell.showPartialProgressIndicator(MiscTexts.Uploading);

                datamanager.postGameVideo(newAsset.UploadAssetId, currentGameId, newAsset.ThumbnailData, videoTypeID(), {
                    success: function (data) {
                        newAsset.Id = data.VideoID;

                        const containerURL = new azblob.ContainerURL(data.SasToken, azblob.StorageURL.newPipeline(new azblob.AnonymousCredential));

                        (async () => await uploadFile(containerURL))();
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();

                        alert(response);
                    }
                });
            },

            cancelCmd = function () {
                presenter.toggleActivity(false);
                router.navigateTo(config.hashes.magazinegameview + '/' + currentGameId);
            },

            uploadFile = async function (containerURL) {
                try {
                    const promises = [];

                    const blockBlobURL = azblob.BlockBlobURL.fromContainerURL(containerURL, 'videoid' + newAsset.Id + '.mp4');

                    var blockSize = newAsset.FileSize > 1024 * 1024 * 32 ? 1024 * 1024 * 4 : 1024 * 512;
                    var options = {
                        storeBlobContentMD5: false,
                        blockSize: blockSize,
                        progress: ev => shell.updateProgress(Math.round((ev.loadedBytes / newAsset.FileSize) * 100))
                    };

                    promises.push(azblob.uploadBrowserDataToBlockBlob(
                        azblob.Aborter.none, newAsset.File, blockBlobURL, options));

                    await Promise.all(promises);

                    datamanager.updateGameVideoInfo(newAsset.UploadAssetId, newAsset.Id, newAsset.Description, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            presenter.toggleActivity(false);
                            router.navigateTo(config.hashes.magazinegameview + '/' + currentGameId);
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });

                } catch (error) {
                    console.log(error.body.message);
                }
            },

            createThumbnail = function (blob) {
                var url = URL.createObjectURL(blob);
                var video = document.createElement('video');

                var timeupdate = function () {
                    if (snapImage()) {
                        video.removeEventListener('timeupdate', timeupdate);                     
                    }
                };
                video.addEventListener('loadedmetadata', function () {
                    // Seek 15 seconds into the video
                    if (video.duration > 15)
                        video.currentTime = 15;

                    if (snapImage()) {
                        video.removeEventListener('timeupdate', timeupdate);
                    }
                });

                var snapImage = function () {
                    var canvas = document.createElement('canvas');

                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);

                    var image = canvas.toDataURL();
                    var success = image.length > 100000;

                    if (success) {
                        $('#gameVideoPreview').attr("src", image);

                        var base64result = image.substr(image.indexOf(',') + 1);

                        newAsset.ThumbnailData = base64result;

                        video.pause();

                        URL.revokeObjectURL(url);
                    }
                    return success;
                };

                video.addEventListener('timeupdate', timeupdate);
                video.preload = 'metadata';
                video.src = url;

                video.muted = true;
                video.playsInline = true;
                video.play();
            },

            init = function () {
                $(document).on('change', '.gameVideoFilePicker', function (event) {
                    var file = event.target.files[0];
                    
                    if (!file)
                        return;

                    $('#gameVideoPreview').attr("src", "");
                    $('#gameVideoError').hide();
                    $('#gameVideoFileName').text(file.name);

                    newAsset = new UploadAsset();

                    if (file.type.match('video')) {                            
                        newAsset.File = file;
                        newAsset.FileSize = file.size;
                        newAsset.GameId = currentGameId;                        
                        newAsset.Type = 6;

                        if (file.size < MAX_FILE_SIZE) {
                            shell.showProgressIndicator('Läser fil');

                            var fileReader = new FileReader();   

                            fileReader.onloadend = function (event) {
                                var blob = new Blob([event.target.result], { type: file.type });

                                createThumbnail(blob);
                                
                                $('#btnSaveGameVideo').prop("disabled", false);

                                shell.hideProgressIndicator();
                            };

                            fileReader.readAsArrayBuffer(file);
                        }
                        else {
                            $('#btnSaveGameVideo').prop("disabled", false);  
                        }                                                
                    } else {
                        $('#gameVideoError').show();                         
                        $('#btnSaveGameVideo').prop("disabled", true);  
                    }
                });

                $(document)
                    .one('#gamevideo-view focus.textarea', '#gamevideo-view .autoExpand', function () {
                        var savedValue = this.value;
                        this.value = '';
                        this.baseScrollHeight = this.scrollHeight;
                        this.value = savedValue;
                    })
                    .on('#gamevideo-view input.textarea', '#gamevideo-view .autoExpand', function () {
                        var minRows = this.getAttribute('data-min-rows') | 0,
                            rows;
                        this.rows = minRows;
                        rows = Math.ceil((this.scrollHeight - this.baseScrollHeight) / 20);
                        this.rows = minRows + rows;
                    });                
            };

        init();

        return {
            activate: activate,
            cleanup: cleanup,
            videoTypeID: videoTypeID,            

            selectGameVideo: selectGameVideo,            
            saveCmd: saveCmd,
            cancelCmd: cancelCmd
        };
    });;
define('viewmodels/vm.guardian',
    ['ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'underscore'],
    function (ko, config, router, messenger, datamanager, shell, _) {

        var guardian = ko.observable(),
            playerGuardianId = ko.observable(0),
            teamHeaderInfo = ko.observable(),

            activate = function (routeData, callback) {
                var currentView = 'profile';

                messenger.publish.viewModelActivated();

                $('#guardian-' + currentView).show();

                if (guardian() === undefined || guardian() === '') {
                    if (routeData.guardianId > 0) {
                        datamanager.getPlayerGuardianForDetailsView(routeData.guardianId, {
                            success: function (json) {
                                guardian(json);
                                playerGuardianId(routeData.guardianId);

                                // Get teamHeaderInfo to see if user can edit item
                                if (typeof teamHeaderInfo() === 'undefined') {
                                    datamanager.initTeamVC(guardian().TeamID, {
                                        success: function (model) {
                                            teamHeaderInfo(model.TeamHeaderInfo);
                                        },
                                        error: function (response) {
                                        }
                                    });
                                }
                            },
                            error: function (json) {
                            }
                        });
                    }
                }
                

                if (_.isFunction(callback)) {
                    callback();
                }
            },

            cleanup = function () {
                teamHeaderInfo('');
            },

            initialize = function (data, item, callback) {
                teamHeaderInfo(data);
                guardian(item);

                if (guardian().PlayerGuardianID > 0)
                    playerGuardianId(guardian().PlayerGuardianID);

                if (_.isFunction(callback)) {
                    callback();
                }
            },

            removePlayerGuardian = function () {
                //console.log(currentPlayerId);
                var r = confirm(MiscTexts.AreYouSure);
                if (r === true) {
                    datamanager.deletePlayerGuardian(guardian().PlayerGuardianID, {
                        success: function (json) {
                            router.navigateBack();
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            navigateToEditPlayerGuardian = function () {
                window.location = 'playerguardian' + '/addedit/' + guardian().TeamID + '/' + guardian().PlayerGuardianID;
            },

            navigateToProfile = function () {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.guardian + '/' + playerGuardianId();
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.guardian + '/' + playerGuardianId());
                    }
                };
                return navigationItem;
            },

            memberIsTeamAdministrator = ko.computed(function () {
                return shell.currentMember.IsSportswikAdmin || typeof teamHeaderInfo() !== 'undefined' && teamHeaderInfo().MemberIsTeamAdministrator;
            });

        return {
            activate: activate,
            cleanup: cleanup,
            initialize: initialize,
            guardian: guardian,

            playerGuardianId: playerGuardianId,
            memberTexts: MemberTexts,

            removePlayerGuardian: removePlayerGuardian,
            navigateToEditPlayerGuardian: navigateToEditPlayerGuardian,
            navigateToProfile: navigateToProfile,
            memberIsTeamAdministrator: memberIsTeamAdministrator,
            teamHeaderInfo: teamHeaderInfo
        };
    });
;
define('viewmodels/vm.header',
    ['jquery', 'ko', 'presenter', 'config', 'router', 'datamanager', 'viewmodels/vm.member', 'viewmodels/vm.shell', 'viewmodels/vm.sockethelper'],
    function ($, ko, presenter, config, router, datamanager, member, shell, socket) {

        var
            calendarGamesInfoTypeId = ko.observable(0),
            calendarGamesNumber = ko.observable(0),
            showAdmin = ko.observable(false),

            navigateToMagazine = {
                getHrefString: function () {
                    return '/' + config.hashes.magazine;
                },
                toClick: function () {
                    router.navigateTo('/' + config.hashes.magazine);
                    if ($('#sideMenu').hasClass('open'))
                        presenter.closeSideMenu();
                }
            },

            navigateToTeams = {
                getHrefString: function () {
                    return '/' + config.hashes.myteams;
                },
                toClick: function () {
                    router.navigateTo('/' + config.hashes.myteams);
                    if ($('#sideMenu').hasClass('open'))
                        presenter.closeSideMenu();
                }
            },

            navigateToAdminLink = {
                getHrefString: function () {
                    return '/' + config.hashes.admin;
                },
                toClick: function () {
                    router.navigateTo('/' + config.hashes.admin);
                    if ($('#sideMenu').hasClass('open'))
                        presenter.closeSideMenu();
                }
            },

            navigateToAdmin = function () {
                router.navigateTo(config.hashes.admin);
            },

            navigateToMember = {
                getHrefString: function () {
                    return '/' + config.hashes.member;
                },
                toClick: function () {
                    member.clearMember();

                    router.navigateTo('/' + config.hashes.member);
                    if ($('#sideMenu').hasClass('open'))
                        presenter.closeSideMenu();
                }
            },

            navigateToCompetitions = function () {   
                var prefix = '';

                if (shell.memberIsLoggedIn())
                    prefix = '/';

                navigationItem = {
                    getHrefString: function () {
                        //return config.hashes.competitions;
                        return prefix + config.hashes.districts;                        
                    },
                    toClick: function () {
                        router.navigateTo(prefix + config.hashes.districts);                        

                        if ($('#sideMenu').hasClass('open'))
                            presenter.closeSideMenu();
                    }
                }

                return navigationItem;
            },                        

            navigateToCalendar = {
                getHrefString: function () {
                    return '/' + config.hashes.calendar;
                },
                toClick: function () {
                    router.navigateTo('/' + config.hashes.calendar);
                    if ($('#sideMenu').hasClass('open'))
                        presenter.closeSideMenu();
                }
            },

            navigateToMemberNotifications = {
                getHrefString: function () {
                    return '/' + config.hashes.membernotifications;
                },
                toClick: function () {
                    router.navigateTo('/' + config.hashes.membernotifications);
                    if ($('#sideMenu').hasClass('open'))
                        presenter.closeSideMenu();
                }
            },

            navigateToDiscover = {
                getHrefString: function () {
                    return '/' + config.hashes.discover;
                },
                toClick: function () {
                    router.navigateTo('/' + config.hashes.discover);
                    if ($('#sideMenu').hasClass('open'))
                        presenter.closeSideMenu();
                }
            },

            navigateToAddInvite = {
                getHrefString: function () {
                    return config.hashes.member + '/sendinvite';
                },
                toClick: function () {
                    router.navigateTo(config.hashes.member + '/sendinvite');
                    if ($('#sideMenu').hasClass('open'))
                        presenter.closeSideMenu();
                }
            },

            getMemberNotifications = function () {
                datamanager.getMemberNotifications({
                    success: function (json) {
                        shell.globalMemberNotificationsNumber(json.NotificationsNumber);
                    },
                    error: function (response) { }
                });
            },            

            logout = function () {
                document.getElementById('logoutForm').submit();
            },

            init = function () {
                if (shell.currentMember !== undefined && shell.currentMember.MemberID !== undefined && shell.currentMember.MemberID > 0) {
                    datamanager.initMainHeader({
                        success: function (json) {
                            showAdmin(json.ShowAdmin);

                            shell.globalMemberNotificationsNumber(json.Notifications.NotificationsNumber);     

                            calendarGamesInfoTypeId(json.CalendarCounter.CalendarGamesInfoTypeID);
                            calendarGamesNumber(json.CalendarCounter.CalendarGamesNumber);
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    })

                    socket.onNotificationsUpdateListener(function () {
                        getMemberNotifications();
                    });

                    socket.connectToHub();
                }
            };

        init();

        return {
            assetUploads: shell.globalUploadQueue,
            navigateToMagazine: navigateToMagazine,
            navigateToAdmin: navigateToAdmin,
            navigateToAdminLink: navigateToAdminLink,
            navigateToTeams: navigateToTeams,
            navigateToCalendar: navigateToCalendar,
            navigateToMemberNotifications: navigateToMemberNotifications,
            navigateToMember: navigateToMember,
            navigateToCompetitions: navigateToCompetitions,            
            navigateToAddInvite: navigateToAddInvite,
            navigateToDiscover: navigateToDiscover,
            calendarGamesInfoTypeId: calendarGamesInfoTypeId,
            calendarGamesNumber: calendarGamesNumber,

            logout: logout,
            showAdmin: showAdmin,
            memberNotificationsNumber: shell.globalMemberNotificationsNumber            
        };
    });
;
define('viewmodels/vm.highlights',
    ['ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'underscore'],
    function (ko, config, router, messenger, datamanager, shell, _) {

        var highlights = ko.observableArray(),

            activate = function (routeData, callback) {
                datamanager.getHighlightsForMember({
                    success: function (json) {
                        var underlayingArray = highlights();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        highlights.valueHasMutated();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            cleanup = function () {
            };

        return {
            activate: activate,
            cleanup: cleanup,

            highlights: highlights
        };
    });
;
define('viewmodels/vm.imagecropper',
    ['jquery', 'ko', 'config', 'router', 'datamanager', 'underscore'],
    function ($, ko, config, router, datamanager, _) {
        var cropper = '',
            callbackMethod,
            base64data,
            dataX = ko.observable(0),
            dataY = ko.observable(0),

            imageX = ko.observable(0),
            imageY = ko.observable(0),


            activate = function (pictureData, aspectRatioX, aspectRatioY, useRoundPicture, callback) {
                callbackMethod = callback;
                base64data = pictureData;

                $('#imagecropper-view').show();
                $('#imagecropper-view .fade-overlay').addClass('active');

                $('#imagecropper-view .controls-container .btn').removeClass('active');
                $('#imagecropper-view .group-mode button:first-child').addClass('active');

                if (cropper) {
                    cropper.destroy();
                }

                var previewClass = '';

                $('.img-preview-round').hide();
                $('.img-preview').hide();

                if (useRoundPicture)
                    previewClass = '.img-preview-round';
                else
                    previewClass = '.img-preview';


                $(previewClass).show();

                $('#cropImagePlaceholder').attr("src", 'data:image/jpg;base64,' + pictureData);

                var options;

                if (aspectRatioX === 0 || aspectRatioY === 0) {
                    options = {
                        preview: previewClass,
                        autoCropArea: 1,
                        crop: function (e) {
                            var data = e.detail;

                            dataX(Math.round(data.width));
                            dataY(Math.round(data.height));
                        }
                    };
                }
                else {
                    options = {
                        aspectRatio: aspectRatioX / aspectRatioY,
                        autoCropArea: 1,
                        preview: previewClass,
                        crop: function (e) {
                            var data = e.detail;

                            dataX(Math.round(data.width));
                            dataY(Math.round(data.height));
                        }
                    };
                }


                //var image = document.getElementById("cropImagePlaceholder");
                var image = $("#cropImagePlaceholder")[0];

                cropper = new Cropper(image, options);

                setTimeout(function () {
                    var d = cropper.getImageData();

                    imageX(d.naturalWidth);
                    imageY(d.naturalHeight);                    
                }, 100);                
            },

            zoomIn = function () {
                cropper.zoom(0.1);
            },

            zoomOut = function () {
                cropper.zoom(-0.1);
            },

            toggleCropMode = function (data, event) {
                cropper.setDragMode("crop");

                $('#imagecropper-view .controls-container .btn').removeClass('active');
                $(event.target).closest('.btn').addClass('active');
            },

            toggleDragMode = function (data, event) {
                cropper.setDragMode("move");                

                $('#imagecropper-view .controls-container .btn').removeClass('active');
                $(event.target).closest('.btn').addClass('active');
            },

            cropImage = function () {
                if (callbackMethod) {
                    var croppedData = cropper.getCroppedCanvas().toDataURL();

                    callbackMethod(cropper.getData(true), croppedData, base64data);
                    //callbackMethod(cropper.getData(true), base64data);
                }
                    
                else
                    alert('No callback method defined');

                closeDialog();
            },

            closeDialog = function () {
                $('#imagecropper-view').hide();
                $('#imagecropper-view .fade-overlay').removeClass('active');

                if (cropper) {
                    cropper.destroy();
                }

                //if (callbackMethod)
                //    callbackMethod();
            };

        return {
            activate: activate,

            zoomIn: zoomIn,
            zoomOut: zoomOut,
            toggleCropMode: toggleCropMode,
            toggleDragMode: toggleDragMode,

            dataX: dataX,
            dataY: dataY,
            imageX: imageX,
            imageY: imageY,

            cropImage: cropImage,
            closeDialog: closeDialog            
        };
    });;
define('viewmodels/vm.infoitem',
    ['ko', 'router', 'presenter', 'messenger', 'datamanager', 'models/viewmodel', 'viewmodels/vm.shell', 'underscore'],
    function (ko, router, presenter, messenger, datamanager, viewmodel, shell, _) {

        var previousTab = 'start',
            fileType = 0,
            dateRangeString = ko.observable(''),
            audienceString = ko.observable(InfoItemTexts.FilterAll),
            numberOfMembersInAudience = ko.observable(0),

            infoItem = ko.observable(),
            audienceEntityId = 0,
            infoItemType = 0,
            infoItemId = 0,
            currentClubId = 0,

            sliderFromValue = ko.observable(1900),
            sliderToValue = ko.observable(new Date().getFullYear()),

            newAsset = null,
            audienceLoaded = false,
            audienceFilterData = null,

            audiencePersonFilterTypes = ko.observableArray(),
            audienceTeamFilterTypes = ko.observableArray(),

            audienceClubs = ko.observableArray(),
            audienceTeams = ko.observableArray(),

            audienceTeamSportCategories = ko.observableArray(),
            audienceTeamGenderCategories = ko.observableArray(),
            audienceTeamAgeCategories = ko.observableArray(),
            audienceLeagueOrganizerCategories = ko.observableArray(),

            audiencePersonGenderCategories = ko.observableArray(),
            audiencePersonTeamRoleCategories = ko.observableArray(),
            audiencePersonCountryCategories = ko.observableArray(),

            clubTeamWarningShown = false,

            selectedTeams = [],
            previouslySelectedItems = [],

            clubsSearchString = ko.observable(''),
            teamsSearchString = ko.observable(''),

            callbackMethod,

            dateFrom = null,
            dateTo = null,

            publishButtonText = ko.pureComputed(function () {
                return InfoItemTexts.PublishTo + ' ' + numberOfMembersInAudience() + ' ' + InfoItemTexts.Persons;
                // return 'Publicera till ' + numberOfMembersInAudience() + ' personer';
            }),

            activate = function (type, entityId, itemId, ibisInfoItemPost, callback) {                
                if (infoItemType !== type) {
                    cleanUpView();
                } else if (itemId === 0 && audienceEntityId !== entityId) {
                    cleanUpView();
                } else if (infoItemId !== itemId) {
                    cleanUpView();
                } else if (ibisInfoItemPost !== null)
                    cleanUpView();

                $(document)
                    .one('#infoitem-view focus.textarea', '#infoitem-view .autoExpand', function () {
                        var savedValue = this.value;
                        this.value = '';
                        this.baseScrollHeight = this.scrollHeight;
                        this.value = savedValue;
                    });

                infoItemType = type;
                audienceEntityId = entityId;
                infoItemId = itemId;

                callbackMethod = callback;

                $('#infoitem-view').show();
                $('#infoitem-view .fade-overlay').addClass('active');

                var minDateString = moment(new Date()).format("YYYY-MM-DD");

                $('#infoitem-date-published').attr({ "min": minDateString });
                $('#infoitem-expiration-date').attr({ "min": minDateString });

                if (infoItem() === undefined || infoItem() === null) {
                    if (infoItemId > 0) {
                        datamanager.getInfoItemForEditView(infoItemType, infoItemId, {
                            success: function (json) {
                                $('#infoitem-view .main-preloader').hide();
                                $('#infoitem-view .main-afterloaded').show();

                                audienceEntityId = json.AudienceEntityID;

                                infoItem(json);

                                if (json.InfoItemCategoryID > 1) {
                                    $('#infoitem-view .toolbar-settings-item').hide();
                                    $('#infoitem-view .audience-filter-button').hide();
                                }
                                else {
                                    $('#infoitem-view .toolbar-settings-item').show();
                                    $('#infoitem-view .audience-filter-button').show();
                                }                                

                                numberOfMembersInAudience(json.NumberOfMembersInAudience);

                                if (json.IsDefaultAudience)
                                    audienceString(InfoItemTexts.FilterAll);
                                else {
                                    audienceString(InfoItemTexts.FilteredSelection);

                                    $("input[name=audienceRadioButtons][value='1']").prop("checked", true);

                                    toggleShowAudience(1);
                                }

                                if (json.PublishDate) {
                                    calculateDateString(json.PublishDate, json.ExpireDate);

                                    dateFrom = moment(json.PublishDate).utc().toDate();

                                    $('#infoitem-date-published').val(moment(json.PublishDate).format("YYYY-MM-DD"));
                                    $('#infoitem-time-published').val(moment(json.PublishDate).format("HH:mm"));

                                    if (json.ExpireDate) {
                                        toggleShowSchedule(2);

                                        dateTo = moment(json.ExpireDate).utc().toDate();

                                        $('#infoitem-expiration-date').val(moment(json.ExpireDate).format("YYYY-MM-DD"));
                                        $('#infoitem-expiration-time').val(moment(json.ExpireDate).format("HH:mm"));

                                        $("input[name=setScheduleRadioButtons][value='2']").prop("checked", true);
                                    } else {
                                        toggleShowSchedule(1);

                                        $("input[name=setScheduleRadioButtons][value='1']").prop("checked", true);
                                    }
                                }

                                if (json.CallToActionURL.length > 0) {
                                    toggleShowLink(1);

                                    $("input[name=addLinkRadioButtons][value='1']").prop("checked", true);

                                    $('#infoitem-linkurl').val(json.CallToActionURL);
                                    $('#infoItemLinkPreview').show();
                                } else {
                                    $('#infoItemLinkPreview').hide();
                                }

                                if (json.Title.length > 0) {
                                    $('#infoitem-title').removeClass('hidden');
                                } else {
                                    $('#infoitem-title').addClass('hidden');
                                }

                                // Show notification icon
                                if (json.NotifyMember) {
                                    $('#infoItemNotificationSymbol').removeClass('hidden');
                                }

                                if (json.PictureInfo) {
                                    $('.infoItemPicturePreview').show();
                                    $('.infoItemPicturePreview img').attr("src", json.PictureInfo.PictureURL);
                                    $(".infoItemPicturePreview .videoPlayButton").hide();
                                } else if (json.VideoInfo) {
                                    $('.infoItemPicturePreview').show();
                                    $('.infoItemPicturePreview img').attr("src", json.VideoInfo.ThumbnailURL);
                                    $(".infoItemPicturePreview .videoPlayButton").show();
                                }
                            },
                            error: function (error) {

                            }
                        });
                    } else if (ibisInfoItemPost !== null) {

                        var importData = new viewmodel.InfoItemForImport()
                           .ItemId(audienceEntityId)
                           .InfoItemType(infoItemType)
                           .IbisInfoItemPost(ko.mapping.fromJS(ibisInfoItemPost));

                        datamanager.initInfoItemForImportView(ko.toJS(importData), {
                            success: function (json) {
                                $('#infoitem-view .main-preloader').hide();
                                $('#infoitem-view .main-afterloaded').show();

                                infoItem(json);

                                numberOfMembersInAudience(json.NumberOfMembersInAudience);

                                if (json.CallToActionURL.length > 0) {
                                    toggleShowLink(1);

                                    $("input[name=addLinkRadioButtons][value='1']").prop("checked", true);

                                    $('#infoitem-linkurl').val(json.CallToActionURL);
                                    $('#infoItemLinkPreview').show();
                                } else {
                                    $('#infoItemLinkPreview').hide();
                                }

                                if (json.Title.length > 0) {
                                    $('#infoitem-title').removeClass('hidden');
                                }

                                // Show notification icon
                                if (json.NotifyMember) {
                                    $('#infoItemNotificationSymbol').removeClass('hidden');
                                }

                                if (json.PictureInfo) {
                                    $('.infoItemPicturePreview').show();
                                    $('.infoItemPicturePreview img').attr("src", json.PictureInfo.PictureURL);
                                    $(".infoItemPicturePreview .videoPlayButton").hide();
                                } else if (json.VideoInfo) {
                                    $('.infoItemPicturePreview').show();
                                    $('.infoItemPicturePreview img').attr("src", json.VideoInfo.ThumbnailURL);
                                    $(".infoItemPicturePreview .videoPlayButton").show();
                                }
                            },
                            error: function (error) {

                            }
                        });
                    } else {
                        datamanager.initInfoItemForEditView(infoItemType, audienceEntityId, {
                            success: function (json) {
                                $('#infoitem-view .main-preloader').hide();
                                $('#infoitem-view .main-afterloaded').show();

                                infoItem(json);

                                if (json.InfoItemCategoryID > 1) {
                                    $('#infoitem-title').removeClass('hidden');
                                    $('#infoitem-view .toolbar-settings-item').hide();
                                    $('#infoitem-view .audience-filter-button').hide();
                                }
                                else {
                                    $('#infoitem-title').addClass('hidden');
                                    $('#infoitem-view .toolbar-settings-item').show();
                                    $('#infoitem-view .audience-filter-button').show();
                                }

                                numberOfMembersInAudience(json.NumberOfMembersInAudience);

                                // Show notification icon
                                if (json.NotifyMember) {
                                    $('#infoItemNotificationSymbol').removeClass('hidden');
                                }
                            },
                            error: function (error) {
                                alert(error);
                            }
                        });
                    }
                }

                showTabHelper('start');
            },

            cleanUpView = function () {
                $('#infoitem-view .main-preloader').show();
                $('#infoitem-view .main-afterloaded').hide();

                audienceEntityId = 0;
                infoItemType = 0;
                infoItemId = 0;

                infoItem(null);

                dateRangeString('');

                dateFrom = null;
                dateTo = null;
                newAsset = null;
                clubTeamWarningShown = false;

                audiencePersonFilterTypes([]);
                audienceTeamFilterTypes([]);

                toggleShowLink(0);
                toggleShowAudience(0);
                toggleShowSchedule(0);

                $("input[name=setScheduleRadioButtons][value='0']").prop("checked", true);
                $("input[name=audienceRadioButtons][value='0']").prop("checked", true);
                $("input[name=addLinkRadioButtons][value='0']").prop("checked", true);
                $("input[name=audienceAgeRadioButtons][value='0']").prop("checked", true);

                $('#infoitem-title').addClass('hidden');

                clearTimeDates();
                resetAudienceFilters();
            },

            resetAudienceFilters = function () {                
                audienceString(InfoItemTexts.FilterAll);
                numberOfMembersInAudience(0);

                selectedTeams = [];

                audienceClubs([]);
                audienceTeams([]);

                audienceTeamSportCategories([]);
                audienceTeamGenderCategories([]);
                audienceTeamAgeCategories([]);
                audienceLeagueOrganizerCategories([]);

                audiencePersonGenderCategories([]);
                audiencePersonCountryCategories([]);
                audiencePersonTeamRoleCategories([]);

                $('#infoitem-view .listSelector li').removeClass('checked');
                $('#infoitem-view .listSelector li.selectAll').addClass('checked');
                $('#infoitem-view .audienceFilter .filterText').text(InfoItemTexts.FilterAll);

                sliderFromValue(1900);
                sliderToValue(new Date().getFullYear());
                
                audienceFilterData = null;
                audienceLoaded = false;
            },

            handleFileSelect = function (event) {
                var file = event.target.files[0];

                if (!file)
                    return;

                newAsset = null;

                // Only process image files.
                if (fileType === 1 && !file.type.match('image.*')) {
                    alert('Felaktig fil vald');
                    return;
                }

                if (fileType === 2 && !file.type.match('video.*')) {
                    alert('Felaktig fil vald');
                    return;
                }

                var reader = new FileReader();

                if (fileType === 1) {
                    // Closure to capture the file information.
                    reader.onload = (function (file) {
                        return function (e) {
                            var base64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            $('#infoItemFileData').val(base64data);
                            $(".infoItemPicturePreview").show();
                            $(".infoItemPicturePreview img").attr('src', 'data:image/jpg;base64,' + base64data);
                            $(".infoItemPicturePreview .videoPlayButton").hide();

                            showTabHelper('start');
                        };
                    })(file);

                    reader.readAsDataURL(file);
                } else if (fileType === 2) {
                    shell.showProgressIndicator('Läser fil');

                    newAsset = new UploadAsset();
                    newAsset.File = file;
                    newAsset.FileSize = file.size;
                    //newAsset.GameId = currentGameId;                    

                    reader.onloadend = function (event) {
                        var blob = new Blob([event.target.result], { type: file.type });

                        createThumbnail(blob);
                        shell.hideProgressIndicator();

                        showTabHelper('start');
                    };

                    reader.readAsArrayBuffer(file);
                }
            },

            createThumbnail = function (blob) {
                var url = URL.createObjectURL(blob);
                var video = document.createElement('video');

                var timeupdate = function () {
                    if (snapImage()) {
                        video.removeEventListener('timeupdate', timeupdate);
                        video.pause();
                    }
                };

                video.addEventListener('loadeddata', function () {
                    if (snapImage()) {
                        video.removeEventListener('timeupdate', timeupdate);
                    }
                });

                var snapImage = function () {
                    var canvas = document.createElement('canvas');

                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);

                    var image = canvas.toDataURL();
                    var success = image.length > 100000;

                    if (success) {
                        $(".infoItemPicturePreview").show();
                        $(".infoItemPicturePreview img").attr('src', image);
                        $(".infoItemPicturePreview .videoPlayButton").show();

                        infoItem().VideoThumbnailBase64 = image.substr(image.indexOf(',') + 1);

                        URL.revokeObjectURL(url);
                    }

                    return success;
                };


                video.addEventListener('timeupdate', timeupdate);
                video.preload = 'metadata';
                video.src = url;

                video.muted = true;
                video.playsInline = true;
                video.play();
            },

            removeFile = function () {
                $('#infoItemFileData').val('');
                $(".infoItemPicturePreview").hide();
                $(".infoItemPicturePreview img").attr('src', '');

                infoItem().PictureEntityID = null;
                infoItem().VideoID = null;

                newAsset = null;
            },            

            showAudienceFilter = function () {
                if (!audienceLoaded) {
                    audienceLoaded = true;

                    datamanager.initAudienceForEditView(infoItemType, infoItem().AudienceID, {
                        success: function (json) {
                            audiencePersonFilterTypes([]);
                            audienceTeamFilterTypes([]);

                            var underlayingArray = audiencePersonFilterTypes();

                            for (var i = 0; i < json.AudiencePersonFilterTypes.length; i++) {
                                underlayingArray.push(json.AudiencePersonFilterTypes[i]);
                            }

                            audiencePersonFilterTypes.valueHasMutated();

                            underlayingArray = audienceTeamFilterTypes();

                            for (var j = 0; j < json.AudienceTeamFilterTypes.length; j++) {
                                underlayingArray.push(json.AudienceTeamFilterTypes[j]);
                            }

                            audienceTeamFilterTypes.valueHasMutated();

                            if (json.AudienceFilterData) {
                                audienceFilterData = json.AudienceFilterData;

                                parseAudienceFilterData(json.AudienceFilterData);
                            }
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }

                showTabHelper('audience');
            },

            parseAudienceFilterData = function (data) {
                if (data.AudienceFilterTypeClubData.length > 0) {
                    // 3 is club/team
                    var clubHtmlSpan = $('#audienceFilterTypeID-3 .filterText');

                    clubHtmlSpan.text(data.AudienceFilterTypeClubData.length);

                    data.AudienceFilterTypeClubData.forEach(function (item) {
                        if (item.SelectedTeams.length > 0) {
                            item.SelectedTeams.forEach(function (team) {
                                var clubteam = {
                                    ClubID: item.ClubID,
                                    TeamID: team
                                };

                                selectedTeams.push(clubteam);

                            });
                        }
                    });

                    if (selectedTeams.length === 0)
                        $('#audienceFilterTypeID-4 .filterText').text(InfoItemTexts.FilterAll);
                    else
                        $('#audienceFilterTypeID-4 .filterText').text(selectedTeams.length);
                }

                for (var i = 0; i < data.AudienceFilterTypeData.length; i++) {
                    // Special case for age
                    if (data.AudienceFilterTypeData[i].AudienceFilterTypeID === 7) {
                        if (data.AudienceFilterTypeData[i].AudienceFilterTypeValues.length === 2) {
                            sliderFromValue(data.AudienceFilterTypeData[i].AudienceFilterTypeValues[0]);
                            sliderToValue(data.AudienceFilterTypeData[i].AudienceFilterTypeValues[1]);

                            toggleShowAudienceAge(1);

                            $('#audienceFilterTypeID-7 .filterText').text(sliderFromValue() + ' - ' + sliderToValue());
                            $("input[name=audienceAgeRadioButtons][value='1']").prop("checked", true);
                        }
                    }
                    else {
                        if (data.AudienceFilterTypeData[i].AudienceFilterTypeValues.length > 0) {
                            // Find the correct span-tag based on the ID
                            var item = $('#audienceFilterTypeID-' + data.AudienceFilterTypeData[i].AudienceFilterTypeID + ' .filterText');

                            // Set the text to the amount of selected items
                            item.text(data.AudienceFilterTypeData[i].AudienceFilterTypeValues.length);
                        }
                    }

                }
            },

            showToolbarMenu = function () {
                previousTab = 'toolbar';
                showTabHelper('toolbar');

                if ($('#infoitem-title').hasClass('hidden'))
                    $('#toolbarTitleItem').text(InfoItemTexts.AddTitle);
                else
                    $('#toolbarTitleItem').text(InfoItemTexts.RemoveTitle);
            },

            showAddRemoveTitle = function () {
                $('#infoitem-title').toggleClass('hidden');

                showTabHelper('start');

                if (!$('#infoitem-title').hasClass('hidden')) {
                    $('#infoitem-title').focus();
                } else {
                    infoItem().Title = '';
                    $('#infoitem-title').val('');
                }
            },

            clearTimeDates = function () {
                dateFrom = null;
                dateTo = null;
                dateRangeString('');

                $('#infoitem-date-published').val('');
                $('#infoitem-time-published').val('');
                $('#infoitem-expiration-date').val('');
                $('#infoitem-expiration-time').val('');
            },

            saveSchedule = function () {
                var datePublished = $('#infoitem-date-published').val();
                var timePublished = $('#infoitem-time-published').val();

                if (timePublished.length === 0)
                    timePublished = '00:00';

                switch (Number($('input[name=setScheduleRadioButtons]:checked').val())) {
                    case 0:
                        clearTimeDates();
                        break;
                    case 1:
                        {
                            // dateFrom = moment(datePublished + ' ' + timePublished, 'YYYY-MM-DD HH:mm').toDate();
                            //dateFrom = new Date(datePublished + 'T' + timePublished);                            

                            dateFrom = moment(datePublished + "T" + timePublished).utc().toDate();
                            // console.log(dateFrom);
                            //var gameTime = moment(currentGameDate + "T" + currentGameTime).utc().format("YYYY-MM-DD HH:mm:ss");

                            if (isNaN(dateFrom.getTime())) {
                                $('#infoitem-publishdate-validation-container').addClass('error');
                                $('#infoitem-publishdate-validation-text').show();
                                return;
                            } else if (timePublished.length === 0) {
                                $('#infoitem-time-published').val("00:00");
                                // If the user hasn't selected a time, set 00:00
                            }

                            dateTo = null;

                            $('#infoitem-expiration-date').val('');
                            $('#infoitem-expiration-time').val('');

                            calculateDateString(dateFrom, dateTo);
                        }
                        break;
                    case 2:
                        {
                            var expireDate = $('#infoitem-expiration-date').val();
                            var expireTime = $('#infoitem-expiration-time').val();

                            if (expireTime.length === 0)
                                expireTime = '00:00';

                            //dateFrom = moment(datePublished + ' ' + timePublished, 'YYYY-MM-DD HH:mm').toDate();                            
                            dateFrom = moment(datePublished + "T" + timePublished).utc().toDate();
                            //dateFrom = new Date(datePublished + 'T' + timePublished);

                            if (isNaN(dateFrom.getTime())) {                                
                                $('#infoitem-publishdate-validation-container').addClass('error');
                                $('#infoitem-publishdate-validation-text').show();

                                return;
                            } else if (timePublished.length === 0) {
                                $('#infoitem-time-published').val("00:00");
                                // If the user hasn't selected a time, set 00:00
                            }

                            // dateTo = moment(expireDate + ' ' + expireTime, 'YYYY-MM-DD HH:mm').toDate();
                            dateTo = moment(expireDate + "T" + expireTime).utc().toDate();
                            //dateTo = new Date(expireDate + 'T' + expireTime);

                            // If the user hasn't selected an expirationDate, null it
                            if (isNaN(dateTo.getTime())) {
                                $('#infoitem-expirationdate-validation-container').addClass('error');
                                $('#infoitem-expirationdate-validation-text').show();
                                $('#infoitem-expirationdate-validation-text').text('Slutdatum är obligatoriskt');

                                return;
                            } else if (expireTime.length === 0) {
                                $('#infoitem-expiration-time').val("00:00");
                            }

                            if (dateFrom > dateTo) {
                                $('#infoitem-expirationdate-validation-container').addClass('error');
                                $('#infoitem-expirationdate-validation-text').show();
                                $('#infoitem-expirationdate-validation-text').text('Slutdatum måste vara efter publiceringsdatum');
                                return;
                            }

                            calculateDateString(dateFrom, dateTo);
                        }
                        break;
                }

                previousTab = 'start';
                showTabHelper(previousTab);
            },

            saveAudience = function () {
                var audienceDataString;                

                // Everyone selected
                if (Number($('input[name=audienceRadioButtons]:checked').val()) === 0) {
                    var filter = new viewmodel.AudienceFilterData()
                        .AudienceID(infoItem().AudienceID)
                        .AudienceEntityID(infoItem().AudienceEntityID)
                        .InfoItemID(infoItem().InfoItemID)
                        .InfoItemType(infoItem().InfoItemType);

                    audienceDataString = ko.toJS(filter);

                } else {
                    audienceDataString = ko.toJS(generateAudienceFilter());
                }

                shell.showProgressIndicator(MiscTexts.Saving);
                
                datamanager.insertAudienceForInfoItem(audienceDataString)
                    .then(function (json) {
                        infoItem().AudienceID = Number(json.AudienceID);
                        
                        if (Number($('input[name=audienceRadioButtons]:checked').val()) === 0 || json.IsDefaultAudience) {
                            audienceString(InfoItemTexts.FilterAll);

                            // If they have selected something but it still is regarded as 'All', revert to the 'All' button
                            if (Number($('input[name=audienceRadioButtons]:checked').val()) === 1) {
                                $("input[name=audienceRadioButtons][value='0']").prop("checked", true);
                                toggleShowAudience(0);
                            }

                            resetAudienceFilters();
                        }
                        else 
                            audienceString(InfoItemTexts.FilteredSelection);

                        numberOfMembersInAudience(json.NumberOfMembersInAudience);

                        shell.hideProgressIndicator();

                        previousTab = 'start';
                        showTabHelper(previousTab);
                    })
                    .fail(function (error) {
                        console.log(error);

                        shell.hideProgressIndicator();

                        alert('Error');
                    });
            },

            saveLink = function () {
                if (Number($('input[name=addLinkRadioButtons]:checked').val()) === 0) {
                    infoItem().CallToActionURL = '';
                    $('#infoitem-linkurl').val('');

                    $('#infoItemLinkPreview').hide();
                } else {
                    var linkUrl = $('#infoitem-linkurl').val();

                    if (validURL(linkUrl) === false) {
                        alert(InfoItemTexts.NotAValidLink);
                        return;
                    }

                    infoItem().CallToActionURL = linkUrl;

                    $('#infoItemLinkPreview').show();
                }

                previousTab = 'start';
                showTabHelper(previousTab);
            },

            validURL = function (str) {
                let url;
                try {
                    url = new URL(str);
                } catch (_) {
                    return false;
                }
                return url.protocol === "http:" || url.protocol === "https:";

                //var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
                //    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
                //    '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
                //    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
                //    '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
                //    '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator

                //return !!pattern.test(str);
            },

            calculateDateString = function (start, end) {
                var dateFromString;
                var dateToString = '';

                if (moment(start).format("HH:mm") === "00:00") {
                    dateFromString = moment(start).format("YYYY-MM-DD");
                } else {
                    dateFromString = moment(start).format("YYYY-MM-DD HH:mm");
                }

                if (end !== null) {
                    if (moment(end).format("HH:mm") === "00:00") {
                        dateToString = moment(end).format("YYYY-MM-DD");
                    } else {
                        dateToString = moment(end).format("YYYY-MM-DD HH:mm");
                    }
                }

                if (dateToString.length > 0)
                    dateRangeString(dateFromString + ' - ' + dateToString);
                else
                    dateRangeString(dateFromString);
            },

            addMedia = function (mediaType) {
                fileType = mediaType;

                $('.infoItemFilePicker').focus().trigger('click');
            },

            showAddLink = function () {
                showTabHelper('link');
            },

            showScheduleSettings = function () {
                showTabHelper('schedule');
            },

            showNotifications = function () {
                showTabHelper('notifications');
            },

            showSettings = function () {
                showTabHelper('settings');
            },

            showTeamsTab = function (data) {
                var filterData = new viewmodel.InitAudienceForFilterTypeParameters()
                    .AudienceFilterTypeID(infoItem().InfoItemType)
                    .AudienceFilterItemID(data.AudienceFilterTypeValueID)
                    .AudienceFilterData(generateAudienceFilter());

                shell.showProgressIndicator(MiscTexts.GettingTeams);

                datamanager.initAudienceForFilterTypeTeam(ko.toJS(filterData), {
                    success: function (json) {
                        currentClubId = data.AudienceFilterTypeValueID;

                        audienceTeams([]);

                        var underlayingArray = audienceTeams();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        audienceTeams.valueHasMutated();

                        if (selectedTeams.length > 0) {
                            const items = selectedTeams.filter(w => w.ClubID === data.AudienceFilterTypeValueID);

                            if (items.length > 0) {
                                $("#infoitem-view .audienceTeamsList li.selectAll").removeClass('checked');

                                items.forEach(function (item) {
                                    $("#infoitem-view .audienceTeamsList li.teamListContainer").not('.selectAll').each(function (key, value) {
                                        var data = ko.contextFor(value).$data;

                                        if (Number(data.TeamID) === Number(item.TeamID)) {
                                            $(this).addClass('checked');
                                            return false;
                                        }
                                    });
                                });
                            } else {
                                $("#infoitem-view .audienceTeamsList li.selectAll").addClass('checked');
                            }
                        } else {
                            $("#infoitem-view .audienceTeamsList li.selectAll").addClass('checked');
                        }

                        previousTab = 'clubfilter';
                        showTabHelper('teamfilter');

                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        console.log(error);
                        shell.hideProgressIndicator();
                    }
                });
            },

            backToHome = function () {
                showTabHelper('start');
            },

            selectAll = function (listClass, id, data, event) {
                $("#infoitem-view " + listClass + " li").removeClass('checked');
                $(event.target).closest('li').addClass('checked');

                $('#audienceFilterTypeID-' + id + ' .filterText').text(InfoItemTexts.FilterAll);

                if (listClass === '.audienceTeamsList') {
                    // Remove all teams with the current club
                    selectedTeams = selectedTeams.reduce((p, c) => (c.ClubID !== currentClubId && p.push(c), p), []);
                } else if (listClass === '.audienceClubList') {
                    selectedTeams = [];

                    // Loop every row and change the text
                    $("#infoitem-view .audienceClubList li .teamsButton").each(function (key, value) {
                        $(this).text(InfoItemTexts.AllTeams);
                    });
                }
            },

            selectItem = function (listClass, id, data, event) {
                $("#infoitem-view " + listClass + " li.selectAll").removeClass('checked');
                $(event.target).closest('li').toggleClass('checked');

                if (!$("#infoitem-view " + listClass + " li.checked").length) {
                    $("#infoitem-view " + listClass + " li.selectAll").addClass('checked');

                    $('#audienceFilterTypeID-' + id + ' .filterText').text(InfoItemTexts.FilterAll);
                }
                else {
                    $('#audienceFilterTypeID-' + id + ' .filterText').text($("#infoitem-view " + listClass + " li.checked").size());
                }

                // Special case for clubs                
                if (listClass === '.audienceClubList') {
                    // Special case for clubs
                    if ($(event.target).closest('li').hasClass('checked') === false) {
                        // Remove all teams in that club
                        selectedTeams = selectedTeams.reduce((p, c) => (c.ClubID !== data.AudienceFilterTypeValueID && p.push(c), p), []);

                        // Set the text to 'All                        
                        $(event.target).closest('li').find('.teamsButton').first().text(InfoItemTexts.AllTeams)
                    }
                }
            },

            selectTeam = function (listClass, id, data, event) {
                $("#infoitem-view " + listClass + " li.selectAll").removeClass('checked');
                $(event.target).closest('li.teamListContainer').toggleClass('checked');

                if (!$("#infoitem-view " + listClass + " li.checked").length) {
                    $("#infoitem-view " + listClass + " li.selectAll").addClass('checked');

                    $('#audienceFilterTypeID-' + id + ' .filterText').text(InfoItemTexts.FilterAll);
                }
                else {
                    $('#audienceFilterTypeID-' + id + ' .filterText').text($("#infoitem-view " + listClass + " li.checked").size());
                }

                if ($(event.target).closest('li.teamListContainer').hasClass('checked')) {
                    if (selectedTeams.filter(w => w.ClubID === currentClubId && w.TeamID === data.TeamID).length === 0) {
                        var clubteam = {
                            ClubID: currentClubId,
                            TeamID: data.TeamID
                        };

                        selectedTeams.push(clubteam);
                    }
                } else {
                    var deleteIndex = -1;

                    for (let i = 0; i < selectedTeams.length; i++) {
                        if (selectedTeams[i].ClubID === currentClubId && selectedTeams[i].TeamID === data.TeamID) {
                            deleteIndex = i;
                            break;
                        }
                    }

                    if (deleteIndex > -1)
                        selectedTeams.splice(deleteIndex, 1);
                }
                
            },

            checkClubTeamsFilter = function (listname) {
                // Check previously checked items
                var currentValues = getCurrentCheckedValues(listname);

                if (currentValues.length === 0 && previouslySelectedItems.length > 0) {
                    // Something was selected, but now it's 'All'
                    clearClubsAndTeams()                    
                } else if (previouslySelectedItems.length === 0 && currentValues.length > 0) {
                    // We previously had nothing selected and now we have selected some filter
                    // Clear the clubs/teams
                    clearClubsAndTeams();
                } else {
                    var itemIsMissing = false;
                    // Loop the previously selected items
                    previouslySelectedItems.forEach(function (item) {
                        if (currentValues.filter(p => p === item).length === 0) {
                            itemIsMissing = true;
                        }
                    });

                    if (itemIsMissing) {
                        // Clear clubs and teams
                        clearClubsAndTeams();
                    }
                }
            },

            clearClubsAndTeams = function () {
                if (infoItemType < 3) {
                    selectedTeams = [];
                    audienceTeams([]);
                    audienceClubs([]);

                    if (audienceFilterData) {
                        audienceFilterData.AudienceFilterTypeClubData = [];
                    }
                } else if (infoItemType === 3) {
                    selectedTeams = [];
                    audienceTeams([]);
                }

                $('#audienceFilterTypeID-3 .filterText').text(InfoItemTexts.FilterAll);
                $('#audienceFilterTypeID-4 .filterText').text(InfoItemTexts.FilterAll);
            },

            navigateBackFromAudience = function (type) {
                switch (type) {
                    case 2:
                        checkClubTeamsFilter('audienceLeagueOrganizerList');
                        break;
                    case 5:
                        checkClubTeamsFilter('audienceSportList');
                        break;
                    case 8:
                        checkClubTeamsFilter('audienceGenderList');
                        break;
                    case 10:
                        checkClubTeamsFilter('audienceTeamAgeCategoryList');
                        break;
                    case 7:
                        if (Number($('input[name=audienceAgeRadioButtons]:checked').val()) === 1) {
                            if (sliderFromValue() > sliderToValue()) {
                                alert('Från och med kan inte vara lägre än till och med');
                                return;
                            }

                            $('#audienceFilterTypeID-7 .filterText').text(sliderFromValue() + ' - ' + sliderToValue());
                        } else {
                            $('#audienceFilterTypeID-7 .filterText').text(InfoItemTexts.FilterAll);
                        }
                        break;

                }

                showTabHelper(previousTab);
            },

            navigateBack = function () {
                showTabHelper(previousTab);
            },

            showTabHelper = function (currentView) {
                if (currentView === 'start')
                    previousTab = 'start';
                else if (currentView === 'audience')
                    previousTab = 'start';
                else if (currentView === 'clubfilter') {
                    // When we show the clubfilter tab we need to calculate the correct teams on every selected club
                    previousTab = 'audience';
                    setSavedTeamAudienceValues();
                }

                $('.infoitem-subview').hide();
                $('#infoitem-' + currentView).show();
            },

            checkIfWarningShouldBeShown = function () {
                if (!clubTeamWarningShown) {
                    // Only check clubs for LeagueOrganizer / Federation
                    if (infoItemType < 3) {
                        // Check if any clubs/teams are selected
                        var clubsSelected = false;
                        $('#infoitem-view .audienceClubList' + " li.checked").not('.selectAll').each(function (key, value) {
                            clubsSelected = true;
                        });

                        if (clubsSelected === false && audienceFilterData !== null) {
                            const items = audienceFilterData.AudienceFilterTypeClubData;

                            clubsSelected = (items.length > 0);
                        }

                        if (clubsSelected) {
                            var r = confirm('Om du lägger till ett filter på sport, kön eller ålderskategori så kommer ditt urval av föreningar och lag att återställas.');

                            clubTeamWarningShown = true;

                            // If the user answers ok, just carry on as normal
                            if (r === false)
                                return true;
                        }
                    }
                    else if (infoItemType === 3) {
                        if (selectedTeams.length > 0) {
                            var r1 = confirm('Om du lägger till ett filter på sport, kön eller ålderskategori så kommer ditt urval av föreningar och lag att återställas.');

                            clubTeamWarningShown = true;

                            // If the user answers ok, just carry on as normal
                            if (r1 === false)
                                return true;
                        }
                    }
                }

                return false;
            },

            showFilterType = function (data) {
                previousTab = 'audience';

                switch (data.AudienceFilterTypeID) {
                    case 1: // Federation
                        break;
                    case 2: // LeagueOrganizer
                        if (checkIfWarningShouldBeShown())
                            return false;

                        if (audienceLeagueOrganizerCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audienceLeagueOrganizerCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audienceLeagueOrganizerCategories.valueHasMutated();

                                    setSavedAudienceValues("audienceLeagueOrganizerList", data.AudienceFilterTypeID);
                                    setPreviouslyCheckedValues("audienceLeagueOrganizerList");
                                    showTabHelper('leagueorganizerfilter');
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        } else {
                            setPreviouslyCheckedValues("audienceLeagueOrganizerList");
                            showTabHelper('leagueorganizerfilter');
                        }

                        break;
                    case 3: // Club
                        if (audienceClubs().length === 0) {
                            var filterData = new viewmodel.InitAudienceForFilterTypeParameters()
                                .AudienceFilterTypeID(infoItem().InfoItemType)
                                .AudienceFilterItemID(infoItem().AudienceEntityID)
                                .AudienceFilterData(generateAudienceFilter());

                            shell.showProgressIndicator(MiscTexts.GettingClubs);

                            datamanager.initAudienceForFilterTypeClub(ko.toJS(filterData), {
                                success: function (json) {
                                    var underlayingArray = audienceClubs();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audienceClubs.valueHasMutated();

                                    setSavedClubAudienceValues("audienceClubList");

                                    shell.hideProgressIndicator();

                                    showTabHelper('clubfilter');
                                },
                                error: function (error) {
                                    shell.hideProgressIndicator();

                                    console.log(error);
                                }
                            });
                        }
                        else {
                            showTabHelper('clubfilter');
                        }

                        break;
                    case 4: // Team 
                        {
                            if (audienceTeams().length === 0) {
                                var teamFilterData = new viewmodel.InitAudienceForFilterTypeParameters()
                                    .AudienceFilterTypeID(infoItem().InfoItemType)
                                    .AudienceFilterItemID(infoItem().AudienceEntityID)
                                    .AudienceFilterData(generateAudienceFilter());

                                shell.showProgressIndicator(MiscTexts.GettingTeams);

                                datamanager.initAudienceForFilterTypeTeam(ko.toJS(teamFilterData), {
                                    success: function (json) {
                                        currentClubId = infoItem().AudienceEntityID;

                                        audienceTeams([]);

                                        var underlayingArray = audienceTeams();

                                        for (var i = 0; i < json.length; i++) {
                                            underlayingArray.push(json[i]);
                                        }

                                        audienceTeams.valueHasMutated();

                                        if (selectedTeams.length > 0) {
                                            const items = selectedTeams.filter(w => w.ClubID === infoItem().AudienceEntityID);

                                            if (items.length > 0) {
                                                $("#infoitem-view .audienceTeamsList li.selectAll").removeClass('checked');

                                                items.forEach(function (item) {
                                                    $("#infoitem-view .audienceTeamsList li.teamListContainer").not('.selectAll').each(function (key, value) {
                                                        var data = ko.contextFor(value).$data;

                                                        if (Number(data.TeamID) === Number(item.TeamID)) {
                                                            $(this).addClass('checked');
                                                            return false;
                                                        }
                                                    });
                                                });
                                            } else {
                                                $("#infoitem-view .audienceTeamsList li.selectAll").addClass('checked');
                                            }
                                        } else {
                                            $("#infoitem-view .audienceTeamsList li.selectAll").addClass('checked');
                                        }

                                        showTabHelper('teamfilter');

                                        shell.hideProgressIndicator();
                                    },
                                    error: function (error) {
                                        console.log(error);
                                        shell.hideProgressIndicator();
                                    }
                                });
                            }
                            else {
                                showTabHelper('teamfilter');
                            }
                        }
                        break;
                    case 5: // Sport
                        if (checkIfWarningShouldBeShown())
                            return false;

                        if (audienceTeamSportCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audienceTeamSportCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audienceTeamSportCategories.valueHasMutated();

                                    setSavedAudienceValues("audienceSportList", data.AudienceFilterTypeID);
                                    setPreviouslyCheckedValues("audienceSportList");
                                    showTabHelper('sportfilter');
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        } else {
                            setPreviouslyCheckedValues("audienceSportList");
                            showTabHelper('sportfilter');
                        }

                        break;
                    case 6: // MemberGender
                        if (audiencePersonGenderCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audiencePersonGenderCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audiencePersonGenderCategories.valueHasMutated();

                                    setSavedAudienceValues("audiencePersonGenderList", data.AudienceFilterTypeID);
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        }
                        showTabHelper('persongenderfilter');
                        break;
                    case 7: // MemberAge
                        showTabHelper('personagefilter');
                        break;
                    case 8: // TeamGender
                        if (checkIfWarningShouldBeShown())
                            return false;

                        if (audienceTeamGenderCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audienceTeamGenderCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audienceTeamGenderCategories.valueHasMutated();
                                    
                                    setSavedAudienceValues("audienceGenderList", data.AudienceFilterTypeID);
                                    setPreviouslyCheckedValues("audienceGenderList");
                                    showTabHelper('genderfilter');
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        } else {
                            setPreviouslyCheckedValues("audienceGenderList");
                            showTabHelper('genderfilter');    
                        }
                        
                        break;
                    case 9: // TeamRole
                        if (audiencePersonTeamRoleCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audiencePersonTeamRoleCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audiencePersonTeamRoleCategories.valueHasMutated();

                                    setSavedAudienceValues("audiencePersonTeamRoleList", data.AudienceFilterTypeID);
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        }
                        showTabHelper('personteamrolefilter');
                        break;
                    case 10: // TeamAgeCategory
                        if (checkIfWarningShouldBeShown())
                            return false;

                        if (audienceTeamAgeCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audienceTeamAgeCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audienceTeamAgeCategories.valueHasMutated();

                                    setSavedAudienceValues("audienceTeamAgeCategoryList", data.AudienceFilterTypeID);
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        }

                        showTabHelper('agecategoryfilter');
                        break;
                    case 11:
                        if (audiencePersonCountryCategories().length === 0) {
                            datamanager.initAudienceForFilterType(data.AudienceFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = audiencePersonCountryCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    audiencePersonCountryCategories.valueHasMutated();

                                    setSavedAudienceValues("audiencePersonCountryList", data.AudienceFilterTypeID);
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        }
                        showTabHelper('personcountryfilter');
                        break;
                }
            },

            setPreviouslyCheckedValues = function (listname) {
                previouslySelectedItems = [];

                $("#infoitem-view ." + listname + " li.checked").not('.selectAll').each(function (key, value) {
                    previouslySelectedItems.push(ko.contextFor(value).$data.AudienceFilterTypeValueID);
                });                
            },

            getCurrentCheckedValues = function (listname) {
                var ret = [];

                $("#infoitem-view ." + listname + " li.checked").not('.selectAll').each(function (key, value) {
                    ret.push(ko.contextFor(value).$data.AudienceFilterTypeValueID);
                });

                return ret;
            },

            setSavedAudienceValues = function (listname, audienceFilterTypeID) {
                if (audienceFilterData !== null) {
                    const items = audienceFilterData.AudienceFilterTypeData.filter(w => w.AudienceFilterTypeID === audienceFilterTypeID);

                    // We have som custom data, remove the "All"-selection
                    if (items.length > 0 && items[0].AudienceFilterTypeValues.length > 0) {
                        $("#infoitem-view ." + listname + " li.selectAll").removeClass('checked');

                        items[0].AudienceFilterTypeValues.forEach(function (item) {
                            $("#infoitem-view ." + listname + " li").not('.selectAll').each(function (key, value) {
                                var data = ko.contextFor(value).$data;

                                if (Number(data.AudienceFilterTypeValueID) === Number(item)) {
                                    $(this).addClass('checked');
                                    return false;
                                }
                            });
                        });
                    }
                }
            },

            setSavedClubAudienceValues = function (listname) {
                if (audienceFilterData !== null) {
                    const items = audienceFilterData.AudienceFilterTypeClubData;

                    // We have som custom data, remove the "All"-selection
                    if (items.length > 0) {
                        $("#infoitem-view ." + listname + " li.selectAll").removeClass('checked');

                        items.forEach(function (item) {
                            $("#infoitem-view ." + listname + " li").not('.selectAll').each(function (key, value) {
                                var data = ko.contextFor(value).$data;

                                if (Number(data.AudienceFilterTypeValueID) === Number(item.ClubID)) {
                                    $(this).addClass('checked');
                                    return false;
                                }
                            });
                        });
                    }
                }
            },

            setSavedTeamAudienceValues = function () {
                $('#infoitem-view .audienceClubList' + " li.checked").not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    if (selectedTeams.length > 0) {
                        var numberSelectedTeams = selectedTeams.filter(w => w.ClubID === data.AudienceFilterTypeValueID).length;
                        var buttonText = '';

                        if (numberSelectedTeams > 0)
                            buttonText = numberSelectedTeams + ' lag';
                        else
                            buttonText = InfoItemTexts.AllTeams;

                        $(this).find('.teamsButton').first().text(buttonText)
                    }
                    else {
                        $(this).find('.teamsButton').first().text(InfoItemTexts.AllTeams)
                    }
                });
            },

            toggleShowLink = function (showLink) {
                if (showLink) {
                    $('#infoItemLinkContainer').show();

                    $('#infoitem-linkurl').focus();
                } else {
                    $('#infoItemLinkContainer').hide();
                }

                return true;
            },

            toggleNotifications = function (data, event) {
                if ($(event.target).is(":checked")) {
                    $('#infoItemNotificationSymbol').removeClass('hidden');
                } else {
                    $('#infoItemNotificationSymbol').addClass('hidden');
                }

                return true;
            },

            toggleShowSchedule = function (showSchedule) {
                if (showSchedule === 0) {
                    $('#infoItemScheduleContainer').hide();
                    $('#infoItemScheduleContainer .infoItemScheduleExpireDate').hide();
                } else if (showSchedule === 1) {
                    $('#infoItemScheduleContainer').show();
                    $('#infoItemScheduleContainer .infoItemScheduleExpireDate').hide();
                } else if (showSchedule === 2) {
                    $('#infoItemScheduleContainer').show();
                    $('#infoItemScheduleContainer .infoItemScheduleExpireDate').show();
                }

                return true;
            },

            toggleShowAudience = function (showAudience) {
                if (showAudience) {
                    $('#infoItemAudienceContainer').show();
                } else {
                    $('#infoItemAudienceContainer').hide();
                }

                return true;
            },

            toggleShowAudienceAge = function (showAudienceAge) {
                if (showAudienceAge) {
                    $('#infoItemAudienceAgeContainer').show();
                } else {
                    $('#infoItemAudienceAgeContainer').hide();
                }

                return true;
            },

            generateAudienceFilter = function () {
                var filter = new viewmodel.AudienceFilterData()
                    .AudienceID(infoItem().AudienceID)
                    .AudienceEntityID(infoItem().AudienceEntityID)
                    .InfoItemID(infoItem().InfoItemID)
                    .InfoItemType(infoItem().InfoItemType);

                var leagueOrganizerFilterType = leagueOrganizerFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(2);

                filter.AudienceFilterTypeData.push(leagueOrganizerFilterType);

                $('#infoitem-view .audienceLeagueOrganizerList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    leagueOrganizerFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                // If the tab is not yet loaded and we have previously saved data, load that instead
                if (audienceLeagueOrganizerCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(leagueOrganizerFilterType, 2);
                }

                $('#infoitem-view .audienceClubList li.checked').not('.selectAll').each(function (key, value) {
                    var clubFilterType = new viewmodel.AudienceFilterTypeClubData();
                    var data = ko.contextFor(value).$data;

                    clubFilterType.ClubID(data.AudienceFilterTypeValueID);

                    if (selectedTeams.length > 0) {
                        selectedTeams.filter(w => w.ClubID === data.AudienceFilterTypeValueID).forEach(function (item) {
                            clubFilterType.SelectedTeams.push(item.TeamID);
                        });
                    }

                    filter.AudienceFilterTypeClubData.push(clubFilterType);
                });

                if (filter.AudienceFilterTypeClubData().length === 0 && audienceClubs().length === 0 && audienceFilterData !== null) {
                    loadDefaultClubData(filter);
                }

                var sportFilterType = sportFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(5);

                filter.AudienceFilterTypeData.push(sportFilterType);

                $('#infoitem-view .audienceSportList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    sportFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                if (audienceTeamSportCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(sportFilterType, 5);
                }

                var personGenderFilterType = personGenderFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(6);

                filter.AudienceFilterTypeData.push(personGenderFilterType);

                $('#infoitem-view .audiencePersonGenderList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    personGenderFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                if (audiencePersonGenderCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(personGenderFilterType, 6);
                }

                var memberAgeFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(7);

                filter.AudienceFilterTypeData.push(memberAgeFilterType);

                if (Number($('input[name=audienceAgeRadioButtons]:checked').val()) === 1) {
                    memberAgeFilterType.AudienceFilterTypeValues.push(sliderFromValue());
                    memberAgeFilterType.AudienceFilterTypeValues.push(sliderToValue());
                }

                var genderFilterType = genderFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(8);

                filter.AudienceFilterTypeData.push(genderFilterType);

                $('#infoitem-view .audienceGenderList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    genderFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                if (audienceTeamGenderCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(genderFilterType, 8);
                }

                var personTeamRoleFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(9);

                filter.AudienceFilterTypeData.push(personTeamRoleFilterType);

                $('#infoitem-view .audiencePersonTeamRoleList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    personTeamRoleFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                if (audiencePersonTeamRoleCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(personTeamRoleFilterType, 9);
                }

                // Always add an empty filter
                var teamAgeFilterType = teamAgeFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(10);

                filter.AudienceFilterTypeData.push(teamAgeFilterType);

                $('#infoitem-view .audienceTeamAgeCategoryList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    teamAgeFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                if (audienceTeamAgeCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(teamAgeFilterType, 10);
                }

                /**** MEMBER COUNTRY ****/
                // Always add an empty filter
                var memberCountryFilterType = new viewmodel.AudienceFilterTypeData()
                    .AudienceFilterTypeID(11);

                filter.AudienceFilterTypeData.push(memberCountryFilterType);

                $('#infoitem-view .audiencePersonCountryList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    memberCountryFilterType.AudienceFilterTypeValues.push(data.AudienceFilterTypeValueID);
                });

                if (audiencePersonCountryCategories().length === 0 && audienceFilterData !== null) {
                    loadDefaultData(memberCountryFilterType, 11);
                }
                /*************************/

                return filter;
            },            

            loadDefaultData = function (filterType, audienceFilterTypeId) {
                const items = audienceFilterData.AudienceFilterTypeData.filter(w => w.AudienceFilterTypeID === audienceFilterTypeId);

                if (items.length > 0 && items[0].AudienceFilterTypeValues.length > 0) {
                    items[0].AudienceFilterTypeValues.forEach(function (item) {
                        filterType.AudienceFilterTypeValues.push(item);
                    });
                }
            },

            loadDefaultClubData = function (filter) {
                const items = audienceFilterData.AudienceFilterTypeClubData;

                if (items.length > 0) {
                    items.forEach(function (item) {
                        var clubFilterType = new viewmodel.AudienceFilterTypeClubData();

                        clubFilterType.ClubID(item.ClubID);

                        if (selectedTeams.length > 0) {
                            selectedTeams.filter(w => w.ClubID === item.ClubID).forEach(function (t) {
                                clubFilterType.SelectedTeams.push(t.TeamID);
                            });
                        }

                        filter.AudienceFilterTypeClubData.push(clubFilterType);
                    });
                }
            },

            searchClubsKeyUp = function (data, event) {
                if (event.keyCode === 9)
                    return;

                clubsSearchString($(event.target).val());

                if (clubsSearchString().length === 0) {
                    $('#infoitem-view .audienceClubList li').not('.selectAll').each(function (key, value) {
                        $(this).removeClass('hidden');
                    });
                } else {
                    $('#infoitem-view .audienceClubList li').not('.selectAll').each(function (key, value) {
                        var data = ko.contextFor(value).$data;

                        if (data.Title.toLowerCase().indexOf(clubsSearchString().toLowerCase()) !== -1) {
                            $(this).removeClass('hidden');
                        } else {
                            $(this).addClass('hidden');
                        }
                    });
                }
            },

            searchCountriesKeyUp = function (data, event) {
                if (event.keyCode === 9)
                    return;

                var countriesSearchString = $(event.target).val();

                if (countriesSearchString.length === 0) {
                    $('#infoitem-view .audiencePersonCountryList li').not('.selectAll').each(function (key, value) {
                        $(this).removeClass('hidden');
                    });
                } else {
                    $('#infoitem-view .audiencePersonCountryList li').not('.selectAll').each(function (key, value) {
                        var data = ko.contextFor(value).$data;

                        if (data.Title.toLowerCase().indexOf(countriesSearchString.toLowerCase()) !== -1) {
                            $(this).removeClass('hidden');
                        } else {
                            $(this).addClass('hidden');
                        }
                    });
                }
            },

            searchTeamsKeyUp = function (data, event) {
                if (event.keyCode === 9)
                    return;

                teamsSearchString($(event.target).val());

                if (teamsSearchString().length === 0) {
                    $('#infoitem-view .audienceTeamsList li.teamListContainer').not('.selectAll').each(function (key, value) {
                        $(this).removeClass('hidden');
                    });
                } else {
                    $('#infoitem-view .audienceTeamsList li.teamListContainer').not('.selectAll').each(function (key, value) {
                        var item = ko.contextFor(value).$data;
                        var match = false;

                        var s = teamsSearchString().toLowerCase().replace(" ", "");

                        // Search the team name
                        match = item.TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1;

                        // Search the team alias if it is set
                        if (item.TeamAlias.toLowerCase().replace(" ", "").indexOf(s) !== -1)
                            match = true;

                        for (var i = 0; i < item.TeamStaffForClubTeamView.length; i++) {
                            // Search TeamStaff for the name
                            if (item.TeamStaffForClubTeamView[i].FullName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }

                        for (var j = 0; j < item.Leagues.length; j++) {
                            // Search Leagues for the TeamName
                            if (item.Leagues[j].TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }

                            // Search Leagues for the LeagueName
                            if (item.Leagues[j].LeagueName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }

                        if (match)
                            $(this).removeClass('hidden');
                        else
                            $(this).addClass('hidden');
                    });
                }
            },

            publishDateChanged = function (data, event) {
                $('#infoitem-expiration-date').attr({ "min": event.target.value });

                $('#infoitem-publishdate-validation-container').removeClass('error');
                $('#infoitem-publishdate-validation-text').hide();
            },

            expirationDateChanged = function (data, event) {
                $('#infoitem-date-published').attr({ "max": event.target.value });

                $('#infoitem-expirationdate-validation-container').removeClass('error');
                $('#infoitem-expirationdate-validation-text').hide();
            },

            showTeamFilterInfoText = function () {
                alert(InfoItemTexts.TeamFilterDescription);
            },

            showMemberFilterInfoText = function () {
                alert(InfoItemTexts.PersonFilterDescription);
            },            

            publishPost = function () {
                var infoFileData = $('#infoItemFileData').val();

                // Either a text, a title, a picture or a video
                if (infoItem().Text.length === 0 && infoItem().Title.length === 0 && !newAsset && !infoFileData) {
                    alert('Inlägget kan inte vara tomt');
                    return;
                }

                if (infoFileData)
                    infoItem().FileBase64 = infoFileData;                                

                //var gameTime = moment(currentGameDate + "T" + currentGameTime).utc().format("YYYY-MM-DD HH:mm:ss");

                if (dateFrom) {                    
                    //console.log(moment(dateFrom).utc().format("YYYY-MM-DD HH:mm"));
                    //console.log(moment(dateFrom).utc().toDate());
                    
                    
                    // infoItem().PublishDate = moment(dateFrom).utc().format("YYYY-MM-DD HH:mm");
                    infoItem().PublishDate = dateFrom;
                    // infoItem().PublishDate = moment(dateFrom).utc().toDate();
                } else {
                    infoItem().PublishDate = null;
                }

                if (dateTo) {
                    //console.log(dateTo);
                    //console.log(moment(dateTo).utc().format("YYYY-MM-DD HH:mm"));

                    //infoItem().ExpireDate = moment(dateTo).utc().format("YYYY-MM-DD HH:mm");
                    infoItem().ExpireDate = dateTo;
                } else {
                    infoItem().ExpireDate = null;
                }

                // Right now we can't set the CallToActionType, default to 0               
                if (infoItem().CallToActionURL.length > 0)
                    infoItem().CallToActionType = 0;

                // If there is a video to be uploaded
                if (newAsset) {
                    infoItem().UploadAssetID = newAsset.UploadAssetId;
                }

                var it = ko.toJS(infoItem());                

                shell.showProgressIndicator(MiscTexts.Saving);

                // Update
                if (infoItem().InfoItemID > 0) {
                    datamanager.updateInfoItem(it, {
                        success: function () {
                            shell.hideProgressIndicator();

                            cleanUpView();
                            closeDialog(true);
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                } else {
                    datamanager.insertInfoItem(it, {
                        success: function () {
                            if (infoItem().UploadAssetID && infoItem().UploadAssetID.length > 0) {
                                shell.showPartialProgressIndicator(MiscTexts.Uploading);

                                datamanager.getAzureMediaUploadInfo(infoItem().UploadAssetID, 4, {
                                    success: function (data) {
                                        newAsset.Id = data.VideoID;

                                        const containerURL = new azblob.ContainerURL(data.SasToken, azblob.StorageURL.newPipeline(new azblob.AnonymousCredential));

                                        (async () => await uploadFile(containerURL))();
                                    },
                                    error: function (error) {

                                    }
                                });
                            }
                            else {
                                shell.hideProgressIndicator();

                                cleanUpView();
                                closeDialog(true);
                            }

                        },
                        error: function (response) {
                            shell.hideProgressIndicator();

                            console.log(response);
                        }
                    });
                }
            },

            uploadFile = async function (containerURL) {
                try {
                    const promises = [];

                    const blockBlobURL = azblob.BlockBlobURL.fromContainerURL(containerURL, 'videoid' + newAsset.Id + '.mp4');

                    var blockSize = newAsset.FileSize > 1024 * 1024 * 32 ? 1024 * 1024 * 4 : 1024 * 512;
                    var options = {
                        storeBlobContentMD5: false,
                        blockSize: blockSize,
                        progress: ev => shell.updateProgress(Math.round((ev.loadedBytes / newAsset.FileSize) * 100))
                    };

                    promises.push(azblob.uploadBrowserDataToBlockBlob(
                        azblob.Aborter.none, newAsset.File, blockBlobURL, options));

                    await Promise.all(promises);

                    shell.hideProgressIndicator();

                    datamanager.updateAzureMedia(newAsset.Id, 4, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            presenter.toggleActivity(false);

                            cleanUpView();
                            closeDialog(true);
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });

                } catch (error) {
                    console.log(error.body.message);
                }

            },

            init = function () {
                $(document).on('change', '.infoItemFilePicker', function (evt) {
                    handleFileSelect(evt);
                });   

                $(document)                    
                    .on('#infoitem-view input.textarea', '#infoitem-view .autoExpand', function () {
                        var minRows = this.getAttribute('data-min-rows') | 0, rows;
                        rows = Math.ceil((this.scrollHeight - this.baseScrollHeight) / 20);
                        this.rows = minRows + rows;
                    });
            },

            sliderValueChanged = function (data, event) {
                $('#range-from-text').text($(event.target).val());
            },

            sliderToValueChanged = function (data, event) {
                $('#range-to-text').text($(event.target).val());
            },

            closeDialog = function (reloadView) {
                // Clear all choices
                // Check if we have any unsaved changes and warn the user perhaps?

                // cleanUpView();
                
                $('#infoitem-view').hide();   
                $('#infoitem-view .fade-overlay').removeClass('active');

                if (reloadView && callbackMethod)
                    callbackMethod();
            };

        init();

        return {
            activate: activate,
            closeDialog: closeDialog,            
            removeFile: removeFile,            

            sliderValueChanged: sliderValueChanged,
            sliderToValueChanged: sliderToValueChanged,

            infoItem: infoItem,
            audiencePersonFilterTypes: audiencePersonFilterTypes,
            audienceTeamFilterTypes: audienceTeamFilterTypes,

            audienceClubs: audienceClubs,
            audienceTeams: audienceTeams,

            audienceTeamAgeCategories: audienceTeamAgeCategories,
            audienceTeamSportCategories: audienceTeamSportCategories,
            audienceTeamGenderCategories: audienceTeamGenderCategories,
            audienceLeagueOrganizerCategories: audienceLeagueOrganizerCategories,
                
            audiencePersonGenderCategories: audiencePersonGenderCategories,
            audiencePersonCountryCategories: audiencePersonCountryCategories,
            audiencePersonTeamRoleCategories: audiencePersonTeamRoleCategories,

            audienceString: audienceString,
            dateRangeString: dateRangeString,
            publishButtonText: publishButtonText,

            saveSchedule: saveSchedule,
            saveAudience: saveAudience,
            saveLink: saveLink,            
            addMedia: addMedia,

            showAudienceFilter: showAudienceFilter,
            showToolbarMenu: showToolbarMenu,
            showAddRemoveTitle: showAddRemoveTitle,
            showAddLink: showAddLink,
            showScheduleSettings: showScheduleSettings,
            showNotifications: showNotifications,
            showSettings: showSettings,
            showTeamsTab: showTeamsTab,

            showFilterType: showFilterType,

            toggleShowLink: toggleShowLink,
            toggleNotifications: toggleNotifications,
            toggleShowAudience: toggleShowAudience,
            toggleShowSchedule: toggleShowSchedule,
            toggleShowAudienceAge: toggleShowAudienceAge,

            selectAll: selectAll,
            selectItem: selectItem,        
            selectTeam: selectTeam,

            searchClubsKeyUp: searchClubsKeyUp,
            searchTeamsKeyUp: searchTeamsKeyUp,
            searchCountriesKeyUp: searchCountriesKeyUp,
            publishDateChanged: publishDateChanged,
            expirationDateChanged: expirationDateChanged,

            showTeamFilterInfoText: showTeamFilterInfoText,
            showMemberFilterInfoText: showMemberFilterInfoText,

            backToHome: backToHome,
            navigateBack: navigateBack,            
            navigateBackFromAudience: navigateBackFromAudience,

            sliderFromValue: sliderFromValue,
            sliderToValue: sliderToValue,

            publishPost: publishPost
        };
    });;
define('viewmodels/vm.infoitemdetails',
    ['jquery', 'config', 'ko', 'router', 'messenger', 'datamanager', 'models/model', 'viewmodels/vm.infoitem', 'underscore'],
    function ($, config, ko, router, messenger, datamanager, model, infoitem, _) {

        var infoItemId = 0,
            infoItem = ko.observable(),
            commentText = ko.observable(),

            activate = function (routeData, callback) {

                messenger.publish.viewModelActivated();

                if (Number(routeData.Id) !== infoItemId)
                    infoItem('');

                infoItemId = routeData.Id;

                if (_.isFunction(callback)) {
                    callback();
                }

                datamanager.getInfoItemForDetailsView(infoItemId, {
                    success: function (json) {
                        infoItem(json);
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            editInfoItem = function (data) {
                infoitem.activate(data.InfoItemTypeID, 0, data.InfoItemID, infoItemCallback);
            },

            deleteInfoItem = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteInfoItem(data.InfoItemID, data.InfoItemTypeID, {
                        success: function (json) {
                            router.navigateBack();
                        },
                        error: function (error) {
                            alert('Ett fel upstod');

                            console.log(error);
                        }
                    });
                }
            },

            infoItemCallback = function () {
                reloadItem();
            },

            reloadItem = function () {
                datamanager.getInfoItemForDetailsView(infoItemId, {
                    success: function (json) {
                        infoItem(json);
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            navigateToLink = function (data) {
                window.open(data.CallToActionURL, '_blank');
            },

            navigateToTips = function () {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.tips;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.tips);
                    }
                };
                return navigationItem;
            },

            onSocialEntityCommentPostClick = function (data) {
                if (commentText().length > 0) {
                    var socialEntityComment = new model.SocialEntityComment()
                        .SocialEntityID(data.SocialEntityInfo.SocialEntityID)
                        .Text(commentText());

                    commentText('');

                    datamanager.insertSocialEntityComment(ko.toJS(socialEntityComment), {
                        success: function (result) {                            
                            reloadItem();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }
            },

            onSocialEntityCommentDeleteClick = function (data) {
                if (data.SocialEntityCommentID !== '') {
                    datamanager.deleteSocialEntityComment(data.SocialEntityCommentID, {
                        success: function (result) {
                            reloadItem();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }
            },

            onSocialEntityCommentReportClick = function (data) {
                // TODO: do nothing

            },

            onKeyDown = function (data, event) {
                if (event.keyCode === 13) {                    
                    onSocialEntityCommentPostClick(data);
                }

                return true;
            },

            cleanup = function () {
                // Dispose all videos
                $("#infoitemdetails-view video").each(function () {
                    var myPlayer = videojs.getPlayer(this);

                    if (myPlayer)
                        myPlayer.dispose();
                });
            };

        return {
            activate: activate,
            cleanup: cleanup,
            commentText: commentText,

            onSocialEntityCommentPostClick: onSocialEntityCommentPostClick,
            onSocialEntityCommentDeleteClick: onSocialEntityCommentDeleteClick,
            onSocialEntityCommentReportClick: onSocialEntityCommentReportClick,

            onKeyDown: onKeyDown,

            navigateToLink: navigateToLink,
            navigateToTips: navigateToTips,

            editInfoItem: editInfoItem,
            deleteInfoItem: deleteInfoItem,

            infoItem: infoItem
        };
    });
;
define('viewmodels/vm.interviewadmin',
    ['ko', 'underscore', 'config', 'router', 'datamanager', 'viewmodels/vm.shell', 'helpers/sw.timehelper'],
    function (ko, _, config, router, datamanager, shell, timehelper) {

        var interviewtemplates = ko.observableArray(),
            interviewTemplate = ko.observable(),
            requests = ko.observableArray(),
            unsentRequests = ko.observableArray(),
            questionGroups = ko.observableArray(),
            sentRequests = ko.observableArray(),
            selectedTemplateForRequest = 7,
            currentPage = ko.observable(''),
            selectionMode = ko.observable(0),
            requestSelectionMode = ko.observable(0),
            filterSearchString = '',
            filterAnswered = -1,
            filterStatus = 0,
            filterValid = -1,
            filterTemplateId = 0,
            amountToGet = 20,

            gettingSentRequests = ko.observable(false),
            noMoreSentRequestsToGet = ko.observable(false),

            activate = function (routeData, callback) {
                routeData.subview = 'requests';

                activatesubview(routeData);
            },

            activatesubview = function (routeData, callback) {
                var currentView = routeData.subview;

                $('.interviewadmin-subview').hide();
                $('#interviewadmin-' + currentView).show();

                currentPage(currentView);

                if (interviewtemplates().length === 0) {
                    datamanager.getInterviewTemplates({
                        success: function (model) {
                            var underlayingArray = interviewtemplates();

                            for (var i = 0; i < model.length; i++) {
                                underlayingArray.push(model[i]);
                            }

                            interviewtemplates.valueHasMutated();

                            var date = new Date();
                            var currentDate = date.toISOString().slice(0, 10);
                            var startDate = date.toISOString().slice(0, 10);
                            var endDate = date.toISOString().slice(0, 10);

                            $('#interviewAdminStartDate').val(startDate);
                            $('#interviewAdminStartTime').val('00:00');
                            $('#interviewAdminEndDate').val(endDate);
                            $('#interviewAdminEndTime').val('00:00');

                            $('#interviewAdminRequestStartDate').val(startDate);
                            $('#interviewAdminRequestStartTime').val('00:00');
                            $('#interviewAdminRequestEndDate').val(endDate);
                            $('#interviewAdminRequestEndTime').val('00:00');

                            $('#requestDailyStartDate').val(currentDate);

                            // Set default values
                            selectedTemplateForRequest = 1;
                            $('.interviewTemplateRequestDropdown').text(model[0].Name);
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }

                switch (currentView) {
                    case 'sent': {
                        if (sentRequests().length === 0) {
                            datamanager.getSentInterviewRequests(0, filterTemplateId, filterSearchString, filterStatus, filterAnswered, filterValid, amountToGet)
                                .then(function (model) {
                                    sentRequests([]);

                                    var underlayingArray = sentRequests();

                                    for (var i = 0; i < model.length; i++) {
                                        underlayingArray.push(model[i]);
                                    }

                                    sentRequests.valueHasMutated();
                                })
                                .fail(function (error) {
                                    console.log(error);
                                });
                        }
                    }
                }

                $(window).scroll(infiniteScrolling);
            },

            infiniteScrolling = function () {
                if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && sentRequests().length !== 0) {
                    if (!gettingSentRequests() && !noMoreSentRequestsToGet()) {
                        gettingSentRequests(true);

                        var lastId = 0;

                        if (sentRequests().length !== 0) {
                            var lastPageInCache = sentRequests()[sentRequests().length - 1];

                            lastId = lastPageInCache.InterviewRequestID;
                        }

                        datamanager.getSentInterviewRequests(lastId, filterTemplateId, filterSearchString, filterStatus, filterAnswered, filterValid, amountToGet)
                            .then(function (model) {
                                var underlayingArray = sentRequests();

                                for (var i = 0; i < model.length; i++) {
                                    underlayingArray.push(model[i]);
                                }

                                sentRequests.valueHasMutated();

                                gettingSentRequests(false);

                                if (model.length === 0)
                                    noMoreSentRequestsToGet(true);
                            })
                            .fail(function (error) {
                                console.log(error);

                                gettingSentRequests(false);
                            });
                    }
                }
            },

            cleanup = function () {
                $(window).unbind('scroll', infiniteScrolling);

                gettingSentRequests(false);
                noMoreSentRequestsToGet(false);
            },

            getInterviewRequests = function (save, data, event) {
                var gameId = 0;
                var useProcedure = selectionMode() === 2;

                var startDate = $('#interviewAdminStartDate').val();
                var endDate = $('#interviewAdminEndDate').val();

                var startTime = $('#interviewAdminStartTime').val();
                var endTime = $('#interviewAdminEndTime').val();

                var fromDateString = '1970-01-01';
                var toDateString = '1970-01-01';

                switch (selectionMode()) {
                    case 0:
                        if ($.isNumeric($('#interviewGameId').val()))
                            gameId = $('#interviewGameId').val();

                        if (gameId === 0) {
                            alert('Du måste ange ett matchid');
                            return;
                        }
                        break;
                    case 1:
                        fromDateString = moment(startDate + "T" + startTime).utc().format("YYYY-MM-DD HH:mm:ss");
                        toDateString = moment(endDate + "T" + endTime).utc().format("YYYY-MM-DD HH:mm:ss");

                        if (fromDateString > toDateString) {
                            alert('Starttiden kan inte vara efter sluttiden');
                            return;
                        }

                        break;
                    case 2:

                        break;
                }

                $('#btnGenerateInterviewRequests').hide();

                if (save)
                    shell.showProgressIndicator("Sparar requests...");
                else
                    shell.showProgressIndicator("Hämtar mottagare...");

                datamanager.getInterviewRequests(gameId, selectedTemplateForRequest, fromDateString, toDateString, useProcedure, save)
                    .then(function (model) {
                        requests([]);

                        if (save === false) {
                            var underlayingArray = requests();

                            for (var i = 0; i < model.length; i++) {
                                underlayingArray.push(model[i]);
                            }

                            if (model.length > 0)
                                $('#btnGenerateInterviewRequests').show();

                            requests.valueHasMutated();
                        }

                        shell.hideProgressIndicator();

                        $('#interviewadmin-view .alert').show();
                    })
                    .fail(function (error) {
                        hideProgressIndicator();

                        $('#interviewadmin-view .alert').show();
                        $('#btnGenerateInterviewRequests').hide();
                        alert(error);
                    });
            },

            getUnsentRequests = function (save, data, event) {
                var gameId = 0;
                var startDate = $('#interviewAdminRequestStartDate').val();
                var endDate = $('#interviewAdminRequestEndDate').val();

                var startTime = $('#interviewAdminRequestStartTime').val();
                var endTime = $('#interviewAdminRequestEndTime').val();

                var fromDateString = '1970-01-01';
                var toDateString = '1970-01-01';

                switch (requestSelectionMode()) {
                    case 0:
                        if ($.isNumeric($('#requestGameId').val()))
                            gameId = $('#requestGameId').val();

                        if (gameId === 0) {
                            alert('Du måste ange ett matchid');
                            return;
                        }
                        break;
                    case 1:
                        fromDateString = moment(startDate + "T" + startTime).utc().format("YYYY-MM-DD HH:mm:ss");
                        toDateString = moment(endDate + "T" + endTime).utc().format("YYYY-MM-DD HH:mm:ss");

                        if (fromDateString > toDateString) {
                            alert('Starttiden kan inte vara efter sluttiden');
                            return;
                        }

                        break;
                }

                if (save) {
                    shell.showProgressIndicator(MiscTexts.Sending);

                    datamanager.sendInterviewRequests(gameId, selectedTemplateForRequest, fromDateString, toDateString)
                        .then(function (model) {
                            unsentRequests([]);

                            shell.hideProgressIndicator();

                            $('#btnSendInterviewRequests').hide();

                            alert('Förfrågningarna har skickats!');
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            alert(response);
                        });
                } else {
                    shell.showProgressIndicator("Hämtar oskickade requests...");

                    $('#btnSendInterviewRequests').hide();

                    datamanager.getUnsentInterviewRequests(gameId, selectedTemplateForRequest, fromDateString, toDateString)
                        .then(function (model) {
                            console.log(model);

                            unsentRequests([]);

                            var underlayingArray = unsentRequests();

                            for (var i = 0; i < model.length; i++) {
                                underlayingArray.push(model[i]);
                            }

                            unsentRequests.valueHasMutated();

                            if (model.length > 0)
                                $('#btnSendInterviewRequests').show();

                            shell.hideProgressIndicator();
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            $('#btnSendInterviewRequests').hide();

                            alert(response);
                        });
                }
            },

            sendIndividualRequest = function (data, event) {
                shell.showProgressIndicator(MiscTexts.Sending);

                datamanager.sendIndividualInterviewRequest(data.InterviewRequestID, {
                    success: function (json) {
                        shell.hideProgressIndicator();

                        $(event.target).closest('li').hide();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    }
                });
            },

            deleteIndividualRequest = function (data, event) {
                console.log(data);

                datamanager.deleteIndividualInterviewRequest(data.InterviewRequestID, {
                    success: function (json) {
                        $(event.target).closest('li').hide();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            setSelectionMode = function (type, data, event) {
                selectionMode(type);

                $('.btn-group-selection-mode button').removeClass('active');

                $(event.target).addClass('active');

            },

            setRequestSelectionMode = function (type, data, event) {
                requestSelectionMode(type);

                $('.btn-group-request-selection-mode button').removeClass('active');

                $(event.target).addClass('active');
            },

            setFilterAnswered = function (type, data, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                filterAnswered = type;
            },

            setFilterStatus = function (type, data, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                filterStatus = type;
            },

            setFilterValid = function (type, data, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                filterValid = type;
            },

            setFilterTemplate = function (type, data, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                filterTemplateId = type;
            },

            searchSentRequests = function () {
                noMoreSentRequestsToGet(false);
                gettingSentRequests(true);

                console.log(filterAnswered);

                datamanager.getSentInterviewRequests(0, filterTemplateId, filterSearchString, filterStatus, filterAnswered, filterValid, amountToGet)

                    .then(function (model) {
                        sentRequests([]);

                        var underlayingArray = sentRequests();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        sentRequests.valueHasMutated();

                        gettingSentRequests(false);

                        if (model.length === 0)
                            noMoreSentRequestsToGet(true);
                    })
                    .fail(function (error) {
                        console.log(error);

                        gettingSentRequests(false);
                    });
            },

            navigateToInterviewAdminRequests = function () {
                return createInterviewAdminNavigationItem('requests');
            },

            navigateToInterviewAdminUnsent = function () {
                return createInterviewAdminNavigationItem('unsent');
            },

            navigateToInterviewAdminSent = function () {
                return createInterviewAdminNavigationItem('sent');
            },

            navigateToInterviewAdminTemplates = function () {
                return createInterviewAdminNavigationItem('templates');
            },

            navigateToLeague = function (item) {

            },

            navigateToGameExternal = function (item) {
                window.open('/' + config.hashes.magazinegameview + '/' + item.GameID, '_blank');
            },

            navigateToInterview = function (item) {
                window.open('/' + config.hashes.livedetails + '/' + item.GameID + '/' + item.InterviewID + '/13', '_blank');
            },

            createInterviewAdminNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.interviewadmin + '/' + endPath;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.interviewadmin + '/' + endPath);
                    }
                };
            },

            onFilterKeyUp = function (data, event) {
                var s = $(event.target).val();

                if (s.length === 0)
                    s = '';

                filterSearchString = s;
            },

            selectPicture = function () {
                $('#interviewadmin-view .interviewFilePicker').focus().trigger('click');
            },

            clearSelectedTemplateForRequest = function () {
                $('.interviewTemplateRequestDropdown').text('Alla templates');
                selectedTemplateForRequest = 0;
            },

            selectTemplateForRequest = function (data) {            
                $('.interviewTemplateRequestDropdown').text(data.Name);       
                selectedTemplateForRequest = data.InterviewTemplateID;
            },

            selectTemplate = function (data) {
                datamanager.getInterviewTemplate(data.InterviewTemplateID, {
                    success: function (model) {       
                        interviewTemplate(model);

                        questionGroups([]);

                        var underlayingArray = questionGroups();

                        for (var i = 0; i < model.QuestionGroups.length; i++) {
                            underlayingArray.push(model.QuestionGroups[i]);
                        }

                        questionGroups.valueHasMutated();
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            handleInterviewFileSelected = function (evt) {
                var files = evt.target.files;

                for (var i = 0; i < files.length; i++) {
                    var f = files[i];

                    if (!f.type.match('image.*')) {
                        continue;
                    }

                    var reader = new FileReader();

                    shell.showProgressIndicator(MiscTexts.Uploading);

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var base64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            datamanager.insertInterviewPicture(base64data)
                                .then(function (json) {
                                    shell.hideProgressIndicator();
                                })
                                .fail(function (error) {
                                    shell.hideProgressIndicator();

                                    alert(error.responseText);
                                });                            
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },

            init = function () {
                $(document).on('change', '.interviewFilePicker', function (evt) {
                    handleInterviewFileSelected(evt);
                    evt.target.value = '';
                });
            };

        init();

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,

            clearSelectedTemplateForRequest: clearSelectedTemplateForRequest,
            selectTemplateForRequest: selectTemplateForRequest,
            selectTemplate: selectTemplate,

            navigateToInterviewAdminRequests: navigateToInterviewAdminRequests,
            navigateToInterviewAdminUnsent: navigateToInterviewAdminUnsent,
            navigateToInterviewAdminSent: navigateToInterviewAdminSent,
            navigateToInterviewAdminTemplates: navigateToInterviewAdminTemplates,

            currentPage: currentPage,
            setSelectionMode: setSelectionMode,
            setRequestSelectionMode: setRequestSelectionMode,            
            getInterviewRequests: getInterviewRequests,
            getUnsentRequests: getUnsentRequests,
            searchSentRequests: searchSentRequests,

            setFilterAnswered: setFilterAnswered,
            setFilterStatus: setFilterStatus,
            setFilterValid: setFilterValid,
            setFilterTemplate: setFilterTemplate,

            selectionMode: selectionMode,
            requestSelectionMode: requestSelectionMode,
            
            navigateToLeague: navigateToLeague,
            navigateToGameExternal: navigateToGameExternal,
            navigateToInterview: navigateToInterview,
            sendIndividualRequest: sendIndividualRequest,
            deleteIndividualRequest: deleteIndividualRequest,

            onFilterKeyUp: onFilterKeyUp,

            selectPicture: selectPicture,

            requests: requests,
            unsentRequests: unsentRequests,
            sentRequests: sentRequests,
            questionGroups: questionGroups,
            interviewTemplate: interviewTemplate,
            interviewtemplates: interviewtemplates
        };
    });
;
define('viewmodels/vm.leagueorganizeradmin',
    ['ko', 'underscore', 'config', 'router', 'datamanager', 'viewmodels/vm.shell', 'models/viewmodel', 'viewmodels/vm.audience', 'viewmodels/vm.targetfilter', 'helpers/sw.utils', 'viewmodels/vm.imagecropper'],
    function (ko, _, config, router, datamanager, shell, viewmodel, audience, targetfilter, utils, imagecropper) {
        var leagueOrganizerId = 0,
            selectedLeagueID = ko.observable(0),
            currentPage = ko.observable(''),
            leagueOrganizerHeader = ko.observable(),
            leagueOrganizer = ko.observable(),
            fairPlayCardSettings = ko.observable(),
            initLeagueOrganizerPartnersModel = ko.observable(),
            selectedTeamTypeFilter = ko.observable(-1),
            selectedInviteTypeFilter = ko.observable(-1),
            selectedLeagueText = ko.observable(''),
            selectedTeamTypeText = ko.observable('Alla lag'),
            selectedInviteTypeText = ko.observable(''),
            partners = ko.observableArray(),
            mainPartners = ko.observableArray(),
            fairPlayCardPartners = ko.observableArray(),
            isSortAsc = ko.observable(true),
            sortColumn = ko.observable(1),
            isLeagueOrganizersSortAsc = ko.observable(true),
            leagueOrganizerSortColumn = ko.observable(1),
            clubs = ko.observableArray(),
            admins = ko.observableArray(),
            matchingMembers = ko.observableArray(),
            lastScrollPosition = 0,
            seasonId = 0,
            seasonName = ko.observable(),
            newSubscription = ko.observable(),
            teams = ko.observableArray(),
            leagues = ko.observableArray(),
            leagueOrganizers = ko.observableArray(),
            streamPackages = ko.observableArray(),
            totalNumberOfTeams = ko.observable(0),
            totalNumberOfOnboardedTeams = ko.observable(0),
            clubSearchString = ko.observable('-'),
            currentEndPath = '',
            currentViewName = '',
            partnerForEditView = ko.observable(),
            leagueOrganizerAdminSearchCountryCodePrefix = '+46',
            countries = ko.observableArray(),
            imageAspectX = 0,
            imageAspectY = 0,
            useRoundImage = false,
            imagePreviewId,
            leagueOrganizerPartnerId = 0,

            activate = function (routeData, callback) {
                routeData.subview = 'clubs';

                if (Number(routeData.Id) !== leagueOrganizerId) {
                    $('#leagueorganizeradmin-view .main-preloader').show();
                    $('#leagueorganizeradmin-view .main-afterloaded').hide();
                }

                activatesubview(routeData);

                if (_.isFunction(callback)) { callback(); }
            },

            activatesubview = function (routeData, callback) {
                leagueOrganizerId = Number(routeData.Id);

                var currentView = routeData.subview;
                currentEndPath = routeData.subview;

                $('#leagueorganizeradmin-' + currentView).show();
                currentViewName = 'leagueorganizeradmin-' + currentView;

                $('.moreMenuItemsList').addClass('hiddenOnWideDisplay');

                currentPage(currentView);

                if (leagueOrganizerHeader() !== undefined) {
                    if (leagueOrganizerHeader().LeagueOrganizerID !== leagueOrganizerId) {
                        seasonId = 0;
                        getLeagueOrganizerHeader(routeData, true);

                        clearObservables();
                    }
                }
                else {
                    getLeagueOrganizerHeader(routeData, true);
                }

                if (seasonId > 0) {
                    loadSubView(currentView, routeData);
                }
            },

            loadSubView = function (currentView, routeData) {
                switch (currentView) {
                    case 'clubs':
                        {
                            if (clubs().length === 0) {
                                totalNumberOfTeams(0);
                                totalNumberOfOnboardedTeams(0);


                                datamanager.getLeagueOrganizerClubsForAdminList(leagueOrganizerId, seasonId, {
                                    success: function (model) {
                                        var underlayingArray = clubs();

                                        for (var i = 0; i < model.length; i++) {
                                            totalNumberOfTeams(totalNumberOfTeams() + model[i].NumberOfTeams);
                                            totalNumberOfOnboardedTeams(totalNumberOfOnboardedTeams() + model[i].NumberOfOnboardedTeams);

                                            underlayingArray.push(model[i]);
                                        }

                                        clubs.valueHasMutated();

                                        removePreloader(currentViewName);
                                    },
                                    error: function (response) {
                                        removePreloader(currentViewName);
                                    }
                                });
                            }
                        }
                        break;
                    case 'admins':
                        {
                            admins([]);

                            datamanager.getLeagueOrganizerAdministrators(leagueOrganizerId, {
                                success: function (model) {
                                    admins([]);

                                    var underlayingArray = admins();

                                    for (var i = 0; i < model.length; i++) {
                                        underlayingArray.push(model[i]);
                                    }

                                    admins.valueHasMutated();

                                    removePreloader(currentViewName);
                                },
                                error: function (error) {
                                    removePreloader(currentViewName);
                                    alert('Något gick fel');
                                    console.log(error);
                                }
                            });
                        }
                        break;
                    case 'districts':
                        if (leagueOrganizers().length === 0) {
                            datamanager.getLeagueOrganizerDistrictsForAdminList(seasonId, {
                                success: function (model) {
                                    var underlayingArray = leagueOrganizers();

                                    for (var i = 0; i < model.length; i++) {
                                        underlayingArray.push(model[i]);
                                    }

                                    leagueOrganizers.valueHasMutated();

                                    removePreloader(currentViewName);
                                },
                                error: function (response) {
                                    removePreloader(currentViewName);
                                }
                            });
                        }

                        break;
                    case 'start':
                        {                            
                            removePreloader(currentViewName);
                        }
                        break;
                    case 'leagues':
                        {
                            if (leagues().length === 0) {
                                window.scrollTo(0, 0);

                                getLeagueOrganizerLeagues(true);
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            removePreloader(currentViewName);
                        }
                        break;
                    case 'teams':
                        {
                            // If we haven't loaded our leagues, load them
                            if (leagues().length === 0) {
                                window.scrollTo(0, 0);

                                getLeagueOrganizerLeagues(false);
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            removePreloader(currentViewName);
                        }
                        break;
                    case 'fairplaycardsettings':
                        {
                            // If we haven't loaded our leagues, load them
                            if (fairPlayCardSettings() === undefined) {
                                window.scrollTo(0, 0);

                                getFairPlayCardSettings(false);
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            removePreloader(currentViewName);
                        }
                        break;
                    case 'fairplaycards':
                        {
                            removePreloader(currentViewName);
                        }
                        break;
                    case 'searchleagueorganizeradmin':
                        {
                            removePreloader(currentViewName);
                        }
                        break;
                    case 'livestream':
                        {
                            initStreamPackages();
                        }
                        break;
                    case 'partners':
                        {
                            if (partners().length === 0 && mainPartners().length === 0 && fairPlayCardPartners().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.initLeagueOrganizerPartners(leagueOrganizerId, {
                                    success: function (model) {
                                        initLeagueOrganizerPartnersModel(model);

                                        var underlayingArray = partners();

                                        for (var i = 0; i < model.Partners.length; i++) {
                                            underlayingArray.push(model.Partners[i]);
                                        }

                                        partners.valueHasMutated();

                                        underlayingArray = mainPartners();

                                        for (var j = 0; j < model.MainPartners.length; j++) {
                                            underlayingArray.push(model.MainPartners[j]);
                                        }

                                        mainPartners.valueHasMutated();

                                        underlayingArray = fairPlayCardPartners();

                                        for (var k = 0; k < model.FairPlayCardPartners.length; k++) {
                                            underlayingArray.push(model.FairPlayCardPartners[k]);
                                        }

                                        fairPlayCardPartners.valueHasMutated();

                                        removePreloader(currentViewName);
                                    },
                                    error: function (response) {
                                        removePreloader(currentViewName);
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                        }
                        break;
                    case 'partner':
                        if (!routeData) {
                            router.navigateTo(config.hashes.leagueorganizeradmin + '/' + leagueOrganizerId + '/partners');
                        } else {
                            if (routeData.itemId !== undefined) {
                                leagueOrganizerPartnerId = Number(routeData.itemId);
                            } else {
                                leagueOrganizerPartnerId = 0;
                            }
                        }

                        datamanager.getLeagueOrganizerPartner(leagueOrganizerPartnerId, {
                            success: function (model) {
                                partnerForEditView(model);

                                if (model.PartnerTypeID > 0) {
                                    if (model.PartnerTypeID === 1)
                                        $('#leagueorganizer-view-partner-type').text('Huvudpartner');
                                    else if (model.PartnerTypeID === 2)
                                        $('#leagueorganizer-view-partner-type').text('Partner');
                                    else if (model.PartnerTypeID === 3)
                                        $('#leagueorganizer-view-partner-type').text('Fairplay-partner');


                                }

                                removePreloader(currentViewName);
                            },
                            error: function (error) {

                            }
                        });
                        break;
                }
            },

            clearObservables = function () {
                teams([]);
                leagues([]);
                admins([]);
                matchingMembers([]);
                mainPartners([]);
                fairPlayCardPartners([]);
                partners([]);
                clubs([]);
                countries([]);
                leagueOrganizers([]);
                streamPackages([]);

                isSortAsc(true);
                isLeagueOrganizersSortAsc(true);
                sortColumn(1);
                leagueOrganizerSortColumn(1);

                totalNumberOfTeams(0);
                totalNumberOfOnboardedTeams(0);
                selectedLeagueID(0);
                selectedLeagueText('');
                selectedTeamTypeFilter(-1);
                selectedTeamTypeText('');
                selectedInviteTypeFilter(-1);
                selectedInviteTypeText('');

                $('.leagueorganizeradmin-subview .afterSubViewLoaded').hide();
                $('.leagueorganizeradmin-subview .beforeSubViewLoaded').show();
            },

            getLeagueOrganizerLeagues = function (removeLoader) {
                datamanager.getLeagueOrganizerLeaguesForAdminList(leagueOrganizerId, seasonId, {
                    success: function (model) {
                        var underlayingArray = leagues();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        leagues.valueHasMutated();

                        if (removeLoader)
                            removePreloader(currentViewName);

                        $('.leagueorganizeradmin-subview .afterSubViewLoaded').show();
                        $('.leagueorganizeradmin-subview .beforeSubViewLoaded').hide();
                    },
                    error: function (response, xhr) {
                        alert(response);
                    }
                });
            },

            getLeagueOrganizerHeader = function (routeData, callSubView) {
                datamanager.getLeagueOrganizerHeader(leagueOrganizerId, {
                    success: function (model) {

                        //var lastSeason = model.Seasons[model.Seasons.length - 1];

                        //if (seasonId === 0) {
                        //    seasonId = lastSeason.SeasonID;
                        //    seasonName(lastSeason.SeasonName);
                        //}

                        for (var i = 0; i < model.Seasons.length; i++) {
                            if (model.Seasons[i].IsDefault) {
                                seasonId = model.Seasons[i].SeasonID;
                                seasonName(model.Seasons[i].SeasonName);
                            }
                        }

                        leagueOrganizerHeader(model);

                        if (callSubView) {
                            activatesubview(routeData);
                        }
                    },
                    error: function (response, xhr) {
                        if (xhr.status === 403) {
                            router.navigateTo("/");
                        }
                    }
                });
            },

            getFairPlayCardSettings = function () {
                datamanager.getLeagueOrganizerFairPlayCardSettings(leagueOrganizerId, {
                    success: function (model) {
                        fairPlayCardSettings(model);
                    },
                    error: function (response, xhr) {
                        alert(response);
                    }
                });
            },

            removePreloader = function (subviewname) {
                $('#' + subviewname + ' .preloader').hide();
                $('#' + subviewname + ' .afterloaded').show();

                $('#leagueorganizeradmin-view .main-preloader').hide();
                $('#leagueorganizeradmin-view .main-afterloaded').show();
            },

            getLeagueOrganizerTeams = function (leagueId) {
                datamanager.getLeagueOrganizerTeamsAdmin(leagueId, {
                    success: function (model) {
                        teams([]);

                        var underlayingArray = teams();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        teams.valueHasMutated();

                        removePreloader(currentViewName);
                    },
                    error: function (response) {
                        removePreloader(currentViewName);
                    }
                });
            },

            initStreamPackages = function () {
                var _temp = {
                    Price: 0,
                    LiveStreamSubscriptionTypeID: -1,
                    Types: [{
                        Name: 'Event pass',
                        ID: 0
                    },
                    {
                        Name: 'Game ticket',
                        ID: 1
                    }
                    ]
                };

                newSubscription(_temp);

                datamanager.getStreamPackagesForLeagueOrganizer(leagueOrganizerId, {
                    success: function (model) {
                        streamPackages([]);

                        var underlayingArray = streamPackages();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        streamPackages.valueHasMutated();

                        removePreloader(currentViewName);
                    },
                    error: function (error) {
                        removePreloader(currentViewName);
                    }
                });
            },

            filteredTeams = ko.computed(function () {
                return ko.utils.arrayFilter(teams(), function (item) {
                    var isMatch = true;

                    if (selectedTeamTypeFilter() !== 0) {
                        switch (selectedTeamTypeFilter()) {
                            case 1:
                                {
                                    isMatch = isMatch && item.TeamTypeID === 1;
                                }
                                break;
                            case 3:
                                {
                                    isMatch = isMatch && item.TeamTypeID === 3;
                                }
                                break;
                        }
                    }

                    if (selectedInviteTypeFilter() >= 0) {
                        switch (selectedInviteTypeFilter()) {
                            case 0:
                                isMatch = isMatch && item.SentInvites === 0;
                                break;
                            case 1:
                                isMatch = isMatch && item.SentInvites > 0;
                                break;
                            case 2:
                                isMatch = isMatch && item.SentInvites > 1;
                                break;
                        }
                    }

                    return isMatch;
                });
            }),

            selectLeague = function (item) {
                selectedLeagueID(item.LeagueID);

                selectedLeagueText(item.LeagueName + ' ' + item.SeasonName);
                teams([]);

                getLeagueOrganizerTeams(selectedLeagueID());
            },

            selectSeason = function (item) {
                seasonName(item.SeasonName);

                if (item.SeasonID !== seasonId) {
                    seasonId = item.SeasonID;
                    clearObservables();

                    loadSubView(currentEndPath, null);
                }
            },

            selectTeamType = function (type) {
                switch (type) {
                    case 0:
                        selectedTeamTypeText('All teams');
                        break;
                    case 1:
                        selectedTeamTypeText('Not activated teams');
                        break;
                    case 2:
                        break;
                    case 3:
                        selectedTeamTypeText('Activated teams');
                        break;
                }

                selectedTeamTypeFilter(type);
            },

            selectInviteType = function (type) {
                switch (type) {
                    case -1:
                        selectedInviteTypeText('');
                        break;
                    case 0:
                        selectedInviteTypeText('Ingen inbjudan skickad');
                        break;
                    case 1:
                        selectedInviteTypeText('Inbjudan skickad');
                        break;
                    case 2:
                        selectedInviteTypeText('Påminnelse skickad');
                        break;
                }
                selectedInviteTypeFilter(type);
            },

            selectAllTeams = function () {
                $(".leagueorganizerteams-select").prop('checked', $('.leagueorganizerteams-select-all').prop('checked'));

                return true;
            },

            searchTeams = function () {
                alert('TODO');
            },

            searchLeagueOrganizerAdmins = function () {
                var personalIdentityNumber = $('#leagueOrganizerAdminSearchPersonalNumber').val();
                var phone = $('#leagueOrganizerAdminSearchPhone').val();

                var countryCodePrefix = '+46';

                shell.showProgressIndicator(MiscTexts.Searching);

                datamanager.searchForMember(0, countryCodePrefix, phone, personalIdentityNumber, false, 0)
                    .then(function (json) {
                        $('.leagueAdminSearch.postSearch').show();
                        $('.leagueAdminSearch.preSearch').hide();

                        shell.hideProgressIndicator();

                        matchingMembers([]);

                        var underlayingArray = matchingMembers();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        matchingMembers.valueHasMutated();

                    })
                    .fail(function (error) {
                        alert(error.responseText);
                    });
            },

            clearLeagueSelect = function () {
                selectedLeagueID(0);
                selectedLeagueText('');

                teams([]);
            },

            sendInvites = function () {
                var selectedList = [];

                $($('.leagueorganizerteams-select')).each(function () {
                    if ($(this).prop("checked")) {
                        selectedList.push($(this).val());
                    }
                });

                sendInviteHelper(selectedList, false);
            },

            sendInfoEmails = function () {
                showProgressIndicator("Sending info emails");

                datamanager.sendLeagueTeamInfoEmails(leagueOrganizerId, seasonId, {
                    success: function () {
                        hideProgressIndicator();
                        showToast("Info emails sent");

                    },
                    error: function (response) {
                        hideProgressIndicator();

                        console.log(response);

                        alert(response);
                    }
                });
            },

            sendInviteEmails = function () {
                showProgressIndicator("Sending invite emails");

                datamanager.sendLeagueTeamInviteEmails(leagueOrganizerId, seasonId, false, {
                    success: function () {
                        hideProgressIndicator();
                        showToast("Invite emails sent");

                    },
                    error: function (response) {
                        hideProgressIndicator();

                        console.log(response);

                        alert(response);
                    }
                });
            },

            sendInviteEmailsFutsal = function () {
                showProgressIndicator("Sending invite emails Futsal");

                datamanager.sendLeagueTeamInviteEmailsFutsal(leagueOrganizerId, seasonId, false, {
                    success: function () {
                        hideProgressIndicator();
                        showToast("Invite emails Futsal sent");

                    },
                    error: function (response) {
                        hideProgressIndicator();

                        console.log(response);

                        alert(response);
                    }
                });
            },

            sendInviteEmailReminders = function () {
                showProgressIndicator("Sending invite email reminders");

                datamanager.sendLeagueTeamInviteEmails(leagueOrganizerId, seasonId, true, {
                    success: function () {
                        hideProgressIndicator();
                        showToast("Invite email reminders sent");

                    },
                    error: function (response) {
                        hideProgressIndicator();

                        console.log(response);

                        alert(response);
                    }
                });
            },

            sendInviteSMS = function () {
                showProgressIndicator("Sending invite SMS");

                datamanager.sendLeagueTeamInviteSMS(leagueOrganizerId, seasonId, false, {
                    success: function () {
                        hideProgressIndicator();
                        showToast("Invite SMS sent");

                    },
                    error: function (response) {
                        hideProgressIndicator();

                        console.log(response);

                        alert(response);
                    }
                });
            },

            sendClubAdminEmails = function () {
                showProgressIndicator("Sending Club admin emails");

                datamanager.sendClubAdminEmails(leagueOrganizerId, seasonId, false, {
                    success: function () {
                        hideProgressIndicator();
                        showToast("Club admin emails sent");

                    },
                    error: function (response) {
                        hideProgressIndicator();

                        console.log(response);

                        alert(response);
                    }
                });
            },

            sendRefereeInviteEmails = function () {
                showProgressIndicator("Sending Referee invite emails");

                datamanager.sendRefereeInviteEmails(leagueOrganizerId, seasonId, false, {
                    success: function () {
                        hideProgressIndicator();
                        showToast("Referee invite emails sent");

                    },
                    error: function (response) {
                        hideProgressIndicator();

                        console.log(response);

                        alert(response);
                    }
                });
            },


            sendReminders = function () {
                var selectedList = [];

                $($('.leagueorganizerteams-select')).each(function () {
                    if ($(this).prop("checked")) {
                        selectedList.push($(this).val());
                    }
                });

                sendInviteHelper(selectedList, true);
            },

            sendLeagueTeamInvite = function (data) {
                var selectedList = [];

                selectedList.push(data.LeagueTeamID);

                sendInviteHelper(selectedList, false);
            },

            sendLeagueTeamReminder = function (data) {
                var selectedList = [];

                selectedList.push(data.LeagueTeamID);

                sendInviteHelper(selectedList, true);
            },

            sendInviteHelper = function (selectedList, isReminder) {
                if (selectedList.length === 0)
                    alert('You must select at least one team');
                else {
                    if (isReminder)
                        showProgressIndicator("Sending reminder");
                    else
                        showProgressIndicator("Sending invite");

                    datamanager.sendLeagueTeamInvites(selectedList, isReminder)
                        .then(function (json) {
                            alert('Invite sent!');
                            $(".leagueorganizerteams-select").prop('checked', false);

                            getLeagueOrganizerTeams(selectedLeagueID());
                            hideProgressIndicator();
                        })
                        .fail(function (error) {
                            alert(error.responseText);
                            hideProgressIndicator();
                        });
                }
            },

            deleteAdmin = function (item) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteLeagueOrganizerAdministrator(item.LeagueOrganizerAdministratorID, {
                        success: function (json) {
                            admins.remove(function (s) {
                                return s.LeagueOrganizerAdministratorID === item.LeagueOrganizerAdministratorID;
                            });
                        },
                        error: function (e) {
                            alert(e);
                        }
                    });
                }
            },

            showProgressIndicator = function (text) {
                $("#loading").fadeIn();
                $("#loadingSpinnerText").text(text);
            },

            hideProgressIndicator = function () {
                $("#loading").fadeOut();
            },

            onSearchClubsKeyDown = function (data, event) {
                var s = $(event.target).val();

                if (s.length === 0)
                    s = '-';

                clubSearchString(s);
            },

            filteredClubs = ko.computed(function () {
                return ko.utils.arrayFilter(clubs(), function (item) {
                    var match = true;

                    if (clubSearchString() !== '-') {
                        match = false;
                        var s = clubSearchString().toLowerCase().replace(" ", "");

                        // Search the team name
                        match = item.ClubName.toLowerCase().replace(" ", "").indexOf(s) !== -1;
                    }

                    return match;
                }).sort(
                    function (a, b) {
                        var x;
                        var y;

                        switch (sortColumn()) {
                            case 1:
                                x = a.ClubName.toLowerCase();
                                y = b.ClubName.toLowerCase();
                                break;
                            case 2:
                                x = a.NumberOfTeams;
                                y = b.NumberOfTeams;
                                break;
                            case 3:
                                x = a.NumberOfOnboardedTeams;
                                y = b.NumberOfOnboardedTeams;
                                break;
                            case 4:
                                x = a.PercentageOnboardedTeams;
                                y = b.PercentageOnboardedTeams;
                                break;
                            case 5:
                                x = a.TotalTeamMembers;
                                y = b.TotalTeamMembers;
                                break;
                            case 6:
                                x = a.TeamMembersPerTeam;
                                y = b.TeamMembersPerTeam;
                                break;
                            case 7:
                                x = a.TotalNumberOfFollowers;
                                y = b.TotalNumberOfFollowers;
                                break;
                            case 8:
                                x = a.FollowersPerTeam;
                                y = b.FollowersPerTeam;
                                break;
                        }

                        if (isSortAsc() === true) {
                            return x < y ? -1 : x > y ? 1 : 0;
                        }
                        else {
                            return x > y ? -1 : x < y ? 1 : 0;
                        }
                    }
                );
            }),

            filteredLeagueOrganizers = ko.computed(function () {
                return leagueOrganizers().sort(
                    function (a, b) {
                        var x;
                        var y;

                        switch (leagueOrganizerSortColumn()) {
                            case 1:
                                x = a.LeagueOrganizerName.toLowerCase();
                                y = b.LeagueOrganizerName.toLowerCase();
                                break;
                            case 2:
                                x = a.NumberOfTeams;
                                y = b.NumberOfTeams;
                                break;
                            case 3:
                                x = a.NumberOfOnboardedTeams;
                                y = b.NumberOfOnboardedTeams;
                                break;
                            case 4:
                                x = a.PercentageOnboardedTeams;
                                y = b.PercentageOnboardedTeams;
                                break;
                            case 5:
                                x = a.TotalTeamMembers;
                                y = b.TotalTeamMembers;
                                break;
                            case 6:
                                x = a.TeamMembersPerTeam;
                                y = b.TeamMembersPerTeam;
                                break;
                            case 7:
                                x = a.TotalNumberOfFollowers;
                                y = b.TotalNumberOfFollowers;
                                break;
                            case 8:
                                x = a.FollowersPerTeam;
                                y = b.FollowersPerTeam;
                                break;
                        }

                        if (isLeagueOrganizersSortAsc() === true) {
                            return x < y ? -1 : x > y ? 1 : 0;
                        }
                        else {
                            return x > y ? -1 : x < y ? 1 : 0;
                        }
                    }
                );
            }),

            percentageOfOnboardedTeams = ko.computed(function () {
                if (totalNumberOfTeams() === 0)
                    return 0;

                return parseFloat(Math.round(totalNumberOfOnboardedTeams() / totalNumberOfTeams() * 10000) / 100).toFixed(1);
            }),

            sortClubs = function (column) {
                if (sortColumn() === column) {
                    if (isSortAsc() === true) {
                        isSortAsc(false);
                    } else {
                        isSortAsc(true);
                    }
                }
                else {
                    isSortAsc(false);
                    sortColumn(column);
                }
            },

            sortLeagueOrganizers = function (column) {
                if (leagueOrganizerSortColumn() === column) {
                    if (isLeagueOrganizersSortAsc() === true) {
                        isLeagueOrganizersSortAsc(false);
                    } else {
                        isLeagueOrganizersSortAsc(true);
                    }
                }
                else {
                    isLeagueOrganizersSortAsc(true);
                    leagueOrganizerSortColumn(column);
                }
            },

            leagueOrganizerAdminClicked = function (item) {
                insertLeagueOrganizerAdmin(item);
            },

            navigateToEditLeagueOrganization = function () {
                window.location.href = '/leagueorganizer/addedit/' + leagueOrganizerId;
            },

            createPartner = function () {
                router.navigateTo(config.hashes.leagueorganizeradmin + '/' + leagueOrganizerId + '/partner');
            },

            editPartner = function (data) {
                router.navigateTo(config.hashes.leagueorganizeradmin + '/' + leagueOrganizerId + '/partner/' + data.PartnerItemID);
            },

            savePartner = function () {
                var formInstance = $(event.target).closest('form').parsley();

                if (formInstance.validate()) {
                    shell.showProgressIndicator(MiscTexts.Saving);

                    if (partnerForEditView().LeagueOrganizerPartnerID === 0) {
                        partnerForEditView().LeagueOrganizerID = leagueOrganizerId;

                        datamanager.insertLeagueOrganizerPartner(partnerForEditView())
                            .then(function (json) {
                                shell.hideProgressIndicator();
                                shell.showToast(MiscTexts.Saved);

                                partners([]);
                                mainPartners([]);
                                fairPlayCardPartners([]);

                                router.navigateTo(config.hashes.leagueorganizeradmin + '/' + leagueOrganizerId + '/partners');
                            })
                            .fail(function (error) {
                                alert(error.responseText);

                                shell.hideProgressIndicator();
                            });
                    }
                    else {
                        datamanager.updateLeagueOrganizerPartner(partnerForEditView())
                            .then(function (json) {
                                shell.hideProgressIndicator();
                                shell.showToast(MiscTexts.Saved);

                                partners([]);
                                mainPartners([]);
                                fairPlayCardPartners([]);

                                router.navigateTo(config.hashes.leagueorganizeradmin + '/' + leagueOrganizerId + '/partners');
                            })
                            .fail(function (error) {
                                shell.hideProgressIndicator();
                            });
                    }
                }
            },

            deletePartner = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteLeagueOrganizerPartner(data.LeagueOrganizerPartnerID, {
                        success: function (json) {
                            partners([]);
                            mainPartners([]);
                            fairPlayCardPartners([]);

                            router.navigateBack();
                        },
                        error: function (e) {
                            alert(e);
                        }
                    });
                }
            },

            selectPartnerType = function (type, data, event) {
                partnerForEditView().PartnerTypeID = type;

                $(event.target).closest('.dropdown').children().first().text($(event.target).text());
            },

            createLivestreamPackage = function (data) {
                data.Price = data.Price.replace(',', '.');

                if (!isFloat(data.Price)) {
                    alert('Price is not valid');
                    return;
                }

                var _data = {
                    ID: leagueOrganizerId,
                    Price: data.Price,
                    LiveStreamSubscriptionTypeID: data.LiveStreamSubscriptionTypeID
                };

                console.log(_data);

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.createLeagueOrganizerStreamPackage(_data)
                    .then(function (json) {
                        initStreamPackages();

                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            isFloat = function (val) {
                var floatRegex = /^[0-9]+(\.)?[0-9]*$/;
                if (!floatRegex.test(val))
                    return false;

                val = parseFloat(val);
                if (isNaN(val))
                    return false;
                return true;
            },

            selectPackageType = function (data, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                newSubscription().LiveStreamSubscriptionTypeID = data.ID;                
            },

            editAudience = function (data, event) {
                audience.activate(data.AudienceID, 4, audienceCallback);
            },

            audienceCallback = function (audienceId) {
                // TODO: Not sure if we need to do anything on callback
            },

            editTargetFilter = function (data, event) {
                targetfilter.activate(data.TargetFilterID, targetFilterCallback);
            },

            targetFilterCallback = function (targetFilterId) {
                // TODO: Not sure if we need to do anything on callback
            },

            editLiveStreamSubscription = function (data) {
                router.navigateTo(config.hashes.livestreamsubscription + '/0/' + data.LiveStreamSubscriptionID);
            },

            selectPartnerPicture = function (aspectX, aspectY, roundImage, data, event) {
                imageAspectX = aspectX;
                imageAspectY = aspectY;
                useRoundImage = roundImage;
                imagePreviewId = $(event.target).attr('data-container');

                $('#leagueorganizeradmin-view .partnerFilePicker').focus().trigger('click');
            },

            navigateToEditPartner = function (partner) {
                navigationItem = {
                    getHrefString: function () {
                        return '/partner/addedit/1/' + leagueOrganizerId + '/' + partner.PartnerID;
                    },
                    toClick: function () {
                        router.navigateTo('/partner/addedit/1/' + leagueOrganizerId + '/' + partner.PartnerID);
                    }
                };
                return navigationItem;
            },

            navigateToEditFairPlayCardSettings = function () {
                window.location.href = '/fairplaycardsetting/addedit?id=' + fairPlayCardSettings().FairPlayCardSettingID + '&leagueorganizerid=' + leagueOrganizerId;
            },

            navigateToLeagueOrganizerAdmin = function () {
                return createLeagueOrganizerAdminNavigationItem('start');
            },

            navigateToLeagueOrganizerAdminStart = function () {
                return createLeagueOrganizerAdminNavigationItem('start');
            },

            navigateToLeagueOrganizerAdminClubs = function () {
                return createLeagueOrganizerAdminNavigationItem('clubs');
            },

            navigateToLeagueOrganizerAdminAdmins = function () {
                return createLeagueOrganizerAdminNavigationItem('admins');
            },

            navigateToLeagueOrganizerAdminSearchAdmins = function () {
                return createLeagueOrganizerAdminNavigationItem('searchleagueorganizeradmin');
            },

            navigateToLeagueOrganizerAdminLeagues = function () {
                return createLeagueOrganizerAdminNavigationItem('leagues');
            },

            navigateToLeagueOrganizerAdminTeams = function () {
                return createLeagueOrganizerAdminNavigationItem('teams');
            },

            navigateToLeagueOrganizerAdminPartners = function () {
                return createLeagueOrganizerAdminNavigationItem('partners');
            },

            navigateToLeagueOrganizerAdminFairPlayCardSettings = function () {
                return createLeagueOrganizerAdminNavigationItem('fairplaycardsettings');
            },

            navigateToLeagueOrganizerAdminLivestreamSubscriptions = function () {
                return createLeagueOrganizerAdminNavigationItem('livestream');
            },

            navigateToLeagueOrganizerAdminFairPlayCards = function () {
                return createLeagueOrganizerAdminNavigationItem('fairplaycards');
            },

            navigateToLeagueOrganizerAdminDistricts = function () {
                return createLeagueOrganizerAdminNavigationItem('districts');
            },

            navigateToLeague = function (data) {
                router.navigateTo('/' + config.hashes.leaguesite + '/' + data.LeagueID);
            },

            navigateToLeagueOrganizer = function (data) {
                router.navigateTo('/' + config.hashes.leagueorganizersite + '/' + data.LeagueOrganizerID);
            },

            navigateToLeagueSite = function (data) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.leaguesite + '/' + data.LeagueID;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.leaguesite + '/' + data.LeagueID);
                    }
                };
                return navigationItem;
            },

            navigateToLeagueTeam = function (data) {

                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.team + '/' + data.TeamID;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.team + '/' + data.TeamID);
                    }
                };
                return navigationItem;
            },

            navigateToClub = function (data) {
                router.navigateTo(config.hashes.club + '/' + data.ClubID);
            },

            navigateToClubAdmin = function (data) {
                router.navigateTo(config.hashes.clubadmin + '/' + data.ClubID);
            },

            navigateToAddAdmin = function () {
                return createLeagueOrganizerAdminNavigationItem('admin');
            },

            createLeagueOrganizerAdminNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.leagueorganizeradmin + '/' + leagueOrganizerId + '/' + endPath;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.leagueorganizeradmin + '/' + leagueOrganizerId + '/' + endPath);
                    }
                };
            },

            insertLeagueOrganizerAdmin = function (item) {
                var newLeagueOrganizerAdmin = new viewmodel.LeagueOrganizerAdmin()
                    .MemberID(item.MemberID)
                    .LeagueOrganizerID(leagueOrganizerId);

                var loadmin = ko.toJS(newLeagueOrganizerAdmin);

                datamanager.insertLeagueOrganizerAdmin(loadmin, {
                    success: function (json) {
                        // Clear search fields
                        $('#leagueOrganizerAdminSearchPersonalNumber').val('');
                        $('#leagueOrganizerAdminSearchPhone').val('');

                        $('.leagueAdminSearch.postSearch').hide();
                        $('.leagueAdminSearch.preSearch').show();

                        matchingMembers([]);


                        router.navigateTo(config.hashes.leagueorganizeradmin + '/' + leagueOrganizerId + '/admins');
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();
                        alert(response);
                    }
                });
            },

            memberIsSportswikAdmin = ko.computed(function () {
                return shell.currentMember.IsSportswikAdmin;
            }),

            memberIsLeagueOrganizerAdmin = ko.computed(function () {
                return typeof leagueOrganizerHeader() !== 'undefined' && leagueOrganizerHeader().IsLeagueOrganizerAdmin;
            }),

            onKeyPressAllowNumeric = function (d, e) {
                // Enter
                if (e.which === 13) {
                    searchLeagueOrganizerAdmins();
                    return true;
                }
                else {
                    return utils.isNumericOrDelete(e);
                }
            },

            handlePartnerSelect = function (evt) {
                var f = evt.target.files[0];

                if (f.type.match('image.*')) {
                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var pictureBase64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            imagecropper.activate(pictureBase64data, imageAspectX, imageAspectY, useRoundImage, partnerCropperCallback);
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },

            partnerCropperCallback = function (cropData, croppedData, base64data) {
                console.log(imagePreviewId);
                $('#' + imagePreviewId + ' .imageMaskContain').show();
                $('#' + imagePreviewId + ' .imageMaskContain').css('background-image', 'url(' + croppedData + ')');
                $('#' + imagePreviewId + ' img').hide();

                if (imagePreviewId === 'leagueorganizerpartner-preview-small') {
                    partnerForEditView().FileBase64Small = base64data;
                    partnerForEditView().SmallCropData = cropData;
                } else if (imagePreviewId === 'leagueorganizerpartner-preview-medium') {
                    partnerForEditView().FileBase64Medium = base64data;
                    partnerForEditView().MediumCropData = cropData;
                } else if (imagePreviewId === 'leagueorganizerpartner-preview-large') {
                    partnerForEditView().FileBase64Large = base64data;
                    partnerForEditView().LargeCropData = cropData;
                }
            },

            cleanup = function () {
                $('.leagueorganizeradmin-subview').hide();
                $('.leagueorganizeradmin-subview .preloader').show();
                $('.leagueorganizeradmin-subview .afterloaded').hide();
            },

            toggleMoreItemList = function () {
                $('.moreMenuItemsList').toggleClass('hiddenOnWideDisplay');
            },
 
            init = function () {
                $('.leagueorganizer-leagues-list')
                    .on('click', '.form-control', function (e) {
                        e.stopPropagation();
                    })
                    .on('input', '.form-control', function () {
                        var target = $(this);
                        var search = target.val().toLowerCase();

                        $('.leagueorganizer-leagues-list-item').each(function () {
                            var text = $(this).text().toLowerCase();
                            var match = text.indexOf(search) > -1;
                            $(this).toggle(match);
                        });
                });

                $(document).on('change', '#leagueorganizeradmin-view .partnerFilePicker', function (evt) {
                    handlePartnerSelect(evt);
                    evt.target.value = '';
                });
            };

        init();

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,

            currentPage: currentPage,
            selectedLeagueID: selectedLeagueID,
            leagueOrganizerHeader: leagueOrganizerHeader,
            leagueOrganizer: leagueOrganizer,
            fairPlayCardSettings: fairPlayCardSettings,

            teams: teams,
            admins: admins,
            clubs: clubs,            
            leagues: leagues,
            partners: partners,
            mainPartners: mainPartners,
            fairPlayCardPartners: fairPlayCardPartners,
            matchingMembers: matchingMembers,
            countries: countries,
            streamPackages: streamPackages,

            totalNumberOfTeams: totalNumberOfTeams,
            totalNumberOfOnboardedTeams: totalNumberOfOnboardedTeams,
            percentageOfOnboardedTeams: percentageOfOnboardedTeams,

            partnerForEditView: partnerForEditView,            

            filteredTeams: filteredTeams,
            filteredClubs: filteredClubs,
            filteredLeagueOrganizers: filteredLeagueOrganizers,

            deleteAdmin: deleteAdmin,
            navigateToAddAdmin: navigateToAddAdmin,

            createPartner: createPartner,
            editPartner: editPartner,
            savePartner: savePartner,
            deletePartner: deletePartner,
            selectPartnerType: selectPartnerType,
            createLivestreamPackage: createLivestreamPackage,            
            editAudience: editAudience,
            editTargetFilter: editTargetFilter,
            editLiveStreamSubscription: editLiveStreamSubscription,
            newSubscription: newSubscription,
            selectPackageType: selectPackageType,

            navigateToEditLeagueOrganization: navigateToEditLeagueOrganization,            
            navigateToEditPartner: navigateToEditPartner,
            navigateToEditFairPlayCardSettings: navigateToEditFairPlayCardSettings,

            navigateToLeagueOrganizerAdmin: navigateToLeagueOrganizerAdmin,
            navigateToLeagueOrganizerAdminStart: navigateToLeagueOrganizerAdminStart,
            navigateToLeagueOrganizerAdminClubs: navigateToLeagueOrganizerAdminClubs,
            navigateToLeagueOrganizerAdminAdmins: navigateToLeagueOrganizerAdminAdmins,
            navigateToLeagueOrganizerAdminSearchAdmins: navigateToLeagueOrganizerAdminSearchAdmins,
            navigateToLeagueOrganizerAdminLeagues: navigateToLeagueOrganizerAdminLeagues,
            navigateToLeagueOrganizerAdminTeams: navigateToLeagueOrganizerAdminTeams,
            navigateToLeagueOrganizerAdminPartners: navigateToLeagueOrganizerAdminPartners,
            navigateToLeagueOrganizerAdminFairPlayCardSettings: navigateToLeagueOrganizerAdminFairPlayCardSettings,
            navigateToLeagueOrganizerAdminFairPlayCards: navigateToLeagueOrganizerAdminFairPlayCards,
            navigateToLeagueOrganizerAdminLivestreamSubscriptions: navigateToLeagueOrganizerAdminLivestreamSubscriptions,
            navigateToLeagueOrganizerAdminDistricts: navigateToLeagueOrganizerAdminDistricts,
            navigateToLeagueSite: navigateToLeagueSite,
            navigateToLeague: navigateToLeague,
            navigateToLeagueOrganizer: navigateToLeagueOrganizer,
            navigateToLeagueTeam: navigateToLeagueTeam,
            navigateToClub: navigateToClub,
            navigateToClubAdmin: navigateToClubAdmin,

            sendInvites: sendInvites,
            sendReminders: sendReminders,
            sendLeagueTeamInvite: sendLeagueTeamInvite,
            sendLeagueTeamReminder: sendLeagueTeamReminder,
            sendInfoEmails: sendInfoEmails,
            sendInviteEmails: sendInviteEmails,
            sendInviteEmailsFutsal: sendInviteEmailsFutsal,
            sendInviteEmailReminders: sendInviteEmailReminders,
            sendInviteSMS: sendInviteSMS,
            sendClubAdminEmails: sendClubAdminEmails,
            sendRefereeInviteEmails: sendRefereeInviteEmails,
            selectPartnerPicture: selectPartnerPicture,

            seasonName: seasonName,
            selectSeason: selectSeason,
            selectLeague: selectLeague,
            selectAllTeams: selectAllTeams,
            selectTeamType: selectTeamType,
            selectInviteType: selectInviteType,
            searchTeams: searchTeams,
            searchLeagueOrganizerAdmins: searchLeagueOrganizerAdmins,

            memberIsSportswikAdmin: memberIsSportswikAdmin,
            memberIsLeagueOrganizerAdmin: memberIsLeagueOrganizerAdmin,

            clearLeagueSelect: clearLeagueSelect,

            sortClubs: sortClubs,
            sortLeagueOrganizers: sortLeagueOrganizers,
            sortColumn: sortColumn,            
            leagueOrganizerSortColumn: leagueOrganizerSortColumn,
            onSearchClubsKeyDown: onSearchClubsKeyDown,
            onKeyPressAllowNumeric: onKeyPressAllowNumeric,

            selectedLeagueText: selectedLeagueText,
            selectedTeamTypeText: selectedTeamTypeText,
            selectedInviteTypeText: selectedInviteTypeText,

            leagueOrganizerAdminSearchCountryCodePrefix: leagueOrganizerAdminSearchCountryCodePrefix,
            leagueOrganizerAdminClicked: leagueOrganizerAdminClicked,
            toggleMoreItemList: toggleMoreItemList
        };
    });;
define('viewmodels/vm.leagueorganizersite',
    ['ko', 'underscore', 'config', 'router', 'messenger', 'navigation', 'datamanager', 'models/model', 'viewmodels/vm.magazinegameview', 'viewmodels/vm.infoitem', 'viewmodels/vm.shell'],
    function (ko, _, config, router, messenger, navigation, datamanager, model, magazinegameview, infoitem, shell) {
        var leagueOrganizerId = 0,
            leagueOrganizerHeader = ko.observable(),
            initLeagueOrganizerModel = ko.observable(),
            initLeagueOrganizerSitePicsAndVideosModel = ko.observable(),
            initLeagueOrganizerSiteFairPlayCardsModel = ko.observable(),
            initLeagueOrganizerLeaguesModel = ko.observable(),
            initLeagueOrganizerPartnersModel = ko.observable(),
            fairPlayCardSettingsModel = ko.observable(),

            seasons = ko.observableArray(),
            genders = ko.observableArray(),
            leagues = ko.observableArray(),
            leagueCategories = ko.observableArray(),
            clubs = ko.observableArray(),
            teams = ko.observableArray(),
            pictures = ko.observableArray(),
            videos = ko.observableArray(),
            highlights = ko.observableArray(),
            replays = ko.observableArray(),
            plannedGames = ko.observableArray(),
            liveGames = ko.observableArray(),
            posts = ko.observableArray(),
            postsForImport = ko.observableArray(),
            pagesForImport = ko.observableArray(),
            leaderboardRows = ko.observableArray(),
            groups = ko.observableArray(),
            gameDates = ko.observableArray(),
            guessingGameGames = ko.observableArray(),
            guessingGamePartner = ko.observable(),
            finalResultTableRows = ko.observableArray(),
            playerStatisticRows = ko.observableArray(),
            goalieStatisticRows = ko.observableArray(),
            breadCrumb = ko.observable(),

            leagueOrganizers = ko.observableArray(),
            blurbsInFeed = ko.observableArray(),
            fairPlayCards = ko.observableArray(),
            pageIndex = 1,
            initInfoItems = ko.observable(),
            postsFilterType = ko.observable(0),

            initPlayPage = ko.observable(),
            comingGames = ko.observableArray(),
            pastGames = ko.observableArray(),

            gettingGamesPast = ko.observable(false),
            gettingGamesComing = ko.observable(false),
            gettingHighlights = ko.observable(false),
            gettingReplays = ko.observable(false),
            gettingPlannedGames = ko.observable(false),
            gettingLiveGames = ko.observable(false),
            gettingPages = false,
            gettingPictures = ko.observable(false),
            gettingVideos = ko.observable(false),
            gettingFairPlayCards = ko.observable(false),
            gettingMoreInfoPosts = ko.observable(false),
            
            noMoreGamesToGetPast = false,
            noMoreGamesToGetComing = false,
            noMoreFairPlayCardsToGet = false,
            noMoreHighlightsToGet = false,
            noMoreReplaysToGet = false,
            noMorePlannedGamesToGet = false,
            noMoreLiveGamesToGet = false,
            noMorePagesToGet = false,
            noMorePicturesToGet = false,
            noMoreVideosToGet = false,
            noMoreInfoPostsToGet = false,
            
            currentActiveTabId = 1,

            scoringStatisticsPageId = 1,
            goalieStatisticsPageId = 1,
            lastScrollPosition = 0,
            selectedGender = 1,
            selectedSeason = 0,
            selectedTypeForImport = 0,
            clubSearchString = ko.observable(''),

            selectedLeagueOrganizer = 0,
            currentViewName = '',
            searchMode = ko.observable(false),
            blurbsSuitableForHalfPage = [0, 1, 9, 12, 17, 18, 40, 41, 50, 901, 903, 904, 905],
            currentTab = ko.observable(''),
            currentPage = ko.observable(''),
            memberIsLoggedIn = ko.observable(false),
            /*showEventPurchaseSection = ko.observable(false),*/

            activate = function (routeData, callback) {
                if (Number(applicationID) === 3 && (_.isObject(shell.currentMember) === false || shell.currentMember.IsSportswikAdmin === false)) {
                    routeData.subview = 'clubs';                    
                } else {
                    routeData.subview = 'start';                    
                }

                currentTab(routeData.subview);
                messenger.publish.viewModelActivated();

                if (routeData.Id !== undefined) {
                    leagueOrganizerId = Number(routeData.Id);
                }

                $(window).scroll(infiniteScrolling);

                activatesubview(routeData);
            },

            activatesubview = function (routeData, callback) {
                if (_.isObject(shell.currentMember)) {
                    memberIsLoggedIn(true);
                } else {
                    memberIsLoggedIn(false);
                }

                if (leagueOrganizerHeader() === undefined) {
                    clearObservables();
                }

                if (routeData.Id !== undefined && leagueOrganizerHeader() !== undefined && leagueOrganizerHeader().LeagueOrganizerID !== Number(routeData.Id)) {
                    clearObservables();
                }

                if (routeData.Id !== undefined) {
                    leagueOrganizerId = Number(routeData.Id);                    
                }

                var currentView = routeData.subview;

                breadCrumb(currentView);

                currentViewName = 'leagueorganizersite-' + currentView;
                currentTab(routeData.subview);
                currentPage(currentView);

                if (Number(applicationID) === 3 && shell.showAdminView() === false) {
                    if (currentView === 'start') {
                        router.navigateTo(config.hashes.leagueorganizersite + '/' + leagueOrganizerId + '/clubs');
                        return;
                    }
                }

                $('.leagueorganizersite-subview').hide();
                $('#leagueorganizersite-' + currentView).show();

                $('.moreMenuItemsList').addClass('hiddenOnWideDisplay');

                if (leagueOrganizerHeader() === undefined || leagueOrganizerHeader() === '') {
                    getLeagueOrganizerHeader(routeData, true);
                } else {
                    switch (currentTab()) {
                        case 'start': {
                            // Only do init if we haven't done it already
                            if (initLeagueOrganizerModel() === undefined || initLeagueOrganizerModel() === '') {
                                showPreloader();

                                window.scrollTo(0, 0);

                                datamanager.initLeagueOrganizerSite(leagueOrganizerId, {
                                    success: function (model) {
                                        initLeagueOrganizerModel(model);

                                        styleBlurbs(model.MagazineBlurbs);

                                        subViewLoaded();                                       
                                        hidePreloader();
                                    },
                                    error: function (response, xhr) {
                                        hidePreloader();
                                    }
                                });
                            }

                            if (initLeagueOrganizerSitePicsAndVideosModel() === undefined || initLeagueOrganizerSitePicsAndVideosModel() === '') {
                                datamanager.initLeagueOrganizerSitePicsAndVideos(leagueOrganizerId, {
                                    success: function (model) {
                                        initLeagueOrganizerSitePicsAndVideosModel(model);
                                    },
                                    error: function (response, xhr) {

                                    }
                                });
                            }

                            break;
                        }
                        case 'magazine': {
                            if (blurbsInFeed().length === 0) {
                                showPreloader();
                                getPagesFromServer();
                                window.scrollTo(0, 0);
                            }
                            else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'leagues': {
                            showPreloader();
                            window.scrollTo(0, 0);

                            datamanager.initLeagueOrganizerLeaguesWithCategories(leagueOrganizerId, {
                                success: function (model) {
                                    seasons([]);
                                    genders([]);
                                    leagueCategories([]);

                                    var underlayingarray = leagueCategories();

                                    for (var i = 0; i < model.Leagues.length; i++) {
                                        underlayingarray.push(model.Leagues[i]);
                                    }

                                    leagueCategories.valueHasMutated();

                                    underlayingArray = seasons();

                                    for (var j = 0; j < model.Seasons.length; j++) {
                                        underlayingArray.push(model.Seasons[j]);

                                        if (model.Seasons[j].IsDefault) {
                                            selectedSeason = model.Seasons[j].SeasonID;

                                            $('#seasonDropDownTitle').text(model.Seasons[j].SeasonName);
                                        }
                                    }

                                    seasons.valueHasMutated();

                                    underlayingArray = genders();

                                    for (var k = 0; k < model.Genders.length; k++) {
                                        underlayingArray.push(model.Genders[k]);
                                    }

                                    genders.valueHasMutated();

                                    hidePreloader();
                                    subViewLoaded();
                                },
                                error: function (response, xhr) {
                                    alert(response);
                                }
                            });

                            break;
                        }
                        case 'clubs': {
                            if (clubs().length === 0) {
                                window.scrollTo(0, 0);

                                showPreloader();
                                datamanager.getLeagueOrganizerClubs(leagueOrganizerId, {
                                    success: function (model) {
                                        var underlayingArray = clubs();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        clubs.valueHasMutated();

                                        subViewLoaded();
                                        hidePreloader();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'teams':
                            {
                                if (teams().length === 0) {
                                    window.scrollTo(0, 0);

                                    datamanager.getLeagueOrganizerTeams(leagueOrganizerId, {
                                        success: function (model) {
                                            var underlayingArray = teams();

                                            //Add the pages to the page cache
                                            for (var i = 0; i < model.length; i++) {
                                                underlayingArray.push(model[i]);
                                            }

                                            teams.valueHasMutated();

                                            subViewLoaded();
                                            hidePreloader();
                                        },
                                        error: function (response) {
                                            alert(response);
                                        }
                                    });
                                } else {
                                    $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                                }
                                break;
                            }
                            break;
                        case 'fairplaycard': {
                            if (initLeagueOrganizerSiteFairPlayCardsModel() === undefined || initLeagueOrganizerSiteFairPlayCardsModel() === '') {
                                window.scrollTo(0, 0);
                                initFairPlayCards(12);
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }                        
                        case 'play': {
                            // Only do init if we haven't done it already
                            if (initPlayPage() === undefined || initPlayPage() === '') {
                                showPreloader();

                                window.scrollTo(0, 0);

                                datamanager.initLeagueOrganizerPlayPage(leagueOrganizerId, {
                                    success: function (model) {
                                        initPlayPage(model);

                                        subViewLoaded();
                                        hidePreloader();
                                    },
                                    error: function (response) {
                                        hidePreloader();

                                        alert(response);
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'faq': {
                                window.scrollTo(0, 0);
                                subViewLoaded();
                                hidePreloader();
                            break;
                        }
                        case 'posts': {
                            datamanager.initLeagueOrganizerInfoItems(leagueOrganizerId, {
                                success: function (model) {
                                    posts([]);

                                    initInfoItems(model);

                                    //InfoItemType

                                    var underlayingArray = posts();

                                    //Add the pages to the page cache
                                    for (var i = 0; i < model.InfoItemBlurbs.length; i++) {
                                        underlayingArray.push(model.InfoItemBlurbs[i]);
                                    }

                                    posts.valueHasMutated();

                                    hidePreloader();
                                    subViewLoaded();

                                    if (posts().length === 0)
                                        noMoreInfoPostsToGet = true;

                                },
                                error: function (response) {
                                    hidePreloader();

                                    alert(response);
                                }
                            });

                            break;
                        }
                        case 'importposts': {

                            // TODO: fix dynamic Sport and Country
                            if (leagueOrganizers().length === 0) {
                                datamanager.getLeagueOrganizersForSelectList({
                                    success: function (model) {
                                        leagueOrganizers([]);

                                        var underlayingArray = leagueOrganizers();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);

                                            // Set right federation
                                            if (model[i].LeagueOrganizerID === leagueOrganizerId) {
                                                selectedLeagueOrganizer = leagueOrganizerId;
                                                $('#leagueOrganizationForImportDropDownTitle').text(model[i].Name);
                                            }
                                        }

                                        leagueOrganizers.valueHasMutated();

                                        hidePreloader();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);
                                    }
                                });
                            } else {
                                hidePreloader();
                            }

                            break;
                        }
                        case 'highlights': {
                            breadCrumb('play');

                            if (highlights().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getHighlightsForLeagueOrganizer(leagueOrganizerId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = highlights();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        highlights.valueHasMutated();

                                        if (model.length < 8) 
                                            noMoreHighlightsToGet = true;

                                        hidePreloader();
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'replays': {
                            breadCrumb('play');

                            if (replays().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getReplaysForLeagueOrganizer(leagueOrganizerId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = replays();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        replays.valueHasMutated();

                                        if (model.length < 8)
                                            noMoreReplaysToGet = true;

                                        hidePreloader();
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'planned': {
                            breadCrumb('play');

                            if (plannedGames().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getPlannedGamesForLeagueOrganizer(leagueOrganizerId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = plannedGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        plannedGames.valueHasMutated();

                                        if (model.length < 8)                                            
                                            noMorePlannedGamesToGet = true;

                                        hidePreloader();
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'live': {
                            breadCrumb('play');

                            if (liveGames().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getLiveGamesForLeagueOrganizer(leagueOrganizerId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = liveGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        liveGames.valueHasMutated();

                                        if (model.length < 8)
                                            noMoreLiveGamesToGet = true;

                                        hidePreloader();
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'pictures': {
                            breadCrumb('play');

                            if (pictures().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getPicturesForLeagueOrganizer(leagueOrganizerId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = pictures();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        pictures.valueHasMutated();
                                        hidePreloader();

                                        if (model.length < 8) {
                                            noMorePicturesToGet = true;
                                        } else {
                                            noMorePicturesToGet = false;
                                        }

                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'videos': {
                            breadCrumb('play');

                            if (videos().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getVideosForLeagueOrganizer(leagueOrganizerId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = videos();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        videos.valueHasMutated();

                                        hidePreloader();

                                        if (model.length < 8) {
                                            noMoreVideosToGet = true;
                                        } else {
                                            noMoreVideosToGet = false;
                                        }

                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'partners': {
                            if (initLeagueOrganizerPartnersModel() === undefined || initLeagueOrganizerPartnersModel() === '') {
                                window.scrollTo(0, 0);

                                datamanager.initLeagueOrganizerPartners(leagueOrganizerId, {
                                    success: function (model) {
                                        initLeagueOrganizerPartnersModel(model);

                                        hidePreloader();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'register': {
                            window.scrollTo(0, 0);
                            break;
                        }
                        case 'criteria': {
                            if (fairPlayCardSettingsModel() === undefined || fairPlayCardSettingsModel() === '') {
                                window.scrollTo(0, 0);

                                datamanager.getLeagueOrganizerFairPlayCardSettings(leagueOrganizerId, {
                                    success: function (model) {
                                        fairPlayCardSettingsModel(model);

                                        hidePreloader();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'guessinggame':

                            // TODO: How do we check if we should init this or not?
                            datamanager.initLeagueOrganizerSiteGameResultGuessStandings(leagueOrganizerId, {
                                success: function (model) {
                                    leaderboardRows([]);
                                    guessingGameGames([]);

                                    if (model.PartnerFeature)
                                        guessingGamePartner(model.PartnerFeature);

                                    var underlayingArray = leaderboardRows();

                                    //Add the pages to the page cache
                                    for (var i = 0; i < model.Rows.length; i++) {
                                        underlayingArray.push(model.Rows[i]);
                                    }

                                    leaderboardRows.valueHasMutated();

                                    underlayingArray = guessingGameGames();

                                    //Add the pages to the page cache
                                    for (var j = 0; j < model.Games.length; j++) {
                                        underlayingArray.push(model.Games[j]);
                                    }

                                    guessingGameGames.valueHasMutated();

                                    subViewLoaded();
                                },
                                error: function (error) {
                                    console.log(error);

                                    subViewLoaded();
                                }
                            });
                            break;
                        case 'schedule':
                            if (comingGames().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getComingLeagueOrganizerGames(leagueOrganizerId, 0, {
                                    success: function (model) {
                                        comingGames([]);
                                        var underlayingArray = comingGames();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        comingGames.valueHasMutated();

                                        if (model.length < 5) {
                                            noMoreGamesToGetComing = true;
                                        }

                                        if (model.length === 0) {
                                            togglePastLeagueGames();
                                        }

                                        removePreloader(currentViewName);
                                    },
                                    error: function (response) {
                                        removePreloader(currentViewName);
                                    }
                                });
                            }
                            else {
                                removePreloader(currentViewName);

                            }

                            // If we haven't loaded any past games, load the first 10 games
                            if (pastGames().length === 0) {
                                getGames(2);
                            }
                            break;
                        case 'final':
                            datamanager.initLeagueOrganizerFinalStandings(leagueOrganizerId, {
                                success: function (model) {
                                    console.log(model);

                                    finalResultTableRows([]);

                                    var underlayingArray = finalResultTableRows();

                                    for (var i = 0; i < model.Rows.length; i++) {
                                        underlayingArray.push(model.Rows[i]);
                                    }

                                    finalResultTableRows.valueHasMutated();

                                    subViewLoaded();
                                },
                                error: function (error) {
                                    console.log(error);

                                    subViewLoaded();
                                }
                            });
                            break;
                        case 'statistics':
                            datamanager.initLeagueOrganizerPlayerStatistics(leagueOrganizerId, {
                                success: function (model) {
                                    console.log(model);

                                    playerStatisticRows([]);
                                    goalieStatisticRows([]);

                                    var underlayingArray = playerStatisticRows();

                                    for (var i = 0; i < model.PlayerStatistics.length; i++) {
                                        underlayingArray.push(model.PlayerStatistics[i]);
                                    }

                                    playerStatisticRows.valueHasMutated();

                                    underlayingArray = goalieStatisticRows();

                                    for (var j = 0; j < model.GoalkeeperStatistics.length; j++) {
                                        underlayingArray.push(model.GoalkeeperStatistics[j]);
                                    }

                                    goalieStatisticRows.valueHasMutated();

                                    subViewLoaded();
                                },
                                error: function (error) {
                                    console.log(error);

                                    subViewLoaded();
                                }
                            });
                            break;
                        case 'groups':
                            if (groups().length === 0) {
                                datamanager.initLeagueOrganizerTournamentGroups(leagueOrganizerId, {
                                    success: function (model) {
                                        groups([]);

                                        var underlayingArray = groups();

                                        for (var i = 0; i < model.Groups.length; i++) {
                                            underlayingArray.push(model.Groups[i]);
                                        }

                                        groups.valueHasMutated();

                                        subViewLoaded();
                                    },
                                    error: function (error) {
                                        console.log(error);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                subViewLoaded();
                            }

                            break;
                        case 'watch':
                            {
                                subViewLoaded();
                            }
                            break;
                    }
                }

                // Set up infinitescrolling
                $(window).scroll(infiniteScrolling);
            },

            getGames = function (currentListid) {
                switch (currentListid) {
                    case 1:
                        {
                            gettingGamesComing(true);

                            var gameId = comingGames().length ? comingGames()[comingGames().length - 1].GameID : 0;

                            datamanager.getComingLeagueOrganizerGames(leagueOrganizerId, gameId, {
                                success: function (model) {
                                    gettingGamesComing(false);

                                    if (model.length !== 0) {
                                        var underlayingArray = comingGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        comingGames.valueHasMutated();
                                    }
                                    else {
                                        noMoreGamesToGetComing = true;
                                    }
                                },
                                error: function (response) {
                                    gettingGamesComing(false);
                                }
                            });
                        }
                        break;
                    case 2:
                        {
                            gettingGamesPast(true);

                            var pastGameId = pastGames().length ? pastGames()[pastGames().length - 1].GameID : 0;

                            datamanager.getPreviousLeagueOrganizerGames(leagueOrganizerId, pastGameId, {
                                success: function (model) {
                                    gettingGamesPast(false);

                                    if (model.length !== 0) {
                                        var underlayingArray = pastGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        pastGames.valueHasMutated();
                                    }
                                    else {
                                        noMoreGamesToGetPast = true;
                                    }
                                },
                                error: function (response) {
                                    gettingGamesPast(false);
                                }
                            });
                        }
                        break;
                }
            },

            getLeagueOrganizerHeader = function (routeData, callSubView) {
                datamanager.getLeagueOrganizerHeader(leagueOrganizerId, {
                    success: function (model) {
                        leagueOrganizerHeader(model);

                        ////Check if leagueorganizer topbar branding should be shown
                        //if (model.BrandingModel != undefined && model.BrandingModel.BrandingColor != '' && window.location.href.indexOf("ettanplay") == -1) {
                        //    showBrandingTopBar(true);
                        //    //$('#leagueorganizersite-view .site-heropicture').addClass('topbarmargin');
                        //} else {
                        //    showBrandingTopBar(false);
                        //    //$('#leagueorganizersite-view .site-heropicture').removeClass('topbarmargin');
                        //}

                        hidePreloader();

                        if (callSubView)
                            activatesubview(routeData);
                    },
                    error: function (response, xhr) {
                        if (xhr.status === 403) {
                            router.navigateTo("/");
                        }

                        hidePreloader();
                    }
                });
            },

            getLeagueOrganizerSitePictures = function () {
                gettingPictures(true);

                var lastPictureID = 0;

                if (pictures().length !== 0) {
                    var lastPageInCache = pictures()[pictures().length - 1];

                    lastPictureID = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getPicturesForLeagueOrganizer(leagueOrganizerId, 9, lastPictureID, {
                    success: function (model) {
                        var underlayingArray = pictures();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        pictures.valueHasMutated();

                        if (model.length < 9) {
                            noMorePicturesToGet = true;                            
                        } else {
                            noMorePicturesToGet = false;
                        }

                        gettingPictures(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingPictures(false);
                    }
                });
            },

            getHighlights = function () {
                gettingHighlights(true);

                var lastGameId = 0;

                if (highlights().length !== 0) {
                    var lastPageInCache = highlights()[highlights().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getHighlightsForLeagueOrganizer(leagueOrganizerId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = highlights();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        highlights.valueHasMutated();

                        if (model.length < 9) {
                            noMoreHighlightsToGet = true;
                        }

                        gettingHighlights(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingHighlights(false);
                    }
                });
            },

            getPlannedGames = function () {
                gettingPlannedGames(true);

                var lastGameId = 0;

                if (plannedGames().length !== 0) {
                    var lastPageInCache = plannedGames()[plannedGames().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getPlannedGamesForLeagueOrganizer(leagueOrganizerId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = plannedGames();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        plannedGames.valueHasMutated();

                        if (model.length < 9) {
                            noMorePlannedGamesToGet = true;
                        }

                        gettingPlannedGames(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingPlannedGames(false);
                    }
                });
            },

            getLiveGames = function () {
                gettingLiveGames(true);

                var lastGameId = 0;

                if (liveGames().length !== 0) {
                    var lastPageInCache = liveGames()[liveGames().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getLiveGamesForLeagueOrganizer(leagueOrganizerId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = liveGames();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        liveGames.valueHasMutated();

                        if (model.length < 9) {
                            noMoreLiveGamesToGet = true;
                        }

                        gettingLiveGames(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingLiveGames(false);
                    }
                });
            },

            getReplays = function () {
                gettingReplays(true);

                var lastGameId = 0;

                if (replays().length !== 0) {
                    var lastPageInCache = replays()[replays().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getReplaysForLeagueOrganizer(leagueOrganizerId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = replays();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        replays.valueHasMutated();

                        if (model.length < 9) {
                            noMoreReplaysToGet = true;
                        }

                        gettingReplays(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingReplays(false);
                    }
                });
            },

            getLeagueOrganizerSiteVideos = function () {
                gettingVideos(true);

                var lastVideoID = 0;

                if (videos().length !== 0) {
                    var lastPageInCache = videos()[videos().length - 1];

                    lastVideoID = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getVideosForLeagueOrganizer(leagueOrganizerId, 9, lastVideoID, {
                    success: function (model) {
                        var underlayingArray = videos();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        videos.valueHasMutated();

                        if (model.length < 9) {
                            noMoreVideosToGet = true;                            
                        } else {
                            noMoreVideosToGet = false;
                        }

                        gettingVideos(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingVideos(false);
                    }
                });
            },

            initFairPlayCards = function (amount) {
                gettingFairPlayCards(true);

                datamanager.initLeagueOrganizerSiteFairPlayCards(leagueOrganizerId, amount, {
                    success: function (model) {
                        initLeagueOrganizerSiteFairPlayCardsModel(model);

                        var underlayingArray = fairPlayCards();

                        for (var i = 0; i < model.FairPlayCards.length; i++) {
                            underlayingArray.push(model.FairPlayCards[i]);
                        }

                        fairPlayCards.valueHasMutated();

                        if (model.FairPlayCards.length < 12) {
                            noMoreFairPlayCardsToGet = true;
                            $('#leagueOrganizerSiteFairPlayCardInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfTheFeed + " " + MagazineTexts.TotalNumberOfFairPlayCards.replace("{0}", fairPlayCards().length));
                        }


                        hidePreloader();

                        gettingFairPlayCards(false);
                    },
                    error: function (response, xhr) {
                        alert(response);
                        hidePreloader();

                        gettingFairPlayCards(false);
                    }
                });
            },

            getFairPlayCards = function () {
                gettingFairPlayCards(true);

                var lastFairPlayCardId = 0;

                if (fairPlayCards().length !== 0) {
                    var lastPageInCache = fairPlayCards()[fairPlayCards().length - 1];

                    lastFairPlayCardId = lastPageInCache.FairPlayCardID;
                }

                datamanager.getFairPlayCardsForLeagueOrganizerSite(leagueOrganizerId, 12, lastFairPlayCardId, {
                    success: function (model) {
                        var underlayingArray = fairPlayCards();

                        //Add the pages to the page cache
                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        fairPlayCards.valueHasMutated();

                        if (model.length < 12) {
                            noMoreFairPlayCardsToGet = true;
                            $('#leagueOrganizerSiteFairPlayCardInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfTheFeed + " " + MagazineTexts.TotalNumberOfFairPlayCards.replace("{0}", fairPlayCards().length));
                        }

                        gettingFairPlayCards(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingFairPlayCards(false);
                    }
                });
            },

            clearObservables = function () {
                leagueOrganizerHeader('');
                initLeagueOrganizerModel('');
                initLeagueOrganizerPartnersModel('');
                initLeagueOrganizerSiteFairPlayCardsModel('');
                initLeagueOrganizerLeaguesModel('');
                initLeagueOrganizerSitePicsAndVideosModel('');

                initInfoItems('');
                initPlayPage('');
                guessingGamePartner('');

                noMoreFairPlayCardsToGet = false;
                noMoreGamesToGetComing = false;
                noMoreGamesToGetPast = false;
                noMoreHighlightsToGet = false;
                noMoreReplaysToGet = false;
                noMorePlannedGamesToGet = false;
                noMoreLiveGamesToGet = false;
                noMorePagesToGet = false;
                noMorePicturesToGet = false;
                noMoreVideosToGet = false;
                noMoreInfoPostsToGet = false;

                comingGames([]);
                pastGames([]);
                seasons([]);
                genders([]);
                clubs([]);
                teams([]);
                leagues([]);
                leagueCategories([]);
                pictures([]);
                videos([]);
                highlights([]);
                replays([]);
                plannedGames([]);
                liveGames([]);                
                blurbsInFeed([]);
                fairPlayCards([]);
                posts([]);
                postsForImport([]);
                pagesForImport([]);
                leagueOrganizers([]);
                groups([]);
                finalResultTableRows([]);
                playerStatisticRows([]);
                goalieStatisticRows([]);
                gameDates([]);
                leaderboardRows([]);
                guessingGameGames([]);
                pageIndex = 1;
                scoringStatisticsPageId = 1;
                goalieStatisticsPageId = 1;

                postsFilterType(0);

                $('.leagueorganizersite-subview .beforeSubViewLoaded').show();
                $('.leagueorganizersite-subview .afterSubViewLoaded').hide();
                $('#leagueorganizersite-view-fetchmorefromimport').hide();
            },

            cleanup = function () {
                gettingPages = false;
                
                gettingPictures(false);
                gettingVideos(false);
                gettingFairPlayCards(false);                
                gettingMoreInfoPosts(false);
                gettingHighlights(false);
                gettingReplays(false);
                gettingPlannedGames(false);
                gettingLiveGames(false);
                gettingGamesPast(false);
                gettingGamesComing(false);

                $(window).unbind('scroll', infiniteScrolling);
                lastScrollPosition = $(window).scrollTop();
            },

            navigateToEventPurchasePage = function () {
                //If logged in, go to stream purchase page
                if (_.isObject(shell.currentMember) && shell.currentMember.MemberID > 0) {
                    if (window.location.href.indexOf("ettanplay") != -1) {
                        window.location.href = '/ettanplay/#/stream/event/' + leagueOrganizerId;
                    } else {
                        window.location.href = '/#/stream/event/' + leagueOrganizerId;
                    }
                } else {
                    if (window.location.href.indexOf("ettanplay") != -1) {
                        window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent('/leagueorganizer/ettanplay/#/stream/event/' + leagueOrganizerId);
                    } else {
                        window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent('/#/stream/event/' + leagueOrganizerId);
                    }
                }
                
            },

            getPagesFromServer = function () {
                var lastPageInCache, lastGameTime;

                gettingPages = true;

                //Loop through the current pages in the feed                
                var lastThreeBlurbTypes = [];

                if (blurbsInFeed().length !== 0) {
                    lastPageInCache = blurbsInFeed()[blurbsInFeed().length - 1];
                    gameIds = [];

                    for (var i = 0; i < blurbsInFeed().length; i++) {
                        //Exclude all blurbs that does not have a gameID (some 90X like "unpaid season ticket")
                        var _gameID = blurbsInFeed()[i].GameID;
                        if (_.isNumber(_gameID)) gameIds.push(_gameID);
                    }

                    if (blurbsInFeed().length > 2) {
                        for (i = blurbsInFeed().length - 3; i < blurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else if (blurbsInFeed().length > 1) {
                        for (i = 0; i < blurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else {
                        lastThreeBlurbTypes.push(blurbsInFeed()[0].MagazineBlurbTypeID);
                    }

                    lastGameTime = lastPageInCache.TimeStamp;
                    //lastGameTime = lastPageInCache.GameHeaderInfo.GameTime;
                }
                else {
                    blurbsInFeed.removeAll();
                    gameIds = null;
                    lastGameTime = new Date();
                }

                //Get the next three pages from the server
                datamanager.GetLeagueOrganizerMagazineBlurbs(leagueOrganizerId, moment(lastGameTime).format('YYYY-MM-DD HH:mm:ss.SSS'), lastThreeBlurbTypes, gameIds)
                    .then(function (json) {
                        styleBlurbs(json);

                        var underlayingArray = blurbsInFeed();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        blurbsInFeed.valueHasMutated();
                        gettingPages = false;

                        hidePreloader();
                        subViewLoaded();

                        if (json.length < 3) {
                            noMorePagesToGet = true;
                            $('#leagueOrganizerMagazineInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfYourFeed + " " + MagazineTexts.TotalNumberOfPages.replace("{0}", blurbsInFeed().length));
                        }

                        if (blurbsInFeed().length === 0) {
                            noMorePagesToGet = true;
                            $('#leagueOrganizerMagazineInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfYourFeed + " " + MagazineTexts.TotalNumberOfPages.replace("{0}", blurbsInFeed().length));
                        }

                    })
                    .fail(function (error) {
                        gettingPages = false;

                        subViewLoaded();
                    });

            },

            infiniteScrolling = function () {
                switch (currentTab()) {
                    case 'magazine': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && blurbsInFeed().length !== 0) {
                            if (!gettingPages && !noMorePagesToGet) {
                                $('#leagueOrganizerMagazineInfiniteScrollStatus').html(MagazineTexts.GettingMorePages);

                                getPagesFromServer();
                            }
                        }
                        break;
                    }
                    case 'pictures': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && pictures().length !== 0) {
                            if (!gettingPictures() && !noMorePicturesToGet) {
                                getLeagueOrganizerSitePictures();
                            }
                        }

                        break;
                    }
                    case 'videos': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && videos().length !== 0) {
                            if (!gettingVideos() && !noMoreVideosToGet) {
                                getLeagueOrganizerSiteVideos();
                            }
                        }

                        break;
                    }
                    case 'planned': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && plannedGames().length !== 0) {
                            if (!gettingPlannedGames() && !noMorePlannedGamesToGet) {
                                getPlannedGames();
                            }
                        }

                        break;
                    }
                    case 'live': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && liveGames().length !== 0) {
                            if (!gettingLiveGames() && !noMoreLiveGamesToGet) {
                                getLiveGames();
                            }
                        }

                        break;
                    }
                    case 'highlights': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && highlights().length !== 0) {
                            if (!gettingHighlights() && !noMoreHighlightsToGet) {
                                getHighlights();
                            }
                        }

                        break;
                    }
                    case 'replays': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && replays().length !== 0) {
                            if (!gettingReplays() && !noMoreReplaysToGet) {
                                getReplays();
                            }
                        }

                        break;
                    }                    
                    case 'fairplaycard': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && fairPlayCards().length !== 0) {
                            if (!gettingFairPlayCards() && !noMoreFairPlayCardsToGet) {
                                if (searchMode())
                                    searchCards();
                                else
                                    getFairPlayCards();
                            }
                        }

                        break;
                    }
                    case 'schedule': {
                        if (currentActiveTabId === 1) {
                            if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && comingGames().length !== 0) {
                                if (!gettingGamesComing() && !noMoreGamesToGetComing) {
                                    getGames(1);
                                }
                            }
                        } else {
                            if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && pastGames().length !== 0) {
                                if (!gettingGamesPast() && !noMoreGamesToGetPast) {
                                    getGames(2);
                                }
                            }
                        }
                        break;
                    }
                    case 'posts': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && posts().length !== 0) {
                            if (!gettingMoreInfoPosts() && !noMoreInfoPostsToGet) {
                                gettingMoreInfoPosts(true);

                                var infoItemId = posts().length ? posts()[posts().length - 1].InfoItemID : 0;

                                switch (postsFilterType()) {
                                    case 0:
                                        datamanager.getMoreLeagueOrganizerInfoItems(leagueOrganizerId, infoItemId, {
                                            success: function (json) {
                                                gettingMoreInfoPosts(false);

                                                if (json.length === 0) {
                                                    noMoreInfoPostsToGet = true;
                                                } else {
                                                    var underlayingArray = posts();

                                                    for (var i = 0; i < json.length; i++) {
                                                        underlayingArray.push(json[i]);
                                                    }

                                                    posts.valueHasMutated();
                                                }
                                            },
                                            error: function (error) {

                                            }
                                        });
                                        break;
                                    case 1:
                                        datamanager.getMoreManagedLeagueOrganizerInfoItems(leagueOrganizerId, infoItemId, true, {
                                            success: function (json) {
                                                gettingMoreInfoPosts(false);

                                                if (json.length === 0) {
                                                    noMoreInfoPostsToGet = true;
                                                } else {

                                                    var underlayingArray = posts();

                                                    for (var i = 0; i < json.length; i++) {
                                                        underlayingArray.push(json[i]);
                                                    }

                                                    posts.valueHasMutated();
                                                }
                                            },
                                            error: function (error) {

                                            }
                                        });
                                        break;
                                    case 2:
                                        datamanager.getMoreManagedLeagueOrganizerInfoItems(leagueOrganizerId, infoItemId, false, {
                                            success: function (json) {
                                                gettingMoreInfoPosts(false);

                                                if (json.length === 0) {
                                                    noMoreInfoPostsToGet = true;
                                                } else {

                                                    var underlayingArray = posts();

                                                    for (var i = 0; i < json.length; i++) {
                                                        underlayingArray.push(json[i]);
                                                    }

                                                    posts.valueHasMutated();
                                                }
                                            },
                                            error: function (error) {

                                            }
                                        });
                                        break;
                                }
                            }
                        }
                        break;
                    }
                }
            },

            filterClubs = function () {
                var searchstring = $('#clubSearchField').val();
                clubSearchString(searchstring);
            },

            getMorePlayerStatistics = function () {
                datamanager.getPlayerStatisticsForLeagueOrganizer(leagueOrganizerId, scoringStatisticsPageId, 10, 3, {
                    success: function (model) {
                        console.log(model);

                        scoringStatisticsPageId = scoringStatisticsPageId + 1;

                        var underlayingArray = playerStatisticRows();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        playerStatisticRows.valueHasMutated();
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            getMoreGoalieStatistics = function () {
                datamanager.getGoalieStatisticsForLeagueOrganizer(leagueOrganizerId, goalieStatisticsPageId, 10, 3, {
                    success: function (model) {
                        console.log(model);

                        goalieStatisticsPageId = goalieStatisticsPageId + 1;

                        var underlayingArray = goalieStatisticRows();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        goalieStatisticRows.valueHasMutated();
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            searchClubsKeyDown = function (data, event) {
                if (event.keyCode === 13) {
                    filterClubs();
                }
            },

            searchLeaguesKeyDown = function (data, event) {
                if (event.keyCode === 13) {
                    searchLeagues();
                }
            },

            //searchLeagues = function () {
            //    var leagueSearchString = $('#leagueSearchField').val();

            //    if (leagueSearchString.length === 0)
            //        leagueSearchString = '0';

            //    leagues([]);

            //    datamanager.getLeagueOrganizerLeagues(leagueOrganizerId, selectedGender, selectedSeason, leagueSearchString, {
            //        success: function (model) {

            //            var underlayingArray = leagues();

            //            for (var i = 0; i < model.length; i++) {
            //                underlayingArray.push(model[i]);
            //            }

            //            leagues.valueHasMutated();
            //        },
            //        error: function (response, xhr) {
            //            alert(response);
            //        }
            //    });
            //},

            searchLeagues = function () {
                var leagueSearchString = $('#leagueSearchField').val();

                if (leagueSearchString.length === 0)
                    leagueSearchString = '0';

                shell.showProgressIndicator(MiscTexts.GettingData);

                datamanager.getLeagueOrganizerLeagueCategories(leagueOrganizerId, selectedGender, selectedSeason, leagueSearchString, {
                    success: function (model) {
                        leagueCategories([]);

                        var underlayingArray = leagueCategories();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        leagueCategories.valueHasMutated();

                        shell.hideProgressIndicator();
                    },
                    error: function (response, xhr) {
                        alert(response);
                    }
                });
            },

            nextPage = function () {
                getInfoPostForImport();
            },

            searchInfoPostForImport = function () {
                // hide fetch more button
                $('#leagueorganizersite-view-fetchmorefromimport').hide();

                // clean lists
                postsForImport([]);
                pagesForImport([]);

                // reset pageindex
                pageIndex = 1;

                getInfoPostForImport();
            },

            getInfoPostForImport = function () {
                shell.showProgressIndicator(MiscTexts.GettingData);

                switch (selectedTypeForImport) {
                    case 0:
                        datamanager.getInfoItemPostForImport(selectedLeagueOrganizer, pageIndex, {
                            success: function (model) {
                                var underlayingArray = postsForImport();

                                for (var i = 0; i < model.length; i++) {
                                    underlayingArray.push(model[i]);
                                }

                                postsForImport.valueHasMutated();

                                pageIndex = pageIndex + 1;

                                if (model.length === 25) {
                                    $('#leagueorganizersite-view-fetchmorefromimport').show();
                                }
                                else {
                                    $('#leagueorganizersite-view-fetchmorefromimport').hide();
                                }

                                shell.hideProgressIndicator();
                            },
                            error: function (response, xhr) {
                                alert(response);
                            }
                        });

                        break;
                    case 1:
                        datamanager.getInfoItemPagesForImport(selectedLeagueOrganizer, pageIndex, {
                            success: function (model) {

                                var underlayingArray = pagesForImport();

                                for (var i = 0; i < model.length; i++) {
                                    underlayingArray.push(model[i]);
                                }

                                pagesForImport.valueHasMutated();

                                pageIndex = pageIndex + 1;

                                if (model.length === 25) {
                                    $('#leagueorganizersite-view-fetchmorefromimport').show();
                                }
                                else {
                                    $('#leagueorganizersite-view-fetchmorefromimport').hide();
                                }

                                shell.hideProgressIndicator();
                            },
                            error: function (response, xhr) {
                                alert(response);
                            }
                        });

                        break;
                }
            },

            searchFairPlayCards = function () {
                noMoreFairPlayCardsToGet = false;

                fairPlayCards([]);

                searchMode(true);

                searchCards();

                return true;
            },

            searchCards = function () {
                gettingFairPlayCards(true);

                var lastFairPlayCardId = 0;

                if (fairPlayCards().length !== 0) {
                    var lastPageInCache = fairPlayCards()[fairPlayCards().length - 1];

                    lastFairPlayCardId = lastPageInCache.FairPlayCardID;
                }

                var fairPlayCardSearchString = $('#fairPlayCardSearchField').val();

                if (fairPlayCardSearchString.length === 0) {
                    searchMode(false);
                    fairPlayCardSearchString = '0';
                }

                datamanager.searchFairPlayCards(leagueOrganizerId, fairPlayCardSearchString, 12, lastFairPlayCardId, {
                    success: function (model) {
                        var underlayingArray = fairPlayCards();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        if (model.length < 12) {
                            noMoreFairPlayCardsToGet = true;
                            $('#fairPlayCardInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfTheFeed + " " + MagazineTexts.TotalNumberOfFairPlayCards.replace("{0}", fairPlayCards().length));
                        }

                        fairPlayCards.valueHasMutated();

                        gettingFairPlayCards(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingFairPlayCards(false);
                    }
                });
            },

            subViewLoaded = function () {
                //$("#" + currentViewName + " .afterSubViewLoaded").show();
                //$("#" + currentViewName + " .beforeSubViewLoaded").hide();

                $("#" + currentViewName + " .beforeSubViewLoaded").hide();
                $("#" + currentViewName + " .afterSubViewLoaded").fadeIn(500);
            },

            selectSeason = function (item) {
                selectedSeason = item.SeasonID;

                $('#seasonDropDownTitle').text(item.SeasonName);
            },

            followTeam = function (data) {
                router.navigateTo(config.hashes.team + '/' + data.TeamID);
            },

            selectGender = function (item) {
                selectedGender = item.GenderID;

                switch (item.GenderID) {
                    case 1:
                        $('#genderDropDownTitle').text(MemberTexts.Gender);
                        break;
                    case 2:
                    case 3:
                        $('#genderDropDownTitle').text(item.Name);
                        break;
                }
            },

            selectTypeForImport = function (type, data, event) {
                $('#typeForImportDropDownTitle').text($(event.target).text());

                selectedTypeForImport = type;
            },

            selectLeagueOrganizationForImport = function (item) {
                selectedLeagueOrganizer = item.LeagueOrganizerID;

                $('#leagueOrganizationForImportDropDownTitle').text(item.Name);
            },

            selectPostForImport = function (selectedItem) {

                if (leagueOrganizerId === 1) {
                    infoitem.activate(1, leagueOrganizerId, 0, selectedItem, infoItemCallback);
                } else {
                    infoitem.activate(2, leagueOrganizerId, 0, selectedItem, infoItemCallback);
                }
            },

            filteredClubs = ko.computed(function () {
                return ko.utils.arrayFilter(clubs(), function (item) {
                    if (clubSearchString().length === 0)
                        return true;

                    return item.Name.toLowerCase().indexOf(clubSearchString().trim().toLowerCase()) > -1;
                });
            }),

            navigateToTeamView = function (selectedTeam) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.team + '/' + selectedTeam.TeamID;
                    },
                    toClick: function () {
                        if (selectedTeam.IsSportswikTeam) {
                            if (memberIsLoggedIn()) {
                                router.navigateTo(config.hashes.team + '/' + selectedTeam.TeamID);
                            } else {
                                router.navigateTo(config.hashes.team + '/' + selectedTeam.TeamID);
                            }

                        } else {
                            // Allow navigation if member is sportswik-admin
                            if (memberIsLoggedIn() && shell.currentMember.IsSportswikAdmin) {
                                router.navigateTo(config.hashes.team + '/' + selectedTeam.TeamID);
                            } else {
                                alert(teamAdminTexts.TeamMissingTeamPage);
                            }
                        }

                    }
                };
                return navigationItem;
            },

            navigateToGame_old = function (game, callback) {
                magazinegameview.setGameHeaderInfo(game);
                router.navigateTo(config.hashes.magazinegameview + '/' + game.GameID);
            },

            navigateToGame = function (game) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.magazinegameview + '/' + game.GameID;
                    },
                    toClick: function () {
                        magazinegameview.setGameHeaderInfo(game);
                        router.navigateTo(config.hashes.magazinegameview + '/' + game.GameID);
                    }
                };
                return navigationItem;
            },

            navigateToFairPlayCard = function (fairPlayCard) {
                router.navigateTo(config.hashes.magazinegameview + '/' + fairPlayCard.GameID);
            },

            navigateToLeagueOrganizerHome = function () {
                return createLeagueOrganizerSiteNavigationItem('start');
            },

            navigateToLeagueOrganizerSiteMagazine = function () {
                return createLeagueOrganizerSiteNavigationItem('magazine');
            },

            navigateToLeagueOrganizerSiteLeagues = function () {
                return createLeagueOrganizerSiteNavigationItem('leagues');
            },

            navigateToLeagueOrganizerSiteClubs = function () {
                return createLeagueOrganizerSiteNavigationItem('clubs');
            },

            navigateToLeagueOrganizerSiteTeams = function () {
                return createLeagueOrganizerSiteNavigationItem('teams');
            },

            navigateToLeagueOrganizerSiteGroups = function () {
                return createLeagueOrganizerSiteNavigationItem('groups');
            },

            navigateToLeagueOrganizerSiteGuessingGame = function () {
                return createLeagueOrganizerSiteNavigationItem('guessinggame');
            },

            navigateToLeagueOrganizerSiteSchedule = function () {
                return createLeagueOrganizerSiteNavigationItem('schedule');
            },

            navigateToLeagueOrganizerSiteFairPlayCard = function () {
                return createLeagueOrganizerSiteNavigationItem('fairplaycard');
            },

            navigateToLeagueOrganizerSitePosts = function () {
                return createLeagueOrganizerSiteNavigationItem('posts');
            },

            navigateToLeagueOrganizerSitePartners = function () {
                return createLeagueOrganizerSiteNavigationItem('partners');
            },            

            navigateToLeagueOrganizerSitePictures = function () {
                return createLeagueOrganizerSiteNavigationItem('pictures');
            },

            navigateToLeagueOrganizerSiteVideos = function () {
                return createLeagueOrganizerSiteNavigationItem('videos');
            },

            navigateToLeagueOrganizerSiteRegister = function () {
                return createLeagueOrganizerSiteNavigationItem('register');
            },

            navigateToLeagueOrganizerSiteCriteria = function () {
                return createLeagueOrganizerSiteNavigationItem('criteria');
            },

            navigateToLeagueOrganizerSiteFinalStandings = function () {
                return createLeagueOrganizerSiteNavigationItem('final');
            },

            navigateToLeagueOrganizerSitePlayerStatistics = function () {
                return createLeagueOrganizerSiteNavigationItem('statistics');
            },

            navigateToLeagueOrganizerSitePlay = function () {
                return createLeagueOrganizerSiteNavigationItem('play');
            },

            navigateToLink = function (data) {
                window.open(data.CallToActionURL, '_blank');
            },

            toggleMoreItemList = function () {
                $('.moreMenuItemsList').toggleClass('hiddenOnWideDisplay');
            },

            toggleLeagueRow = function (data, event) {
                var elem = $(event.target).closest('.header-root');

                elem.find('.header-row').first().toggleClass('active');
                elem.find('.feather-plus').first().toggle();
                elem.find('.feather-minus').first().toggle();
                elem.find('.league-list').first().toggle();
            },

            toggleComingLeagueGames = function () {
                currentActiveTabId = 1;
                window.scrollTo(0, 0);
                $('#leagueOrganizerSiteToggleComingLeagueGames').addClass('active');
                $('#leagueOrganizerSiteTogglePastLeagueGames').removeClass('active');

                $('#leagueOrganizerSiteComingLeagueGamesList').show();
                $('#leagueOrganizerSitePastLeagueGamesList').hide();
            },

            togglePastLeagueGames = function () {
                currentActiveTabId = 2;
                window.scrollTo(0, 0);
                $('#leagueOrganizerSiteToggleComingLeagueGames').removeClass('active');
                $('#leagueOrganizerSiteTogglePastLeagueGames').addClass('active');

                $('#leagueOrganizerSiteComingLeagueGamesList').hide();
                $('#leagueOrganizerSitePastLeagueGamesList').show();
            },

            createLeagueOrganizerSiteNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.leagueorganizersite + '/' + leagueOrganizerId + '/' + endPath;
                    },
                    toClick: function () {
                        // TODO toggle menu
                        $('#leagueOrganizerTopMenu ul').addClass('hiddenOnNarrow');

                        router.navigateTo(config.hashes.leagueorganizersite + '/' + leagueOrganizerId + '/' + endPath);
                    }
                };
            },

            filterPosts = function (type) {
                if (type === postsFilterType()) {
                    return;
                }

                postsFilterType(type);
                posts([]);
                reloadInfoItems();
            },

            createInfoItem = function (data) {
                // First parameter is the enum, 2 is LeagueOrganizer
                // Second parameter is the ID of the entity, in this case the LeagueOrganizerId
                // Third parameter is used if we are editing an item, in this case we pass 0

                infoitem.activate(data.InfoItemType, leagueOrganizerId, 0, null, infoItemCallback);
            },

            editInfoItem = function (data) {
                // First parameter is the enum, 2 is LeagueOrganizer
                // Second parameter is the ID of the entity, if we are editing an item we do not need to pass this in
                // Third parameter is used if we are editing an item, right now hardcoded

                infoitem.activate(data.InfoItemTypeID, 0, data.InfoItemID, null, infoItemCallback);
            },

            deleteInfoItem = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                console.log(data);

                if (r === true) {
                    datamanager.deleteInfoItem(data.InfoItemID, data.InfoItemTypeID, {
                        success: function (json) {
                            var existingItem = ko.utils.arrayFirst(posts(), function (line) {
                                return line.InfoItemID === data.InfoItemID;
                            });

                            if (existingItem)
                                posts.remove(existingItem);
                        },
                        error: function (error) {
                            alert('Ett fel upstod');

                            console.log(error);
                        }
                    });
                }
            },

            reloadInfoItems = function () {
                gettingMoreInfoPosts(true);
                noMoreInfoPostsToGet = false;

                if (postsFilterType() === 0) {
                    datamanager.getMoreLeagueOrganizerInfoItems(leagueOrganizerId, 0, {
                        success: function (json) {
                            posts([]);

                            gettingMoreInfoPosts(false);

                            if (json.length === 0) {
                                noMoreInfoPostsToGet = true;
                            } else {
                                var underlayingArray = posts();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                posts.valueHasMutated();
                            }
                        },
                        error: function (error) {

                        }
                    });
                }
                else if (postsFilterType() === 1) {
                    datamanager.getMoreManagedLeagueOrganizerInfoItems(leagueOrganizerId, 0, true, {
                        success: function (json) {
                            posts([]);

                            gettingMoreInfoPosts(false);

                            if (json.length === 0) {
                                noMoreInfoPostsToGet = true;
                            } else {

                                var underlayingArray = posts();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                posts.valueHasMutated();
                            }
                        },
                        error: function (error) {

                        }
                    });
                } else if (postsFilterType() === 2) {
                    datamanager.getMoreManagedLeagueOrganizerInfoItems(leagueOrganizerId, 0, false, {
                        success: function (json) {
                            posts([]);

                            gettingMoreInfoPosts(false);

                            if (json.length === 0) {
                                noMoreInfoPostsToGet = true;
                            } else {
                                var underlayingArray = posts();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                posts.valueHasMutated();
                            }
                        },
                        error: function (error) {

                        }
                    });
                }
            },

            infoItemCallback = function () {
                reloadInfoItems();
            },

            listInfoItems = function () {
                router.navigateTo(config.hashes.leagueorganizersite + '/' + leagueOrganizerId + '/myposts');
            },

            importInfoItems = function () {
                router.navigateTo(config.hashes.leagueorganizersite + '/' + leagueOrganizerId + '/importposts');
            },

            navigateToLeague = function (data) {
                if (memberIsLoggedIn()) {
                    router.navigateTo(config.hashes.leaguesite + '/' + data.LeagueID);
                } else {
                    router.navigateTo(config.hashes.leaguesite + '/' + data.LeagueID);
                }
            },

            navigateToTeam = function (data) {
                if (memberIsLoggedIn()) {
                    router.navigateTo(config.hashes.team + '/' + data.TeamID);
                } else {
                    router.navigateTo(config.hashes.team + '/' + data.TeamID);
                }
            },

            navigateToClub = function (data) {
                if (memberIsLoggedIn())
                    router.navigateTo(config.hashes.club + '/' + data.ClubID);
                else
                    router.navigateTo(config.hashes.club + '/' + data.ClubID);
            },

            navigateToMagazineGameView = function (selectedGame) {
                var navigationItem;

                if (selectedGame.GameID !== 0) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.magazinegameview + '/' + selectedGame.GameID;
                        },
                        toClick: function () {
                            magazinegameview.setGameHeaderInfo(selectedGame.GameHeaderInfo);
                            router.navigateTo(config.hashes.magazinegameview + '/' + selectedGame.GameID);
                        }
                    };
                }

                else {
                    navigationItem = {
                        getHrefString: function () {
                            return "";
                        },
                        toClick: function () {
                        }
                    };
                }

                return navigationItem;
            },

            navigateToLeagueOrganizerAdmin = function () {
                navigationItem = {
                    getHrefString: function () {
                        return '/' + config.hashes.leagueorganizeradmin + '/' + leagueOrganizerId;
                    },
                    toClick: function () {
                        router.navigateTo('/' + config.hashes.leagueorganizeradmin + '/' + leagueOrganizerId);
                    }
                };
                return navigationItem;
            },

            navigateToPicture = function (picture) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.livedetails + '/' + picture.GameID + '/' + picture.PictureID + '/2';
                    },
                    toClick: function () {
                        if (memberIsLoggedIn()) {
                            router.navigateTo(config.hashes.livedetails + '/' + picture.GameID + '/' + picture.PictureID + '/2');
                        } else {
                            alert(MemberTexts.SignUpRequired);
                        }

                    }
                };
                return navigationItem;
            },

            navigateToVideo = function (video) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.livedetails + '/' + video.GameID + '/' + video.VideoID + '/5';
                    },
                    toClick: function () {
                        if (memberIsLoggedIn()) {
                            router.navigateTo(config.hashes.livedetails + '/' + video.GameID + '/' + video.VideoID + '/5');
                        } else {
                            alert(MemberTexts.SignUpRequired);
                        }
                    }
                };
                return navigationItem;
            },

            navigateToInfoItem = function (data, event) {
                // Because info items has nested context menu, we need to prevent the bubbling when the context menu is clicked
                if ($(event.target).hasClass('preventBubble') === false) {
                    router.navigateTo(config.hashes.infoitemdetails + '/' + data.InfoItemID);
                }
            },

            
            navigateToDeepLink = function (data, event) {
                navigation.navigateToDeepLink(data);
            },            

            styleBlurbs = function (json) {
                for (var i = 0; i < json.length; i++) {
                    json[i].isHalfPageLeft = false;
                    json[i].isHalfPageRight = false;
                }

                for (i = 0; i < json.length - 1; i++) {
                    if (_.contains(blurbsSuitableForHalfPage, json[i].MagazineBlurbTypeID) && _.contains(blurbsSuitableForHalfPage, json[i + 1].MagazineBlurbTypeID)) {
                        json[i].isHalfPageLeft = true;
                        json[i + 1].isHalfPageRight = true;

                        i = i + 1;

                        if (i > json.length - 2) {
                            break;
                        }
                    }
                }
            },

            removePreloader = function (subviewname) {
                $('#' + subviewname + ' .preloader').hide();
                $('#' + subviewname + ' .afterloaded').show();
            },

            hidePreloader = function () {
                $('#leagueorganizersite-view-preloader').hide();
                $('#leagueorganizersite-view-afterloaded').show();

                if (shell.showAdminView()) {
                    $(".innebandy-special").each(function () {
                        $(this).removeClass('innebandy-special');
                    });
                }
            },

            showPreloader = function () {
                $('#leagueorganizersite-view-preloader').show();
                $('#leagueorganizersite-view-afterloaded').hide();
            };

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,
            currentPage: currentPage,

            leagueOrganizerHeader: leagueOrganizerHeader,

            initLeagueOrganizerModel: initLeagueOrganizerModel,
            initLeagueOrganizerSitePicsAndVideosModel: initLeagueOrganizerSitePicsAndVideosModel,            
            initLeagueOrganizerSiteFairPlayCardsModel: initLeagueOrganizerSiteFairPlayCardsModel,            
            initLeagueOrganizerPartnersModel: initLeagueOrganizerPartnersModel,
            initPlayPage: initPlayPage,

            leagues: leagues,
            leagueCategories: leagueCategories,
            clubs: clubs,
            teams: teams,
            seasons: seasons,
            genders: genders,
            blurbsInFeed: blurbsInFeed,
            fairPlayCards: fairPlayCards,
            pictures: pictures,
            videos: videos,
            highlights: highlights,
            replays: replays,
            plannedGames: plannedGames,
            liveGames: liveGames,            
            posts: posts,            
            postsForImport: postsForImport,
            pagesForImport: pagesForImport,
            leagueOrganizers: leagueOrganizers,
            postsFilterType: postsFilterType,
            groups: groups,
            finalResultTableRows: finalResultTableRows,
            playerStatisticRows: playerStatisticRows,
            goalieStatisticRows: goalieStatisticRows,
            gameDates: gameDates,
            leaderboardRows: leaderboardRows,
            guessingGameGames: guessingGameGames,
            guessingGamePartner: guessingGamePartner,
            breadCrumb: breadCrumb,                        
            searchMode: searchMode,

            filterClubs: filterClubs,
            filteredClubs: filteredClubs,
            filterPosts: filterPosts,

            getMorePlayerStatistics: getMorePlayerStatistics,
            getMoreGoalieStatistics: getMoreGoalieStatistics,   

            searchClubsKeyDown: searchClubsKeyDown,
            searchLeaguesKeyDown: searchLeaguesKeyDown,
            searchLeagues: searchLeagues,            
            searchInfoPostForImport: searchInfoPostForImport,
            searchFairPlayCards: searchFairPlayCards,
            selectSeason: selectSeason,
            selectGender: selectGender,
            selectTypeForImport: selectTypeForImport,
            selectPostForImport: selectPostForImport,
            selectLeagueOrganizationForImport: selectLeagueOrganizationForImport,

            navigateToGame: navigateToGame,
            navigateToFairPlayCard: navigateToFairPlayCard,
            navigateToLeagueOrganizerHome: navigateToLeagueOrganizerHome,
            navigateToLeagueOrganizerSiteMagazine: navigateToLeagueOrganizerSiteMagazine,
            navigateToLeagueOrganizerSiteLeagues: navigateToLeagueOrganizerSiteLeagues,
            navigateToLeagueOrganizerSiteClubs: navigateToLeagueOrganizerSiteClubs,
            navigateToLeagueOrganizerSiteTeams: navigateToLeagueOrganizerSiteTeams,
            navigateToLeagueOrganizerSiteGroups: navigateToLeagueOrganizerSiteGroups,
            navigateToLeagueOrganizerSiteGuessingGame: navigateToLeagueOrganizerSiteGuessingGame,
            navigateToLeagueOrganizerSiteSchedule: navigateToLeagueOrganizerSiteSchedule,
            navigateToLeagueOrganizerSiteFairPlayCard: navigateToLeagueOrganizerSiteFairPlayCard,
            navigateToLeagueOrganizerSitePosts: navigateToLeagueOrganizerSitePosts,
            navigateToLeagueOrganizerSitePartners: navigateToLeagueOrganizerSitePartners,            
            navigateToLeagueOrganizerSitePictures: navigateToLeagueOrganizerSitePictures,
            navigateToLeagueOrganizerSiteVideos: navigateToLeagueOrganizerSiteVideos,
            navigateToLeagueOrganizerSitePlay: navigateToLeagueOrganizerSitePlay,
            navigateToLeagueOrganizerSiteRegister: navigateToLeagueOrganizerSiteRegister,
            navigateToLeagueOrganizerSiteCriteria: navigateToLeagueOrganizerSiteCriteria,
            navigateToLeagueOrganizerSitePlayerStatistics: navigateToLeagueOrganizerSitePlayerStatistics,
            navigateToLeagueOrganizerSiteFinalStandings: navigateToLeagueOrganizerSiteFinalStandings,            
            navigateToLink: navigateToLink,

            initInfoItems: initInfoItems,
            createInfoItem: createInfoItem,
            editInfoItem: editInfoItem,
            deleteInfoItem: deleteInfoItem,
            listInfoItems: listInfoItems,
            importInfoItems: importInfoItems,            
            nextPage: nextPage,            

            navigateToLeague: navigateToLeague,
            navigateToTeam: navigateToTeam,
            navigateToTeamView: navigateToTeamView,
            navigateToClub: navigateToClub,
            navigateToPicture: navigateToPicture,
            navigateToVideo: navigateToVideo,
            navigateToMagazineGameView: navigateToMagazineGameView,
            navigateToLeagueOrganizerAdmin: navigateToLeagueOrganizerAdmin,
            navigateToInfoItem: navigateToInfoItem,
            navigateToDeepLink: navigateToDeepLink,

            followTeam: followTeam,

            fairPlayCardSettingsModel: fairPlayCardSettingsModel,            
            toggleMoreItemList: toggleMoreItemList,
            toggleLeagueRow: toggleLeagueRow,

            gettingPictures: gettingPictures,
            gettingVideos: gettingVideos,
            gettingLiveGames: gettingLiveGames,
            gettingMoreInfoPosts: gettingMoreInfoPosts,
            gettingGamesComing: gettingGamesComing,
            gettingGamesPast: gettingGamesPast,            
            gettingHighlights: gettingHighlights,            
            gettingReplays: gettingReplays,            
            gettingPlannedGames: gettingPlannedGames,
            gettingFairPlayCards: gettingFairPlayCards,

            toggleComingLeagueGames: toggleComingLeagueGames,
            togglePastLeagueGames: togglePastLeagueGames,
            comingGames: comingGames,
            pastGames: pastGames,
            
            navigateToEventPurchasePage: navigateToEventPurchasePage            
        };
    });;
define('viewmodels/vm.leaguesite',
    ['ko', 'config', 'router', 'messenger', 'datamanager', 'navigation', 'viewmodels/vm.magazinegameview', 'viewmodels/vm.shell', 'underscore'],
    function (ko, config, router, messenger, datamanager, navigation, magazinegameview, shell, _) {
        var leagueId = 0,
            leagueHeader = ko.observable(),
            initLeagueModel = ko.observable(),
            initLeagueSitePicsAndVideosModel = ko.observable(),
            initPlayPage = ko.observable(),
            leagueInfo = ko.observable(),

            teams = ko.observableArray(),
            games = ko.observableArray(),
            comingGames = ko.observableArray(),
            pastGames = ko.observableArray(),
            fairPlayCards = ko.observableArray(),
            scoringStatisticRows = ko.observableArray(),
            scoringStatisticPlayoffRows = ko.observableArray(),
            playerStatisticRows = ko.observableArray(),
            goalieStatisticRows = ko.observableArray(),
            leagueTable = ko.observable(),
            leagueTableCompact = ko.observable(),
            breadCrumb = ko.observable(),

            pictures = ko.observableArray(),
            videos = ko.observableArray(),
            highlights = ko.observableArray(),
            replays = ko.observableArray(),
            liveGames = ko.observableArray(),
            plannedGames = ko.observableArray(),

            weeklyHighlights = ko.observableArray(),
            blurbsInFeed = ko.observableArray(),
            playOffSeries = ko.observableArray(),            
            scoreboardStatisticsBlurb = ko.observable(),
            memberFollowsLeague = ko.observable(false),
            currentHighlightVideo = ko.observable(),
            highlight = ko.observable(),
            currentPreRoll = ko.observable(),

            searchMode = false,
            lastScrollPosition = 0,

            gettingPages = false,
            noMorePagesToGet = false,

            gettingPictures = ko.observable(false),
            gettingVideos = ko.observable(false),
            gettingHighlights = ko.observable(false),
            gettingReplays = ko.observable(false),
            gettingLiveGames = ko.observable(false),
            gettingPlannedGames = ko.observable(false),

            gettingMoreHighlights = ko.observable(false),            
            gettingFairPlayCards = false,
            gettingGamesPast = ko.observable(false),
            gettingGamesComing = ko.observable(false),           

            noMorePicturesToGet = false,
            noMoreVideosToGet = false,
            noMoreFairPlayCardsToGet = false,
            noMoreWeeklyHighlightsToGet = ko.observable(false),            
            noMoreGamesToGetPast = false,
            noMoreGamesToGetComing = false,
            noMoreHighlightsToGet = false,
            noMoreReplaysToGet = false,
            noMorePlannedGamesToGet = false,
            noMoreLiveGamesToGet = false,        

            currentViewName = '',
            blurbsSuitableForHalfPage = [0, 1, 9, 12, 17, 18, 23, 40, 41, 50, 901, 903, 904, 905],
            currentTab = ko.observable(''),            
            memberIsLoggedIn = ko.observable(false),
            currentPlayerStatisticsTab = ko.observable('Points'),
            currentPlayerPlayoffStatisticsTab = ko.observable('Points'),
            currentGoalieStatisticsTab = ko.observable('SavePercentage'),
            currentFootballPlayerStatisticsTab = ko.observable('GoalsScored'),
            playerStatisticsColumnId = 3,
            playerStatisticsPlayoffColumnId = 3,
            footballPlayerStatisticsColumnId = 0,
            goalieStatisticsColumnId = 3,
            currentActiveTabId = 1,
            scoringStatisticsPageId = 0,
            playerStatisticsPageId = 0,
            scoringStatisticsPlayoffPageId = 0,
            goalieStatisticsPageId = 0,

            activate = function (routeData, callback) {
                routeData.subview = 'start';
                currentTab(routeData.subview);
                messenger.publish.viewModelActivated();

                if (routeData.Id !== undefined) {
                    leagueId = Number(routeData.Id);
                }

                $(window).scroll(infiniteScrolling);

                activatesubview(routeData);
            },

            activatesubview = function (routeData, callback) {
                if (_.isObject(shell.currentMember)) {
                    memberIsLoggedIn(true);
                }

                if (leagueHeader() === undefined) {
                    clearObservables();
                }

                if (routeData.Id !== undefined && leagueHeader() !== undefined && leagueHeader().LeagueID !== Number(routeData.Id)) {
                    clearObservables();
                }

                if (routeData.Id !== undefined) {
                    leagueId = Number(routeData.Id);
                }                

                var currentView = routeData.subview;
                currentViewName = 'leaguesite-' + currentView;
                currentTab(routeData.subview);
                breadCrumb(currentView);

                $('.leaguesite-subview').hide();
                $('#leaguesite-' + currentView).show();

                $('.moreMenuItemsList').addClass('hiddenOnWideDisplay');

                if (leagueHeader() === undefined || leagueHeader() === '') {
                    getLeagueHeader(routeData, true);
                } else {
                    switch (currentTab()) {
                        case 'start': {
                            // Only do init if we haven't done it already
                            if (initLeagueModel() === undefined || initLeagueModel() === '') {
                                showPreloader();

                                datamanager.initLeagueSite(leagueId, {
                                    success: function (model) {
                                        initLeagueModel(model);

                                        var statBlurbs = 0;

                                        // TODO: Fix thos whole two-columns stuff with CSS instead
                                        if (model.FollowerSummaryItems.length > 0) {
                                            statBlurbs++;
                                        }

                                        if (leagueHeader().EventReportingForbidden !== true && leagueHeader().TableURL !== '') {
                                            statBlurbs++;
                                        }

                                        // Hide the stats if we have less than two blurbs
                                        if (statBlurbs < 1)
                                            $('.statContentBlock').hide();

                                        if (statBlurbs === 1)
                                            $('.stat-grid-container').addClass("two-columns");
                                        else
                                            $('.stat-grid-container').removeClass("two-columns");

                                        styleBlurbs(model.MagazineBlurbs);                                        

                                        window.scrollTo(0, 0);

                                        hidePreloader();
                                    },
                                    error: function (response, xhr) {
                                        hidePreloader();
                                    }
                                });
                            }

                            if (initLeagueSitePicsAndVideosModel() === undefined || initLeagueSitePicsAndVideosModel() === '') {
                                datamanager.initLeagueSitePicsAndVideos(leagueId, {
                                    success: function (model) {
                                        initLeagueSitePicsAndVideosModel(model);
                                    },
                                    error: function (response, xhr) {
                                        alert(response);
                                    }
                                });
                            }

                            break;
                        }
                        case 'magazine': {
                            if (blurbsInFeed().length === 0) {
                                showPreloader();
                                getPagesFromServer();
                                window.scrollTo(0, 0);
                            }
                            else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }                        
                        case 'teams':
                            {
                                if (teams().length === 0) {
                                    window.scrollTo(0, 0);

                                    datamanager.getLeagueTeams(leagueId, {
                                        success: function (model) {
                                            teams(model);
                                            removePreloader(currentViewName);
                                        },
                                        error: function (response) {
                                            removePreloader(currentViewName);
                                        }
                                    });
                                }
                                else
                                    removePreloader(currentViewName);
                            }
                            break;
                        case 'fixtures':
                            if (comingGames().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getComingLeagueGames(leagueId, 0, {
                                    success: function (model) {
                                        comingGames([]);
                                        var underlayingArray = comingGames();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        comingGames.valueHasMutated();

                                        if (model.length < 5) {
                                            noMoreGamesToGetComing = true;
                                        }

                                        if (model.length === 0) {
                                            togglePastLeagueGames();
                                        }

                                        removePreloader(currentViewName);
                                    },
                                    error: function (response) {
                                        removePreloader(currentViewName);
                                    }
                                });
                            }
                            else {
                                removePreloader(currentViewName);

                            }

                            // If we haven't loaded any past games, load the first 10 games
                            if (pastGames().length === 0) {
                                getGames(2);
                            }
                            break;
                        case 'playoff': {
                            if (playOffSeries().length === 0) {
                                datamanager.getLeaguePlayOffGames(leagueId, {
                                    success: function (json) {
                                        playOffSeries([]);

                                        var underlayingArray = playOffSeries();

                                        for (var i = 0; i < json.length; i++) {
                                            underlayingArray.push(json[i]);
                                        }

                                        playOffSeries.valueHasMutated();

                                    },
                                    error: function (error) {
                                        console.log(error);
                                    }
                                });
                            }

                            break;
                        }
                        case 'table':
                            {
                                window.scrollTo(0, 0);

                                datamanager.initStatisticsTable(leagueId, 5, {
                                    success: function (json) {
                                        leagueTable(json);

                                        removePreloader(currentViewName);
                                        subViewLoaded();
                                    },
                                    error: function (error) {
                                        console.log(error);

                                        subViewLoaded();
                                    }
                                });
                            }
                            break;
                        case 'play': {
                            // Only do init if we haven't done it already
                            if (initPlayPage() === undefined || initPlayPage() === '') {
                                showPreloader();

                                window.scrollTo(0, 0);

                                datamanager.initLeaguePlayPage(leagueId, {
                                    success: function (model) {
                                        initPlayPage(model);

                                        subViewLoaded();
                                        hidePreloader();
                                    },
                                    error: function (response) {
                                        hidePreloader();

                                        alert(response);
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'pictures': {
                            breadCrumb('play');

                            if (pictures().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getLeaguePictures(leagueId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = pictures();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        pictures.valueHasMutated();
                                        hidePreloader();

                                        if (model.length < 8) {
                                            noMorePicturesToGet = true;
                                        } else {
                                            noMorePicturesToGet = false;
                                        }

                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'videos': {
                            breadCrumb('play');

                            if (videos().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getLeagueVideos(leagueId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = videos();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        videos.valueHasMutated();

                                        hidePreloader();

                                        if (model.length < 8) {
                                            noMoreVideosToGet = true;
                                        } else {
                                            noMoreVideosToGet = false;
                                        }

                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'highlights': {
                            breadCrumb('play');

                            if (highlights().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getHighlightsForLeague(leagueId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = highlights();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        highlights.valueHasMutated();

                                        if (model.length < 8)
                                            noMoreHighlightsToGet = true;

                                        hidePreloader();
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'replays': {
                            breadCrumb('play');

                            if (replays().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getReplaysForLeague(leagueId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = replays();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        replays.valueHasMutated();

                                        if (model.length < 8)
                                            noMoreReplaysToGet = true;

                                        hidePreloader();
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'planned': {
                            breadCrumb('play');

                            if (plannedGames().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getPlannedGamesForLeague(leagueId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = plannedGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        plannedGames.valueHasMutated();

                                        if (model.length < 8)
                                            noMorePlannedGamesToGet = true;

                                        hidePreloader();
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'live': {
                            breadCrumb('play');

                            if (liveGames().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getLiveGamesForLeague(leagueId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = liveGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        liveGames.valueHasMutated();

                                        if (model.length < 8)
                                            noMoreLiveGamesToGet = true;

                                        hidePreloader();
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                            break;
                        }
                        case 'showvideo':
                            {
                                datamanager.getHighlightForLeagueSite(leagueId, routeData.subId, {
                                    success: function (json) {
                                        highlight(json);

                                        hidePreloader();
                                    },
                                    error: function (error) {
                                        console.log(error);

                                        hidePreloader();
                                    }
                                });
                            }
                            break;
                        case 'weeklyhighlights': {
                            if (weeklyHighlights().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.initHighlightsForLeagueSite(leagueId, {
                                    success: function (model) {
                                        currentHighlightVideo(model.CurrentVideo);

                                        var underlayingArray = weeklyHighlights();

                                        for (var i = 0; i < model.Videos.length; i++) {
                                            underlayingArray.push(model.Videos[i]);
                                        }

                                        weeklyHighlights.valueHasMutated();

                                        hidePreloader();

                                        if (model.Videos.length < 12) {
                                            noMoreWeeklyHighlightsToGet(true);
                                        }

                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        subViewLoaded();
                                    }
                                });
                            } else {
                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }

                            break;
                        }
                        case 'fairplaycard': {
                            if (fairPlayCards().length === 0) {
                                datamanager.initLeagueSiteFairPlayCards(leagueId, 12, {
                                    success: function (json) {
                                        var underlayingArray = fairPlayCards();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < json.FairPlayCards.length; i++) {
                                            underlayingArray.push(json.FairPlayCards[i]);
                                        }

                                        fairPlayCards.valueHasMutated();

                                        if (json.FairPlayCards.length < 12) {
                                            noMoreFairPlayCardsToGet = true;
                                            $('#fairPlayCardInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfTheFeed + " " + MagazineTexts.TotalNumberOfFairPlayCards.replace("{0}", fairPlayCards().length));
                                        }

                                        hidePreloader();
                                    },
                                    error: function (error) {
                                        hidePreloader();

                                        alert(error);
                                    }
                                });
                            } else {
                                hidePreloader();
                            }

                            //getFairPlayCards();

                            break;
                        }
                        case 'statistics': {
                            if (swconstants.applicationId === 2) {
                                getPlayerStatistics();
                            } else if (swconstants.applicationId === 3) {
                                getScoringLeagueStatistics();
                            } else if (swconstants.applicationId === 4) {
                                getScoringLeagueStatistics();
                            } else if (swconstants.applicationId === 5) {
                                getScoringLeagueStatistics();
                            }

                            break;
                        }
                        case 'admin': {
                            datamanager.initLeagueAdmin(leagueId, {
                                success: function (json) {
                                    leagueInfo(json.LeagueInfo);

                                    subViewLoaded();
                                },
                                error: function (error) {
                                    router.navigateTo("/");
                                }
                            });
                        }
                    }
                }

                // Set up infinitescrolling
                $(window).scroll(infiniteScrolling);
            },

            subViewLoaded = function () {
                $("#" + currentViewName + " .beforeSubViewLoaded").hide();
                $("#" + currentViewName + " .afterSubViewLoaded").fadeIn(500);
            },

            toggleScoringLeague = function () {
                currentActiveTabId = 1;
                window.scrollTo(0, 0);

                getScoringLeagueStatistics();

                $('#toggleScoringLeague').addClass('active');
                $('#toggleGoalieLeague').removeClass('active');
                $('#togglePlayerStatistics').removeClass('active');

                $('#scoringLeagueTable').show();
                $('#goalieLeagueTable').hide();
                $('#playerStatisticsTable').hide();
            },

            togglePlayerStatistics = function () {
                currentActiveTabId = 2;
                window.scrollTo(0, 0);

                getPlayerStatistics();

                $('#togglePlayerStatistics').addClass('active');
                $('#toggleGoalieLeague').removeClass('active');
                $('#toggleScoringLeague').removeClass('active');


                $('#playerStatisticsTable').show();
                $('#scoringLeagueTable').hide();
                $('#goalieLeagueTable').hide();
            },

            toggleGoalieLeague = function () {
                currentActiveTabId = 2;
                window.scrollTo(0, 0);

                getGoalieStatistics();

                $('#toggleScoringLeague').removeClass('active');
                $('#toggleGoalieLeague').addClass('active');
                $('#togglePlayerStatistics').removeClass('active');

                $('#scoringLeagueTable').hide();
                $('#goalieLeagueTable').show();
                $('#playerStatisticsTable').hide();
            },

            getLeagueHeader = function (routeData, callSubView) {
                datamanager.getLeagueHeader(leagueId, {
                    success: function (model) {
                        leagueHeader(model);

                        memberFollowsLeague(model.MemberFollowsLeague);

                        ////Check if league topbar branding should be shown
                        //if (model.BrandingModel != undefined && model.BrandingModel.BrandingColor != '' && window.location.href.indexOf("ettanplay") == -1) {
                        //    showBrandingTopBar(true);
                        //    //$('#leaguesite-view .site-heropicture').addClass('topbarmargin');
                        //} else {
                        //    showBrandingTopBar(false);
                        //    //$('#leaguesite-view .site-heropicture').removeClass('topbarmargin');
                        //}

                        hidePreloader();

                        if (callSubView)
                            activatesubview(routeData);
                    },
                    error: function (response, xhr) {
                        if (xhr.status === 403) {
                            router.navigateTo("/");
                        }

                        hidePreloader();
                    }
                });
            },

            getLeagueSitePictures = function () {
                gettingPictures(true);

                var lastPictureID = 0;

                if (pictures().length !== 0) {
                    var lastPageInCache = pictures()[pictures().length - 1];

                    lastPictureID = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getLeaguePictures(leagueId, 9, lastPictureID, {
                    success: function (model) {
                        var underlayingArray = pictures();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        pictures.valueHasMutated();

                        if (model.length < 9) {
                            noMorePicturesToGet = true;
                        } else {
                            noMorePicturesToGet = false;
                        }

                        gettingPictures(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingPictures(false)
                    }
                });
            },

            getLeagueSiteVideos = function () {
                gettingVideos(true);

                var lastVideoID = 0;

                if (videos().length !== 0) {
                    var lastPageInCache = videos()[videos().length - 1];

                    lastVideoID = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getLeagueVideos(leagueId, 9, lastVideoID, {
                    success: function (model) {
                        var underlayingArray = videos();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        videos.valueHasMutated();

                        if (model.length < 9) {
                            noMoreVideosToGet = true;
                        } else {
                            noMoreVideosToGet = false;
                        }

                        gettingVideos(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingVideos(false);
                    }
                });
            },

            getHighlights = function () {
                gettingHighlights(true);

                var lastGameId = 0;

                if (highlights().length !== 0) {
                    var lastPageInCache = highlights()[highlights().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getHighlightsForLeague(leagueId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = highlights();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        highlights.valueHasMutated();

                        if (model.length < 9) {
                            noMoreHighlightsToGet = true;
                        }

                        gettingHighlights(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingHighlights(false);
                    }
                });
            },

            getPlannedGames = function () {
                gettingPlannedGames(true);

                var lastGameId = 0;

                if (plannedGames().length !== 0) {
                    var lastPageInCache = plannedGames()[plannedGames().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getPlannedGamesForLeague(leagueId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = plannedGames();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        plannedGames.valueHasMutated();

                        if (model.length < 9) {
                            noMorePlannedGamesToGet = true;
                        }

                        gettingPlannedGames(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingPlannedGames(false);
                    }
                });
            },

            getLiveGames = function () {
                gettingLiveGames(true);

                var lastGameId = 0;

                if (liveGames().length !== 0) {
                    var lastPageInCache = liveGames()[liveGames().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getLiveGamesForLeague(leagueId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = liveGames();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        liveGames.valueHasMutated();

                        if (model.length < 9) {
                            noMoreLiveGamesToGet = true;
                        }

                        gettingLiveGames(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingLiveGames(false);
                    }
                });
            },

            getReplays = function () {
                gettingReplays(true);

                var lastGameId = 0;

                if (replays().length !== 0) {
                    var lastPageInCache = replays()[replays().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getReplaysForLeague(leagueId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = replays();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        replays.valueHasMutated();

                        if (model.length < 9) {
                            noMoreReplaysToGet = true;
                        }

                        gettingReplays(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingReplays(false);
                    }
                });
            },

            getLeagueSiteHighlights = function () {
                gettingMoreHighlights(true);

                var lastVideoID = 0;

                if (weeklyHighlights().length !== 0) {
                    var lastPageInCache = weeklyHighlights()[weeklyHighlights().length - 1];

                    lastVideoID = lastPageInCache.VideoID;
                }

                datamanager.getHighlightsForLeagueSite(leagueId, 12, lastVideoID, {
                    success: function (model) {
                        var underlayingArray = weeklyHighlights();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        weeklyHighlights.valueHasMutated();

                        if (model.length < 12) {
                            noMoreWeeklyHighlightsToGet(true);
                        }

                        gettingMoreHighlights(false);

                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingMoreHighlights(false);
                    }
                });
            },

            getScoringLeagueStatistics = function () {
                if (scoringStatisticRows().length === 0) {
                    datamanager.initPlayerStatisticsForLeague(leagueId, playerStatisticsColumnId, {
                        success: function (model) {
                            scoreboardStatisticsBlurb(model.Statistics);
                            scoringStatisticsPageId = 1;
                            scoringStatisticRows([]);
                            var underlayingArray = scoringStatisticRows();

                            //Add the pages to the page cache
                            for (var i = 0; i < model.PlayerStatistics.length; i++) {
                                underlayingArray.push(model.PlayerStatistics[i]);
                            }

                            scoringStatisticRows.valueHasMutated();

                            removePreloader(currentViewName);
                        },
                        error: function (error) {
                            removePreloader(currentViewName);

                            alert(error);
                        }
                    });
                }
            },

            getPlayerStatistics = function () {
                //datamanager.initStatisticsTable(leagueId, 12, {
                //    success: function (json) {
                //        console.log(json);
                //    },
                //    error: function (error) {
                //        console.log(error);
                //    }
                //});


                if (playerStatisticRows().length === 0) {
                    datamanager.initFootballPlayerStatisticsForLeague(leagueId, footballPlayerStatisticsColumnId, {
                        success: function (model) {
                            scoreboardStatisticsBlurb(model.Statistics);

                            playerStatisticsPageId = 1;
                            playerStatisticRows([]);
                            var underlayingArray = playerStatisticRows();

                            //Add the pages to the page cache
                            for (var i = 0; i < model.PlayerStatistics.length; i++) {
                                underlayingArray.push(model.PlayerStatistics[i]);
                            }

                            playerStatisticRows.valueHasMutated();

                            removePreloader(currentViewName);
                        },
                        error: function (error) {
                            removePreloader(currentViewName);

                            alert(error);
                        }
                    });
                }
            },

            getGoalieStatistics = function () {
                if (goalieStatisticRows().length === 0) {
                    datamanager.initGoalieStatisticsForLeague(leagueId, goalieStatisticsColumnId, {
                        success: function (model) {
                            goalieStatisticsPageId = 1;
                            goalieStatisticRows([]);
                            var underlayingArray = goalieStatisticRows();

                            //Add the pages to the page cache
                            for (var i = 0; i < model.GoalieStatistics.length; i++) {
                                underlayingArray.push(model.GoalieStatistics[i]);
                            }

                            goalieStatisticRows.valueHasMutated();

                            removePreloader(currentViewName);
                        },
                        error: function (error) {
                            removePreloader(currentViewName);

                            alert(error);
                        }
                    });
                }
            },

            getFairPlayCards = function () {
                gettingFairPlayCards = true;

                var lastFairPlayCardId = 0;

                if (fairPlayCards().length !== 0) {
                    var lastPageInCache = fairPlayCards()[fairPlayCards().length - 1];

                    lastFairPlayCardId = lastPageInCache.FairPlayCardID;
                }

                datamanager.getFairPlayCardsForLeagueSite(leagueId, 12, lastFairPlayCardId, {
                    success: function (model) {
                        var underlayingArray = fairPlayCards();

                        //Add the pages to the page cache
                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        fairPlayCards.valueHasMutated();

                        if (model.length < 12) {
                            noMoreFairPlayCardsToGet = true;
                            $('#fairPlayCardInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfTheFeed + " " + MagazineTexts.TotalNumberOfFairPlayCards.replace("{0}", fairPlayCards().length));
                        }

                        gettingFairPlayCards = false;
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingFairPlayCards = false;
                    }
                });
            },            

            clearObservables = function () {
                pictures([]);
                videos([]);
                highlights([]);
                replays([]);
                liveGames([]);
                plannedGames([]);
                weeklyHighlights([]);
                games([]);
                comingGames([]);
                pastGames([]);
                goalieStatisticRows([]);
                scoringStatisticRows([]);
                scoringStatisticPlayoffRows([]);
                playerStatisticRows([]);
                playOffSeries([]);
                fairPlayCards([]);
                teams([]);
                blurbsInFeed([]);                                                                

                currentGoalieStatisticsTab('SavePercentage');
                currentFootballPlayerStatisticsTab('GoalsScored');
                currentPlayerStatisticsTab('Points');
                currentPlayerPlayoffStatisticsTab('Points');

                goalieStatisticsColumnId = 3;
                playerStatisticsColumnId = 3;
                playerStatisticsPlayoffColumnId = 3;
                footballPlayerStatisticsColumnId = 0;

                leagueHeader('');
                initLeagueModel('');
                leagueInfo('');
                initLeagueSitePicsAndVideosModel('');
                initPlayPage('');                

                noMorePicturesToGet = false;
                noMoreVideosToGet = false;
                noMoreHighlightsToGet = false;
                noMoreReplaysToGet = false;
                noMorePlannedGamesToGet = false;
                noMoreLiveGamesToGet = false;
                noMoreGamesToGetPast = false;
                noMoreGamesToGetComing = false;
                noMorePagesToGet = false;
                noMoreFairPlayCardsToGet = false;

                noMoreWeeklyHighlightsToGet(false);                

                $('.leaguesite-subview .beforeSubViewLoaded').show();
                $('.leaguesite-subview .afterSubViewLoaded').hide();
            },

            cleanup = function () {
                lastScrollPosition = $(window).scrollTop();

                gettingPages = false;
                gettingFairPlayCards = false;                
                gettingGamesPast(false);
                gettingGamesComing(false);
                gettingPictures(false);
                gettingVideos(false);                
                gettingHighlights(false);
                gettingReplays(false);
                gettingLiveGames(false);
                gettingPlannedGames(false);
                gettingMoreHighlights(false);

                // Dispose all videos
                $("#leaguesite-view video").each(function () {
                    var myPlayer = videojs.getPlayer(this);

                    if (myPlayer)
                        myPlayer.dispose();
                });

                $(window).unbind('scroll', infiniteScrolling);
            },

            getPagesFromServer = function () {
                var lastPageInCache, lastGameTime;

                gettingPages = true;

                //Loop through the current pages in the feed                
                var lastThreeBlurbTypes = [];

                if (blurbsInFeed().length !== 0) {
                    lastPageInCache = blurbsInFeed()[blurbsInFeed().length - 1];
                    gameIds = [];

                    for (var i = 0; i < blurbsInFeed().length; i++) {
                        //Exclude all blurbs that does not have a gameID (some 90X like "unpaid season ticket")
                        var _gameID = blurbsInFeed()[i].GameID;
                        if (_.isNumber(_gameID)) gameIds.push(_gameID);
                    }

                    if (blurbsInFeed().length > 2) {
                        for (i = blurbsInFeed().length - 3; i < blurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else if (blurbsInFeed().length > 1) {
                        for (i = 0; i < blurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else {
                        lastThreeBlurbTypes.push(blurbsInFeed()[0].MagazineBlurbTypeID);
                    }

                    //lastGameTime = lastPageInCache.GameHeaderInfo.GameTime;
                    lastGameTime = lastPageInCache.TimeStamp;
                }
                else {
                    blurbsInFeed.removeAll();
                    gameIds = null;
                    lastGameTime = new Date();
                }

                //Get the next three pages from the server
                datamanager.GetLeagueMagazineBlurbs(leagueId, moment(lastGameTime).utc().format('YYYY-MM-DD HH:mm:ss.SSS'), lastThreeBlurbTypes, gameIds)
                    .then(function (json) {
                        styleBlurbs(json);

                        var underlayingArray = blurbsInFeed();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        blurbsInFeed.valueHasMutated();
                        gettingPages = false;

                        hidePreloader();
                        subViewLoaded();

                        if (json.length < 3 || blurbsInFeed().length === 0) {
                            noMorePagesToGet = true;
                            $('#leagueMagazineInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfYourFeed + " " + MagazineTexts.TotalNumberOfPages.replace("{0}", blurbsInFeed().length));
                        }
                    })
                    .fail(function (error) {
                        gettingPages = false;

                        subViewLoaded();
                    });

            },            

            infiniteScrolling = function () {
                switch (currentTab()) {
                    case 'magazine': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && blurbsInFeed().length !== 0) {
                            if (!gettingPages && !noMorePagesToGet) {
                                $('#leagueMagazineInfiniteScrollStatus').html(MagazineTexts.GettingMorePages);

                                getPagesFromServer();
                            }
                        }
                        break;
                    }                    
                    case 'pictures': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && pictures().length !== 0) {
                            if (!gettingPictures() && !noMorePicturesToGet) {
                                getLeagueSitePictures();
                            }
                        }

                        break;
                    }
                    case 'videos': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && videos().length !== 0) {
                            if (!gettingVideos() && !noMoreVideosToGet) {
                                getLeagueSiteVideos();
                            }
                        }

                        break;
                    }
                    case 'planned': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && plannedGames().length !== 0) {
                            if (!gettingPlannedGames() && !noMorePlannedGamesToGet) {
                                getPlannedGames();
                            }
                        }

                        break;
                    }
                    case 'live': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && liveGames().length !== 0) {
                            if (!gettingLiveGames() && !noMoreLiveGamesToGet) {
                                getLiveGames();
                            }
                        }

                        break;
                    }
                    case 'highlights': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && highlights().length !== 0) {
                            if (!gettingHighlights() && !noMoreHighlightsToGet) {
                                getHighlights();                                
                            }
                        }

                        break;
                    }
                    case 'replays': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && replays().length !== 0) {
                            if (!gettingReplays() && !noMoreReplaysToGet) {
                                getReplays();
                            }
                        }
                        break;
                    }    

                    case 'weeklyhighlights': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && weeklyHighlights().length !== 0) {
                            if (!gettingMoreHighlights() && !noMoreWeeklyHighlightsToGet()) {
                                getLeagueSiteHighlights();
                            }
                        }

                        break;
                    }
                    case 'fixtures': {
                        if (currentActiveTabId === 1) {
                            if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && comingGames().length !== 0) {
                                if (!gettingGamesComing() && !noMoreGamesToGetComing) {
                                    getGames(1);
                                }
                            }
                        } else {
                            if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && pastGames().length !== 0) {
                                if (!gettingGamesPast() && !noMoreGamesToGetPast) {
                                    getGames(2);
                                }
                            }
                        }
                        break;
                    }
                    case 'fairplaycard': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && fairPlayCards().length !== 0) {
                            if (!gettingFairPlayCards && !noMoreFairPlayCardsToGet) {
                                if (searchMode)
                                    searchCards();
                                else
                                    getFairPlayCards();
                            }
                        }
                        break;
                    }
                }
            },

            removePreloader = function (subviewname) {
                $('#' + subviewname + ' .preloader').hide();
                $('#' + subviewname + ' .afterloaded').show();
            },

            navigateToTeamView = function (selectedTeam) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.team + '/' + selectedTeam.TeamID;
                    },
                    toClick: function () {
                        if (selectedTeam.IsSportswikTeam) {
                            if (memberIsLoggedIn()) {
                                router.navigateTo(config.hashes.team + '/' + selectedTeam.TeamID);
                            } else {
                                router.navigateTo(config.hashes.team + '/' + selectedTeam.TeamID);
                            }

                        } else {
                            // Allow navigation if member is sportswik-admin
                            if (memberIsLoggedIn() && shell.currentMember.IsSportswikAdmin) {
                                router.navigateTo(config.hashes.team + '/' + selectedTeam.TeamID);
                            } else {
                                alert(teamAdminTexts.TeamMissingTeamPage);
                            }
                        }

                    }
                };
                return navigationItem;
            },

            navigateToTeam = function (selectedTeam) {
                if (memberIsLoggedIn()) {
                    router.navigateTo(config.hashes.team + '/' + selectedTeam.TeamID);
                } else {
                    router.navigateTo(config.hashes.team + '/' + selectedTeam.TeamID);
                }
            },

            navigateToStatisticRow = function (item) {
                switch (item.DeepLinkTypeID) {
                    case 5: // Team
                        if (memberIsLoggedIn()) {
                            router.navigateTo(config.hashes.team + '/' + item.DeepLinkItemID);
                        } else {
                            router.navigateTo(config.hashes.team + '/' + item.DeepLinkItemID);
                        }
                        break;
                }
            },

            navigateToWeeklyHighlights = function () {
                router.navigateTo(config.hashes.leaguesite + '/' + leagueId + '/weeklyhighlights');
            },

            navigateToDeepLink = function (data, event) {
                navigation.navigateToDeepLink(data);
            },

            searchFairPlayCards = function () {
                fairPlayCards([]);

                noMoreFairPlayCardsToGet = false;
                searchMode = true;
                $('#fairPlayCardInfiniteScrollStatus').html(MagazineTexts.GettingMoreContent);

                searchCards();

                return true;
            },

            searchCards = function () {
                gettingFairPlayCards = true;

                var lastFairPlayCardId = 0;

                if (fairPlayCards().length !== 0) {
                    var lastPageInCache = fairPlayCards()[fairPlayCards().length - 1];

                    lastFairPlayCardId = lastPageInCache.FairPlayCardID;
                }

                var fairPlayCardSearchString = $('#fairPlayCardLeagueSearchField').val();

                if (fairPlayCardSearchString.length === 0) {
                    searchMode = false;
                    fairPlayCardSearchString = '0';
                }

                datamanager.searchLeagueFairPlayCards(leagueId, fairPlayCardSearchString, 12, lastFairPlayCardId, {
                    success: function (model) {
                        var underlayingArray = fairPlayCards();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        if (model.length < 12) {
                            noMoreFairPlayCardsToGet = true;
                            $('#fairPlayCardInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfTheFeed + " " + MagazineTexts.TotalNumberOfFairPlayCards.replace("{0}", fairPlayCards().length));
                        }

                        fairPlayCards.valueHasMutated();

                        gettingFairPlayCards = false;
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingFairPlayCards = false;
                    }
                });
            },

            navigateToLeagueOrganizerSiteRegister = function () {
                return {
                    getHrefString: function () {
                        if (leagueHeader().LeagueOrganizerID > 0) {
                            return config.hashes.leagueorganizersite + '/' + leagueHeader().LeagueOrganizerID + '/' + 'register';
                        } else {
                            return "";
                        }
                    },
                    toClick: function () {
                        if (leagueHeader().LeagueOrganizerID > 0) {
                            router.navigateTo(config.hashes.leagueorganizersite + '/' + leagueHeader().LeagueOrganizerID + '/' + 'register');
                        } else {
                            return "";
                        }
                    }
                };
            },

            navigateToFairPlayCard = function (fairPlayCard) {
                router.navigateTo(config.hashes.magazinegameview + '/' + fairPlayCard.GameID);
            },

            navigateToLeagueOrganizerSite = function () {
                navigationItem = {
                    getHrefString: function () {
                        if (leagueHeader().LeagueOrganizerID > 0) {
                            return config.hashes.leagueorganizersite + '/' + leagueHeader().LeagueOrganizerID;
                        } else {
                            return "";
                        }

                    },
                    toClick: function () {
                        if (leagueHeader().LeagueOrganizerID > 0) {
                            if (memberIsLoggedIn()) {
                                router.navigateTo(config.hashes.leagueorganizersite + '/' + leagueHeader().LeagueOrganizerID);
                            } else {
                                router.navigateTo(config.hashes.leagueorganizersite + '/' + leagueHeader().LeagueOrganizerID);
                            }
                        } else {
                            return "";
                        }


                    }
                };
                return navigationItem;
            },

            navigateToLeagueHome = function () {
                return createLeagueSiteNavigationItem('start');
            },

            navigateToLeagueSiteMagazine = function () {
                return createLeagueSiteNavigationItem('magazine');
            },

            navigateToLeagueSiteTeams = function () {
                return createLeagueSiteNavigationItem('teams');
            },

            navigateToLeagueSiteFixtures = function () {
                return createLeagueSiteNavigationItem('fixtures');
            },

            navigateToLeagueSitePlayoff = function () {
                return createLeagueSiteNavigationItem('playoff');
            },

            navigateToLeagueSiteTable = function () {
                return createLeagueSiteNavigationItem('table');
            },            

            navigateToLeagueSitePlay = function () {
                return createLeagueSiteNavigationItem('play');
            },

            navigateToLeagueSitePictures = function () {
                return createLeagueSiteNavigationItem('pictures');
            },

            navigateToLeagueSiteVideos = function () {
                return createLeagueSiteNavigationItem('videos');
            },

            navigateToLeagueSiteFairPlayCards = function () {
                return createLeagueSiteNavigationItem('fairplaycard');
            },

            navigateToLeagueSiteStatistics = function () {
                return createLeagueSiteNavigationItem('statistics');
            },

            navigateToLeagueSiteAdmin = function () {
                return createLeagueSiteNavigationItem('admin');
            },

            toggleMoreItemList = function () {
                $('.moreMenuItemsList').toggleClass('hiddenOnWideDisplay');
            },

            followTeam = function (data) {
                router.navigateTo(config.hashes.team + '/' + data.TeamID);
            },

            createLeagueSiteNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.leaguesite + '/' + leagueId + '/' + endPath;
                    },
                    toClick: function () {
                        $('#leagueTopMenu ul').addClass('hiddenOnNarrow');

                        router.navigateTo(config.hashes.leaguesite + '/' + leagueId + '/' + endPath);
                    }
                };
            },

            navigateToLeague = function (data) {
                if (memberIsLoggedIn())
                    router.navigateTo(config.hashes.leaguesite + '/' + leagueId);
                else
                    router.navigateTo(config.hashes.leaguesite + '/' + leagueId);

            },


            navigateToMagazineGameView = function (item) {
                var navigationItem;

                if (item.GameID !== 0) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.magazinegameview + '/' + item.GameID;
                        },
                        toClick: function () {
                            magazinegameview.setGameHeaderInfo(item.GameHeaderInfo);
                            router.navigateTo(config.hashes.magazinegameview + '/' + item.GameID);
                        }
                    };
                }
                else if (item.MagazineBlurbTypeID === 123) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.leaguesite + '/' + leagueId + '/weeklyhighlights';
                        },
                        toClick: function () {
                            router.navigateTo(config.hashes.leaguesite + '/' + leagueId + '/weeklyhighlights');
                        }
                    };
                }
                else {
                    navigationItem = {
                        getHrefString: function () {
                            return "";
                        },
                        toClick: function () {
                        }
                    };
                }

                return navigationItem;
            },


            navigateToPicture = function (picture) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.livedetails + '/' + picture.GameID + '/' + picture.PictureID + '/2';
                    },
                    toClick: function () {
                        if (memberIsLoggedIn()) {
                            router.navigateTo(config.hashes.livedetails + '/' + picture.GameID + '/' + picture.PictureID + '/2');
                        } else {
                            alert(MemberTexts.SignUpRequired);
                        }
                    }
                };
                return navigationItem;
            },

            navigateToVideo = function (video) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.livedetails + '/' + video.GameID + '/' + video.VideoID + '/5';
                    },
                    toClick: function () {
                        if (memberIsLoggedIn()) {
                            router.navigateTo(config.hashes.livedetails + '/' + video.GameID + '/' + video.VideoID + '/5');
                        } else {
                            alert(MemberTexts.SignUpRequired);
                        }

                    }
                };
                return navigationItem;
            },

            navigateToHighlight = function (item) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.leaguesite + '/' + leagueId + '/showvideo/' + item.VideoID;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.leaguesite + '/' + leagueId + '/showvideo/' + item.VideoID);
                    }
                };
                return navigationItem;
            },

            styleBlurbs = function (json) {
                for (var i = 0; i < json.length; i++) {
                    json[i].isHalfPageLeft = false;
                    json[i].isHalfPageRight = false;
                }

                for (i = 0; i < json.length - 1; i++) {
                    if (_.contains(blurbsSuitableForHalfPage, json[i].MagazineBlurbTypeID) && _.contains(blurbsSuitableForHalfPage, json[i + 1].MagazineBlurbTypeID)) {
                        json[i].isHalfPageLeft = true;
                        json[i + 1].isHalfPageRight = true;

                        i = i + 1;

                        if (i > json.length - 2) {
                            break;
                        }
                    }
                }
            },

            hidePreloader = function () {
                $('#leaguesite-view-preloader').hide();
                $('#leaguesite-view-afterloaded').show();
            },

            showPreloader = function () {
                $('#leaguesite-view-preloader').show();
                $('#leaguesite-view-afterloaded').hide();
            },

            toggleComingLeagueGames = function () {
                currentActiveTabId = 1;
                window.scrollTo(0, 0);
                $('#leagueSiteToggleComingLeagueGames').addClass('active');
                $('#leagueSiteTogglePastLeagueGames').removeClass('active');

                $('#leagueSiteComingLeagueGamesList').show();
                $('#leagueSitePastLeagueGamesList').hide();
            },

            togglePastLeagueGames = function () {
                currentActiveTabId = 2;
                window.scrollTo(0, 0);
                $('#leagueSiteToggleComingLeagueGames').removeClass('active');
                $('#leagueSiteTogglePastLeagueGames').addClass('active');

                $('#leagueSiteComingLeagueGamesList').hide();
                $('#leagueSitePastLeagueGamesList').show();
            },

            togglePlayOffGames = function (data, event) {
                window.scrollTo(0, 0);

                $('#leaguesite-playoff .btn-group button').removeClass('active');
                $(event.target).addClass('active');

                $('#leagueSitePlayOffGames').show();
                $('#leagueSitePlayOffStatistics').hide();
            },

            togglePlayOffStatistics = function (data, event) {
                window.scrollTo(0, 0);

                $('#leaguesite-playoff .btn-group button').removeClass('active');
                $(event.target).addClass('active');

                $('#leagueSitePlayOffGames').hide();
                $('#leagueSitePlayOffStatistics').show();

                if (scoringStatisticPlayoffRows().length === 0) {
                    datamanager.getPlayerStatisticsForLeaguePlayOff(leagueId, 0, 25, 3, {
                        success: function (model) {
                            scoringStatisticPlayoffRows([]);
                            scoringStatisticsPlayoffPageId = 1;

                            var underlayingArray = scoringStatisticPlayoffRows();

                            for (var i = 0; i < model.length; i++) {
                                underlayingArray.push(model[i]);
                            }

                            scoringStatisticPlayoffRows.valueHasMutated();
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
            },

            playVideo = function (item, event) {
                var elem = $(event.target).closest('.gameMediaRoot');

                elem.find('.streamSubscriptionInfo').hide();

                //if (item.SocialEntityID && item.SocialEntityID > 0) {
                //    datamanager.insertSocialEntityView(item.SocialEntityID);
                //}

                if (item.PartnerFeaturePrerolls.length > 0) {
                    // If we already have a running timer, stop it and clear stuff
                    if (billboardTimer !== null) {
                        clearTimeout(billboardTimer);
                        billboardTimer = null;

                        mediaRootTarget.find('.video-preroll').fadeOut(300);
                        mediaRootTarget.find('.overlay-container').show();
                        mediaRootTarget.find('.swVideoPlayer').hide();
                    }

                    billboardList = [];

                    // Push all the billboards into a temp-list
                    for (var i = 0; i < item.PartnerFeaturePrerolls.length; i++) {
                        billboardList.push(item.PartnerFeaturePrerolls[i]);
                    }

                    // Save reference to root target
                    mediaRootTarget = $(event.target).closest('.gameMediaRoot');
                    mediaRootTarget.find('.video-preroll').fadeIn(300);

                    currentPreRoll(billboardList[0]);

                    if (billboardList[0].PartnerFeatureID > 0) {
                        datamanager.trackPartnerFeatureView(billboardList[0].PartnerFeatureID, billboardList[0].PartnerFeaturePlacementID, 0, billboardList[0].PartnerFeatureEntityID, 2);
                    }

                    runTimer(billboardList[0].DisplayTime * 1000);
                } else {
                    elem.find('.overlay-container').hide();
                    elem.find('.swVideoPlayer').show();
                    elem.find('.vjs-tech').show();
                    elem.find('.vjs-tech').get(0).play();
                }

                event.preventDefault();
                event.stopPropagation();
            },

            getMoreGames = function () {
                switch (currentActiveTabId) {
                    case 1:
                        {
                            if (!gettingGamesComing() && !noMoreGamesToGetComing) {
                                getGames(1);
                            }
                        }
                        break;
                    case 2:
                        {
                            if (!gettingGamesPast() && !noMoreGamesToGetPast) {
                                getGames(2);
                            }
                        }
                        break;
                    default:
                        break;
                }
            },

            getMorePlayerStatistics = function () {
                datamanager.getPlayerStatisticsForLeague(leagueId, scoringStatisticsPageId, 25, playerStatisticsColumnId, {
                    success: function (model) {
                        scoringStatisticsPageId = scoringStatisticsPageId + 1;

                        var underlayingArray = scoringStatisticRows();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        scoringStatisticRows.valueHasMutated();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            getMorePlayerPlayoffStatistics = function () {
                datamanager.getPlayerStatisticsForLeaguePlayOff(leagueId, scoringStatisticsPlayoffPageId, 25, playerStatisticsPlayoffColumnId, {
                    success: function (model) {
                        scoringStatisticsPlayoffPageId = scoringStatisticsPlayoffPageId + 1;

                        var underlayingArray = scoringStatisticPlayoffRows();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        scoringStatisticPlayoffRows.valueHasMutated();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            getMoreFootballPlayerStatistics = function () {
                datamanager.getFootballPlayerStatisticsForLeague(leagueId, playerStatisticsPageId, 25, footballPlayerStatisticsColumnId, {
                    success: function (model) {
                        playerStatisticsPageId = playerStatisticsPageId + 1;

                        var underlayingArray = playerStatisticRows();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        playerStatisticRows.valueHasMutated();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            getMoreGoalieStatistics = function () {
                datamanager.getGoalieStatisticsForLeague(leagueId, goalieStatisticsPageId, 25, goalieStatisticsColumnId, {
                    success: function (model) {
                        goalieStatisticsPageId = goalieStatisticsPageId + 1;

                        var underlayingArray = goalieStatisticRows();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        goalieStatisticRows.valueHasMutated();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            selectGoalieStatisticsColumn = function (col) {
                var oldColumnId = goalieStatisticsColumnId;

                switch (col) {
                    case 'GamesPlayed':
                        goalieStatisticsColumnId = 0;
                        break;
                    case 'GoalsAgainst':
                        goalieStatisticsColumnId = 1;
                        break;
                    case 'ShotsAgainst':
                        goalieStatisticsColumnId = 2;
                        break;
                    case 'SavePercentage':
                        goalieStatisticsColumnId = 3;
                        break;
                }

                if (oldColumnId !== goalieStatisticsColumnId) {
                    datamanager.initGoalieStatisticsForLeague(leagueId, goalieStatisticsColumnId, {
                        success: function (model) {
                            goalieStatisticRows([]);

                            goalieStatisticsPageId = 1;

                            var underlayingArray = goalieStatisticRows();

                            for (var i = 0; i < model.GoalieStatistics.length; i++) {
                                underlayingArray.push(model.GoalieStatistics[i]);
                            }

                            goalieStatisticRows.valueHasMutated();
                            currentGoalieStatisticsTab(col);
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            selectFootballPlayerStatisticsColumn = function (col) {
                var oldColumnId = footballPlayerStatisticsColumnId;

                switch (col) {
                    case 'GoalsScored': { footballPlayerStatisticsColumnId = 0; break; }
                    case 'Assists': { footballPlayerStatisticsColumnId = 1; break; }
                    case 'GamesPlayed': { footballPlayerStatisticsColumnId = 2; break; }
                    case 'Bookings': { footballPlayerStatisticsColumnId = 3; break; }
                    case 'RedCards': { footballPlayerStatisticsColumnId = 4; break; }
                    case 'GoalsPenalty': { footballPlayerStatisticsColumnId = 5; break; }
                    case 'StartingGames': { footballPlayerStatisticsColumnId = 6; break; }
                    case 'SubstitutionsIn': { footballPlayerStatisticsColumnId = 7; break; }
                    case 'SubstitutionsOut': { footballPlayerStatisticsColumnId = 8; break; }
                }

                if (oldColumnId !== footballPlayerStatisticsColumnId) {
                    datamanager.initFootballPlayerStatisticsForLeague(leagueId, footballPlayerStatisticsColumnId, {
                        success: function (model) {
                            playerStatisticRows([]);
                            playerStatisticsPageId = 1;

                            var underlayingArray = playerStatisticRows();

                            for (var i = 0; i < model.PlayerStatistics.length; i++) {
                                underlayingArray.push(model.PlayerStatistics[i]);
                            }

                            playerStatisticRows.valueHasMutated();
                            currentFootballPlayerStatisticsTab(col);
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            selectPlayerStatisticsColumn = function (col) {
                var oldColumnId = playerStatisticsColumnId;

                switch (col) {
                    case 'GamesPlayed': { playerStatisticsColumnId = 0; break; }
                    case 'GoalsScored': { playerStatisticsColumnId = 1; break; }
                    case 'Assist': { playerStatisticsColumnId = 2; break; }
                    case 'Points': { playerStatisticsColumnId = 3; break; }
                    case 'PenaltyMinutes': { playerStatisticsColumnId = 4; break; }
                    case 'GoalAverage': { playerStatisticsColumnId = 5; break; }
                    case 'PointAverage': { playerStatisticsColumnId = 6; break; }
                }

                if (oldColumnId !== playerStatisticsColumnId) {
                    datamanager.initPlayerStatisticsForLeague(leagueId, playerStatisticsColumnId, {
                        success: function (model) {
                            scoringStatisticRows([]);

                            scoringStatisticsPageId = 1;

                            var underlayingArray = scoringStatisticRows();

                            for (var i = 0; i < model.PlayerStatistics.length; i++) {
                                underlayingArray.push(model.PlayerStatistics[i]);
                            }

                            scoringStatisticRows.valueHasMutated();
                            currentPlayerStatisticsTab(col);
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            selectPlayerStatisticsPlayoffColumn = function (col) {
                var oldColumnId = playerStatisticsPlayoffColumnId;

                switch (col) {
                    case 'GamesPlayed': { playerStatisticsPlayoffColumnId = 0; break; }
                    case 'GoalsScored': { playerStatisticsPlayoffColumnId = 1; break; }
                    case 'Assist': { playerStatisticsPlayoffColumnId = 2; break; }
                    case 'Points': { playerStatisticsPlayoffColumnId = 3; break; }
                    case 'PenaltyMinutes': { playerStatisticsPlayoffColumnId = 4; break; }
                    case 'GoalAverage': { playerStatisticsPlayoffColumnId = 5; break; }
                    case 'PointAverage': { playerStatisticsPlayoffColumnId = 6; break;
                    }
                }

                if (oldColumnId !== playerStatisticsPlayoffColumnId) {
                    datamanager.getPlayerStatisticsForLeaguePlayOff(leagueId, 0, 25, playerStatisticsPlayoffColumnId, {
                        success: function (model) {
                            scoringStatisticPlayoffRows([]);
                            scoringStatisticsPlayoffPageId = 1;

                            var underlayingArray = scoringStatisticPlayoffRows();

                            for (var i = 0; i < model.length; i++) {
                                underlayingArray.push(model[i]);
                            }

                            scoringStatisticPlayoffRows.valueHasMutated();    
                            currentPlayerPlayoffStatisticsTab(col);
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            application = ko.computed(function () {
                return swconstants.applicationId;
            }),

            followTheLeague = function (data, event) {

                if (!_.isObject(shell.currentMember)) {
                    window.location.href = '/Account/Login/';
                    return;
                }

                if ($(event.target).hasClass('btn-gray-inverted'))
                    return;

                shell.showProgressIndicator(MemberTexts.Following);

                datamanager.followLeague(leagueId, {
                    success: function (json) {
                        shell.hideProgressIndicator();

                        memberFollowsLeague(true);
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    }
                });
            },

            unfollowTheLeague = function (data, event) {
                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.unfollowLeague(leagueId, {
                    success: function (json) {
                        shell.hideProgressIndicator();

                        memberFollowsLeague(false);
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    }
                });
            },

            getGames = function (currentListid) {
                switch (currentListid) {
                    case 1:
                        {
                            gettingGamesComing(true);

                            var gameId = comingGames().length ? comingGames()[comingGames().length - 1].GameID : 0;

                            datamanager.getComingLeagueGames(leagueId, gameId, {
                                success: function (model) {
                                    gettingGamesComing(false);

                                    if (model.length !== 0) {
                                        var underlayingArray = comingGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        comingGames.valueHasMutated();
                                    }
                                    else {
                                        noMoreGamesToGetComing = true;
                                    }
                                },
                                error: function (response) {
                                    gettingGamesComing(false);
                                }
                            });
                        }
                        break;
                    case 2:
                        {
                            gettingGamesPast(true);

                            var pastGameId = pastGames().length ? pastGames()[pastGames().length - 1].GameID : 0;

                            datamanager.getPreviousLeagueGames(leagueId, pastGameId, {
                                success: function (model) {
                                    gettingGamesPast(false);

                                    if (model.length !== 0) {
                                        var underlayingArray = pastGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        pastGames.valueHasMutated();
                                    }
                                    else {
                                        noMoreGamesToGetPast = true;
                                    }
                                },
                                error: function (response) {
                                    gettingGamesPast(false);
                                }
                            });
                        }
                        break;
                }
            },

            generateLeagueHighlights = function () {
                shell.showProgressIndicator("Påbörjar generering...");

                datamanager.generateLeagueHighlights(leagueId, {
                    success: function (json) {
                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();
                    }
                });
            },

            memberIsSportswikAdmin = ko.computed(function () {
                if (_.isObject(shell.currentMember)) {
                    return shell.currentMember.IsSportswikAdmin;
                }

                return false;
            }),

            updateLeagueTable = function () {
                shell.showProgressIndicator("Updating...");

                datamanager.updateLeagueTable(leagueId, {
                    success: function () {
                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();
                    }
                });
            },

            updatePlayerStatistics = function () {
                shell.showProgressIndicator("Calculating...");

                datamanager.calculatePlayerStatistics(leagueId, {
                    success: function () {
                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();
                    }
                });
            },

            updateGoalkeeperStatistics = function () {
                shell.showProgressIndicator("Calculating...");

                datamanager.calculateGoalkeeperStatistics(leagueId, {
                    success: function () {
                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();
                    }
                });
            },

            clearCache = function () {
                shell.showProgressIndicator("Clearing cache...");

                datamanager.clearLeagueCache(leagueId, {
                    success: function () {
                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();
                    }
                });
            },

            showTeamFeedDetails = function (data) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.teamfeeddetails + '/' + data.TeamID + '/' + data.TeamFeedItemID + '/' + data.TeamFeedItemTypeID;
                    },
                    toClick: function () {
                        if (memberIsLoggedIn())
                            router.navigateTo(config.hashes.teamfeeddetails + '/' + data.TeamID + '/' + data.TeamFeedItemID + '/' + data.TeamFeedItemTypeID);
                    }
                };
                return navigationItem;
            },            

            navigateToGame = function (game, callback) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.magazinegameview + '/' + game.GameID;
                    },
                    toClick: function () {
                        magazinegameview.setGameHeaderInfo(game);
                        router.navigateTo(config.hashes.magazinegameview + '/' + game.GameID);
                    }
                };
                return navigationItem;
            };
    
        return {
            activate: activate,
            activatesubview: activatesubview,
            leagueId: leagueId,
            breadCrumb: breadCrumb, 
            cleanup: cleanup,
            leagueHeader: leagueHeader,
            initLeagueModel: initLeagueModel,
            leagueInfo: leagueInfo,
            initLeagueSitePicsAndVideosModel: initLeagueSitePicsAndVideosModel,
            initPlayPage: initPlayPage,
            teams: teams,
            games: games,            
            playOffSeries: playOffSeries,
            leagueTable: leagueTable,
            leagueTableCompact: leagueTableCompact,
            comingGames: comingGames,
            pastGames: pastGames,
            fairPlayCards: fairPlayCards,
            scoringStatisticRows: scoringStatisticRows,
            scoringStatisticPlayoffRows: scoringStatisticPlayoffRows,
            playerStatisticRows: playerStatisticRows,
            goalieStatisticRows: goalieStatisticRows,
            currentPreRoll: currentPreRoll,
            currentHighlightVideo: currentHighlightVideo,

            currentPlayerStatisticsTab: currentPlayerStatisticsTab,            
            currentPlayerPlayoffStatisticsTab: currentPlayerPlayoffStatisticsTab,
            searchFairPlayCards: searchFairPlayCards,
            scoreboardStatisticsBlurb: scoreboardStatisticsBlurb,

            toggleComingLeagueGames: toggleComingLeagueGames,
            togglePastLeagueGames: togglePastLeagueGames,
            togglePlayOffGames: togglePlayOffGames,
            togglePlayOffStatistics: togglePlayOffStatistics,


            playVideo: playVideo,
            blurbsInFeed: blurbsInFeed,            

            followTheLeague: followTheLeague,
            unfollowTheLeague: unfollowTheLeague,
            memberFollowsLeague: memberFollowsLeague,

            gettingPictures: gettingPictures,
            gettingVideos: gettingVideos,
            gettingHighlights: gettingHighlights,
            gettingReplays: gettingReplays,
            gettingLiveGames: gettingLiveGames,
            gettingPlannedGames: gettingPlannedGames,
            gettingGamesComing: gettingGamesComing,            
            gettingGamesPast: gettingGamesPast,                                    
            gettingMoreHighlights: gettingMoreHighlights,

            noMoreWeeklyHighlightsToGet: noMoreWeeklyHighlightsToGet,            

            pictures: pictures,
            videos: videos,
            highlights: highlights,
            replays: replays,
            liveGames: liveGames,
            plannedGames: plannedGames,

            weeklyHighlights: weeklyHighlights,
            followTeam: followTeam,            

            application: application,
            highlight: highlight,

            navigateToLeagueOrganizerSite: navigateToLeagueOrganizerSite,            
            navigateToLeague: navigateToLeague,
            navigateToLeagueHome: navigateToLeagueHome,
            navigateToLeagueSiteMagazine: navigateToLeagueSiteMagazine,
            navigateToLeagueSiteTeams: navigateToLeagueSiteTeams,
            navigateToLeagueSiteFixtures: navigateToLeagueSiteFixtures,
            navigateToLeagueSitePlayoff: navigateToLeagueSitePlayoff,
            navigateToLeagueSitePlay: navigateToLeagueSitePlay,
            navigateToLeagueSiteTable: navigateToLeagueSiteTable,
            navigateToLeagueSitePictures: navigateToLeagueSitePictures,
            navigateToLeagueSiteVideos: navigateToLeagueSiteVideos,            
            navigateToLeagueSiteFairPlayCards: navigateToLeagueSiteFairPlayCards,
            navigateToLeagueSiteStatistics: navigateToLeagueSiteStatistics,
            navigateToLeagueSiteAdmin: navigateToLeagueSiteAdmin,
            
            navigateToGame: navigateToGame,            
            navigateToMagazineGameView: navigateToMagazineGameView,
            navigateToPicture: navigateToPicture,
            navigateToVideo: navigateToVideo,
            navigateToHighlight: navigateToHighlight,
            navigateToTeamView: navigateToTeamView,          
            navigateToTeam: navigateToTeam,
            navigateToStatisticRow: navigateToStatisticRow,
            navigateToWeeklyHighlights: navigateToWeeklyHighlights,

            navigateToDeepLink: navigateToDeepLink,

            navigateToLeagueOrganizerSiteRegister: navigateToLeagueOrganizerSiteRegister,
            navigateToFairPlayCard: navigateToFairPlayCard,

            getMoreGames: getMoreGames,
            getMorePlayerStatistics: getMorePlayerStatistics,
            getMorePlayerPlayoffStatistics: getMorePlayerPlayoffStatistics,
            getMoreFootballPlayerStatistics: getMoreFootballPlayerStatistics,
            getMoreGoalieStatistics: getMoreGoalieStatistics,
            selectGoalieStatisticsColumn: selectGoalieStatisticsColumn,
            selectFootballPlayerStatisticsColumn: selectFootballPlayerStatisticsColumn,
            selectPlayerStatisticsColumn: selectPlayerStatisticsColumn,
            selectPlayerStatisticsPlayoffColumn: selectPlayerStatisticsPlayoffColumn,
            showTeamFeedDetails: showTeamFeedDetails,
            toggleMoreItemList: toggleMoreItemList,
            toggleScoringLeague: toggleScoringLeague,
            togglePlayerStatistics: togglePlayerStatistics,
            toggleGoalieLeague: toggleGoalieLeague,
            currentGoalieStatisticsTab: currentGoalieStatisticsTab,
            currentFootballPlayerStatisticsTab: currentFootballPlayerStatisticsTab,

            updateLeagueTable: updateLeagueTable,
            updatePlayerStatistics: updatePlayerStatistics,
            updateGoalkeeperStatistics: updateGoalkeeperStatistics,
            clearCache: clearCache,

            memberIsSportswikAdmin: memberIsSportswikAdmin,
            generateLeagueHighlights: generateLeagueHighlights
        };
    });;
define('viewmodels/vm.lineup',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'models/viewmodel', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, shell, viewmodel, _) {

        var teamId,
            gameId,
            gameLineUp = ko.observable(),

            formations = ko.observableArray(),
            players = ko.observableArray(),
            gamePlayers = ko.observableArray(),
            lines = ko.observableArray(),
            numberOfFormations = ko.observable(1),
            selectedFormationId = 0,
            gameLineUpId = 0,
            selectedGameLineUpPlayerId = 0,
            backgroundWidth = 690,
            backgroundHeight = 660,
            playerSize = 28,
            teamHeader = ko.observable(),
            selectedGameLineUpLine = ko.observable(0),
            sportId = ko.observable(),

            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();

                showPreloader();

                var currentView = 'start';

                $('.lineup-subview').hide();
                $('#lineup-' + currentView).show();

                teamId = Number(routeData.teamId);
                gameId = Number(routeData.gameId);

                // InitGameLineUpView 
                datamanager.initGameLineUpView(gameId, teamId, {
                    success: function (json) {
                        formations([]);                        

                        teamHeader(json.Team);

                        if (json.GameLineUpID && json.GameLineUpID > 0) {
                            gameLineUpId = json.GameLineUpID;

                            router.navigateTo(config.hashes.lineup + '/' + gameId + '/' + teamId + '/edit');
                        } else if (json.GameTeamRosterID === 0) {
                            $('#lineup-view .gameteamroster').show();
                        } else {                                                        
                            var underlayingArray = formations();

                            for (var i = 0; i < json.GameLineUpFormations.length; i++) {
                                underlayingArray.push(json.GameLineUpFormations[i]);
                            }

                            formations.valueHasMutated();

                            if (json.DefaultGameLineUpFormationID > 0) {
                                selectedFormationId = json.DefaultGameLineUpFormationID;

                                var existingItem = ko.utils.arrayFirst(formations(), function (f) {
                                    return f.GameLineUpFormationID === selectedFormationId;
                                });

                                if (existingItem)
                                    $('#lineup-view .formations-dropdown a.dropdown-toggle').text(existingItem.Name);
                            }
                        }

                        hidePreloader();
                    },
                    error: function (error) {
                        console.log(error);

                        hidePreloader();
                    }
                });
            },

            activatesubview = function (routeData, callback) {
                messenger.publish.viewModelActivated();

                showPreloader();

                var currentView = routeData.subview;

                $('.lineup-subview').hide();
                $('#lineup-' + currentView).show();

                teamId = Number(routeData.teamId);
                gameId = Number(routeData.gameId);

                switch (currentView) {
                    case 'edit':
                        // Right now we can't navigate directly to a GameLineUp with game- and teamid,
                        // need to load the GameLineUpID first
                        if (gameLineUpId === 0) {
                            datamanager.initGameLineUpView(gameId, teamId, {
                                success: function (json) {
                                    if (json.GameLineUpID && json.GameLineUpID > 0) {
                                        gameLineUpId = json.GameLineUpID;

                                        loadGameLineUp();
                                    }
                                    else {
                                        // Navigate the user to the start
                                        router.navigateTo(config.hashes.lineup + '/' + gameId + '/' + teamId);
                                    }
                                },
                                error: function (error) {
                                    console.log(error);

                                    hidePreloader();
                                }
                            });
                        } else {
                            // We already have a GameLineUpID, load the LineUp
                            loadGameLineUp();
                        }
                        break;
                }
            },

            createGameTeamRoster = function () {
                datamanager.insertGameTeamRoster(gameId, teamId, {
                    success: function (gameTeamRosterId) {
                        $('#lineup-view .gameteamroster').hide();

                        router.navigateTo(config.hashes.gameteamroster + '/' + gameTeamRosterId);
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            loadGameLineUp = function () {
                datamanager.getGameLineUp(gameId, gameLineUpId, {
                    success: function (json) {                        
                        sportId(json.Team.SportID);

                        gameLineUp(json);
                        players([]);
                        gamePlayers([]);
                        lines([]);

                        var underlayingArray = players();

                        for (var i = 0; i < json.Players.length; i++) {
                            underlayingArray.push(json.Players[i]);
                        }

                        players.valueHasMutated();

                        underlayingArray = gamePlayers();

                        for (var j = 0; j < json.GamePlayers.length; j++) {
                            underlayingArray.push(json.GamePlayers[j]);
                        }

                        gamePlayers.valueHasMutated();

                        // Loop players and set selected
                        ko.utils.arrayForEach(players(), function (item) {
                            if (item.GamePlayerID && item.GamePlayerID > 0) {
                                $("#lineup-view .gameplayer-list li").each(function (key, value) {
                                    var data = ko.contextFor(value).$data;

                                    if (Number(data.GamePlayerID) === item.GamePlayerID) {
                                        $(this).addClass("disabled");

                                        return false;
                                    }
                                });
                            }
                        });

                        underlayingArray = lines();

                        for (var k = 0; k < json.Lines.length; k++) {
                            underlayingArray.push(json.Lines[k]);
                        }

                        lines.valueHasMutated();

                        // Set the first line as selected
                        selectedGameLineUpLine(lines()[0].GameLineUpLineID);

                        hidePreloader();
                    },
                    error: function (error) {
                        console.log(error);

                        hidePreloader();
                    }
                });
            },

            createNew = function () {
                $('.lineup-subview').hide();
                $('#lineup-create').show();
            },

            insertLineUp = function () {                
                if (numberOfFormations().length === 0 ||
                    isNaN(numberOfFormations()) ||
                    numberOfFormations() < 1 ||
                    numberOfFormations() > 5) {
                    alert('Antal formationer måste vara från 1 till 5');
                    return;
                }

                if (selectedFormationId < 1) {
                    alert('Du måste välja antal spelare');
                    return;
                }

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.insertGameLineUp(gameId, teamId, selectedFormationId, numberOfFormations())
                    .then(function (json) {
                        gameLineUpId = json;

                        router.navigateTo(config.hashes.lineup + '/' + gameId + '/' + teamId + '/edit');

                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        console.log(error);

                        shell.hideProgressIndicator();

                        alert('Error');
                    });
            },

            saveLineUp = function () {
                recalculatePositions();

                var param = new viewmodel.ConnectGameLineUpPlayerToGameParameters();

                param.GameLineUpID = gameLineUpId;

                ko.utils.arrayForEach(players(), function (item) {
                    var newItem = new viewmodel.GameLineUpPlayerParameters();

                    newItem.GameLineUpPlayerID = item.GameLineUpPlayerID;
                    newItem.OffsetX = item.OffsetX;
                    newItem.OffsetY = item.OffsetY;
                    newItem.GamePlayerID = item.GamePlayerID;

                    param.GameLineUpPlayers.push(newItem);
                });

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.updateGameLineUp(param, {
                    success: function (json) {
                        shell.hideProgressIndicator();

                        if (gameLineUp().Published === false)
                            $('#lineup-view .publish').show();
                    },
                    error: function (error) {
                        console.log(error);

                        shell.hideProgressIndicator();
                    }
                });
            },

            reloadGameLineUp = function (json) {
                datamanager.getGameLineUp(gameId, gameLineUpId, {
                    success: function (model) {
                        gameLineUp(model);
                    },
                    error: function (error) {
                    }
                });
            },

            unpublishLineUp = function () {
                shell.showProgressIndicator(MiscTexts.Unpublishing);

                datamanager.publishGameLineUp(gameLineUpId, false, false)
                    .then(function (json) {
                        reloadGameLineUp();

                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            publishLineUp = function () {
                shell.showProgressIndicator(MiscTexts.Publishing);

                datamanager.publishGameLineUp(gameLineUpId, true, false)
                    .then(function (json) {
                        shell.hideProgressIndicator();

                        router.navigateTo(config.hashes.magazinegameview + '/' + gameId);
                        cleanObservables();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            publishAtGameStart = function (goToGame, data, event) {
                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.publishGameLineUp(gameLineUpId, false, true)
                    .then(function (json) {
                        if (goToGame) {
                            shell.hideProgressIndicator();

                            router.navigateTo(config.hashes.magazinegameview + '/' + gameId);
                            cleanObservables();
                        }
                        else {
                            reloadGameLineUp();

                            shell.hideProgressIndicator();
                        }


                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            cancelPublish = function () {
                $('#lineup-view .publish').hide();
            },

            deleteLineUp = function () {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Deleting);

                    datamanager.deleteLineUp(gameLineUpId, {
                        success: function (json) {
                            navigateToGame();

                            shell.hideProgressIndicator();
                        },
                        error: function (error) {
                            alert(error);

                            shell.hideProgressIndicator();
                        }
                    });
                }
            },

            navigateToGame = function () {                
                router.navigateTo(config.hashes.magazinegameview + '/' + gameId);
            },

            navigateToGameTeamRoster = function (data) {
                router.navigateTo(config.hashes.gameteamroster + '/' + data.GameTeamRosterID);
            },

            activePlayers = ko.computed(function () {
                return ko.utils.arrayFilter(players(), function (item) {
                    return selectedGameLineUpLine() === item.GameLineUpLineID;
                    //return true;
                });
            }),

            // Since the bound properties doesn't change when we drag, we need to manually calculate the positions
            recalculatePositions = function () {
                ko.utils.arrayForEach(players(), function (item) {
                    $("#lineup-view .gamelineupplayer-list li").each(function (key, value) {
                        var data = ko.contextFor(value).$data;

                        if (Number(data.GameLineUpPlayerID) === Number(item.GameLineUpPlayerID)) {
                            var pos = $(this).position();

                            item.OffsetX = (pos.left + playerSize) / backgroundWidth;
                            item.OffsetY = (pos.top + playerSize) / backgroundHeight;

                            return false;
                        }
                    });
                });
            },

            selectFormation = function (data, event) {
                selectedFormationId = data.GameLineUpFormationID;

                $(event.target).closest('.dropdown').children().first().text(data.Name);
            },

            selectPlayer = function (data, event) {
                $('.lineup-background .player').removeClass('active');

                $(event.target).closest('li').addClass('active');

                selectedGameLineUpPlayerId = data.GameLineUpPlayerID;

            },

            selectGamePlayer = function (data, event) {
                if (selectedGameLineUpPlayerId === 0)
                    return;

                var previousGamePlayerID = 0;
                var gameLineUpPlayerToClearID = 0;

                $(event.target).closest('li').addClass('disabled');

                var existingItem = ko.utils.arrayFirst(players(), function (f) {
                    return f.GameLineUpPlayerID === selectedGameLineUpPlayerId;
                });

                if (existingItem.GamePlayerID)
                    previousGamePlayerID = existingItem.GamePlayerID;


                ko.utils.arrayForEach(players(), function (item) {
                    if (item.GamePlayerID === data.GamePlayerID) {
                        gameLineUpPlayerToClearID = item.GameLineUpPlayerID;
                        return false;
                    }
                });


                if (gameLineUpPlayerToClearID > 0) {
                    var previousItem = ko.utils.arrayFirst(players(), function (f) {
                        return f.GameLineUpPlayerID === gameLineUpPlayerToClearID;
                    });

                    var itemToClear = JSON.parse(JSON.stringify(previousItem));

                    itemToClear.LastName = "";
                    itemToClear.ShirtNumber = 0;
                    itemToClear.GamePlayerID = null;
                    itemToClear.ThumbnailURL = "";
                    itemToClear.HasProfilePicture = false;

                    $("#lineup-view .gamelineupplayer-list li").each(function (key, value) {
                        var data = ko.contextFor(value).$data;

                        if (Number(data.GameLineUpPlayerID) === gameLineUpPlayerToClearID) {
                            var pos = $(this).position();

                            itemToClear.OffsetX = (pos.left + playerSize) / backgroundWidth;
                            itemToClear.OffsetY = (pos.top + playerSize) / backgroundHeight;

                            return false;
                        }
                    });

                    players.replace(previousItem, itemToClear);
                }

                // DeepCopy the item
                var item = JSON.parse(JSON.stringify(existingItem));

                item.LastName = data.LastName;
                item.ShirtNumber = data.ShirtNumber;
                item.GamePlayerID = data.GamePlayerID;
                item.ThumbnailURL = data.ThumbnailURL;
                item.HasProfilePicture = true;

                $("#lineup-view .gamelineupplayer-list li").each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    if (Number(data.GameLineUpPlayerID) === Number(item.GameLineUpPlayerID)) {
                        var pos = $(this).position();

                        var calcOffsetX = (pos.left + playerSize) / backgroundWidth;
                        var calcOffsetY = (pos.top + playerSize) / backgroundHeight;

                        item.OffsetX = calcOffsetX;
                        item.OffsetY = calcOffsetY;

                        return false;
                    }
                });

                // Replace the item
                players.replace(existingItem, item);

                // If the player was selected in the GamePlayerList, clear it
                if (previousGamePlayerID > 0 && previousGamePlayerID !== data.GamePlayerID) {
                    $("#lineup-view .gameplayer-list li").each(function (key, value) {
                        var data = ko.contextFor(value).$data;

                        if (Number(data.GamePlayerID) === previousGamePlayerID) {
                            $(this).removeClass("disabled");

                            return false;
                        }
                    });
                }

                selectedGameLineUpPlayerId = 0
            },

            selectLine = function (data, event) {
                recalculatePositions();

                selectedGameLineUpLine(data.GameLineUpLineID);
            },

            showPreloader = function () {
                $('#lineup-view .main-preloader').show();
                $('#lineup-view .main-afterloaded').hide();
            },

            hidePreloader = function () {
                $('#lineup-view .main-preloader').hide();
                $('#lineup-view .main-afterloaded').show();
            },

            cleanObservables = function () {

            },

            cleanup = function () {
                $('#lineup-view .overlay').hide();
            };

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,

            createNew: createNew,
            createGameTeamRoster: createGameTeamRoster,
            insertLineUp: insertLineUp,
            saveLineUp: saveLineUp,
            unpublishLineUp: unpublishLineUp,
            publishLineUp: publishLineUp,
            publishAtGameStart: publishAtGameStart,
            cancelPublish: cancelPublish,
            deleteLineUp: deleteLineUp,

            navigateToGame: navigateToGame,
            navigateToGameTeamRoster: navigateToGameTeamRoster,

            teamHeader: teamHeader,
            gameLineUp: gameLineUp,

            formations: formations,
            activePlayers: activePlayers,
            gamePlayers: gamePlayers,
            lines: lines,            

            numberOfFormations: numberOfFormations,
            selectedGameLineUpLine: selectedGameLineUpLine,
            sportId: sportId,

            selectFormation: selectFormation,
            selectPlayer: selectPlayer,
            selectGamePlayer: selectGamePlayer,
            selectLine: selectLine

        };
    });;
define('viewmodels/vm.livedetails',
    ['ko', 'config', 'router', 'presenter', 'helpers/sw.imagehelper', 'viewmodels/vm.shell', 'datamanager', 'models/model', 'viewmodels/vm.magazinegameview', 'viewmodels/vm.assetinfo', 'models/viewmodel', 'underscore', 'models/viewmodel.mapper'],
    function(ko, config, router, presenter, swimagehelper, shell, datamanager, model, magazinegameview, assetinfo, viewmodel, _, viewmodelmapper) {
        var selectedGame = ko.observable(),
            currentRouteData = ko.observable(),
            gameHeaderInfo = ko.observable(),
            viewIsInitialized = false,
            liveDetail = ko.observable(),
            eventToolbar = ko.observable(),
            currentPreRoll = ko.observable(),

            billboardList = [],
            mediaRootTarget = null,
            billboardTimer = null,

            activate = function (routeData, callback) {
                window.scrollTo(0, 0);

                currentRouteData(routeData);
                selectedGame(routeData.gameId);

                //If the view is not intialized (the member made a browser refresh), run init with default values and the route info
                if (viewIsInitialized === false || liveDetail !== null &&
                    (liveDetail().LiveTimelineItemTypeID === 2 || liveDetail().LiveTimelineItemTypeID === 5 || liveDetail().LiveTimelineItemTypeID === 6)) //Eller det är ett annat item än det som tidigare var här
                {
                    initialize(null, null, routeData, routeData.gameId);
                } else {
                    setupExtra(liveDetail());
                }

                //Call callback if there is one
                if (_.isFunction(callback)) {
                    callback();
                }
            },

            cleanup = function () {
                $("#livedetails-view video").each(function () {                   
                    var myPlayer = videojs.getPlayer(this);

                    if (myPlayer) {
                        myPlayer.dispose();
                    }
                        
                });

                liveDetail('');
                viewIsInitialized = false;
            },

            getPictureURL = function (picture, screenEstate) {
                return swimagehelper.getPictureURLWithSize(picture, screenEstate);
            },

            setupExtra = function (liveData) {
                // Live streams and needs some extra init
                switch (liveData.LiveTimelineItemTypeID) {
                    case 13:
                        datamanager.insertSocialEntityView(liveData.SocialEntityInfo.SocialEntityID);

                        break;
                    case 14: // Live stream                    
                        //if (liveData.LiveStreamInfo.LiveStreamStatusID === 100) {
                        //    var streamURI = liveData.LiveStreamInfo.VideoURL;
                        //    var posterFrameUrl = encodeURI(liveData.LiveStreamInfo.ThumbnailURL);
                        //    var endPosterFrameURL = encodeURI("/Content/images/live-bg-image.jpg");
                        //    var liveStreamEnded = liveTexts.LiveStreamEnded;

                        //    setTimeout(function () {
                        //        var myPlayer = WowzaPlayer.create('wowzaPlayerElement_' + liveData.LiveStreamInfo.LiveStreamID,
                        //            {
                        //                "license": "PLAY1-3UcCU-WhUBF-uakTm-A99n8-xJGeZ",
                        //                "sourceURL": encodeURI(streamURI),
                        //                "loop": false,
                        //                "stringLiveEventEnded": liveStreamEnded,
                        //                "uiShowQuickRewind": true,
                        //                "posterFrameURL": posterFrameUrl,
                        //                "endPosterFrameURL": endPosterFrameURL,
                        //                "uiPosterFrameFillMode": "fill",
                        //                "uiQuickRewindSeconds": "30"
                        //            });

                        //        myPlayer.on('play', function (event) {
                        //            datamanager.insertSocialEntityView(liveData.SocialEntityID);
                        //        });
                        //    }, 500);                            
                        //}
                        break;
                }
            },

            setupToolbar = function (livedata) {
                var toolbarConfig = {};

                // show/hide edit delete buttons
                if (canEditDetail() && livedata.LiveTimelineItemTypeID !== 3 && livedata.LiveTimelineItemTypeID !== 1) {
                    toolbarConfig.editCommand = editCmd;
                    toolbarConfig.deleteCommand = deleteCmd;
                }

                // Must have been wrong, we should be able to report even if we can't edit...
                //if (canEditDetail() && livedata.LiveTimelineItemTypeID != 3) {
                if (livedata.LiveTimelineItemTypeID !== 3) {
                    toolbarConfig.flagCommand = flagCmd;
                }

                eventToolbar(new viewmodel.EventToolbar(toolbarConfig));
            },

            // Loads data for the view and can be called when the view should be shown, or earlier to pre-load data 
            initialize = function (livedata, gameHeader, routeData, gameId, callback) {
                if (livedata === null) {
                    datamanager.getTimelineBlurb(routeData.gameId, routeData.liveTimeItemID, routeData.liveTimelineItemTypeID, {
                        success: function (json) {
                            livedata = json;
                            liveDetail(livedata);
                            setupToolbar(livedata);
                            setupExtra(livedata);
                        },
                        error: function (response) {

                        }
                    });
                } else {
                    liveDetail(livedata);
                    setupToolbar(livedata);
                }

                if (gameHeader === null) {
                    datamanager.getGameHeaderInfo(gameId, {
                        success: function (json) {
                            gameHeaderInfo(json);
                        },
                        error: function (response) {
                            //alert(response);
                        }
                    });
                }
                else {
                    gameHeaderInfo(gameHeader);
                }

                //Set variable to know that we have initalized the view
                viewIsInitialized = true;

                //Call callback if there is one
                if (_.isFunction(callback)) {
                    callback();
                }
            },

            canEditDetail = ko.computed(function () {
                //console.log(shell.currentMember.IsSportswikAdmin);
                return liveDetail() && shell.currentMember && (liveDetail().InsertMemberID === shell.currentMember.MemberID || shell.currentMember.IsSportswikAdmin);
            }),

            navigateToLeague = function (data) {
                router.navigateTo(config.hashes.leaguesite + '/' + data.LeagueID);
            },

            deleteCmd = function () {
                var r = confirm("Are you sure you want to delete this item?");
                if (r === true) {
                    switch (liveDetail().LiveTimelineItemTypeID) {
                        case 1: // EventReport
                            //alert("Not implemented!");
                            break;
                        case 2:
                            // Delete Picture
                            if (canEditDetail()) {
                                //presenter.toggleSaveActivity(true, "Deleting picture");                               
                                shell.showProgressIndicator("Deleting discussionpost");

                                datamanager.deletePicture(liveDetail().LiveTimeItemID, {
                                    success: function () {
                                        magazinegameview.removePicture(liveDetail().LiveTimeItemID);

                                        //presenter.toggleSaveActivity(false, '');
                                        shell.hideProgressIndicator();
                                        goBackCmd();
                                    },
                                    error: function (response) {
                                        alert(response);
                                        shell.hideProgressIndicator();
                                        //presenter.toggleSaveActivity(false);
                                    }
                                });
                            }
                            break;
                        case 3:
                            // Delete Attendee
                            //alert("Not implemented!");
                            break;
                        case 4:
                            // Delete GameDiscussionPost
                            if (canEditDetail()) {
                                //presenter.toggleSaveActivity(true, "Deleting discussionpost");
                                shell.showProgressIndicator("Deleting discussionpost");
                                datamanager.deleteGameDiscussionPost(liveDetail().LiveTimeItemID, {
                                    success: function () {
                                        shell.hideProgressIndicator();
                                        //presenter.toggleSaveActivity(false);
                                        goBackCmd();
                                    },
                                    error: function (response) {
                                        alert(response);
                                        shell.hideProgressIndicator();
                                        //presenter.toggleSaveActivity(false);
                                    }
                                });
                            }
                            break;
                        case 5:
                            if (canEditDetail()) {
                                shell.showProgressIndicator("Deleting video");
                                //presenter.toggleSaveActivity(true, "Deleting discussionpost");
                                datamanager.deleteVideo(liveDetail().LiveTimeItemID, {
                                    success: function () {
                                        //presenter.toggleSaveActivity(false, '');
                                        shell.hideProgressIndicator();
                                        goBackCmd();
                                    },
                                    error: function (response) {
                                        alert(response);
                                        shell.hideProgressIndicator();
                                        //presenter.toggleSaveActivity(false);
                                    }
                                });
                            }
                            break;
                        case 6:
                            // GameReport detail view
                            if (canEditDetail()) {
                                shell.showProgressIndicator("Deleting gamereport");

                                //presenter.toggleSaveActivity(true, "Deleting gamereport");
                                datamanager.deleteGameReport(liveDetail().LiveTimeItemID, {
                                    success: function () {
                                        shell.hideProgressIndicator();
                                        goBackCmd();
                                    },
                                    error: function (response) {
                                        alert(response);
                                        shell.hideProgressIndicator();
                                    }
                                });
                            }
                            break;
                        case 26:
                            if (canEditDetail()) {
                                shell.showProgressIndicator("Deleting highlight");

                                datamanager.deleteGameVideo(liveDetail().LiveTimeItemID, {
                                    success: function () {
                                        magazinegameview.reloadGameMediaItems();

                                        shell.hideProgressIndicator();
                                        goBackCmd();
                                    },
                                    error: function (response) {
                                        alert(response);
                                        shell.hideProgressIndicator();
                                    }
                                });
                            }
                            break;
                    }
                }
            },

            editCmd = function () {
                switch (liveDetail().LiveTimelineItemTypeID) {
                    case 1: // EventReport
                        break;
                    case 2:
                        // Initialize edit mode in AssetInfo-view
                        assetinfo.initialize('game', liveDetail(), function () {
                            router.navigateTo(config.hashes.assetinfo + '/game/' + selectedGame() + '/' + liveDetail().LiveTimeItemID + '/' + liveDetail().LiveTimelineItemTypeID);
                        });
                        break;
                    case 3:
                        break;
                    case 4:
                        // GameDiscussionPost detail view
                        router.navigateTo(config.hashes.gamecomment + '/' + selectedGame() + '/' + liveDetail().LiveTimeItemID);
                        break;
                    case 5:
                        assetinfo.initialize('game', liveDetail(), function () {
                            router.navigateTo(config.hashes.assetinfo + '/game/' + selectedGame() + '/' + liveDetail().LiveTimeItemID + '/' + liveDetail().LiveTimelineItemTypeID);
                        });
                        break;
                    case 6:
                        // GameReport detail view
                        router.navigateTo(config.hashes.gamereport + '/' + selectedGame() + '/' + liveDetail().GameReportInfo.GameReportTypeID + '/' + liveDetail().LiveTimeItemID);
                        break;
                    case 26:
                        console.log('TODO: navigate to edit');
                        break;
                }
            },

            flagCmd = function () {
                var r = confirm(liveTexts.AreYouSureYouWantToReport);

                if (r === true) {
                    var reportContentModel = new viewmodel.ReportContent()
                        .ReportTypeID(2)
                        .ReportContentID(liveDetail().LiveTimeItemID)
                        .ReportContentTypeID(liveDetail().LiveTimelineItemTypeID)
                        .ReportContentGameID(selectedGame())
                        .ReportContentReason('');

                    datamanager.reportContentWithReason(viewmodelmapper.reportcontent.toDto(reportContentModel), {
                        success: function () {
                            goBackCmd();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
            },

            playVideo = function (item, event) {
                var elem = $(event.target).closest('.gameMediaRoot');

                if (item.SocialEntityID && item.SocialEntityID > 0) {
                    datamanager.insertSocialEntityView(item.SocialEntityID);
                }

                if (item.PartnerFeaturePrerolls.length > 0) {
                    // If we already have a running timer, stop it and clear stuff
                    if (billboardTimer !== null) {
                        clearTimeout(billboardTimer);
                        billboardTimer = null;

                        mediaRootTarget.find('.video-preroll').fadeOut(300);
                        mediaRootTarget.find('.overlay-container').show();
                        mediaRootTarget.find('.swVideoPlayer').hide();
                    }

                    billboardList = [];

                    // Push all the billboards into a temp-list
                    for (var i = 0; i < item.PartnerFeaturePrerolls.length; i++) {
                        billboardList.push(item.PartnerFeaturePrerolls[i]);
                    }

                    // Save reference to root target
                    mediaRootTarget = $(event.target).closest('.gameMediaRoot');
                    mediaRootTarget.find('.video-preroll').fadeIn(300);

                    currentPreRoll(billboardList[0]);

                    if (billboardList[0].PartnerFeatureID > 0) {
                        datamanager.trackPartnerFeatureView(billboardList[0].PartnerFeatureID, billboardList[0].PartnerFeaturePlacementID, 0, 0, 2);
                    }

                    runTimer(billboardList[0].DisplayTime * 1000);
                } else {                    
                    elem.find('.overlay-container').hide();
                    elem.find('.swVideoPlayer').show();
                    elem.find('.vjs-tech').show();
                    elem.find('.vjs-tech').get(0).play();
                    //elem.find('.swVideoPlayer').get(0).play();                                       
                }

                event.preventDefault();
                event.stopPropagation();
            },

            runTimer = function (displayTime) {
                billboardTimer = setTimeout(function () {
                    billboardList.shift();

                    if (billboardList.length === 0) {
                        mediaRootTarget.find('.video-preroll').fadeOut(300);
                        mediaRootTarget.find('.overlay-container').hide();
                        mediaRootTarget.find('.swVideoPlayer').show();
                        mediaRootTarget.find('.vjs-tech').show();
                        billboardTimer = null;

                        //var player = mediaRootTarget.find('.swVideoPlayer').get(0);
                        var player = mediaRootTarget.find('.vjs-tech').get(0);

                        if (player) {
                            player.play();
                        }
                    } else {
                        currentPreRoll(billboardList[0]);

                        if (billboardList[0].PartnerFeatureID > 0) {
                            datamanager.trackPartnerFeatureView(billboardList[0].PartnerFeatureID, billboardList[0].PartnerFeaturePlacementID, 0, 0, 2);
                        }

                        runTimer(billboardList[0].DisplayTime * 1000);
                    }
                }, displayTime);
            },

            navigateToGame = function () {
                router.navigateTo(config.hashes.magazinegameview + '/' + selectedGame());
            },

            goBackCmd = function () {
                presenter.toggleActivity(false);
                router.navigateBack();
            },

            onSocialEntityShareClick = function (socialEntityInfo, event) {

                var socialMediaShareObject = new model.SocialMediaShareObject()
                    .SocialEntityID(socialEntityInfo.SocialEntityID)
                    .Channel("Webb")
                    .SocialMediaType("")
                    .UserDescription("")
                    .UploadAssetID("");
            },

            onSocialEntityCommentPostClick = function (data) {

                var commentText = $("#socialEntityDetailCommentText").val();

                if (commentText !== '') {
                    var socialEntityComment = new model.SocialEntityComment()
                        .SocialEntityID(data.SocialEntityInfo.SocialEntityID)
                        .Text(commentText);

                    datamanager.insertSocialEntityComment(ko.toJS(socialEntityComment), {
                        success: function (result) {
                            cleanup();
                            initialize(null, null, currentRouteData(), currentRouteData().gameId);
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }
            },

            onSocialEntityCommentDeleteClick = function (data) {

                if (data.SocialEntityCommentID !== '') {
                    datamanager.deleteSocialEntityComment(data.SocialEntityCommentID, {
                        success: function (result) {
                            cleanup();
                            initialize(null, null, currentRouteData(), currentRouteData().gameId);
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }
            },

            onSocialEntityCommentReportClick = function (data) {

                if (data.SocialEntityCommentID !== '') {
                    // TODO:
                    //datamanager.reportContentWithReason(1, data.SocialEntityCommentID, 8, 0, {
                    //    success: function (result) {
                    //        cleanup();
                    //        initialize(null, null, currentRouteData(), currentRouteData().gameId);
                    //    },
                    //    error: function (response) {                        
                    //        return response;
                    //    }
                    //});

                    //datamanager.reportSocialEntityComment(data.SocialEntityCommentID, {
                    //    success: function (result) {
                    //        cleanup();
                    //        initialize(null, null, currentRouteData(), currentRouteData().gameId);
                    //    },
                    //    error: function (response) {
                    //        return response;
                    //    }
                    //});
                }
            };

        return {
            activate: activate,
            cleanup: cleanup,
            getPictureURL: getPictureURL,
            initialize: initialize,                        
            navigateToLeague: navigateToLeague,                        

            playVideo: playVideo,
            currentPreRoll: currentPreRoll,

            onSocialEntityShareClick: onSocialEntityShareClick,            
            onSocialEntityCommentPostClick: onSocialEntityCommentPostClick,
            onSocialEntityCommentDeleteClick: onSocialEntityCommentDeleteClick,
            onSocialEntityCommentReportClick: onSocialEntityCommentReportClick,

            canEditDetail: canEditDetail,
            navigateToGame: navigateToGame,

            socialEntityTexts: socialEntityTexts,
            gameHeaderInfo: gameHeaderInfo,
            liveDetail: liveDetail,
            deleteCmd: deleteCmd,
            editCmd: editCmd,
            flagCmd: flagCmd,
            eventToolbar: eventToolbar,
            goBackCmd: goBackCmd
        };
    });;
define('viewmodels/vm.livestream',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'viewmodels/vm.shell', 'datamanager', 'underscore'],
    function ($, ko, config, router, messenger, shell, datamanager, _) {
        var
            liveStreamId = 0,
            liveStream = ko.observable(),
            liveStreamStats = ko.observable(),
            liveStreamConnectionDetails = ko.observable(),
            updateStreamStatsTimer,
            showPreviewWindow = ko.observable(false),
            sliderValue = ko.observable(30),
            gameTime = ko.observable(),
            liveStreamStatusId = ko.observable(0),
            gameHeaderInfo = ko.observable(),
            liveStreamPlayer,

            activate = function (routeData, callback) {
                if (routeData.Id !== undefined) {
                    liveStreamId = routeData.Id;
                }

                datamanager.initLiveStreamControlPanel(liveStreamId, {
                    success: function (model) {                        
                        if (model.LiveStreamStatusID === 14 || model.LiveStreamStatusID === 100) {
                            $('.livestreamEmptyState').hide();
                            $('#livestreamPreview').show();
                        } 
                        gameHeaderInfo(model.GameHeaderInfo);
                        // model.PlayURL
                        sliderValue(model.StartRecordingTime);
                        liveStreamStatusId(model.LiveStreamStatusID);
                        gameTime(model.GameTime);

                        liveStream(model);
                        liveStreamConnectionDetails(model.LiveStreamConnectionDetails);

                        updateStreamStatsTimer = setInterval(function () {
                            getStreamStats();
                        }, 10000);

                        setInterval(function () {
                            updateCountdown();
                        }, 1000);

                        getStreamStats();
                    },
                    error: function (error) {
                        hidePreloader();

                        console.log(error);

                        alert(error);
                    }
                });
            },

            updateStartRecordingTime = function () {
                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.updateStartRecordingTime(liveStreamId, sliderValue())
                    .then(function (data) {
                        $('.setting-panel button').hide();

                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        console.log(error);
                    });
            },

            getStreamStats = function () {
                datamanager.getStreamStats(liveStreamId, {
                    success: function (model) {
                        var statusChanged = model.LiveStreamStatusID != liveStreamStatusId();

                        liveStreamStats(model);
                        liveStreamStatusId(model.LiveStreamStatusID);

                        if (statusChanged) {
                            if (liveStreamStatusId() === 14 || liveStreamStatusId() === 100) {
                                $('.livestreamEmptyState').hide();
                                $('#livestreamPreview').show();

                                console.log(liveStream());

                                var videoElement = $('#livestreamPreview .swVideoPlayer').get(0);
                                var player = videojs(videoElement);

                                player.src(liveStream().VideoURL);

                                setTimeout(function () {
                                    player.play();
                                }, 1000);

                            } else {
                                $('.livestreamEmptyState').show();
                                $('#livestreamPreview').hide();
                            }
                        }

                        hidePreloader();
                    },
                    error: function (error) {
                        hidePreloader();
                    }
                });
            },

            hidePreloader = function () {
                $('#livestream-view-preloader').hide();
                $('#livestream-view-afterloaded').show();
            },

            showPreloader = function () {
                $('#livestream-view-preloader').show();
                $('#livestream-view-afterloaded').hide();
            },

            toggleSettings = function (data, element) {
                $('.tab-livestream').removeClass('active');
                $(element.target).addClass('active');

                $('#liveStreamSettingsTab').show();
                $('#liveStreamInfoTab').hide();
            },

            toggleInfo = function (data, element) {
                $('.tab-livestream').removeClass('active');
                $(element.target).addClass('active');

                $('#liveStreamSettingsTab').hide();
                $('#liveStreamInfoTab').show();
            },

            fallbackCopyTextToClipboard = function (text) {
                var textArea = document.createElement("textarea");
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();

                try {
                    var successful = document.execCommand('copy');
                    var msg = successful ? 'successful' : 'unsuccessful';
                    console.log('Fallback: Copying text command was ' + msg);

                    if (successful) {
                        shell.showToast('Länken har kopierats');
                    }

                } catch (err) {
                    console.error('Fallback: Oops, unable to copy', err);
                }

                document.body.removeChild(textArea);
            },

            copyTextToClipboard = function (text) {
                if (!navigator.clipboard) {
                    fallbackCopyTextToClipboard(text);
                    return;
                }

                navigator.clipboard.writeText(text).then(function () {
                    shell.showToast('Länken har kopierats');
                }, function (err) {
                    console.error('Async: Could not copy text: ', err);
                });
            },

            copyLiveStreamURL = function () {
                var liveStreamURL = liveStreamConnectionDetails().PrimaryServer;
                var liveStreamKey = liveStreamConnectionDetails().StreamKey;

                copyTextToClipboard('Stream URL: ' + liveStreamURL + ' Stream key: ' + liveStreamKey);
            },

            canStartLiveStream = ko.computed(function () {
                if (liveStreamStats() && liveStreamStats().LiveStreamStatusID === 14 && (liveStreamStats().WarningText === null || liveStreamStats().WarningText.length === 0))
                    return true;

                return false;
            }),

            updateCountdown = function () {
                var t1 = new Date();
                var t2 = new moment(gameTime()).subtract({ 'minutes': sliderValue() });

                var seconds = Math.floor(((t2 - t1) / 1000) % 60);
                var minutes = Math.floor(((t2 - t1) / 1000 / 60) % 60);
                var hours = Math.floor(((t2 - t1) / (1000 * 60 * 60)) % 24);
                var days = Math.floor((t2 - t1) / (1000 * 60 * 60 * 24));

                var returnString = pad(minutes, 2) + ':' + pad(seconds, 2);

                if (hours > 0)
                    returnString = pad(hours, 2) + ':' + returnString;

                if (days > 0) {
                    returnString = pad(days, 2) + ':' + returnString;
                }

                if ((t2 - t1) < 1) {                    
                    returnString = '00:00';

                    $('#livestream-view .livestream-alert').fadeIn(200);
                } else {
                    if ($('#livestream-view .livestream-alert').is(":visible")) {
                        $('#livestream-view .livestream-alert').fadeOut(200);
                    } 
                }

                $('#liveStreamCountdown').text(returnString);
            },

            startRecording = function () {
                if (liveStreamStatusId() === 14) {
                    shell.showProgressIndicator("Publicerar sändning...");

                    datamanager.publishLiveStream(liveStreamId, {
                        success: function (json) {
                            liveStreamStatusId(100);

                            shell.hideProgressIndicator();
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                } 
            },

            sliderValueChanged = function (data, event) {
                sliderValue($(event.target).val());

                $('.setting-panel button').show();
            },

            pad = function (num, size) {
                var s = num + "";

                if (s.length < 2) {
                    while (s.length < size) s = "0" + s;
                    return s;
                }
                else {
                    return s;
                }
            },

            cleanup = function () {
                showPreloader();
                clearInterval(updateStreamStatsTimer);

                if (liveStreamPlayer) {
                    liveStreamPlayer.pause();
                    liveStreamPlayer.dispose();
                }
            };

        return {
            activate: activate,
            cleanup: cleanup,
            
            toggleSettings: toggleSettings,
            toggleInfo: toggleInfo,

            sliderValueChanged: sliderValueChanged,
            sliderValue: sliderValue,

            gameHeaderInfo: gameHeaderInfo,
            liveStream: liveStream,
            liveStreamStats: liveStreamStats,
            liveStreamConnectionDetails: liveStreamConnectionDetails,
            showPreviewWindow: showPreviewWindow,

            updateStartRecordingTime: updateStartRecordingTime,
            liveStreamStatusId: liveStreamStatusId,
            gameTime: gameTime,            

            canStartLiveStream: canStartLiveStream,
            copyLiveStreamURL: copyLiveStreamURL,            
            startRecording: startRecording
        };
    });;
define('viewmodels/vm.livestreamsubscription',
    ['jquery', 'ko', 'messenger', 'viewmodels/vm.audience', 'viewmodels/vm.targetfilter', 'datamanager', 'underscore', 'viewmodels/vm.shell'],
    function ($, ko, messenger, audience, targetfilter, datamanager, _, shell) {

        var liveStreamSubscriptionTypeId = 0,

            audiences = ko.observableArray(),
            targetFilters = ko.observableArray(),

            liveStreamSubscription = ko.observable(),
            newAudienceVM = ko.observable(),
            newTargetFilterVM = ko.observable(),
            Id = 0,

            activate = function (routeData, callback) {
                liveStreamSubscriptionTypeId = Number(routeData.type);

                if (routeData.Id !== undefined) {
                    Id = Number(routeData.Id);
                }

                if (Id > 0) {
                    getLiveStreamSubscriptionForEditView();
                }
            },

            getLiveStreamSubscriptionForEditView = function () {
                datamanager.getLiveStreamSubscriptionForEditView(Id, {
                    success: function (json) {
                        liveStreamSubscription(json);
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            newAudience = function (data) {
                var _data = {
                    AudienceID: data.AudienceID,
                    Name: '',
                    CopyPrevious: false
                };

                newAudienceVM(_data);

                datamanager.getLiveStreamAudiences(data.AudienceID, {
                    success: function (model) {
                        audiences([]);

                        var underlayingArray = audiences();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        audiences.valueHasMutated();
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });

                $('#livestreamsubscription-view .edit-subview').hide();
                $('#livestreamsubscription-audience-tab').show();
            },

            newTargetFilter = function (data) {
                var _data = {
                    TargetFilterID: data.TargetFilterID,
                    Name: '',
                    CopyPrevious: false
                };

                newTargetFilterVM(_data);

                datamanager.getLiveStreamTargetFilters(data.TargetFilterID, {
                    success: function (model) {
                        targetFilters([]);

                        var underlayingArray = targetFilters();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        targetFilters.valueHasMutated();
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });

                $('#livestreamsubscription-view .edit-subview').hide();
                $('#livestreamsubscription-targetfilter-tab').show();
            },

            editAudience = function (data) {
                audience.activate(data.AudienceID, 4, audienceCallback);

                return false;
            },

            editTargetFilter = function (data) {
                targetfilter.activate(data.TargetFilterID, targetFilterCallback);

                return false;
            },

            audienceCallback = function (audienceId) {

            },

            targetFilterCallback = function (targetFilterId) {

            },

            saveLiveStreamSubscription = function (data) {
                if (isNaN(data.Price))
                    data.Price = data.Price.replace(',', '.');

                if (!isFloat(data.Price)) {
                    alert('Price is not valid');
                    return;
                }

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.updateLiveStreamSubscription(data, {
                    success: function (json) {
                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    }
                });
            },            

            changeAudience = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    liveStreamSubscription().AudienceID = data.AudienceID;

                    shell.showProgressIndicator(MiscTexts.Saving);

                    datamanager.updateLiveStreamSubscription(liveStreamSubscription(), {
                        success: function (json) {
                            getLiveStreamSubscriptionForEditView();

                            cancelEditAudience();

                            shell.hideProgressIndicator();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                }                
            },

            changeTargetFilter = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    liveStreamSubscription().TargetFilterID = data.TargetFilterID;

                    shell.showProgressIndicator(MiscTexts.Saving);

                    datamanager.updateLiveStreamSubscription(liveStreamSubscription(), {
                        success: function (json) {
                            getLiveStreamSubscriptionForEditView();

                            cancelEditAudience();

                            shell.hideProgressIndicator();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                }
            },

            cancelEditAudience = function () {
                $('#livestreamsubscription-view .edit-subview').hide();
                $('#livestreamsubscription-edit-tab').show();
            },

            createTargetFilter = function (data) {                
                var targetFilterId = 0;

                if (data.CopyPrevious)
                    targetFilterId = data.TargetFilterID;

                var _data = {
                    TargetFilterID: targetFilterId,
                    TargetFilterTypeID: 4,
                    Name: data.Name
                };

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.createTargetFilter(_data)
                    .then(function (json) {           
                        liveStreamSubscription().TargetFilterID = json;

                        datamanager.updateLiveStreamSubscription(liveStreamSubscription(), {
                            success: function () {
                                getLiveStreamSubscriptionForEditView();

                                cancelEditAudience();

                                shell.hideProgressIndicator();
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });                        
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            createAudience = function (data) {
                var audienceId = 0;

                if (data.CopyPrevious)
                    audienceId = data.AudienceID;

                var _data = {
                    AudienceID: audienceId,
                    AudienceTypeID: 4,
                    Name: data.Name
                };

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.createAudience(_data)
                    .then(function (json) {
                        liveStreamSubscription().AudienceID = json;

                        datamanager.updateLiveStreamSubscription(liveStreamSubscription(), {
                            success: function () {
                                getLiveStreamSubscriptionForEditView();

                                cancelEditAudience();

                                shell.hideProgressIndicator();
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            isFloat = function (val) {
                var floatRegex = /^[0-9]+(\.)?[0-9]*$/;

                if (!floatRegex.test(val))
                    return false;

                val = parseFloat(val);

                if (isNaN(val))
                    return false;

                return true;
            },

            cleanup = function () {
            };

        return {
            activate: activate,
            cleanup: cleanup,

            audiences: audiences,
            targetFilters: targetFilters,

            newAudience: newAudience,
            newTargetFilter: newTargetFilter,
            newAudienceVM: newAudienceVM,
            newTargetFilterVM: newTargetFilterVM,

            editAudience: editAudience,
            editTargetFilter: editTargetFilter,

            cancelEditAudience: cancelEditAudience,

            saveLiveStreamSubscription: saveLiveStreamSubscription,
            createAudience: createAudience,
            createTargetFilter: createTargetFilter,
            changeAudience: changeAudience,
            changeTargetFilter: changeTargetFilter,

            liveStreamSubscription: liveStreamSubscription
        };
    });
;
define('viewmodels/vm.magazine',
    ['ko', 'underscore', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.magazinegameview', 'viewmodels/vm.shell', 'helpers/sw.imagehelper', 'models/model', 'models/viewmodel', 'helpers/sw.assetuploadmanager'],
    function (ko, _, config, router, messenger, datamanager, magazinegameview, shell, swimagehelper, model, viewmodel, assetuploadmanager) {
        var blurbsInFeed = ko.observableArray(),
            comingGames = ko.observableArray(),
            teams = ko.observableArray(),
            memberActions = ko.observableArray(),
            magazineViewIsInitialized = false,

            gettingPages = false,
            noMorePagesToGet = false,
            blurbsSuitableForHalfPage = [0, 1, 9, 17, 18, 23, 40, 41, 50, 901, 903, 904, 905],

            hasExampleMagazineBlurb = false,
            gameIds = null,
            lastScrollPosition = 0,            

            //Initialize loads data for the view and can be called when the view should be shown, or earlier to pre-load data 
            initialize = function (feedWithBlurbs, callback) {

            },

            //Activate shows the Magazine view and is called from the router
            activate = function (routeData, callback) {
                if (shell.showAdminView()) {
                    $(".innebandy-special").each(function () {
                        $(this).removeClass('innebandy-special');
                    });
                } else if (Number(applicationID) === 3) {
                    // If Innebandy, navigate to myteams
                    /*router.navigateTo(config.hashes.myteams);*/
                    router.navigateTo(config.hashes.mygames);
                    return;
                }

                messenger.publish.viewModelActivated();

                if (blurbsInFeed().length === 0) // initialisera om vi inte har några puffar
                {
                    window.scrollTo(0, 0);
                    initializeMagazine();
                }
                else {
                    //There should be a better way to do this ... 
                    //But if the body is not animated with long enough animation
                    //chrome will fail to scroll to correct place

                    //$('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 500);
                    $('html,body').animate({ scrollTop: lastScrollPosition }, 1);
                }

                $(window).scroll(infiniteScrolling);
            },

            cleanup = function () {
                gettingPages = false;

                $(window).unbind('scroll', infiniteScrolling);
                lastScrollPosition = $(window).scrollTop();
            },

            cleanUpMagazine = function () {
                blurbsInFeed([]);
                comingGames([]);
                memberActions([]);
                teams([]);
                
                $('#magazine-view-preloader').show();
                $('#magazine-view-afterloaded').hide();

                noMorePagesToGet = false;
                hasExampleMagazineBlurb = false;
            },

            infiniteScrolling = function () {
                if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && blurbsInFeed().length !== 0 && hasExampleMagazineBlurb !== true) {
                    if (!gettingPages && !noMorePagesToGet) {
                        $('#infiniteScrollStatusWrapper').show();
                        getPagesFromServer();
                    }
                }
            },

            initializeMagazine = function () {
                datamanager.initMain(true, {
                    success: function (model) {
                        teams([]);

                        styleBlurbs(model.TeamsIFollowBlurbs);

                        if (model.TeamsIFollowBlurbs.length < 3) {
                            //noMorePagesToGet = true;
                            $('#infiniteScrollStatus').html(leagueTexts.YouHaveReachedTheEndOfYourFeed);
                        }

                        var underlayingArray = blurbsInFeed();

                        //Add the pages to the page cache
                        for (var i = 0; i < model.TeamsIFollowBlurbs.length; i++) {
                            if (model.TeamsIFollowBlurbs[i].MagazineBlurbTypeID === 0) {
                                hasExampleMagazineBlurb = true;
                                $('#infiniteScrollStatusWrapper').hide();
                            }

                            if (model.TeamsIFollowBlurbs[i].Deleted === false)
                                underlayingArray.push(model.TeamsIFollowBlurbs[i]);
                        }

                        blurbsInFeed.valueHasMutated();

                        underlayingArray = comingGames();

                        for (var j = 0; j < model.ComingGames.length; j++) {
                            underlayingArray.push(model.ComingGames[j]);
                        }

                        comingGames.valueHasMutated();

                        underlayingArray = teams();

                        for (var k = 0; k < model.Teams.length; k++) {
                            underlayingArray.push(model.Teams[k]);
                        }

                        teams.valueHasMutated();

                        underlayingArray = memberActions();

                        for (var l = 0; l < model.MemberActions.length; l++) {
                            underlayingArray.push(model.MemberActions[l]);
                        }

                        memberActions.valueHasMutated();

                        $('#magazine-view-preloader').hide();
                        $('#magazine-view-afterloaded').show();
                    },
                    error: function (response, xhr) {
                        gettingPages = false;

                        if (xhr.status === 403) {
                            router.navigateTo("/");
                        } else {
                            router.navigateTo(config.hashes.myteams);
                        }

                        $('#magazine-view-preloader').hide();
                        $('#magazine-view-afterloaded').show();
                    }
                });
            },

            styleBlurbs = function (json) {
                for (var i = 0; i < json.length; i++) {
                    json[i].isHalfPageLeft = false;
                    json[i].isHalfPageRight = false;
                }

                for (i = 0; i < json.length - 1; i++) {
                    if (_.contains(blurbsSuitableForHalfPage, json[i].MagazineBlurbTypeID) && _.contains(blurbsSuitableForHalfPage, json[i + 1].MagazineBlurbTypeID)) {
                        json[i].isHalfPageLeft = true;
                        json[i + 1].isHalfPageRight = true;

                        i = i + 1;

                        if (i > json.length - 2) {
                            break;
                        }
                    }
                }
            },

            getPictureURL = function (picture, screenEstate) {
                return swimagehelper.getPictureURLWithSize(picture, screenEstate);
            },            

            getPagesFromServer = function () {
                var lastPageInCache,                    
                    rowNumber = 0;

                gettingPages = true;

                //Set current member id
                memberID = shell.currentMember.MemberID;

                //Loop through the current pages in the feed                
                var lastThreeBlurbTypes = [];

                if (blurbsInFeed().length !== 0) {
                    lastPageInCache = blurbsInFeed()[blurbsInFeed().length - 1];

                    rowNumber = lastPageInCache.RowNumber;

                    gameIds = [];

                    for (var i = 0; i < blurbsInFeed().length; i++) {
                        //Exclude all blurbs that does not have a gameID (some 90X like "unpaid season ticket")
                        var _gameID = blurbsInFeed()[i].GameID;
                        if (_.isNumber(_gameID)) gameIds.push(_gameID);
                    }

                    if (blurbsInFeed().length > 2) {
                        for (i = blurbsInFeed().length - 3; i < blurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else if (blurbsInFeed().length > 1) {
                        for (i = 0; i < blurbsInFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                        }
                    } else {
                        lastThreeBlurbTypes.push(blurbsInFeed()[0].MagazineBlurbTypeID);
                    }

                    lastTimeStamp = lastPageInCache.TimeStamp;
                } else {
                    blurbsInFeed.removeAll();
                    gameIds = null;                    
                    lastTimeStamp = new Date();
                }
                
                //Get the next three pages from the server                                                            
                datamanager.GetBlurbsForMyFeed(lastThreeBlurbTypes, rowNumber)
                    .then(function (json) {
                        styleBlurbs(json);

                        if (json.length === 0) {
                            noMorePagesToGet = true;
                            $('#infiniteScrollStatus').html(leagueTexts.YouHaveReachedTheEndOfYourFeed);
                        }

                        var underlayingArray = blurbsInFeed();

                        //Add the pages to the page cache
                        for (var i = 0; i < json.length; i++) {
                            if (json[i].MagazineBlurbTypeID === 0) {
                                hasExampleMagazineBlurb = true;
                            }

                            if (json[i].Deleted === false)
                                underlayingArray.push(json[i]);
                        }

                        blurbsInFeed.valueHasMutated();

                        gettingPages = false;

                    })
                    .fail(function (error) {
                        gettingPages = false;
                    });
                
            },

            showMagazineGameView = function (selectedGame) {
                magazinegameview.setGameHeaderInfo(selectedGame.GameHeaderInfo);
                router.navigateTo(config.hashes.magazinegameview + '/' + selectedGame.GameID);
            },

            navigateToGame = function (game) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.magazinegameview + '/' + game.GameID;
                    },
                    toClick: function () {
                        magazinegameview.setGameHeaderInfo(game);
                        router.navigateTo(config.hashes.magazinegameview + '/' + game.GameID);
                    }
                };
                return navigationItem;
            },

            navigateToMagazineGameView = function (item) {
                var navigationItem;

                if (item.MagazineBlurbTypeID === 61) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.livedetails + '/' + item.GameID + '/' + item.InterviewInfo.InterviewID + '/13';
                        },
                        toClick: function () {
                            router.navigateTo(config.hashes.livedetails + '/' + item.GameID + '/' + item.InterviewInfo.InterviewID + '/13');
                        }
                    };
                }
                else if (item.GameID !== 0) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.magazinegameview + '/' + item.GameID;
                        },
                        toClick: function () {
                            magazinegameview.setGameHeaderInfo(item.GameHeaderInfo);
                            router.navigateTo(config.hashes.magazinegameview + '/' + item.GameID);
                        }
                    };
                }
                else if (item.InfoItemID && item.InfoItemID > 0) {
                    // TODO: Check InfoItemTypeID

                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.infoitemdetails + '/' + item.InfoItemID;
                        },
                        toClick: function () {
                            router.navigateTo(config.hashes.infoitemdetails + '/' + item.InfoItemID);
                        }
                    };

                }
                else if (item.MagazineBlurbTypeID === 80) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.magazinegameview + '/' + item.GameHeaderInfo.GameID;
                        },
                        toClick: function () {
                            magazinegameview.setGameHeaderInfo(item.GameHeaderInfo);
                            router.navigateTo(config.hashes.magazinegameview + '/' + item.GameHeaderInfo.GameID);
                        }
                    };
                }
                else if (item.MagazineBlurbTypeID === 902) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.myteams;
                        },
                        toClick: function () {
                            //magazinegameview.setGameHeaderInfo(selectedGame.GameHeaderInfo);
                            router.navigateTo(config.hashes.myteams);
                        }
                    };
                }
                else if (item.MagazineBlurbTypeID === 905) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.team + '/' + item.TeamID;
                        },
                        toClick: function () {
                            //magazinegameview.setGameHeaderInfo(selectedGame.GameHeaderInfo);
                            router.navigateTo(config.hashes.team + '/' + item.TeamID);
                        }
                    };
                }                
                else if (item.MagazineBlurbTypeID === 251) { // MemberAction
                    navigationItem = {
                        getHrefString: function () {
                            return "";
                        },
                        toClick: function () {
                        }
                    };
                } else {
                    navigationItem = {
                        getHrefString: function () {
                            return "";
                        },
                        toClick: function () {
                        }
                    };
                }

                return navigationItem;
            },

            insertFollowerTeamRoleWithRelations = function (data, event) {

                var memberTeamRole = new model.MemberTeamRole()
                    .MemberID(shell.currentMember.MemberID)
                    .TeamID(data.TeamID)
                    .TeamRoleID(5)
                    .InsertMemberID(shell.currentMember.MemberID)
                    .UpdateMemberID(shell.currentMember.MemberID);

                var insertMemberTeamRoleRelationsData = new viewmodel.InsertMemberTeamRoleRelationsData();

                insertMemberTeamRoleRelationsData.MemberTeamRole(memberTeamRole);

                datamanager.insertMemberTeamRoleWithRelations(ko.toJS(insertMemberTeamRoleRelationsData), {
                    success: function (model) {
                        router.navigateTo(config.hashes.magazine);
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            takePictureForGame = function (data) {
                magazinegameview.initialize(data, data.GameID);
                router.navigateTo(config.hashes.magazinegameview + '/' + data.GameID);
                magazinegameview.addPicture();
            },

            takeVideoForGame = function (data) {
                magazinegameview.initialize(data, data.GameID);
                router.navigateTo(config.hashes.magazinegameview + '/' + data.GameID);
                magazinegameview.addPicture();
            },

            writeDiscussionPostForGame = function (data) {
                magazinegameview.initialize(data, data.GameID, function () {
                    router.navigateTo(config.hashes.magazinegameview + '/' + data.GameID);
                    magazinegameview.addComment();
                });
            },

            writeGameReportForGame = function (data) {
                magazinegameview.initialize(data, data.GameID, function () {
                    router.navigateTo(config.hashes.magazinegameview + '/' + data.GameID);
                    magazinegameview.addGameReport();
                });
            },

            startEventReportForGame = function () {
                //console.log("TODO");
            },

            blurbsInFeedComputed = ko.computed(function () {
                return ko.utils.arrayFilter(blurbsInFeed(), function (item) {
                    return item.HideInWeb === false;
                });
            }),

            navigateToTeamViewPlayers = function (data) {
                router.navigateTo(config.hashes.team + '/' + data.TeamID + '/players');
            },

            navigateToTeamViewStaff = function (data) {
                router.navigateTo(config.hashes.team + '/' + data.TeamID + '/staff');
            },

            navigateToLeague = function (data) {
                router.navigateTo(config.hashes.leaguesite + '/' + data.LeagueID);
            },

            navigateToMemberAction = function (data) {
                switch (data.MemberActionTypeID) {
                    case 2:
                        router.navigateTo(config.hashes.discover);
                        break;
                    case 7:
                        router.navigateTo(config.hashes.member + '/editinformation');
                        break;
                    case 8:
                        router.navigateTo(config.hashes.team + '/' + data.MemberActionItemID);
                        break;

                }
            },

            navigateToCalendar = function () {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.calendar;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.calendar);
                    }
                };
                return navigationItem;
            },

            navigateToMyTeams = function () {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.myteams;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.myteams);
                    }
                };
                return navigationItem;
            },

            navigateToMemberActions = function () {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.member + '/memberactions';
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.member + '/memberactions');
                    }
                };
                return navigationItem;
            },

            navigateToPicture = function (data) {
                router.navigateTo(config.hashes.livedetails + '/' + data.GameID + '/' + data.PictureID + '/2');
            },

            navigateToVideo = function (data) {
                router.navigateTo(config.hashes.livedetails + '/' + data.GameID + '/' + data.VideoID + '/5');
            },

            navigateToHighlight = function (data) {
                if (data.TypeID === 1)
                    router.navigateTo(config.hashes.leaguesite + '/' + data.ItemID + '/highlights');
            },

            navigateToLink = function (data) {
                window.open(data.CallToActionURL, '_blank');
            },

            navigateToInfoItem = function (data) {
                router.navigateTo(config.hashes.infoitemdetails + '/' + data.InfoItemID);
            },

            navigateToTips = function (data) {
                router.navigateTo(config.hashes.tips);
            },

            navigateToUrl = function (data) {
                router.navigateTo(data.Url);
            },            

            navigateToTeam = function (teamId) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.team + '/' + teamId;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.team + '/' + teamId);
                    }
                };
                return navigationItem;
            },


            navigateToTeamsView = function () {
                router.navigateTo(config.hashes.discover);
            },


            editInfoItem = function (data) {
                // TODO
            };
        
        return {
            initialize: initialize,
            activate: activate,
            cleanup: cleanup,
            cleanUpMagazine: cleanUpMagazine,
            magazineViewIsInitialized: magazineViewIsInitialized,            
            infiniteScrolling: infiniteScrolling,
            blurbsInFeed: blurbsInFeed,
            blurbsInFeedComputed: blurbsInFeedComputed,
            comingGames: comingGames,
            memberActions: memberActions,
            teams: teams,
            showMagazineGameView: showMagazineGameView,
            navigateToTeamsView: navigateToTeamsView,
            translation: MagazineTexts,
            getPictureURL: getPictureURL,            
            insertFollowerTeamRoleWithRelations: insertFollowerTeamRoleWithRelations,
            navigateToGame: navigateToGame,
            navigateToMagazineGameView: navigateToMagazineGameView,

            takePictureForGame: takePictureForGame,
            takeVideoForGame: takeVideoForGame,
            writeDiscussionPostForGame: writeDiscussionPostForGame,
            startEventReportForGame: startEventReportForGame,
            writeGameReportForGame: writeGameReportForGame,    
            
            navigateToTeamViewPlayers: navigateToTeamViewPlayers,
            navigateToTeamViewStaff: navigateToTeamViewStaff,
            navigateToTeam: navigateToTeam,                        
            navigateToLeague: navigateToLeague,
            navigateToMemberAction: navigateToMemberAction,
            navigateToCalendar: navigateToCalendar,
            navigateToMyTeams: navigateToMyTeams,
            navigateToMemberActions: navigateToMemberActions,

            navigateToPicture: navigateToPicture,
            navigateToVideo: navigateToVideo,
            navigateToHighlight: navigateToHighlight,
            navigateToLink: navigateToLink,
            navigateToInfoItem: navigateToInfoItem,
            navigateToTips: navigateToTips,
            navigateToUrl: navigateToUrl,

            editInfoItem: editInfoItem,

            currentMember: shell.currentMember,                        
            memberTexts: MemberTexts
        };
    });;
define('viewmodels/vm.magazineblurbtype1',
    ['ko'],
    magazineblurbtype1 = function (blurb1) {
        var blurb = ko.observable(blurb1);
        return {
            //activate: activate,
            blurb:blurb
        };
    });;
define('viewmodels/vm.magazinegameview',
    ['ko', 'config', 'router', 'messenger', 'models/model', 'datamanager', 'viewmodels/vm.shell', 'viewmodels/vm.sockethelper', 'viewmodels/vm.eventreporting', 'helpers/sw.utils', 'viewmodels/vm.reportitem', 'viewmodels/vm.gamemediaitem', 'viewmodels/vm.magazinegameviewdetails', 'presenter', 'toastr', 'helpers/sw.imagehelper', 'helpers/sw.assetuploadmanager', 'filereader', 'viewmodels/model.uploadasset', 'viewmodels/vm.assetinfo', 'helpers/sw.timehelper', 'underscore', 'models/viewmodel', 'models/viewmodel.mapper'],
    function (ko, config, router, messenger, model, datamanager, shell, socket, eventreporting, utils, reportitem, gamemediaitem, magazineGameViewDetails, presenter, toastr, swimagehelper, assetuploadmanager, filereader, uploadasset, assetinfo, timehelper, _, viewmodel, viewmodelmapper) {
        var
            gettingTimelineItems = false,
            noMoreTimelineItemsToGet = false,
            currentGameId,
            lastScrollPosition = 0,
            feedRows = ko.observableArray(),
            unmoderatedPosts = ko.observableArray(),
            gameAttentionInfoItems = ko.observableArray(),
            gameMediaItems = ko.observableArray(),
            overviewItems = ko.observableArray(),
            leagueTable = ko.observable(),
            gameStats = ko.observable(),
            teams = ko.observable(),
            activeGameMediaItem = ko.observable(),
            expectedTime = 0,
            activeVideoSection = 0,

            gameAccessInfo = ko.observable(),
            liveStreamPriceModel = ko.observable(),

            lineUpPartnerBlurb = ko.observable(),
            overviewPartnerBlurb = ko.observable(),
            overviewStatisticsBlurb = ko.observable(),
            leaguePartnerBlurb = ko.observable(),
            liveStreamDownloadLink = ko.observable(''),

            currentPreRoll = ko.observable(),

            leagueOverviewLoaded = false,
            ledBannerTimer,
            memberCanLiveStream = ko.observable(false),
            memberCanModerateGame = ko.observable(false),
            memberIsEventReporting = ko.observable(false),
            hideTimelineComments = ko.observable(false),

            LEDBanner = ko.observable(),
            //Game Header properties
            gameHeaderInfo = ko.observable(),

            repeatAds = false,
            delayedItem,
            modalWindow = null,
            adInterval = 0,
            adStartPosition = 0,
            adIndex = 0,
            LEDIndex = 0,
            LEDRepeatIndex = 1,
            LEDDelayTime = 0,
            LEDRepeatTimes = 0,
            remainingGoalAnimations = 0,
            firstGoalFound = false,

            ads = [],
            gameSponsors = [],
            gameEndPartners = [],
            gameHalftimePartners = [],
            gameLEDPartners = [],
            gameGoalPartner = null,
            gameGoalAnimationPartner = null,

            billboardList = [],
            mediaRootTarget = null,
            billboardTimer = null,

            //Fair play card
            fairPlayItemForGame = ko.observable(),

            /*Attendee properties*/
            attendeesCount = ko.observable(),
            //attendees = ko.observable(),
            attendees = ko.observableArray(),
            socialEmotions = ko.observableArray(),

            lastSequentialId = 0,
            maxNumberPosts = 20,

            /*League properties*/
            leagueHeader = ko.observable(),

            /*Related games properties*/
            relatedGames = ko.observableArray(),

            /*From live view*/
            gameDiscussionPost = ko.observable(),

            /*GameCheckIn properties*/
            gameCheckIn = ko.observable(),

            /*GameLineUps*/
            gameLineUps = ko.observable(),
            homeTeamLineUp = ko.observable(),
            awayTeamLineUp = ko.observable(),

            homeTeamPlayers = ko.observableArray(),
            awayTeamPlayers = ko.observableArray(),
            homeTeamSubstitutes = ko.observableArray(),
            awayTeamSubstitutes = ko.observableArray(),
            homeTeamStaff = ko.observableArray(),
            awayTeamStaff = ko.observableArray(),

            eventReport = ko.observable(),
            eventReportToAdd = ko.observable(),
            eventReportPlayers = ko.observableArray([]),
            eventReportChanceTypes = ko.observableArray([]),
            eventReportPenaltyTypes = ko.observableArray([]),
            eventReportGoalTypes = ko.observableArray([]),
            eventReportShowOwnGoal = ko.observable(false),
            eventReportShowUnknownPlayer = ko.observable(false),
            eventReportShowNoPlayer = ko.observable(false),
            penaltyTypeSearchString = ko.observable('-'),
            eventToAdd = null,
            eventToAddObs = ko.observable(),
            eventReportTimer = null,
            eventReportSelectPlayerTitle = ko.observable(''),
            eventReportTime = ko.observable('00:00'),
            eventReportSeconds = 0,
            eventReportPlayerSelectIndex = 0,
            canTakeControlOfReport = ko.observable(false),

            showOvertimeMinutes = ko.observable(false),
            overviewGameInfo = ko.observable(),
            existingEventReports = ko.observableArray([]),

            gamePlayers = null,

            gameAdminInformation = ko.observable(),

            // options for filereader/imageuploader
            opts = {
                dragClass: "drag",
                accept: false,
                readAsMap: {
                    'video/*': 'DataURL',
                    'image/*': 'DataURL',
                    'text/*': 'Text'
                },
                readAsDefault: 'BinaryString',
                on: {
                    load: function (e, file) {
                        newAsset = new UploadAsset();
                        newAsset.File = file;
                        newAsset.GameId = currentGameId;
                        newAsset.MemberId = shell.currentMember.MemberID;
                        newAsset.Member = shell.currentMember;

                        if (file.type.match(/video/)) {
                            // Upload item to media manager
                            newAsset.Type = 5;
                            newAsset.VideoInfo.ThumbnailURL = "../Content/images/EmptyVideo.png";

                            assetinfo.initialize('gamevideo', newAsset, function () {
                                router.navigateTo(config.hashes.assetinfo + '/gamevideo/' + currentGameId);
                            });

                        } else if (file.type.match(/image/)) {
                            // Upload item to media manager
                            newAsset.Type = 2;
                            newAsset.PictureInfo.PictureURL = e.target.result;

                            assetuploadmanager.addItemToQueue(newAsset, function (data) { });
                            // Create a thumbnail and add it to the output if it is an image
                            assetinfo.initialize('game', newAsset, function () {
                                router.navigateTo(config.hashes.assetinfo + '/game/' + currentGameId);
                            });
                        }

                    },
                    error: function (e, file) {
                        // Native ProgressEvent

                    },
                    loadend: function (e, file) {

                    },
                    abort: function (e, file) {
                        // Native ProgressEvent

                    },
                    skip: function (e, file) {
                        // Called when a file is skipped.  This happens when:
                        // 1) A file doesn't match the accept option
                        // 2) false is returned in the beforestart callback
                    }
                }
            },

            checkSequentialId = function (id) {
                var newInit = false;

                //if (lastSequentialId > 0) {
                var diff = id - lastSequentialId;

                if (diff > 1) {
                    newInit = true;
                    console.log('Missing sequentialID, do new init...');

                    datamanager.synchronizeTimeline(currentGameId, {
                        success: function (json) {
                            feedRows([]);

                            lastSequentialId = json.SequentialID;

                            addNewFeedItems(json.TimelineBlurbs);

                            if (json.TimelineBlurbs.length < 10) {
                                noMoreTimelineItemsToGet = true;

                                insertGameSponsors();

                                $('#timelineInfiniteScrollStatus').html(liveTexts.NoMoreTimelineItems);
                            }
                            else {
                                $('#timelineInfiniteScrollStatus').html(liveTexts.GettingTimelineItems);
                            }
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
                //}

                lastSequentialId = id;

                return newInit;
            },

            insertGameSponsors = function () {
                if (gameSponsors.length > 0) {
                    // TODO: Add all sponsors if there are several?
                    gameSponsors[0].InsertTime = moment([2020, 0, 5]);
                    gameSponsors[0].UpdateTime = moment([2020, 0, 5]);

                    feedRows.push(gameSponsors[0]);

                    gameSponsors = [];
                }
            },

            //Initialize loads data for the view and can be called when the view should be shown, or earlier to pre-load data 
            initialize = function (game, gameId, callback) {
                messenger.publish.viewModelActivated();
                presenter.toggleActivity(true);

                //Set variables to enable navigation back to magazine page
                currentGameId = Number(gameId);

                //If there is a game sent in, set game header properties from the game 
                if (game) {
                    gameHeaderInfo(game.GameHeaderInfo);                    

                    checkEttanBranding();
                }

                initTimeline();

                //Call callback if there is one
                if (_.isFunction(callback)) {
                    callback();
                }
            },            

            //Activate shows the Magazine gameview  and is called from the router
            activate = function (routeData, callback) {
                if (routeData.section) {
                    activeVideoSection = Number(routeData.section);
                }                    
                else
                    activeVideoSection = 0;                

                //Init if new game otherwise keep content and state                
                if (currentGameId !== Number(routeData.gameId)) {
                    window.scrollTo(0, 0);
                    cleanUpGame();

                    initialize(null, routeData.gameId);
                } else {
                    //if (currentGameId === 1102439)
                    //    $('#header-view-top').addClass('branded-ettan');

                    // If we had gameMediaItems we need to reload them for stuff to work
                    if (gameMediaItems().length > 0) {
                        // Reload items
                        reloadGameMediaItems();
                    }

                    // Get updates since we last visited the game
                    getLiveTimelineBlurbUpdates();

                    $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                }

                if (member.MemberID !== 0) {
                    setupSockets();

                    $(document).on("assetUploadedMessage", assetUploadedMessageHandler);
                    $(window).scroll(infiniteScrolling);
                }
            },

            checkEttanBranding = function () {
                //Special case for Ettan Play
                if (Number(applicationID) === 2 && gameHeaderInfo().LeagueCategoryID == 46) {
                    $('#header-view-top').addClass('branded-ettan');
                    $("#appLogoTopBar").attr("src", swconstants.serverUrl + "/Content/images/ettan-logotyp-1920w.png");
                    $("#appLogoTopBar").attr("srcset", "");
                    $("#mainHeaderLink").attr("href", swconstants.serverUrl + "/ettanplay");
                }
                else if (Number(applicationID) === 2) {
                    $('#header-view-top').removeClass('branded-ettan');
                    $("#appLogoTopBar").attr("src", swconstants.serverUrl + "/Content/images/svff-logo-side.png");
                    $("#appLogoTopBar").attr("srcset", swconstants.serverUrl + "/Content/images/svff-logo-side@2x.png 2x," + swconstants.serverUrl + "/Content/images/svff-logo-side@3x.png 3x");
                    $("#mainHeaderLink").attr("href", swconstants.serverUrl + "/");
                }
            },

            handleGameMediaItemUpdate = function (existingItem, item) {
                var newItem = existingItem;

                newItem.GameMediaItemID = item.GameMediaItemID;
                newItem.LiveStreamID = item.GameMediaItemID;
                newItem.Description = item.Description;
                newItem.LiveStreamHeaderText = item.Description;
                newItem.LiveStreamState = item.LiveStreamState;
                //newItem.Thumbnail = item.ThumbnailURL;
                newItem.ThumbnailURL = item.ThumbnailURL; // Test
                newItem.StreamInfoTitle = item.StreamInfoTitle;
                newItem.StreamInfoText = item.StreamInfoText;
                newItem.SubscriptionInfoTitle = item.SubscriptionInfoTitle;
                newItem.SubscriptionInfoText = item.SubscriptionInfoText;                

                // Only set VideoURL if the member has a subscription
                if (existingItem.MemberHasSubscription || existingItem.RequiresSubscription === false)
                    newItem.VideoURL = item.VideoURL;

                newItem.LiveStreamStatusID = item.LiveStreamStatusID;

                var index = gameMediaItems.indexOf(existingItem);

                gameMediaItems.remove(existingItem);

                // If it's not the first item, insert it at the specific index
                if (index > 0) {
                    gameMediaItems.splice(index, 0, newItem);
                }
                else {
                    gameMediaItems.unshift(newItem);
                }      


            },

            setupSockets = function () {
                socket.onGameContentDeleteListener(function (item) {
                    if (item.GameID !== Number(currentGameId))
                        return;

                    var existingItem = checkIfIsExistingItem(item);

                    if (checkSequentialId(item.SequentialID))
                        return;

                    if (existingItem) {
                        if (item.LiveTimelineItemTypeID === 1 && gameHalftimePartners.length > 0) {
                            if (existingItem.EREventInfo.IsPeriodEnd && existingItem.Period === 1 && !existingItem.EREventInfo.IsGameEnd) {
                                var i = feedRows.indexOf(existingItem);

                                if (i > 0) {
                                    // Make sure it's a half-time-blurb
                                    if (feedRows()[i - 1].LiveTimelineItemTypeID === 37) {
                                        feedRows.splice(i - 1, 1);
                                    }
                                }
                            }
                        }

                        feedRows.remove(existingItem);

                        if (item.LiveTimelineItemTypeID === 1) { // EREvent
                            getGameOverview();
                        }
                    }
                });

                socket.onGameContentInsertListener(function (item) {
                    // If we get an insert from another game, ignore it
                    if (item.GameID !== Number(currentGameId))
                        return;

                    var existingItem = checkIfIsExistingItem(item);

                    if (checkSequentialId(item.SequentialID))
                        return;

                    if (!existingItem) {
                        item.MemberCanEdit = (shell.currentMember.IsSportswikAdmin || item.InsertMemberID === Number(shell.currentMember.MemberID));

                        // If the user has turned on hideComments
                        if (hideTimelineComments() === true) {
                            // Check if the item is of type 'DiscussionPost'
                            // If it is, ignore it
                            if (item.LiveTimelineItemTypeID === 4)
                                return;
                        }

                        if (item.LiveTimelineItemTypeID === 1) { // EREvent
                            if (item.EREventInfo.IsGoal) {
                                if (gameGoalPartner !== null)
                                    addGoalPartner(item);

                                if (gameGoalAnimationPartner !== null)
                                    addGoalAnimation(item);
                            }

                            getGameOverview();
                        }

                        insertItemInFeed(item);
                    }
                });

                socket.onGameContentUpdateListener(function (item) {
                    // If we get an update from another game, ignore it
                    if (item.GameID !== Number(currentGameId))
                        return;

                    if (checkSequentialId(item.SequentialID))
                        return;

                    // Whole item is sent on the websocket
                    var existingItem = checkIfIsExistingItem(item);

                    if (existingItem) {
                        item.MemberCanEdit = (shell.currentMember.IsSportswikAdmin || item.InsertMemberID === Number(shell.currentMember.MemberID));

                        feedRows.replace(existingItem, item);

                        if (item.LiveTimelineItemTypeID === 1) { // EREvent
                            getGameOverview();
                        }
                    }
                });

                socket.onGameCompactContentInsertListener(function (item) {
                    if (item.GameID !== Number(currentGameId))
                        return;

                    if (checkSequentialId(item.SequentialID))
                        return;


                    datamanager.getTimelineBlurb(item.GameID, item.ItemID, item.ItemTypeID, {
                        success: function (json) {
                            var existingItem = checkIfIsExistingItem(json);

                            if (!existingItem) {
                                if (item.LiveTimelineItemTypeID === 1) { // EREvent
                                    if (item.EREventInfo.IsGoal) {
                                        if (gameGoalPartner !== null)
                                            addGoalPartner(item);

                                        if (gameGoalAnimationPartner !== null)
                                            addGoalAnimation(item);
                                    }

                                    getGameOverview();
                                }

                                insertItemInFeed(json);
                            }
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                });

                socket.onGameCompactContentUpdateListener(function (item) {
                    if (item.GameID !== Number(currentGameId))
                        return;

                    datamanager.getTimelineBlurb(item.GameID, item.ItemID, item.ItemTypeID, {
                        success: function (json) {
                            var existingItem = checkIfIsExistingItem(json);

                            if (existingItem) {
                                feedRows.replace(existingItem, json);
                            }
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                });

                socket.onGameHeaderUpdateListener(function (item) {
                    if (item.GameID !== Number(currentGameId))
                        return;

                    var newHeader = gameHeaderInfo();

                    newHeader.HomeTeamScore = item.HomeTeamScore;
                    newHeader.AwayTeamScore = item.AwayTeamScore;
                    newHeader.GameStatusID = item.GameStatusID;

                    gameHeaderInfo.valueHasMutated();
                });

                socket.onGameCheckInListener(function (item) {
                    // If we get a gamecheckin from another game, ignore it
                    if (item.GameID !== Number(currentGameId))
                        return;

                    // Check so that the list doesn't already contain the item
                    var existingItem = ko.utils.arrayFirst(attendees(), function (s) {
                        return s.MemberID() === item.MemberID;
                    });

                    // If we already have the item in our list, don't add it
                    if (existingItem)
                        return;

                    attendeesCount(attendeesCount() + 1);

                    var attendeeArray = attendees();

                    attendeeArray.unshift(ko.mapping.fromJS(
                        {
                            MemberID: item.MemberID,
                            AttendeeThumbnailURL: item.AttendeeThumbnailURL,
                            AttendeeFirstName: item.AttendeeFirstName,
                            LastSocialEmotionTypeID: item.LastSocialEmotionTypeID
                        }
                    ));

                    attendees.valueHasMutated();
                });

                socket.onSocialEmotionPostedListener(function (item) {
                    // If we get an emotion from another game, ignore it
                    if (item.GameID !== Number(currentGameId))
                        return;

                    var existingItem = ko.utils.arrayFirst(socialEmotions(), function (s) {
                        return s.type() === item.SocialEntityEmotionTypeID;
                    });

                    if (existingItem)
                        existingItem.number(existingItem.number() + 1);
                    else
                        socialEmotions.push(ko.mapping.fromJS({ number: 1, type: item.SocialEntityEmotionTypeID }));

                    socialEmotions.sort(function (l, r) {
                        return l.number() < r.number() ? 1 : -1;
                    });

                    // If the member is us, we already animated it so skip it
                    if (item.MemberID !== member.MemberID) {
                        animateEmoji(item.SocialEntityEmotionTypeID);

                        sortAttendees(item.MemberID, item.MemberName, item.MemberThumbnailURL, item.SocialEntityEmotionTypeID);
                    }
                });

                socket.onGameMediaItemInsertListener(function (item) {
                    if (item.GameID !== Number(currentGameId))
                        return;

                    if (item.GameMediaItemTypeID === 1) { // Livestream
                        datamanager.getMediaLiveStreamItem(item.GameMediaItemID, {
                            success: function (json) {
                                var underlayingArray = gameMediaItems();

                                // Put the item first in the list
                                underlayingArray.unshift(json);

                                gameMediaItems.valueHasMutated();      

                                if (gameMediaItems().length === 1) // If there were no items before, set this one as active
                                    activeGameMediaItem(gameMediaItems()[0]);
                            },
                            error: function (error) {
                                alert(error);
                            }
                        });
                    } else if (item.GameMediaItemTypeID === 2 || item.GameMediaItemTypeID === 3) {
                        datamanager.getMediaHighlightItem(item.GameMediaItemID, {
                            success: function (json) {
                                var underlayingArray = gameMediaItems();
                               
                                // Put the item first in the list
                                underlayingArray.unshift(json);

                                gameMediaItems.valueHasMutated();                                
                            },
                            error: function (error) {
                                alert(error);
                            }
                        });
                    }
                });

                socket.onGameMediaItemUpdateListener(function (item) {
                    if (item.GameID !== Number(currentGameId))
                        return;

                    var existingItem = ko.utils.arrayFirst(gameMediaItems(), function (gameMediaItem) {
                        return gameMediaItem.GameMediaItemID === item.GameMediaItemID;
                    });

                    if (existingItem) {
                        if (item.GameMediaItemTypeID === 1) { // Livestream
                            // If it's a Livestream, get it from the backend
                            datamanager.getMediaLiveStreamItem(item.GameMediaItemID, {
                                success: function (livestream) {
                                    var userIsPlaying = false;

                                    var myPlayer = videojs.getPlayer('liveStreamPlayer_' + livestream.GameMediaItemID);

                                    if (myPlayer) {
                                        if (myPlayer.paused() === false) {
                                            userIsPlaying = true;

                                            delayedItem = livestream;

                                            if (livestream.LiveStreamProviderID === 8) {
                                                myPlayer.one("ended", function () {
                                                    console.log('Ended received from player (magazinegameview)');

                                                    if (delayedItem) {
                                                        var prevItem = ko.utils.arrayFirst(gameMediaItems(), function (gameMediaItem) {
                                                            return gameMediaItem.GameMediaItemID === delayedItem.GameMediaItemID;
                                                        });

                                                        var p = videojs.getPlayer('liveStreamPlayer_' + delayedItem.GameMediaItemID);

                                                        if (p)
                                                            p.dispose();

                                                        handleGameMediaItemUpdate(prevItem, delayedItem);

                                                        delayedItem = null;
                                                    }
                                                });

                                                myPlayer.on("waiting", function () {
                                                    console.log('Buffering received from player (magazinegameview)');

                                                    if (delayedItem) {
                                                        console.log('We have a delayed item');

                                                        console.log(gameMediaItems());

                                                        var prevItem = ko.utils.arrayFirst(gameMediaItems(), function (gameMediaItem) {
                                                            return gameMediaItem.GameMediaItemID === delayedItem.GameMediaItemID;
                                                        });

                                                        //var p = videojs.getPlayer('liveStreamPlayer_' + delayedItem.GameMediaItemID);

                                                        //if (p) {
                                                        //    console.log('Found videoitem');

                                                        //    p.pause();
                                                        //    p.dispose();
                                                        //}
                                                            
                                                        // TODO: Must check that we are actually watching this item?
                                                        activeGameMediaItem(delayedItem);

                                                        handleGameMediaItemUpdate(prevItem, delayedItem);

                                                        delayedItem = null;
                                                    }
                                                });
                                            } else {
                                                // If the provider is wowza we rely on another tech
                                                myPlayer.tech().on("retryplaylist", function () {
                                                    if (delayedItem) {
                                                        var prevItem = ko.utils.arrayFirst(gameMediaItems(), function (gameMediaItem) {
                                                            return gameMediaItem.GameMediaItemID === delayedItem.GameMediaItemID;
                                                        });

                                                        var p = videojs.getPlayer('liveStreamPlayer_' + delayedItem.GameMediaItemID);

                                                        if (p)
                                                            p.dispose();

                                                        handleGameMediaItemUpdate(prevItem, delayedItem);

                                                        delayedItem = null;
                                                    }
                                                });
                                            }
                                        }
                                        else {
                                            myPlayer.dispose();
                                        }
                                    }

                                    // Only update the item if the user isn't playing the video
                                    if (!userIsPlaying) {
                                        handleGameMediaItemUpdate(existingItem, livestream);
                                    }
                                },
                                error: function (error) {
                                    alert(error);
                                }
                            });
                        } else if (item.GameMediaItemTypeID === 2) {
                            var newGameMediaItem = existingItem;

                            newGameMediaItem.GameMediaItemID = item.GameMediaItemID;
                            newGameMediaItem.Description = item.Description;
                            newGameMediaItem.VideoURL = item.VideoURL;

                            var currentIndex = gameMediaItems.indexOf(existingItem);

                            gameMediaItems.remove(existingItem);

                            // If it's not the first item, insert it at the specific index
                            if (currentIndex > 0) {
                                gameMediaItems.splice(currentIndex, 0, newGameMediaItem);
                            }
                            else {
                                gameMediaItems.unshift(newGameMediaItem);
                            }                            
                        }
                    } else {
                        console.log('Game media item not found...');
                    }
                });

                socket.onGameMediaItemDeleteListener(function (item) {
                    if (item.GameID !== Number(currentGameId))
                        return;

                    var existingItem = ko.utils.arrayFirst(gameMediaItems(), function (gameMediaItem) {
                        return gameMediaItem.GameMediaItemID === item.GameMediaItemID;
                    });

                    if (!existingItem) {
                        console.log('Game media item not found...');
                        return;
                    }                    

                    gameMediaItems.remove(existingItem);

                    if (activeGameMediaItem && item.GameMediaItemID === activeGameMediaItem().GameMediaItemID) {
                        // If we are deleting the active item, change the active item to the first in the list if there are any

                        if (gameMediaItems().length > 0)
                            activeGameMediaItem(gameMediaItems()[0]);
                        else
                            activeGameMediaItem('');
                    }                        
                });

                socket.onLiveStreamHealthChangeListener(function (item) {
                    if (item.GameID !== Number(currentGameId))
                        return;

                    var player = videojs.getPlayer('liveStreamPlayer_' + item.LiveStreamID);

                    if (player) {
                        if (item.StatusID === 1) {
                            if (player.paused() === false) {
                                if (modalWindow !== null)
                                    modalWindow.close();

                                modalWindow = player.createModal(liveTexts.SenderNetworkProblemMessage, { pauseOnOpen: false });
                                modalWindow.addClass('vjs-custom-modal-window');
                            }
                            else {
                                console.log('Player is in paused state');
                            }
                        }
                        else if (item.StatusID === 2) {
                            if (modalWindow !== null) {
                                modalWindow.close();
                                modalWindow = null;
                            }
                        }
                    }
                });

                socket.onModeratedPostInsertedListener(function (item) {
                    // If we get an insert from another game, ignore it
                    if (item.GameID !== Number(currentGameId))
                        return;

                    var existingItem = ko.utils.arrayFirst(unmoderatedPosts(), function (line) {
                        return line.LiveTimeItemID === item.LiveTimeItemID && line.LiveTimelineItemTypeID === item.LiveTimelineItemTypeID;
                    });

                    if (!existingItem) {
                        unmoderatedPosts.unshift(item);
                    }
                });

                socket.connectToHub(function () {
                    socket.hub.server.enterGame(currentGameId);
                });
            },

            initTimeline = function () {                
                /*timelineInitTime = moment(new Date()).format('YYYY-MM-DD HH:mm:ss.SSS');*/

                $('#timelineInfiniteScrollStatus').html(liveTexts.GettingTimelineItems);

                if (member.MemberID != undefined && member.MemberID !== 0) {
                    datamanager.initLiveTimelineBlurbs(currentGameId, {
                        success: function (json) {

                            // Check game header info
                            gameHeaderInfo(json.GameHeaderInfo);

                            //Check Ettan Branding
                            checkEttanBranding();

                            LEDIndex = 0;
                            LEDRepeatIndex = 1;
                            ads = [];
                            gameSponsors = [];
                            gameEndPartners = [];
                            gameHalftimePartners = [];
                            gameLEDPartners = [];
                            feedRows([]);

                            gameAccessInfo(json.GameAccessInfo);
                            adInterval = json.GamePartnerInfo.PartnerInterval;
                            adStartPosition = json.GamePartnerInfo.StartPosition;
                            repeatAds = json.GamePartnerInfo.Repeat;
                            LEDDelayTime = json.GamePartnerInfo.LEDDelayTime * 1000;
                            LEDRepeatTimes = json.GamePartnerInfo.LEDRepeatTimes;

                            for (var a = 0; a < json.GamePartnerInfo.PartnerBlurbs.length; a++) {
                                ads.push(json.GamePartnerInfo.PartnerBlurbs[a]);
                            }

                            for (var b = 0; b < json.GamePartnerInfo.GameSponsorBlurbs.length; b++) {
                                gameSponsors.push(json.GamePartnerInfo.GameSponsorBlurbs[b]);
                            }

                            for (var c = 0; c < json.GamePartnerInfo.GameEndPartners.length; c++) {
                                gameEndPartners.push(json.GamePartnerInfo.GameEndPartners[c]);
                            }

                            for (var d = 0; d < json.GamePartnerInfo.GameLEDPartners.length; d++) {
                                gameLEDPartners.push(json.GamePartnerInfo.GameLEDPartners[d]);
                            }

                            for (var e = 0; e < json.GamePartnerInfo.HalftimeBlurbs.length; e++) {
                                gameHalftimePartners.push(json.GamePartnerInfo.HalftimeBlurbs[e]);
                            }

                            if (json.GamePartnerInfo.GoalPartners.length > 0) {
                                gameGoalPartner = json.GamePartnerInfo.GoalPartners[0];

                                var firstGoal = json.TimelineBlurbs.find(e => e.LiveTimelineItemTypeID === 1 && e.EREventInfo.IsGoal);

                                if (firstGoal) {
                                    firstGoal.EREventInfo.PartnerFeature = gameGoalPartner;
                                    firstGoalFound = true;
                                }
                            }

                            if (json.GamePartnerInfo.GoalAnimationPartners.length > 0) {
                                gameGoalAnimationPartner = json.GamePartnerInfo.GoalAnimationPartners[0];

                                timesToNextGoalAnimation = 0;

                                remainingGoalAnimations = gameGoalAnimationPartner.MaximumDisplays;

                                // If 0, set it to something ridiculus high
                                if (remainingGoalAnimations === 0)
                                    remainingGoalAnimations = 9999;
                            }

                            if (gameLEDPartners.length > 0) {
                                ledBannerTimer = setTimeout(showLED, json.GamePartnerInfo.LEDInitialWaitTime * 1000);
                            }

                            memberIsEventReporting(json.MemberIsEventReporting);

                            if (json.MemberIsEventReporting) {
                                if (json.GameHeaderInfo.SportID === 1) {
                                    datamanager.initFootballEventReportVC(currentGameId, {
                                        success: function (json) {
                                            parseInitEventReport(json);
                                        },
                                        error: function (error) {
                                            console.log(error);
                                        }
                                    });
                                } else if (json.GameHeaderInfo.SportID === 2) {
                                    datamanager.initFloorballEventReportVC(currentGameId, {
                                        success: function (json) {
                                            parseInitEventReport(json);
                                        },
                                        error: function (error) {
                                            console.log(error);
                                        }
                                    });
                                } else if (json.GameHeaderInfo.SportID === 6) {
                                    datamanager.initFutsalEventReportVC(currentGameId, {
                                        success: function (json) {
                                            parseInitEventReport(json);
                                        },
                                        error: function (error) {
                                            console.log(error);
                                        }
                                    });
                                }
                            }

                            // HideCommentInput
                            memberCanModerateGame(json.MemberCanModerateGame);

                            setGameAccess();



                            gettingTimelineItems = false;
                            noMoreTimelineItemsToGet = false;

                            lastSequentialId = json.SequentialID;

                            hideTimelineComments(json.HideTimelineComments);
                            memberCanLiveStream(json.LiveStreamingEnabled);

                            //Add game attention info items to timeline
                            gameAttentionInfoItems([]);
                            gameMediaItems([]);

                            var underlayingArray = gameAttentionInfoItems();

                            for (var i = 0; i < json.GameAttentionInfoItems.length; i++) {
                                underlayingArray.push(json.GameAttentionInfoItems[i]);
                            }

                            gameAttentionInfoItems.valueHasMutated();

                            underlayingArray = gameMediaItems();

                            //var streamIsLive = false;

                            for (var j = 0; j < json.GameMediaItems.length; j++) {
                                if ((json.GameMediaItems[j].LiveStreamProviderID === 7 || json.GameMediaItems[j].LiveStreamProviderID === 8) && json.GameMediaItems[j].LiveStreamStatusID < 302) {
                                    underlayingArray.push(json.GameMediaItems[j]);
                                }
                                else if (json.GameMediaItems[j].GameMediaItemTypeID === 2 || json.GameMediaItems[j].GameMediaItemTypeID === 3) { // Highlight or Replay
                                    underlayingArray.push(json.GameMediaItems[j]);
                                }
                            }

                            gameMediaItems.valueHasMutated();

                            fairPlayItemForGame(json.FairPlayItemForGame);

                            addNewFeedItems(json.TimelineBlurbs);

                            $('#timeline-afterloaded').show();
                            $('#timeline-preloader').hide();

                            if (json.TimelineBlurbs.length < 10) {
                                noMoreTimelineItemsToGet = true;

                                insertGameSponsors();

                                $('#timelineInfiniteScrollStatus').html(liveTexts.NoMoreTimelineItems);
                            }
                            else {
                                $('#timelineInfiniteScrollStatus').html(liveTexts.GettingTimelineItems);
                            }

                            attendees([]);
                            attendeesCount(json.AttendeesCount);

                            underlayingArray = attendees();

                            for (var k = 0; k < json.AttendeeList.length; k++) {
                                underlayingArray.push(ko.mapping.fromJS(json.AttendeeList[k]));
                            }

                            attendees.valueHasMutated();

                            parseSocialEmotions(json.SocialEntityEmotionsInfo);

                            // If we have more then one video and we got a parameter from the activate, we need to find the video
                            if (gameMediaItems().length > 1 && activeVideoSection > 0) {
                                ko.utils.arrayForEach(gameMediaItems(), function (item) {
                                    if (item.GameMediaItemTypeID === activeVideoSection) {
                                        activeGameMediaItem(item);
                                        return;
                                    }
                                });
                            }

                            // Default to the first item if we havent selected an item
                            if (gameMediaItems().length > 0 && !activeGameMediaItem()) {
                                activeGameMediaItem(gameMediaItems()[0]);
                            }                         

                            $('#streamShowButton').addClass('hidden');
                            $('#streamHideButton').removeClass('hidden');
                            $('#attendees-afterloaded').show();
                            $('#contentToolbar').show();
                        },
                        error: function (response, xhr) {
                        }
                    });

                    datamanager.insertGameCheckIn(currentGameId);

                    initGameLineUps();
                }
                else {
                    datamanager.initPublicLiveTimelineBlurbs(currentGameId, sharedPublicTimelineSecret, {
                        success: function (json) {
                            gameHeaderInfo(json.GameHeaderInfo);

                            //Special case for Ettan Play
                            if (Number(applicationID) === 2 && gameHeaderInfo().LeagueCategoryID == 46) {
                                $("#appLogoMemberOverlay").attr("src", "https://minfotboll.blob.core.windows.net/leagueorganizerid27/EttanPlayLogo_2x.png");
                                $("#createAccountOverlayDescriptionText").text('För att följa matcherna behöver du logga in med eller skapa ett Min Fotboll-konto.');
                            }

                            feedRows([]);
                            addNewFeedItems(json.TimelineBlurbs);
                            $('#timeline-afterloaded').show();
                            $('#timeline-preloader').hide();
                            $('#magazinegameview-view .createMemberOverlay').fadeIn();

                        },
                        error: function (response, xhr) {
                        }
                    });

                    initGameLineUps();
                }
            },

            parseInitEventReport = function (json) {
                for (var i = 0; i < json.ExistingEventReports.length; i++) {
                    if (json.ExistingEventReports[i].ReporterMemberID === shell.currentMember.MemberID) {
                        $('.eventreport-button').removeClass('hide');

                        eventReport(json.ExistingEventReports[i]);

                        var eventTime = eventReport().LatestReportedGameClockSecond;

                        if (eventReport().ClockIsStopped) {
                            eventReportSeconds = eventTime;
                        }
                        else {
                            var timeElapsed = Math.floor((new Date() - new Date(moment(eventReport().UpdateTime))) / 1000);

                            eventReportSeconds = eventTime + timeElapsed;

                            // Time can never go beyond the end time of the period
                            // TODO: Might need to make a special fix for 'full time'
                            if (eventReport().PeriodEndTime > 0 && eventReportSeconds > eventReport().PeriodEndTime) {
                                // TODO: Flash clock when it has passed the end of the period?
                                eventReportSeconds = eventReport().PeriodEndTime;
                            }

                            // Sanity-check
                            if (eventReportSeconds < 0)
                                eventReportSeconds = 0;
                        }

                        eventReportTime(secondsToDateString(eventReportSeconds));
                        eventReportTimer = setTimeout(runEventReportTimer, 1000);
                        /*eventReportTimer = setInterval(runEventReportTimer, 1000);*/

                        break;
                    }
                }
            },

            showLED = function () {
                LEDBanner(gameLEDPartners[LEDIndex]);

                var displayTime = gameLEDPartners[LEDIndex].DisplayTime;

                if (gameLEDPartners.length > LEDIndex + 1) {
                    LEDIndex++;

                    ledBannerTimer = setTimeout(showLED, LEDDelayTime + (displayTime * 1000));
                } else if (LEDRepeatTimes > LEDRepeatIndex) {
                    LEDRepeatIndex++;
                    LEDIndex = 0;

                    ledBannerTimer = setTimeout(showLED, LEDDelayTime + (displayTime * 1000));
                }
            },

            infiniteScrolling = function () {
                if ($(window).scrollTop() + $(window).height() > $(".leftMagazineGame").height() - 300) {
                    if (!gettingTimelineItems && !noMoreTimelineItemsToGet) {
                        getMoreTimelineBlurbs();
                    }
                }
            },

            setGameAccess = function () {
                if (gameAccessInfo().HideCommentInput) {
                    $('.comment.mobile').addClass('hidden');
                    $('.comment.wide').addClass('hidden');
                } else if (gameAccessInfo().ContentModerated) {
                    $('#commentText').attr("placeholder", liveTexts.WriteADiscussionPostModeratedByAdmin);
                }

                if (gameAccessInfo().HidePictureInput || gameAccessInfo().HideVideoInput) {
                    $('.photo.clickable').hide();
                }

                if (gameAccessInfo().HideExtendedMenu) {
                    $('#gameViewMoreIcon').hide();
                }
            },

            getLastTimeLineId = function () {
                var underlyingArray = feedRows();

                for (var i = underlyingArray.length - 1; i >= 0; i--) {
                    if (underlyingArray[i].LiveTimeItemID > 0)
                        return underlyingArray[i].LiveTimeItemID;
                }

                return 0;
            },

            getMoreTimelineBlurbs = function () {
                var underlyingArray = feedRows();

                if (underlyingArray.length > 0) {
                    var lastItem = underlyingArray[underlyingArray.length - 1];
                    var lastTimeLineItemId = getLastTimeLineId();

                    var earliestInsertTime = timehelper.getFixedUTCTime(lastItem.InsertTime);

                    $('#timelineInfiniteScrollStatus').html(liveTexts.GettingTimelineItems);

                    gettingTimelineItems = true;

                    datamanager.getMoreTimelineBlurbs(currentGameId, earliestInsertTime, lastTimeLineItemId, {
                        success: function (json) {
                            gettingTimelineItems = false;

                            if (json.length > 0) {
                                if (firstGoalFound === false && gameGoalPartner !== null) {
                                    var firstGoal = json.find(e => e.LiveTimelineItemTypeID === 1 && e.EREventInfo.IsGoal);

                                    if (firstGoal) {
                                        firstGoal.EREventInfo.PartnerFeature = gameGoalPartner;
                                        firstGoalFound = true;
                                    }
                                }

                                addNewFeedItems(json);
                            }

                            if (json.length < 10) {
                                noMoreTimelineItemsToGet = true;

                                $('#timelineInfiniteScrollStatus').html(liveTexts.NoMoreTimelineItems);

                                insertGameSponsors();
                            }
                        },
                        error: function (response, xhr) {
                            alert(response);
                            gettingTimelineItems = false;
                        }
                    });
                }
            },

            getLiveTimelineBlurbUpdates = function () {
                var lastUpdateTime = timehelper.getUTCTime(getLatestDate());
                var earliestInsertTime = timehelper.getUTCTime(getEarliestDate());

                datamanager.getLiveTimelineBlurbUpdates(currentGameId, shell.currentMember.MemberID, lastUpdateTime, earliestInsertTime)
                    .then(function (data) {
                        gameHeaderInfo(data.GameHeaderInfo);

                        checkEttanBranding();

                        // If we got new rows update the overview column (right column)
                        if (data.TimelineBlurbs.length > 0) {
                            // NOTE: update overview tab or not?
                        }

                        addNewFeedItems(data.TimelineBlurbs);

                        attendees([]);

                        underlayingArray = attendees();

                        for (var i = 0; i < data.AttendeeList.length; i++) {
                            underlayingArray.push(ko.mapping.fromJS(data.AttendeeList[i]));
                        }
                        attendees.valueHasMutated();
                        attendeesCount(data.AttendeesCount);

                        parseSocialEmotions(data.SocialEntityEmotionsInfo);
                    })
                    .fail(function (error) {
                    });
                presenter.toggleActivity(false);
            },

            parseSocialEmotions = function (data) {
                socialEmotions([]);

                // TODO: instead of emptying the array, look if it exists and set the correct value?

                if (data.NumberOfClappingHands > 0) {
                    socialEmotions.push(ko.mapping.fromJS({ number: data.NumberOfClappingHands, type: 1 }));
                }

                if (data.NumberOfRedHearts > 0) {
                    socialEmotions.push(ko.mapping.fromJS({ number: data.NumberOfRedHearts, type: 2 }));
                }

                if (data.NumberOfHappyFaces > 0) {
                    socialEmotions.push(ko.mapping.fromJS({ number: data.NumberOfHappyFaces, type: 3 }));
                }

                if (data.NumberOfWorriedFaces > 0) {
                    socialEmotions.push(ko.mapping.fromJS({ number: data.NumberOfWorriedFaces, type: 4 }));
                }

                if (data.NumberOfLaughingCrying > 0) {
                    socialEmotions.push(ko.mapping.fromJS({ number: data.NumberOfLaughingCrying, type: 5 }));
                }

                socialEmotions.sort(function (l, r) {
                    return l.number() < r.number() ? 1 : -1;
                });
            },

            sortAttendees = function (memberid, firstName, thumbnailURL, typeid) {
                var match = ko.utils.arrayFirst(attendees(), function (item) {
                    return item.MemberID() === memberid;
                });

                if (match) {
                    match.LastSocialEmotionTypeID(typeid);

                    var i = attendees().indexOf(match);

                    if (i > 0) {
                        var underlayingArray = attendees();
                        var valuesToPush = underlayingArray.splice(i, 1);

                        underlayingArray.unshift(valuesToPush[0]);
                    }

                    attendees.valueHasMutated();

                } else {
                    var attendeeArray = attendees();

                    attendeeArray.unshift(ko.mapping.fromJS(
                        {
                            MemberID: memberid,
                            AttendeeThumbnailURL: thumbnailURL,
                            AttendeeFirstName: firstName,
                            LastSocialEmotionTypeID: typeid
                        }
                    ));

                    attendees.valueHasMutated();
                }
            },

            animateEmoji = function (typeid) {
                var fileName = "";

                switch (typeid) {
                    case 1: { fileName = "/Content/images/emoji_clapping.png"; break; }
                    case 2: { fileName = "/Content/images/emoji_redheart.png"; break; }
                    case 3: { fileName = "/Content/images/emoji_happy.png"; break; }
                    case 4: { fileName = "/Content/images/emoji_worried.png"; break; }
                    case 5: { fileName = "/Content/images/emoji_laughing.png"; break; }
                    default:
                        break;
                }

                var generatedId = "emoji_" + Date.now();

                var $elm = $("<div id=\"" + generatedId + "\" class=\"animated-img\"><img src=\"" + fileName + "\" /></div>");
                $(".animation-dummy").prepend($elm);

                setTimeout(function () {
                    if ($("#" + generatedId).length > 0) {
                        $("#" + generatedId).remove();
                    }
                }, 3000);
            },

            addSocialEmotion = function (typeid) {
                animateEmoji(typeid);

                sortAttendees(shell.currentMember.MemberID, shell.currentMember.FirstName, shell.currentMember.ThumbnailURL, typeid);

                datamanager.insertSocialEntityEmotion(gameHeaderInfo().SocialEntityID, typeid, currentGameId)
                    .then(function (json) {
                    })
                    .fail(function (error) {
                    });
            },

            initGameOverview = function () {
                if (overviewItems().length === 0) {
                    datamanager.initGameOverview(currentGameId, {
                        success: function (json) {
                            gameStats(json.GameStats);

                            var underlayingArray = overviewItems();

                            for (var i = 0; i < json.Blurbs.length; i++) {
                                underlayingArray.push(json.Blurbs[i]);
                            }

                            overviewItems.valueHasMutated();

                            overviewPartnerBlurb(json.Partner);
                            overviewStatisticsBlurb(json.Statistics);

                            var overviewGameInfoVM = {
                                Spectators: json.Spectators,
                                Arena: json.Arena,
                                Referees: json.GameReferees,
                                CanEditGame: json.CanEditGame
                            };

                            overviewGameInfo(overviewGameInfoVM);

                            $('#overview-afterloaded').show();
                            $('#overview-preloader').hide();

                            presenter.toggleActivity(false);
                        },
                        error: function (response, xhr) {

                        }
                    });
                }
            },

            initGameLineUps = function () {
                if (teams() === undefined || teams().length === 0) {
                    datamanager.initGameLineUps(currentGameId, {
                        success: function (json) {
                            var _temp = {
                                HomeTeamLogoURL: json.HomeTeamLogoURL,
                                AwayTeamLogoURL: json.AwayTeamLogoURL
                            };

                            teams(_temp);

                            lineUpPartnerBlurb(json.Partner);

                            homeTeamPlayers([]);
                            homeTeamSubstitutes([]);
                            homeTeamStaff([]);

                            awayTeamPlayers([]);
                            awayTeamSubstitutes([]);
                            awayTeamStaff([]);

                            homeTeamLineUp(json.HomeTeamLineUp);
                            awayTeamLineUp(json.AwayTeamLineUp);

                            var underlayingArray;

                            // Hometeam
                            if (json.HomeTeamGameTeamRoster) {
                                underlayingArray = homeTeamPlayers();

                                for (var i = 0; i < json.HomeTeamGameTeamRoster.Players.length; i++) {
                                    underlayingArray.push(json.HomeTeamGameTeamRoster.Players[i]);
                                }

                                homeTeamPlayers.valueHasMutated();

                                underlayingArray = homeTeamSubstitutes();

                                for (var k = 0; k < json.HomeTeamGameTeamRoster.Substitutes.length; k++) {
                                    underlayingArray.push(json.HomeTeamGameTeamRoster.Substitutes[k]);
                                }

                                homeTeamSubstitutes.valueHasMutated();

                                underlayingArray = homeTeamStaff();

                                for (var m = 0; m < json.HomeTeamGameTeamRoster.TeamStaff.length; m++) {
                                    underlayingArray.push(json.HomeTeamGameTeamRoster.TeamStaff[m]);
                                }

                                homeTeamStaff.valueHasMutated();
                            }

                            if (json.AwayTeamGameTeamRoster) {
                                underlayingArray = awayTeamPlayers();

                                for (var j = 0; j < json.AwayTeamGameTeamRoster.Players.length; j++) {
                                    underlayingArray.push(json.AwayTeamGameTeamRoster.Players[j]);
                                }

                                awayTeamPlayers.valueHasMutated();

                                underlayingArray = awayTeamSubstitutes();

                                for (var l = 0; l < json.AwayTeamGameTeamRoster.Substitutes.length; l++) {
                                    underlayingArray.push(json.AwayTeamGameTeamRoster.Substitutes[l]);
                                }

                                awayTeamSubstitutes.valueHasMutated();

                                underlayingArray = awayTeamStaff();

                                for (var n = 0; n < json.AwayTeamGameTeamRoster.TeamStaff.length; n++) {
                                    underlayingArray.push(json.AwayTeamGameTeamRoster.TeamStaff[n]);
                                }

                                awayTeamStaff.valueHasMutated();
                            }


                            $('#lineup-preloader').hide();
                            $('#lineup-afterloaded').fadeIn(50);
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
            },

            getGameOverview = function () {
                var tabIsActive = false;

                // Check if the overview-tab is active
                if ($('#overview-tab-button').hasClass('active')) {
                    tabIsActive = true;
                }

                // If we don't have any items loaded, we haven't opened that tab yet so we don't need to reload it
                if (overviewItems().length === 0 && tabIsActive === false)
                    return;

                datamanager.getGameOverview(currentGameId, {
                    success: function (json) {
                        overviewItems([]);

                        var underlayingArray = overviewItems();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        overviewItems.valueHasMutated();
                    },
                    error: function (response, xhr) {

                    }
                });
            },

            cleanup = function () {
                if (Number(applicationID) === 2) {
                    $('#header-view-top').removeClass('branded-ettan');
                    $("#appLogoTopBar").attr("src", swconstants.serverUrl + "/Content/images/svff-logo-side.png");
                    $("#appLogoTopBar").attr("srcset", swconstants.serverUrl + "/Content/images/svff-logo-side@2x.png 2x," + swconstants.serverUrl + "/Content/images/svff-logo-side@3x.png 3x");
                    if (window.location.href.indexOf("ettanplay") == -1) {
                        $("#mainHeaderLink").attr("href", swconstants.serverUrl + "/");
                    }

                }


                ko.utils.arrayForEach(gameMediaItems(), function (item) {
                    // Must manually remove each slide otherwise they will be duplicated 
                    if (item !== null && item.GameMediaItemID !== null) {
                        var myPlayer = videojs.getPlayer('liveStreamPlayer_' + item.GameMediaItemID);

                        if (myPlayer && myPlayer.isDisposed() === false) {
                            myPlayer.dispose();
                        }

                    }
                });

                modalWindow = null;
                LEDBanner('');

                if (ledBannerTimer) {
                    clearTimeout(ledBannerTimer);
                }

                if (eventReportTimer) {
                    clearTimeout(eventReportTimer);
                    /*clearInterval(eventReportTimer);*/

                    eventReportTimer = null;
                }

                socket.connectToHub(function () {
                    socket.hub.server.leaveGame(currentGameId);
                    socket.hub.server.unmoderateGame(currentGameId);
                });

                lastScrollPosition = $(window).scrollTop();

                expectedTime = 0;
                //lastSequentialId = 0;

                gettingTimelineItems = false;
                noMoreTimelineItemsToGet = false;

                $(document).off("assetUploadedMessage", assetUploadedMessageHandler);
                $(window).unbind('scroll', infiniteScrolling);

                $('#magazinegameview-view .createMemberOverlay').hide();

                // Pause all videos currently running
                $("video").each(function () { this.pause(); });                
            },

            cleanUpGame = function () {
                $('.leftMagazineGame').removeClass('toggleHide visibleOverrideHide visibleOverrideShow toggleShow');
                $('.rightMagazineGame').removeClass('toggleHide visibleOverrideHide visibleOverrideShow toggleShow');

                $('#timeline-preloader').show();
                $('#timeline-afterloaded').hide();

                $('#overview-afterloaded').hide();
                $('#overview-preloader').show();

                $('#league-afterloaded').hide();
                $('#league-preloader').show();

                $('#lineup-afterloaded').hide();
                $('#lineup-preloader').show();

                $('#attendees-afterloaded').hide();

                $('.magazine-tabs button').removeClass('active');
                $('.magazine-tabs button.defaultTab').addClass('active');

                $('#lineup-tab').show();
                $('#overview-tab').hide();
                $('#league-tab').hide();
                $('#moderate-tab').hide();
                $('#eventreport-tab').hide();

                $('#contentToolbar').hide();

                $('.photo.clickable').show();
                $('#gameViewMoreIcon').show();
                $('#commentText').attr("placeholder", liveTexts.DiscussionPostHeader);

                $('.comment.mobile').removeClass('hidden');
                $('.comment.wide').removeClass('hidden');

                $('.eventreport-button').addClass('hide');

                feedRows([]);
                unmoderatedPosts([]);
                overviewItems([]);
                attendeesCount('');
                attendees([]);
                gameMediaItems([]);
                gameAttentionInfoItems([]);
                leagueHeader('');
                leagueTable('');
                liveStreamPriceModel('');
                activeGameMediaItem('');

                relatedGames([]);
                gameDiscussionPost('');
                gameCheckIn('');

                homeTeamLineUp('');
                awayTeamLineUp('');

                homeTeamPlayers([]);
                homeTeamSubstitutes([]);
                homeTeamStaff([]);

                awayTeamPlayers([]);
                awayTeamSubstitutes([]);
                awayTeamStaff([]);

                teams('');

                gameAdminInformation('');
                lastSequentialId = 0;
                leagueOverviewLoaded = false;

                eventReport('');
                gamePlayers = null;

                ads = [];
                gameSponsors = [];
                gameEndPartners = [];
                gameHalftimePartners = [];
                gameLEDPartners = [];
                gameGoalPartner = null;
                gameGoalAnimationPartner = null;
                remainingGoalAnimations = 0;
                timesToNextGoalAnimation = 0;
                firstGoalFound = false;
                currentGameId = 0;
            },

            toggleLiveStream = function () {
                if ($('#streamShowButton').hasClass('hidden')) {
                    $('#streamContainer').addClass('collapsed');
                    $('#streamShowButton').removeClass('hidden');
                    $('#streamHideButton').addClass('hidden');
                }
                else {
                    $('#streamContainer').removeClass('collapsed');
                    $('#streamShowButton').addClass('hidden');
                    $('#streamHideButton').removeClass('hidden');
                }
            },

            toggleFeedTab = function (data, event) {
                $(".magazine-tabs button").removeClass("active");

                $(event.target).addClass("active");

                hideTabs();

                $('.leftMagazineGame').addClass('toggleShow').removeClass('toggleHide defaultHidden');
                $('.rightMagazineGame').addClass('toggleHide');
            },

            toggleLineUpTab = function (data, event) {
                $(".magazine-tabs button").removeClass("active");

                $(event.target).addClass("active");

                hideTabs();

                $("#lineup-tab").fadeIn(200);

                $('.leftMagazineGame').addClass('toggleHide');
                $('.rightMagazineGame').addClass('toggleShow').removeClass('toggleHide defaultHidden');

                initGameLineUps();
            },

            toggleOverviewTab = function (data, event) {
                $(".magazine-tabs button").removeClass("active");

                $(event.target).addClass("active");

                hideTabs();

                $("#overview-tab").fadeIn(200);

                $('.leftMagazineGame').addClass('toggleHide');
                $('.rightMagazineGame').addClass('toggleShow').removeClass('toggleHide defaultHidden');

                initGameOverview();
            },

            toggleTableTab = function (data, event) {
                $(".magazine-tabs button").removeClass("active");

                $(event.target).addClass("active");

                hideTabs();

                $("#league-tab").fadeIn(200);

                $('.leftMagazineGame').addClass('toggleHide');
                $('.rightMagazineGame').addClass('toggleShow').removeClass('toggleHide defaultHidden');

                if (leagueOverviewLoaded === false) {
                    leagueOverviewLoaded = true;
                    datamanager.initGameLeagueOverview(currentGameId, {
                        success: function (json) {
                            console.log(json);

                            leagueHeader(json.LeagueHeader);

                            var underlayingArray = relatedGames();

                            for (var i = 0; i < json.RelatedGames.length; i++) {
                                underlayingArray.push(json.RelatedGames[i]);
                            }

                            relatedGames.valueHasMutated();

                            leagueTable(json.LeagueTableGenericTable);

                            leaguePartnerBlurb(json.Partner);

                            $('#league-afterloaded').show();
                            $('#league-preloader').hide();
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
            },

            toggleModerateTab = function (data, event) {
                $(".magazine-tabs button").removeClass("active");

                $(event.target).addClass("active");

                hideTabs();

                $("#moderate-tab").fadeIn(200);

                if (memberCanModerateGame()) {
                    socket.hub.server.moderateGame(currentGameId);
                }

                $('.leftMagazineGame').addClass('toggleHide');
                $('.rightMagazineGame').addClass('toggleShow').removeClass('toggleHide defaultHidden');

                datamanager.getUnverifiedGamePosts(currentGameId, 0, maxNumberPosts, {
                    success: function (json) {
                        unmoderatedPosts([]);

                        var underlayingArray = unmoderatedPosts();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        unmoderatedPosts.valueHasMutated();

                        if (json.length === maxNumberPosts) {
                            $('#getMoreUnmoderatedPosts').show();
                        } else {
                            $('#getMoreUnmoderatedPosts').hide();
                        }

                        $('#moderate-afterloaded').show();
                        $('#moderate-preloader').hide();
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            toggleHomeTeam = function () {
                $(".clubLogoContainer").removeClass('active');
                $(".clubLogoContainer.homeTeam").addClass('active');
                $(".awayTeamRoster").hide();
                $(".homeTeamRoster").fadeIn(50);
            },

            toggleAwayTeam = function () {
                $(".clubLogoContainer").removeClass('active');
                $(".clubLogoContainer.awayTeam").addClass('active');
                $(".homeTeamRoster").hide();
                $(".awayTeamRoster").fadeIn(50);
            },

            toggleGameStatsTab = function (tab, data, event) {
                $(event.target).closest('.btn-group').find('.btn').each(function (key, value) {
                    $(this).removeClass('active');
                });

                $(event.target).addClass("active");

                $('#overview-tab .game-stats-tab').hide();

                switch (tab) {
                    case 0:
                        $('#overview-tab .home-team-player-stats').fadeIn(200);
                        break;
                    case 1:
                        $('#overview-tab .game-stats').fadeIn(200);
                        break;
                    case 2:
                        $('#overview-tab .away-team-player-stats').fadeIn(200);
                        break;
                }
            },

            toggleLiveStreamLive = function (data, event) {
                // If the stream already is live, ignore the click
                if ($(event.target).hasClass('active'))
                    return;

                $(event.target).closest('.btn-group').find('.btn').each(function (key, value) {
                    $(this).removeClass('active');
                });

                $(event.target).addClass("active");

                var myPlayer = videojs.getPlayer('liveStreamPlayer_' + data.GameMediaItemID);

                if (myPlayer) {
                    myPlayer.src(data.VideoURL);

                    setTimeout(function () {
                        myPlayer.play();
                    }, 200);
                }
            },

            toggleLiveStreamReplay = function (data, event) {
                // If the stream already is in live mode, ignore the click
                if ($(event.target).hasClass('active'))
                    return;

                var myPlayer = videojs.getPlayer('liveStreamPlayer_' + data.GameMediaItemID);

                if (myPlayer) {
                    if (data.LiveRecordingURL && data.LiveRecordingURL.length > 0) {
                        $(event.target).closest('.btn-group').find('.btn').each(function (key, value) {
                            $(this).removeClass('active');
                        });

                        $(event.target).addClass("active");

                        myPlayer.src(data.LiveRecordingURL);

                        // Doesn't seem to work to play if we do it directly
                        setTimeout(function () {
                            myPlayer.play();
                        }, 200);
                    }
                    else {
                        // If we don't have a LiveRecordingURL yet, we need to fetch the item from our backend
                        datamanager.getMediaLiveStreamItem(data.GameMediaItemID, {
                            success: function (json) {                                
                                if (json.LiveRecordingURL && json.LiveRecordingURL.length > 0) {
                                    $(event.target).closest('.btn-group').find('.btn').each(function (key, value) {
                                        $(this).removeClass('active');
                                    });

                                    $(event.target).addClass("active");

                                    myPlayer.src(json.LiveRecordingURL);

                                    setTimeout(function () {
                                        myPlayer.play();
                                    }, 200);
                                } else {
                                    shell.showError('There is no replay available yet, try again in a short while', 'No replay available');
                                }
                            },
                            error: function (error) {

                            }
                        });
                    }
                }
            },

            showOverview = function () {
                $(".magazine-tabs button").removeClass("active");
                $('#overview-tab-button').addClass("active");

                hideTabs();

                //$("#lineup-tab").hide();                
                //$("#league-tab").hide();
                //$("#moderate-tab").hide();
                //$('#eventreport-tab').hide();

                $("#overview-tab").fadeIn(200);

                $('.leftMagazineGame').addClass('toggleHide');
                $('.rightMagazineGame').addClass('toggleShow').removeClass('toggleHide defaultHidden');

                initGameOverview();
            },

            showEditSpectators = function () {
                $('#magazinegameview-view .spectatorsOverlay').fadeIn(200);
            },

            updateSpectators = function (data) {
                var _data = {
                    GameID: currentGameId,
                    Spectators: data.Spectators
                };

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.updateSpectators(_data, {
                    success: function (json) {
                        overviewItems([]);

                        // Reload
                        initGameOverview();

                        shell.hideProgressIndicator();
                        $('#magazinegameview-view .spectatorsOverlay').fadeOut(200);
                    },
                    error: function (error) {
                        alert(error);

                        shell.hideProgressIndicator();
                    }
                });
            },

            scrollToReport = function () {
                $('html, body').animate({
                    scrollTop: $("#contentToolbar").offset().top - 180
                }, 200);
            },

            toggleEventReportTab = function (data, event) {
                $(".magazine-tabs button").removeClass("active");
                $('.eventreport-tab-button').addClass("active");

                resetEventReporting();

                scrollToReport();
                /*window.scrollTo(0, 0);*/

                // For getting players
                if (gamePlayers === null) {
                    datamanager.getPlayersForGameSelectLists(gameHeaderInfo().HomeTeamID, gameHeaderInfo().AwayTeamID, currentGameId, {
                        success: function (json) {
                            gamePlayers = json;
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }

                hideTabs();

                $('#eventreport-tab').fadeIn(200);

                $('.leftMagazineGame').addClass('toggleHide');
                $('.rightMagazineGame').addClass('toggleShow').removeClass('toggleHide defaultHidden');
            },

            toggleOvertime = function (data, event) {
                showOvertimeMinutes(!data.Overtime);

                return true;
            },

            runEventReportTimer = function () {
                var secondsToAdd = 1;
                var interval = 1000;
                var timeStamp = Date.now();

                if (expectedTime === 0) {
                    expectedTime = Date.now();
                }

                var drift = Date.now() - expectedTime;

                // console.log(drift);

                if (drift > interval) {
                    // If the drift is larger then the interval, we need to calculate how many "whole" seconds has passed
                    // secondsToAdd = 1 + Math.floor(drift / interval);

                    console.log('Drift is larger then the interval: ' + drift);

                    // Use the remainder as the new drift
                    /*drift = drift % interval;*/

                    drift = 0;

                    // Probably need to reset the expected time here
                    expectedTime = Date.now();
                }

                expectedTime += interval;

                // Restart timer
                eventReportTimer = setTimeout(runEventReportTimer, interval - drift);

                lastTimerRunTime = timeStamp;

                if (eventReport().ClockIsStopped === false) {
                    eventReportSeconds += secondsToAdd;
                }

                // Time can never go beyond the end time of the period
                // TODO: Might need to make a special fix for 'full time'
                if (eventReport().PeriodEndTime > 0 && eventReportSeconds > eventReport().PeriodEndTime) {
                    // TODO: Flash clock when it has passed the end of the period?
                    eventReportSeconds = eventReport().PeriodEndTime;
                }

                if (eventReportSeconds < 0)
                    eventReportSeconds = 0;

                eventReportTime(secondsToDateString(eventReportSeconds));

                // NOTE: timer is changed to interval-timer, thus we don't need to restart it
                // Restart timer
                // eventReportTimer = setTimeout(runEventReportTimer, 1000);
            },

            secondsToDateString = function (d) {
                d = Number(d);

                var seconds = d % 60;
                var minutes = Math.floor(d / 60);

                return pad(minutes, 2) + ':' + pad(seconds, 2);
            },

            pad = function (num, size) {
                var s = num + "";

                if (s.length < 2) {
                    while (s.length < size) s = "0" + s;
                    return s;
                }
                else {
                    return s;
                }
            },

            hideTabs = function () {
                $('.gameview-tab').hide();
            },

            addComment = function () {
                // TODO: This fails when clicking on the MagazineBlurbType1 since gameAccessInfo isn't loaded yet

                if (gameAccessInfo().HideCommentInput)
                    alert(liveTexts.CommentsAreDisabled);
                else
                    router.navigateTo(config.hashes.gamecomment + '/' + currentGameId);
            },

            addPicture = function () {
                // TODO: This fails when clicking on the MagazineBlurbType1 since gameAccessInfo isn't loaded yet

                if (gameHeaderInfo().PhotographyForbidden)
                    alert(liveTexts.PhotographyForbidden);
                else if (gameAccessInfo().HidePictureInput)
                    alert(liveTexts.PhotosAndVideosAreDisabled);
                else
                    $('#magazinegameviewassetupload').focus().trigger('click');
            },

            addGameReport = function () {
                // TODO: This fails when clicking on the MagazineBlurbType1 since gameAccessInfo isn't loaded yet

                // Safety precaution right now so people can't write GameReports in Swiss
                return;
                //router.navigateTo(config.hashes.gamereport + '/' + currentGameId + '/2');
            },

            toggleComments = function () {
                if (hideTimelineComments() === true)
                    hideTimelineComments(false);
                else
                    hideTimelineComments(true);

                datamanager.updateHideTimelineComments(hideTimelineComments(), {
                    success: function (model) {

                        $('#timeline-afterloaded').hide();
                        $('#timeline-preloader').show();

                        feedRows([]);

                        initTimeline();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            cancelOverlay = function () {
                $('#magazinegameview-view .overlay').fadeOut(200);
            },

            showMagazineGameView = function (selectedGame) {
                initialize(selectedGame, selectedGame.GameID, function () {
                    router.navigateTo(config.hashes.magazinegameview + '/' + selectedGame.GameID);
                });
            },

            viewAllAttendees = function (section) {
                magazineGameViewDetails.initialize(null, currentGameId, 'attendees', function () {
                    router.navigateTo(config.hashes.magazinegameviewdetails + '/' + currentGameId + '/' + 'attendees');
                });
            },

            getLatestDate = function () {
                var maxDate = moment([1999, 0, 5]);
                ko.utils.arrayMap(feedRows(), function (feed) {
                    // Check if Picture object
                    if (feed.LiveTimelineItemTypeID !== 99) {
                        if (moment(feed.UpdateTime).diff(maxDate) > 0)
                            maxDate = moment(feed.UpdateTime);
                    }
                });

                return maxDate;
            },

            getEarliestDate = function () {
                var minDate = null;

                ko.utils.arrayMap(feedRows(), function (feed) {
                    if (feed.LiveTimelineItemTypeID !== 99) {
                        if (minDate === null || moment(feed.UpdateTime).diff(minDate) < 0) {
                            minDate = moment(feed.UpdateTime);
                        }
                    }
                });

                if (minDate === null)
                    minDate = moment([1999, 0, 5]);

                return minDate;
            },

            saveComment = function () {
                var gameDiscussionPostModel = new model.GameDiscussionPost()
                    .MemberID(shell.currentMember.MemberID)
                    .GameID(currentGameId)
                    .Text($('#commentText').val());
                gameDiscussionPost(gameDiscussionPostModel);

                if (validationErrors().length === 0) {
                    datamanager.insertGameDiscussionPost(ko.toJS(gameDiscussionPost()), {
                        success: function (json) {
                            //getLiveTimelineBlurbUpdates();
                            presenter.toggleActivity(false);

                            if (gameAccessInfo().ContentModerated) {
                                //shell.showToast('Din kommentar har skickats för granskning');
                            }
                        },
                        error: function (response) {
                            alert(response);
                            presenter.toggleActivity(false);
                        }
                    });
                    $('#commentText').val('');
                }

                return false;
            },

            saveLiveStreamPrice = function () {
                var price = $('#liveStreamPrice').val();

                if (price.length === 0) {
                    alert(liveTexts.SetAPrice);
                }
                else if (isNaN(price)) {
                    alert(liveTexts.SetAPrice);
                } else if (price < liveStreamPriceModel().MinPrice) {
                    alert(liveTexts.LowestAllowedPriceIs + ' ' + liveStreamPriceModel().MinPrice + ' ' + liveStreamPriceModel().CurrencyName);
                } else if (price > liveStreamPriceModel().MaxPrice) {
                    alert(liveTexts.HighestAllowedPriceIs + ' ' + liveStreamPriceModel().MaxPrice + ' ' + liveStreamPriceModel().CurrencyName);
                } else {
                    shell.showProgressIndicator(MiscTexts.Saving);

                    datamanager.createGameLiveStreamSettings(currentGameId, liveStreamPriceModel().TeamID, price)
                        .then(function (data) {
                            shell.hideProgressIndicator();

                            $('#magazinegameview-view .liveStreamPriceOverlay').hide();
                            $('#magazinegameview-view .planLiveStreamOverlay').show();
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            console.log(error);
                        });
                }
            },

            writeBeforeGameReport = function (data) {
                if (checkMenuAccess(data) === false)
                    return;

                router.navigateTo(config.hashes.gamereport + '/' + currentGameId + '/1');
            },

            writeAfterGameReport = function (data) {
                if (checkMenuAccess(data) === false)
                    return;

                router.navigateTo(config.hashes.gamereport + '/' + currentGameId + '/2');
            },

            checkMenuAccess = function (data) {
                switch (data.State) {
                    case 0:
                        return true;
                    case 1:
                        alert(data.ForbiddenText);
                        return false;
                    case 2:
                    case 3:
                        return false;
                }

                return false;
            },

            createGameTeamRoster = function (data) {
                if (checkMenuAccess(data) === false)
                    return;

                datamanager.canCreateGameTeamRoster(currentGameId, {
                    success: function (json) {
                        if (json.Allowed) {
                            $('#magazinegameview-view .selectGameTeamRosterTeamOverlay').show();
                        } else {
                            alert(json.Description);
                        }
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            createGameLineUp = function (data) {
                if (checkMenuAccess(data) === false)
                    return;

                $('#magazinegameview-view .selectGameLineUpTeamOverlay').show();
            },

            onKeyPressAllowNumeric = function (d, e) {
                return utils.isNumericOrDelete(e);                
            },

            onKeyPressAllowDecimal = function (d, e) {
                return e.metaKey || e.which <= 0 || e.which === 8 || e.which === 46 || /[0-9]/.test(String.fromCharCode(e.which));
            },

            onGameResultGuess = function (data, event) {
                $('#guess-error').hide();

                var homeScore = $('#guess-home-team').val();
                var awayScore = $('#guess-away-team').val();

                if (homeScore.length === 0 || awayScore.length === 0)
                    return;

                homeScore = Number(homeScore);
                awayScore = Number(awayScore);

                if (isNaN(homeScore) || isNaN(awayScore))
                    return;

                if (homeScore === awayScore && data.CanGuessTie === false) {
                    $('#guess-error').show();
                    return;
                }

                $(event.target).prop("disabled", true);

                datamanager.insertGameResultGuess(currentGameId, homeScore, awayScore)
                    .then(function (json) {
                        datamanager.getTimelineBlurb(data.GameID, data.LiveTimeItemID, data.LiveTimelineItemTypeID, {
                            success: function (json) {
                                var existingItem = checkIfIsExistingItem(json);

                                if (existingItem) {
                                    feedRows.replace(existingItem, json);
                                }
                            },
                            error: function (error) {
                                console.log(error);
                            }
                        });

                    })
                    .fail(function (error) {
                        $(event.target).prop("disabled", false);
                        alert(error.statusText);

                    });

            },

            selectGameTeamRosterTeam = function (id, data, event) {
                datamanager.insertGameTeamRoster(currentGameId, id, {
                    success: function (gameTeamRosterId) {
                        cancelOverlay();

                        cleanUpGame();

                        router.navigateTo(config.hashes.gameteamroster + '/' + gameTeamRosterId);
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            selectGameLineUpTeam = function (id, data, event) {
                datamanager.canCreateGameLineUp(currentGameId, id, {
                    success: function (json) {
                        if (json.Allowed) {
                            cancelOverlay();

                            router.navigateTo(config.hashes.lineup + '/' + currentGameId + '/' + id);

                            cleanUpGame();
                        } else {
                            alert(json.Description);
                        }
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            addHighlight = function (data) {
                if (checkMenuAccess(data) === false)
                    return;

                router.navigateTo(config.hashes.gamevideo + '/' + currentGameId + '/2'); // 2 is highlight
            },

            addReplay = function (data) {
                if (checkMenuAccess(data) === false)
                    return;

                router.navigateTo(config.hashes.gamevideo + '/' + currentGameId + '/3'); // 3 is replay
            },

            addEventReport = function (data) {
                if (checkMenuAccess(data) === false)
                    return;

                if (gameHeaderInfo().SportID === 1) {
                    datamanager.initFootballEventReportVC(currentGameId, {
                        success: function (json) {
                            parseAddEventReportResponse(json);
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                } else if (gameHeaderInfo().SportID === 2) {
                    datamanager.initFloorballEventReportVC(currentGameId, {
                        success: function (json) {
                            parseAddEventReportResponse(json);
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                } else if (gameHeaderInfo().SportID === 6) {
                    datamanager.initFutsalEventReportVC(currentGameId, {
                        success: function (json) {
                            parseAddEventReportResponse(json);
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                } else {
                    alert('Sport not supported yet!');
                }
            },

            editEventReport = function (data) {
                // Hide event reporting
                $('.eventReportSubMenu').hide();                

                var eventReportId = 0;

                switch (data.SportID) {
                    case 1:
                        eventReportId = Number(data.FootballEventReportID);
                        break;
                    case 2:
                        eventReportId = Number(data.FloorballEventReportID);
                        break;
                    case 6:
                        eventReportId = Number(data.FutsalEventReportID);
                        break;
                }

                // Fill model with current values
                var eventReportOptions = {
                    EventReportID: eventReportId,
                    NumberOfPeriods: Number(data.NumberOfPeriods),
                    PeriodLength: Math.floor(data.PeriodLengthInSeconds / 60),
                    Overtime: data.GamesDecidedByOvertime,
                    Penalties: data.GamesDecidedByPenalties,
                    OvertimeLength: Math.floor(data.OvertimePeriodLengthInSeconds / 60),
                    SettingsLocked: false
                };

                showOvertimeMinutes(eventReportOptions.Overtime);
                eventReportToAdd(eventReportOptions);

                $('#eventreport-tab').hide();
                $('.eventreport-subview-tab').hide();
                $('#create-eventreport-tab').show();
                $('#eventreport-edit').show();
            },

            parseAddEventReportResponse = function (json) {
                var alreadyReporting = false;

                canTakeControlOfReport(false);

                for (var i = 0; i < json.ExistingEventReports.length; i++) {
                    if (json.ExistingEventReports[i].ReporterMemberID === shell.currentMember.MemberID) {
                        toggleEventReportTab();

                        alreadyReporting = true;
                        break;
                    }
                }

                if (alreadyReporting === false) {
                    var eventReportOptions = {
                        NumberOfPeriods: Number(json.NewEventReport.NumberOfPeriods),
                        PeriodLength: Math.floor(json.NewEventReport.PeriodLengthInSeconds / 60),
                        Overtime: json.NewEventReport.GamesDecidedByOvertime,
                        Penalties: json.NewEventReport.GamesDecidedByPenalties,
                        OvertimeLength: Math.floor(json.NewEventReport.OvertimePeriodLengthInSeconds / 60),
                        SettingsLocked: false
                    };

                    showOvertimeMinutes(eventReportOptions.Overtime);

                    eventReportToAdd(eventReportOptions);

                    if (json.ExistingEventReports.length > 0) {
                        existingEventReports([]);

                        var underlayingArray = existingEventReports();

                        for (var j = 0; j < json.ExistingEventReports.length; j++) {
                            underlayingArray.push(json.ExistingEventReports[j]);

                            if (json.ExistingEventReports[j].CanTakeControlOfReport) {
                                canTakeControlOfReport(true);
                            }
                        }

                        existingEventReports.valueHasMutated();

                        $('.leftMagazineGame').addClass('toggleHide');
                        $('.rightMagazineGame').addClass('toggleShow').removeClass('toggleHide defaultHidden');

                        $('.magazine-tabs button').removeClass("active");

                        $('.gameview-tab').hide();
                        $('#create-eventreport-tab').show();

                        $('.eventreport-subview-tab').hide();
                        $('#eventreport-takeover').show();

                    } else {
                        $('.leftMagazineGame').addClass('toggleHide');
                        $('.rightMagazineGame').addClass('toggleShow').removeClass('toggleHide defaultHidden');

                        $('.magazine-tabs button').removeClass("active");

                        showCreateEventReport();
                    }
                }
            },

            planLiveStream = function (data) {
                if (checkMenuAccess(data) === false)
                    return;

                datamanager.initCreateLiveStream(currentGameId, {
                    success: function (json) {
                        shell.hideProgressIndicator();

                        if (json.PriceRequired === false || (json.PriceRequired === true && json.PriceIsSet === true)) {
                            $('#magazinegameview-view .planLiveStreamOverlay').show();
                        } else {
                            liveStreamPriceModel(json);

                            $('#magazinegameview-view .liveStreamPriceOverlay').show();
                        }
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            scheduleLiveStream = function (external) {
                $('#magazinegameview-view .planLiveStreamOverlay').hide();

                shell.showProgressIndicator(liveTexts.PlanningLivestream);

                datamanager.scheduleLiveStream(currentGameId, external, true, 1)
                    .then(function (data) {
                        shell.hideProgressIndicator();

                        if (external) {
                            router.navigateTo(config.hashes.livestream + '/' + data.LiveStreamID);
                        }

                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        console.log(error);
                    });
            },

            validationErrors = ko.computed(function () {
                var valArray = gameDiscussionPost() ? ko.validation.group(gameDiscussionPost())() : [];
                return valArray;
            }),

            showAdminView = ko.computed(function () {
                return $.cookie('adminMode') ? true : false;
            }),

            showAdminLiveStream = function (data) {
                gamemediaitem.initialize(data);

                router.navigateTo(config.hashes.gamemediaitem);
            },

            memberIsSportswikAdmin = ko.computed(function () {
                if (_.isObject(shell.currentMember)) {
                    return shell.currentMember.IsSportswikAdmin;
                }

                return false;
            }),

            addNewFeedItems = function (newFeedItems) {
                for (var i = 0; i < newFeedItems.length; i++) {
                    var item = newFeedItems[i];

                    // check if item already exists in array
                    var existingItem = checkIfIsExistingItem(item);

                    if (existingItem) {
                        // replace existing item with new
                        if (item.Deleted) {
                            feedRows.remove(existingItem);
                        }
                        else {
                            feedRows.replace(existingItem, item);
                        }
                    } else {
                        // add new item in array
                        if (!item.Deleted) {
                            insertItemInFeed(item);
                        }
                    }
                }

                //if (newFeedItems.length > 0) {
                //    feedRows(tempTop.concat(underlyingArray));
                //}
            },

            checkIfIsExistingItem = function (item) {
                var existingItem = ko.utils.arrayFirst(feedRows(), function (line) {
                    return line.LiveTimeItemID === item.LiveTimeItemID && line.LiveTimelineItemTypeID === item.LiveTimelineItemTypeID;
                });

                return existingItem;
            },

            checkIfIsExistingItemByID = function (itemId, itemTypeId) {
                var existingItem = ko.utils.arrayFirst(feedRows(), function (line) {
                    return line.LiveTimeItemID === itemId && line.LiveTimelineItemTypeID === itemTypeId;
                });

                return existingItem;
            },

            insertItemInFeed = function (item) {
                var insertTime = moment(item.InsertTime);
                var addedAtIndex = 0;

                // Check if we have any GameEndPartners
                if (gameEndPartners.length > 0) {
                    if (item.LiveTimelineItemTypeID === 1 && item.EREventInfo.IsGameEnd) {
                        item.EREventInfo.PartnerFeature = gameEndPartners[0];
                    }
                }

                if (feedRows().length === 0) {
                    // Empty list, push it to the top
                    feedRows.unshift(item);
                } else if (insertTime > moment(feedRows()[0].InsertTime)) {
                    // Item is newer then the top one in the list, push it to the top


                    feedRows.unshift(item);
                } else {
                    var itemAdded = false;

                    // Find suitable place in between items
                    for (var i = 0; i < feedRows().length; i++) {
                        if (moment(feedRows()[i].InsertTime) < insertTime) {
                            feedRows.splice(i, 0, item);
                            itemAdded = true;

                            // If item is added in between other items, we don't care about inserting ads
                            addedAtIndex = -1;
                            break;
                        }
                    }

                    // If we can't find a suitable place to put the item, put it at the bottom of the list
                    if (!itemAdded) {
                        feedRows.push(item);

                        addedAtIndex = feedRows().length;
                    }
                }

                // If we have halftime-partners, insert them
                if (gameHalftimePartners.length > 0 && addedAtIndex !== -1) {
                    if (item.LiveTimelineItemTypeID === 1 && item.EREventInfo.IsPeriodEnd && item.EREventInfo.Period === 1 && !item.EREventInfo.IsGameEnd) {
                        var itemToInsert = gameHalftimePartners[0];

                        itemToInsert.InsertTime = item.InsertTime;
                        itemToInsert.UpdateTime = item.UpdateTime;

                        if (addedAtIndex === 0) { // Add the item to the top
                            feedRows.splice(0, 0, itemToInsert);
                        }
                        else
                            feedRows.splice(addedAtIndex - 1, 0, itemToInsert);
                    }
                }

                insertAd(item, addedAtIndex);
            },

            insertAd = function (itemAbove, ix) {
                if (ads.length > 0 && ix >= 0) {
                    var adInsertIndex = adStartPosition - 1;

                    // If we inserted an item at the bottom of the array, search upwards in the array
                    if (ix > 0) {
                        // Look upwards in the array
                        for (var i = ix - 1; i >= 0; i--) {
                            if (feedRows()[i].IsAd) {
                                var diff = ix - i;

                                if (diff < adInterval) {
                                    return;
                                }
                                else {
                                    adInsertIndex = ix + 1;
                                }
                                break;
                            }
                        }
                    } else {
                        // Else search downwards
                        for (var j = 0; j < feedRows().length; j++) {
                            if (feedRows()[j].IsAd) {

                                if (j < adInterval) {
                                    return;
                                }
                                else {
                                    adInsertIndex = 1;
                                }
                                break;
                            }
                        }
                    }

                    var adToInsert;

                    if (repeatAds) {
                        // If we repeat the ads we need to do a deep copy, this is a simplified way of doing it
                        // this doesn't always work and could cause loss of data but with the current ad-model it works
                        adToInsert = JSON.parse(JSON.stringify(ads[adIndex]));

                        adIndex += 1;

                        if (adIndex > ads.length - 1)
                            adIndex = 0;
                    }
                    else {
                        // No need to deepcopy if the ad is only added once to the list
                        adToInsert = ads[adIndex];
                        // If we don't repeat the ads, remove it from the list when we have added it
                        ads.splice(0, 1);
                    }

                    adToInsert.InsertTime = itemAbove.InsertTime;
                    adToInsert.UpdateTime = itemAbove.UpdateTime;

                    feedRows.splice(adInsertIndex, 0, adToInsert);
                }
            },

            // Animation callbacks for the new feed in the list
            showFeedElement = function (elem) {
                if ($(elem).is("li")) {
                    setTimeout(function () {
                        $(elem).addClass('in');
                    }, 0);
                }
                //if (elem.nodeType === 1) $(elem).hide().slideDown();
            },

            showLiveDetails = function (data) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.livedetails + '/' + currentGameId + '/' + data.LiveTimeItemID + '/' + data.LiveTimelineItemTypeID;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.livedetails + '/' + currentGameId + '/' + data.LiveTimeItemID + '/' + data.LiveTimelineItemTypeID);

                        //livedetails.initialize(data, gameHeaderInfo(), null, currentGameId, function(callback) {
                        //    router.navigateTo(config.hashes.livedetails + '/' + currentGameId + '/' + data.LiveTimeItemID + '/' + data.LiveTimelineItemTypeID);
                        //});
                    }
                };
                return navigationItem;
            },

            showModerateMenu = function (data, event) {
                var item = $(event.currentTarget).find('.moderateToolbar');

                var itemIsVisible = item.is(':visible');

                $('.moderateToolbar').hide();

                if (itemIsVisible)
                    item.hide();
                else
                    item.show();
            },

            denyPost = function (data) {
                datamanager.deleteGameDiscussionPost(data.LiveTimeItemID, {
                    success: function (json) {
                        unmoderatedPosts.remove(data);
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            acceptPost = function (data) {
                datamanager.verifyPost(data.LiveTimeItemID, {
                    success: function (json) {
                        unmoderatedPosts.remove(data);
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            getMoreUnmoderatedPosts = function () {
                var underlayingArray = unmoderatedPosts();
                var lastItemId = 0;

                if (underlayingArray.length > 0) {
                    lastItemId = underlayingArray[underlayingArray.length - 1].LiveTimeItemID;
                }

                datamanager.getUnverifiedGamePosts(currentGameId, lastItemId, maxNumberPosts, {
                    success: function (json) {
                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        unmoderatedPosts.valueHasMutated();

                        if (json.length < maxNumberPosts) {
                            $('#getMoreUnmoderatedPosts').hide();
                        }
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            generateDownloadLink = function (data) {
                shell.showProgressIndicator(liveTexts.GettingVideo);

                if (data.GameMediaItemTypeID === 1) {
                    datamanager.getLiveStreamDownloadLink(data.GameMediaItemID, {
                        success: function (json) {
                            liveStreamDownloadLink(json);

                            shell.hideProgressIndicator();

                            $('#magazinegameview-view .livestreamDownloadLinkOverlay').show();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                }
                else if (data.GameMediaItemTypeID === 2 || data.GameMediaItemTypeID === 3) {
                    datamanager.downloadVideo(data.GameMediaItemID, {
                        success: function (json) {                            
                            if (json.Status === 2) {
                                liveStreamDownloadLink(json.DownloadURL);

                                shell.hideProgressIndicator();

                                $('#magazinegameview-view .livestreamDownloadLinkOverlay').show();
                            }
                            else {
                                shell.hideProgressIndicator();

                                alert(json.Message);
                            }
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });

                    //datamanager.getGameVideoReplayDownloadLink(data.GameMediaItemID, {
                    //    success: function (json) {
                    //        liveStreamDownloadLink(json);

                    //        shell.hideProgressIndicator();

                    //        $('#magazinegameview-view .livestreamDownloadLinkOverlay').show();
                    //    },
                    //    error: function (error) {
                    //        shell.hideProgressIndicator();

                    //        alert(error);
                    //    }
                    //});
                }


                return false;
            },

            deleteLiveStream = function (data) {
                var r = confirm(liveTexts.AreYouSureYouWantToDeleteThisLivestream);

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Deleting);

                    datamanager.deleteLiveStream(data.GameMediaItemID, {
                        success: function (model) {
                            reloadGameMediaItems();

                            shell.hideProgressIndicator();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();
                        }
                    })
                }
            },

            deleteGameVideo = function (data) {
                var confirmText = '';

                if (data.GameMediaItemTypeID === 3)
                    confirmText = liveTexts.AreYouSureYouWantToDeleteThisReplay;
                else
                    confirmText = liveTexts.AreYouSureYouWantToDeleteThisHighlight;

                var r = confirm(confirmText);

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Deleting);

                    datamanager.deleteGameVideo(data.GameMediaItemID, {
                        success: function (model) {
                            reloadGameMediaItems();

                            shell.hideProgressIndicator();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();
                        }
                    })
                }
            },

            deleteTimelineItem = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    var existingItem = checkIfIsExistingItem(data);

                    switch (data.LiveTimelineItemTypeID) {
                        case 2:
                            datamanager.deletePicture(data.LiveTimeItemID, {
                                success: function () {
                                    if (existingItem)
                                        feedRows.remove(existingItem);
                                },
                                error: function (error) {
                                    alert(error);
                                }
                            });
                            break;
                        case 5:
                            datamanager.deleteVideo(data.LiveTimeItemID, {
                                success: function () {
                                    if (existingItem)
                                        feedRows.remove(existingItem);
                                },
                                error: function (error) {
                                    alert(error);
                                }
                            });
                            break;
                        case 31: // Highlight                            
                            datamanager.deleteGameLiveStreamHighlight(data.LiveTimeItemID, {
                                success: function (json) {
                                    if (existingItem)
                                        feedRows.remove(existingItem);
                                },
                                error: function (error) {
                                    alert(error);
                                }
                            });
                            break;
                    }
                }
            },

            editTimelineItem = function (data) {
                router.navigateTo(config.hashes.assetinfo + '/game/' + currentGameId + '/' + data.LiveTimeItemID + '/' + data.LiveTimelineItemTypeID);
            },

            reportGameMediaItem = function (data) {
                switch (data.GameMediaItemTypeID) {
                    case 1: // Livestream
                        reportitem.activate(data.GameMediaItemID, 13, currentGameId);
                        break;
                    case 2: // Highlight
                        reportitem.activate(data.GameMediaItemID, 26, currentGameId);
                        break;
                    case 3: // Re-run
                        reportitem.activate(data.GameMediaItemID, 26, currentGameId);
                        break;
                }
            },

            reportTimelineItem = function (data, event) {
                reportitem.activate(data.LiveTimeItemID, data.LiveTimelineItemTypeID, currentGameId);

                return false;
            },

            disconnectHighlight = function (data, event) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.disconnectHighlightFromEvent(data.LiveTimeItemID, data.EREventInfo.SportID, {
                        success: function (json) {
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            editLiveStream = function (data) {
                console.log('edit');
                console.log(data);
            },

            navigateToFairPlayDetailsView = function (data) {
                router.navigateTo(config.hashes.livedetails + '/' + currentGameId + '/' + data.FairPlayCardID + '/12');
            },

            navigateToAddReferees = function (data) {
                router.navigateTo(config.hashes.game + '/' + currentGameId + '/referee');

                cleanUpGame();
            },

            navigateToEditTeams = function (data) {
                router.navigateTo(config.hashes.game + '/' + currentGameId + '/teams');

                cleanUpGame();
            },

            navigateToEditGoalieStatistics = function (data) {
                // Clean up gameoverview

                router.navigateTo(config.hashes.game + '/' + currentGameId + '/goaliestatistics');
            },

            navigateToLiveStreamAdmin = function (data) {
                router.navigateTo(config.hashes.livestream + '/' + data.GameMediaItemID);
            },

            navigateToGame = function (data) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.magazinegameview + '/' + data.GameID;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.magazinegameview + '/' + data.GameID);
                    }
                };
                return navigationItem;
            },

            navigateToStreamPayment = function (data) {
                if (data.GameIsPayPerView) {
                    router.navigateTo(config.hashes.stream + '/game/' + data.GameID);
                } else {
                    if (data.SubscriptionTeamID > 0)
                        router.navigateTo(config.hashes.stream + '/subscription/' + data.SubscriptionTeamID);
                    else
                        router.navigateTo(config.hashes.stream + '/subscription');
                }
            },

            navigateToFansRanking = function (data) {
                router.navigateTo(config.hashes.leagueorganizersite + '/' + data.LeagueOrganizerID + '/guessinggame');
            },

            showLineUp = function (data) {
                router.navigateTo(config.hashes.livedetails + '/' + currentGameId + '/' + data.GameLineUpID + '/15');
            },

            showLiveStream = function (data) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.livedetails + '/' + currentGameId + '/' + data + '/14';
                    },
                    toClick: function () {
                        //alert(data);
                        router.navigateTo(config.hashes.livedetails + '/' + currentGameId + '/' + data + '/14');
                    }
                };
                return navigationItem;
            },            

            getPictureURL = function (picture, screenEstate) {
                return swimagehelper.getPictureURLWithSize(picture, screenEstate);
            },

            getAdminInformation = function () {
                shell.showProgressIndicator(MiscTexts.GettingInformation);

                datamanager.getGameAdminInformation(currentGameId, {
                    success: function (model) {
                        shell.hideProgressIndicator();

                        gameAdminInformation(model);
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    }
                });
            },

            clearGameCache = function () {
                shell.showProgressIndicator("Rensar cache...");

                datamanager.clearGameCache(currentGameId, {
                    success: function (model) {
                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    }
                });
            },

            assetUploadedMessageHandler = function (e) {
                // handle callback when picture is uploaded

                // remove item from feedRows
                //var itemToRemove = getFeedItemByAssestId(e.message);
                getLiveTimelineBlurbUpdates();
            },

            assetUploadedMessage = function (e) {
                $.event.trigger({
                    type: "assetUploadedMessage",
                    message: e,
                    time: new Date()
                });
            },

            setGameHeaderInfo = function (gameHeaderInfoFromMagazine) {
                if (gameHeaderInfoFromMagazine !== null) {
                    if (currentGameId === undefined || gameHeaderInfoFromMagazine.GameID !== currentGameId) {
                        // Reload overview?
                    }

                    gameHeaderInfo(gameHeaderInfoFromMagazine);
                }
            },

            selectGameMediaItem = function (data, event) {
                // TODO: Stop the player
                activeGameMediaItem(data);
            },

            reloadGameMediaItems = function () {
                window.scrollTo(0, 0);
                datamanager.getGameMediaItems(currentGameId, {
                    success: function (json) {
                        gameMediaItems([]);

                        var underlayingArray = gameMediaItems();

                        for (var j = 0; j < json.length; j++) {
                            if ((json[j].LiveStreamProviderID === 7 || json[j].LiveStreamProviderID === 8) && json[j].LiveStreamStatusID < 302) {
                                underlayingArray.push(json[j]);
                            }
                            else if (json[j].GameMediaItemTypeID === 2 || json[j].GameMediaItemTypeID === 3) { // Highlight
                                underlayingArray.push(json[j]);
                            }
                        }

                        gameMediaItems.valueHasMutated();

                        if (gameMediaItems().length > 1 && activeVideoSection > 0) {
                            ko.utils.arrayForEach(gameMediaItems(), function (item) {
                                if (item.GameMediaItemTypeID === activeVideoSection) {
                                    activeGameMediaItem(item);
                                    return;
                                }
                            });
                        }

                        // Default to the first item
                        if (gameMediaItems().length > 0 && !activeGameMediaItem()) {
                            activeGameMediaItem(gameMediaItems()[0]);
                        }                        

                        $('#streamShowButton').addClass('hidden');
                        $('#streamHideButton').removeClass('hidden');
                    },
                    error: function (response, xhr) {
                    }
                });
            },

            navigateToGameHeaderNavigation = function () {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.gameheadernavigation + '/' + currentGameId;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.gameheadernavigation + '/' + currentGameId);
                    }
                };

                return navigationItem;
            },

            navigateToHomeTeam = function () {
                if (gameHeaderInfo().HomeTeamIsSportswikTeam)
                    router.navigateTo(config.hashes.team + '/' + gameHeaderInfo().HomeTeamID);
                else
                    alert(teamAdminTexts.TeamMissingTeamPage);
            },

            navigateToAwayTeam = function () {
                if (gameHeaderInfo().AwayTeamIsSportswikTeam)
                    router.navigateTo(config.hashes.team + '/' + gameHeaderInfo().AwayTeamID);
                else {
                    alert(teamAdminTexts.TeamMissingTeamPage);
                }
            },

            navigateToTeam = function (item) {
                router.navigateTo(config.hashes.team + '/' + item.TeamID);
            },

            navigateToTeamPlayer = function (item) {
                router.navigateTo(config.hashes.teamplayer + '/0/' + item.GamePlayerID);
            },

            navigateToStatisticRow = function (item) {
                switch (item.DeepLinkTypeID) {
                    case 5: // Team
                        router.navigateTo(config.hashes.team + '/' + item.DeepLinkItemID);
                        break;
                }
            },

            navigateToLeague = function () {
                router.navigateTo(config.hashes.leaguesite + '/' + gameHeaderInfo().LeagueID);
            },

            navigateToRegistration = function () {
                if (window.location.href.indexOf("ettanplay") != -1) {
                    window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent('/leagueorganizer/ettanplay/#/magazinegameview/' + currentGameId);
                } else {
                    window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent('/#/magazinegameview/' + currentGameId);
                }
                
            },

            navigateToLogin = function () {
                window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent('/#/magazinegameview/' + currentGameId);
            },

            navigateToEditLiveStream = function (item) {
                router.navigateTo(config.hashes.livestream + '/' + item.LiveStreamID);
            },

            navigateToArena = function (item) {
                router.navigateTo(config.hashes.arena + '/' + item.ArenaID);
            },

            createInterview = function (data) {
                navigationItem = {
                    getHrefString: function () {
                        return '/interview/addedit/' + gameHeaderInfo().GameID;
                    },
                    toClick: function () {
                        router.navigateTo('/interview/addedit/' + gameHeaderInfo().GameID);
                    }
                };

                return navigationItem;
            },

            removePicture = function (itemId) {
                var existingItem = checkIfIsExistingItemByID(itemId, 2);

                if (existingItem) {
                    feedRows.remove(existingItem);
                }
            },

            shareToFB = function () {
                // This hasn't worked for a long time so it's removed as of 2020-03-05
            },

            eventReportChangeClock = function () {
                var minutes = Number($('#clockMinutesPart').val());
                var seconds = Number($('#clockSecondsPart').val());

                // TODO More validation that we don't have the wrong clock, validate against PeriodLengthInSeconds / NumberOfPeriods / CurrentPeriod etc
                if (seconds > 59) {
                    alert(eventReportingTexts.InvalidTimeSelected);

                    return;
                }

                if (minutes > 120) {
                    alert(eventReportingTexts.InvalidTimeSelected);

                    return;
                }

                var newTime = (minutes * 60) + seconds;

                if (eventToAdd !== null) {
                    eventToAdd.GameClockSecond(newTime);
                    eventToAddObs(eventToAdd);

                    $('.eventReportSubMenu').hide();
                    $('#eventReportEventSave').show();
                }
                else {
                    eventReportSeconds = newTime;

                    $('.eventReportSubMenu').hide();
                    $('#eventReportMainMenu').show();
                }
            },

            eventReportCancelChangeClock = function () {
                if (eventToAdd !== null) {
                    $('.eventReportSubMenu').hide();
                    $('#eventReportEventSave').show();
                }
                else {
                    $('.eventReportSubMenu').hide();
                    $('#eventReportMainMenu').show();
                }
            },

            startStopPeriod = function () {
                if (eventReport().SportID === 1) {
                    eventToAdd = new viewmodel.FootballEREventVM()
                        .FootballEventReportID(eventReport().FootballEventReportID)
                        .SportID(1)
                        .EventReportedTime(new Date());

                    datamanager.getNextGameStatusFootball(eventReport().FootballEventReportID, {
                        success: function (json) {
                            $('.eventReportSubMenu').hide();
                            eventToAdd.FootballEREventTypeID(json.EREventTypeID);

                            if (json.SaveTextHeadline)
                                eventToAdd.SaveTextHeadline(json.SaveTextHeadline);

                            if (json.AdjustGameClock)
                                eventToAdd.GameClockSecond(json.GameClockSecond);

                            if (json.ShowEndGameConfirmation) {
                                $('#eventReportPeriodConfirm').show();
                                return;
                            }

                            if (json.ShowOvertime) {
                                // Confirmation dialog
                                // $('#eventReportPeriodConfirmOvertime').show();

                                eventToAddObs(eventToAdd);

                                $('#eventReportEventSave').show();
                                return;
                            }

                            if (json.ShowPenalties) {
                                // Confirmation dialog
                                // $('#eventReportPeriodConfirmPenalties').show();
                                eventToAddObs(eventToAdd);

                                $('#eventReportEventSave').show();
                                return;
                            }

                            if (json.ShowCommentView) {
                                eventToAddObs(eventToAdd);

                                $('#eventReportEventSave').show();
                            }
                            else {
                                eventToAdd.GameClockSecond(eventReportSeconds);
                                saveEREvent();
                            }
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
                else if (eventReport().SportID === 2) {
                    eventToAdd = new viewmodel.FloorballEREventVM()
                        .FloorballEventReportID(eventReport().FloorballEventReportID)
                        .SportID(2)
                        .EventReportedTime(new Date());

                    datamanager.getNextGameStatusFloorball(eventReport().FloorballEventReportID, {
                        success: function (json) {
                            $('.eventReportSubMenu').hide();
                            eventToAdd.FloorballEREventTypeID(json.EREventTypeID);

                            if (json.SaveTextHeadline)
                                eventToAdd.SaveTextHeadline(json.SaveTextHeadline);

                            if (json.AdjustGameClock)
                                eventToAdd.GameClockSecond(json.GameClockSecond);

                            if (json.ShowEndGameConfirmation) {
                                $('#eventReportPeriodConfirm').show();
                                return;
                            }

                            if (json.ShowOvertime) {
                                // Confirmation dialog
                                // $('#eventReportPeriodConfirmOvertime').show();

                                eventToAddObs(eventToAdd);

                                $('#eventReportEventSave').show();
                                return;
                            }

                            if (json.ShowPenalties) {
                                // Confirmation dialog
                                // $('#eventReportPeriodConfirmPenalties').show();
                                eventToAddObs(eventToAdd);

                                $('#eventReportEventSave').show();
                                return;
                            }

                            if (json.ShowCommentView) {
                                eventToAddObs(eventToAdd);

                                $('#eventReportEventSave').show();
                            }
                            else {
                                eventToAdd.GameClockSecond(eventReportSeconds);
                                saveEREvent();
                            }
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
                else if (eventReport().SportID === 6) {
                    eventToAdd = new viewmodel.FutsalEREventVM()
                        .FutsalEventReportID(eventReport().FutsalEventReportID)
                        .SportID(6)
                        .EventReportedTime(new Date());

                    datamanager.getNextGameStatusFutsal(eventReport().FutsalEventReportID, {
                        success: function (json) {
                            $('.eventReportSubMenu').hide();
                            eventToAdd.FutsalEREventTypeID(json.EREventTypeID);

                            if (json.SaveTextHeadline)
                                eventToAdd.SaveTextHeadline(json.SaveTextHeadline);

                            if (json.AdjustGameClock)
                                eventToAdd.GameClockSecond(json.GameClockSecond);

                            if (json.ShowEndGameConfirmation) {
                                $('#eventReportPeriodConfirm').show();
                                return;
                            }

                            if (json.ShowOvertime) {
                                // Confirmation dialog
                                // $('#eventReportPeriodConfirmOvertime').show();

                                eventToAddObs(eventToAdd);

                                $('#eventReportEventSave').show();
                                return;
                            }

                            if (json.ShowPenalties) {
                                // Confirmation dialog
                                // $('#eventReportPeriodConfirmPenalties').show();
                                eventToAddObs(eventToAdd);

                                $('#eventReportEventSave').show();
                                return;
                            }

                            if (json.ShowCommentView) {
                                eventToAddObs(eventToAdd);

                                $('#eventReportEventSave').show();
                            }
                            else {
                                eventToAdd.GameClockSecond(eventReportSeconds);
                                saveEREvent();
                            }
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }

                //// Show save dialog
                //if (eventReport().ClockIsStopped) {
                //    // If clock is stopped, we don't ask for a comment
                //    eventToAdd.GameClockSecond(eventReportSeconds);

                //    saveEREvent();
                //} else {
                //    // Show the comment view                    
                //    eventToAdd.GameClockSecond(eventReport().PeriodEndTime);
                //    eventToAddObs(eventToAdd);

                //    $('.eventReportSubMenu').hide();
                //    $('#eventReportEventSave').show();
                //}
            },

            setEventReportGameStatus = function (eventReportTypeID) {
                if (eventReport().SportID === 1) {
                    // If there are three periods, we should set status to thirdperiodend, otherwise second period end
                    if (eventReportTypeID === 12 && eventReport().NumberOfPeriods > 2)
                        eventToAdd.FootballEREventTypeID(18);
                    else
                        eventToAdd.FootballEREventTypeID(eventReportTypeID);
                }
                else if (eventReport().SportID === 2) {

                    if (eventReportTypeID === 10 && eventReport().NumberOfPeriods === 1) {
                        // If there is one period, set status to first period end
                        eventToAdd.FloorballEREventTypeID(6);
                    }
                    else if (eventReportTypeID === 10 && eventReport().NumberOfPeriods === 2) {
                        // If there are two periods, set status to second period end
                        eventToAdd.FloorballEREventTypeID(8);
                    }
                    else {
                        // Otherwise use the status we sent in
                        eventToAdd.FloorballEREventTypeID(eventReportTypeID);
                    }

                }
                else if (eventReport().SportID === 6) {
                    // If there are four periods, we should set status to fourthperiodend, otherwise third period end if more then 2 periods
                    if (eventReportTypeID === 12 && eventReport().NumberOfPeriods > 3)
                        eventToAdd.FutsalEREventTypeID(20);
                    else if (eventReportTypeID === 12 && eventReport().NumberOfPeriods > 2)
                        eventToAdd.FutsalEREventTypeID(18);
                    else
                        eventToAdd.FutsalEREventTypeID(eventReportTypeID);
                }

                eventToAddObs(eventToAdd);

                $('.eventReportSubMenu').hide();
                $('#eventReportEventSave').show();
            },

            gainControlOfEventReport = function (data) {
                var r = confirm(eventReportingTexts.TakeControlOfEventReportQuestion + ' ' + data.ReporterName + '?');

                if (r === true) {
                    shell.showProgressIndicator(eventReportingTexts.TakingOverReport);

                    if (data.SportID === 1) {
                        datamanager.gainControlOfFootballEventReport(data.FootballEventReportID, {
                            success: function (footballEventReportId) {
                                datamanager.getFootballEventReport(footballEventReportId, {
                                    success: function (json) {
                                        controlEventReportHelper(json);
                                    },
                                    error: function (error) {
                                        shell.hideProgressIndicator();

                                        alert(error);
                                    }
                                });
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });
                    }
                    else if (data.SportID === 2) {
                        datamanager.gainControlOfFloorballEventReport(data.FloorballEventReportID, {
                            success: function (floorballEventReportId) {
                                datamanager.getFloorballEventReport(floorballEventReportId, {
                                    success: function (json) {
                                        controlEventReportHelper(json);
                                    },
                                    error: function (error) {
                                        shell.hideProgressIndicator();

                                        alert(error);
                                    }
                                });
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });
                    }
                    else if (data.SportID === 6) {
                        datamanager.gainControlOfFutsalEventReport(data.FutsalEventReportID, {
                            success: function (futsalEventReportId) {
                                datamanager.getFutsalEventReport(futsalEventReportId, {
                                    success: function (json) {
                                        controlEventReportHelper(json);
                                    },
                                    error: function (error) {
                                        shell.hideProgressIndicator();

                                        alert(error);
                                    }
                                });
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });
                    }
                }
            },

            controlEventReportHelper = function (json) {
                memberIsEventReporting(true);

                $('.eventreport-button').removeClass('hide');
                $('.eventreport-tab-button').addClass("active");

                $('.gameview-tab').hide();

                eventReport(json);

                var eventTime = eventReport().LatestReportedGameClockSecond;

                if (eventReport().ClockIsStopped) {
                    eventReportSeconds = eventTime;
                }
                else {
                    var timeElapsed = Math.floor((new Date() - new Date(moment(eventReport().UpdateTime))) / 1000);

                    eventReportSeconds = eventTime + timeElapsed;

                    // Time can never go beyond the end time of the period
                    // TODO: Might need to make a special fix for 'full time'
                    if (eventReport().PeriodEndTime > 0 && eventReportSeconds > eventReport().PeriodEndTime) {
                        // TODO: Flash clock when it has passed the end of the period?
                        eventReportSeconds = eventReport().PeriodEndTime;
                    }

                    // Sanity-check
                    if (eventReportSeconds < 0)
                        eventReportSeconds = 0;
                }

                eventReportTime(secondsToDateString(eventReportSeconds));
                eventReportTimer = setTimeout(runEventReportTimer, 1000);
                /*eventReportTimer = setInterval(runEventReportTimer, 1000);*/

                toggleEventReportTab();

                shell.hideProgressIndicator();
            },

            deleteEventReport = function (data) {
                var r = confirm(eventReportingTexts.DeleteReportConfirm);

                if (r === true) {
                    shell.showProgressIndicator(eventReportingTexts.DeletingReport);

                    if (data.SportID === 1) {
                        datamanager.deleteFootballEventReport(data.FootballEventReportID, {
                            success: function () {
                                eventReport('');

                                $('.eventreport-button').addClass('hide');

                                memberIsEventReporting(false);

                                if (eventReportTimer) {
                                    clearTimeout(eventReportTimer);
                                    /*clearInterval(eventReportTimer);*/

                                    eventReportTimer = null;
                                }

                                hideTabs();
                                shell.hideProgressIndicator();
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });
                    }
                    else if (data.SportID === 2) {
                        datamanager.deleteFloorballEventReport(data.FloorballEventReportID, {
                            success: function () {
                                eventReport('');

                                $('.eventreport-button').addClass('hide');

                                memberIsEventReporting(false);

                                if (eventReportTimer) {
                                    clearTimeout(eventReportTimer);
                                    /*clearInterval(eventReportTimer);*/

                                    eventReportTimer = null;
                                }

                                hideTabs();
                                shell.hideProgressIndicator();
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });
                    }
                    else if (data.SportID === 6) {
                        datamanager.deleteFutsalEventReport(data.FutsalEventReportID, {
                            success: function () {
                                eventReport('');

                                $('.eventreport-button').addClass('hide');

                                memberIsEventReporting(false);

                                if (eventReportTimer) {
                                    clearTimeout(eventReportTimer);
                                    /*clearInterval(eventReportTimer);*/

                                    eventReportTimer = null;
                                }

                                hideTabs();
                                shell.hideProgressIndicator();
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });

                        shell.hideProgressIndicator();
                    }
                    else
                        shell.hideProgressIndicator();

                }
            },

            cancelEventReport = function () {
                $('.gameview-tab').hide();
                $('#lineup-tab').show();

                $('.magazine-tabs .defaultTab').addClass('active');
            },

            eventClicked = function (eventTypeId, showTeamSelect) {
                resetEventReporting();

                var showCardSelect = false;

                if (eventReport().SportID === 1) {
                    eventToAdd = new viewmodel.FootballEREventVM()
                        .FootballEventReportID(eventReport().FootballEventReportID)
                        .FootballEREventTypeID(eventTypeId)
                        .SportID(1)
                        .GameClockSecond(eventReportSeconds)
                        .EventReportedTime(new Date());

                    if (eventTypeId === 6)
                        showCardSelect = true;

                } else if (eventReport().SportID === 2) {
                    eventToAdd = new viewmodel.FloorballEREventVM()
                        .FloorballEventReportID(eventReport().FloorballEventReportID)
                        .FloorballEREventTypeID(eventTypeId)
                        .SportID(2)
                        .GameClockSecond(eventReportSeconds)
                        .EventReportedTime(new Date());
                } else if (eventReport().SportID === 6) {
                    eventToAdd = new viewmodel.FutsalEREventVM()
                        .FutsalEventReportID(eventReport().FutsalEventReportID)
                        .FutsalEREventTypeID(eventTypeId)
                        .SportID(6)
                        .GameClockSecond(eventReportSeconds)
                        .EventReportedTime(new Date());

                    if (eventTypeId === 6)
                        showCardSelect = true;
                }

                eventToAddObs(eventToAdd);
                $('#eventReportMainMenu').hide();

                if (showCardSelect) {
                    $('#eventReportCardSelect').show();
                } else if (showTeamSelect) {
                    $('#eventReportTeamSelect').show();
                } else {
                    $('#eventReportEventSave').show();
                }
            },

            eventReportSelectTeam = function (teamId, isHomeTeam) {
                eventToAdd.TeamID(teamId);
                eventToAdd.IsHomeTeamAction(isHomeTeam);

                if (teamId === gameHeaderInfo().HomeTeamID) {
                    /*eventToAdd.ClubAndTeamName = ko.observable(gameHeaderInfo().HomeTeamClubName + ' ' + gameHeaderInfo().HomeTeamTeamName);*/
                    eventToAdd.ClubAndTeamName = ko.observable(gameHeaderInfo().HomeTeamClubName);
                    eventToAdd.ClubLogoURL = ko.observable(gameHeaderInfo().HomeTeamClubLogoURL);
                } else {
                    /*eventToAdd.ClubAndTeamName = ko.observable(gameHeaderInfo().AwayTeamClubName + ' ' + gameHeaderInfo().AwayTeamTeamName);*/
                    eventToAdd.ClubAndTeamName = ko.observable(gameHeaderInfo().AwayTeamClubName);
                    eventToAdd.ClubLogoURL = ko.observable(gameHeaderInfo().AwayTeamClubLogoURL);
                }

                $('#eventReportTeamSelect').hide();

                eventReportPlayers([]);

                var underlayingArray = eventReportPlayers();

                if (isHomeTeam) {
                    for (var i = 0; i < gamePlayers.HomeTeamPlayers.length; i++) {
                        underlayingArray.push(gamePlayers.HomeTeamPlayers[i]);
                    }
                }
                else {
                    for (var j = 0; j < gamePlayers.AwayTeamPlayers.length; j++) {
                        underlayingArray.push(gamePlayers.AwayTeamPlayers[j]);
                    }
                }

                eventReportPlayers.valueHasMutated();

                if (eventToAdd.SportID() === 1) {
                    if (eventToAdd.FootballEREventTypeID() === 3) {
                        eventToAddObs(eventToAdd);

                        $('#eventReportEventSave').show();
                    } else {
                        if (eventToAdd.FootballEREventTypeID() === 1) {
                            if (isHomeTeam)
                                eventToAdd.CurrentScore((eventReport().HomeTeamScore + 1) + '-' + eventReport().AwayTeamScore);
                            else
                                eventToAdd.CurrentScore(eventReport().HomeTeamScore + '-' + (eventReport().AwayTeamScore + 1));

                            eventToAddObs(eventToAdd);
                            showPlayerSelect(0, true);
                        }
                        else {
                            eventToAddObs(eventToAdd);
                            showPlayerSelect(0, false);
                        }
                    }
                } else if (eventToAdd.SportID() === 2) {
                    if (eventToAdd.FloorballEREventTypeID() === 2) { // Penalty                        
                        eventToAddObs(eventToAdd);

                        showPlayerSelect(0, false);
                    }
                    else if (eventToAdd.FloorballEREventTypeID() === 3) { // Chance
                        eventToAddObs(eventToAdd);

                        $('#eventReportEventSave').show();
                    } else if (eventToAdd.FloorballEREventTypeID() === 15) { // Timeout
                        eventToAddObs(eventToAdd);

                        $('#eventReportEventSave').show();
                    } else {
                        if (eventToAdd.FloorballEREventTypeID() === 1) { // Goal
                            if (isHomeTeam)
                                eventToAdd.CurrentScore((eventReport().HomeTeamScore + 1) + '-' + eventReport().AwayTeamScore);
                            else
                                eventToAdd.CurrentScore(eventReport().HomeTeamScore + '-' + (eventReport().AwayTeamScore + 1));

                            eventToAddObs(eventToAdd);
                            showPlayerSelect(0, true);
                        }
                        else {
                            eventToAddObs(eventToAdd);
                            showPlayerSelect(0, false);
                        }
                    }
                } else if (eventToAdd.SportID() === 6) {
                    if (eventToAdd.FutsalEREventTypeID() === 3) {
                        eventToAddObs(eventToAdd);

                        $('#eventReportEventSave').show();
                    } else {
                        if (eventToAdd.FutsalEREventTypeID() === 1) {
                            if (isHomeTeam)
                                eventToAdd.CurrentScore((eventReport().HomeTeamScore + 1) + '-' + eventReport().AwayTeamScore);
                            else
                                eventToAdd.CurrentScore(eventReport().HomeTeamScore + '-' + (eventReport().AwayTeamScore + 1));

                            eventToAddObs(eventToAdd);
                            showPlayerSelect(0, true);
                        }
                        else {
                            eventToAddObs(eventToAdd);
                            showPlayerSelect(0, false);
                        }

                    }
                }
            },

            eventReportSelectCard = function (eventId) {
                if (eventReport().SportID === 1) {
                    eventToAdd.FootballEREventTypeID(eventId);
                }
                else if (eventReport().SportID === 6) {
                    eventToAdd.FutsalEREventTypeID(eventId);
                }
                $('.eventReportSubMenu').hide();
                $('#eventReportTeamSelect').show();
                // showPlayerSelect(0, false);
            },

            eventReportSelectChanceType = function (data) {
                if (eventToAdd.SportID() === 2) {
                    eventToAdd.FloorballChanceTypeID(data.FloorballChanceTypeID);
                }

                $('#eventReportChanceTypeSelect').hide();
                $('#eventReportEventSave').show();

                scrollToReport();
            },

            eventReportSelectGoalType = function (data) {
                if (eventToAdd.SportID() === 2) {
                    eventToAdd.FloorballGoalTypeID(data.FloorballGoalTypeID);
                }

                $('#eventReportGoalTypeSelect').hide();
                $('#eventReportEventSave').show();

                scrollToReport();
            },

            eventReportClearGoalType = function () {
                if (eventToAdd.SportID() === 2) {
                    eventToAdd.FloorballGoalTypeID(null);
                }

                $('#eventReportGoalTypeSelect').hide();
                $('#eventReportEventSave').show();

                scrollToReport();
            },

            eventReportClearPlayer = function () {
                if (eventToAdd.SportID() === 2) {
                    eventToAdd.Assist1PlayerID(null);
                }

                $('#eventReportPlayerSelect').hide();
                $('#eventReportEventSave').show();

                scrollToReport();
            },

            eventReportSelectPenaltyType = function (data) {
                if (eventReport().SportID === 2) {
                    eventToAdd.FloorballPenaltyTypeID(data.FloorballPenaltyTypeID);
                }

                $('#eventReportPenaltyTypeSelect').hide();
                $('#eventReportEventSave').show();

                scrollToReport();
            },

            navigateToSaveEvent = function () {
                $('.eventReportSubMenu').hide();
                $('#eventReportEventSave').show();
            },

            gainedFocus = function () {
                $('#eventreport-time-error').fadeOut(100);
            },

            lostFocus = function () {
                var minutes = Number($('#eventreport-edit-minutes').val());
                var seconds = Number($('#eventreport-edit-seconds').val());

                if (seconds > 59) {
                    seconds = 0;
                }

                var newTime = (minutes * 60) + seconds;

                eventToAdd.GameClockSecond(newTime);
            },

            eventReportSelectPlayer = function (playerId, isOwnGoal) {
                if (eventToAdd.SportID() === 1) {
                    switch (eventToAdd.FootballEREventTypeID()) {
                        case 1: // Goal
                            if (eventReportPlayerSelectIndex === 0) {
                                eventToAdd.GoalPlayerID(playerId);

                                if (playerId > 0) {
                                    eventToAdd.IsOwnGoal(false);
                                }
                                else {
                                    eventToAdd.IsOwnGoal(isOwnGoal);
                                }
                            } else {
                                eventToAdd.AssistPlayerID(playerId);
                            }

                            break;
                        case 4: // Substitute in
                            if (eventReportPlayerSelectIndex === 0) {
                                eventToAdd.SubInPlayerID(playerId);

                                // If no subout-player was selected yet, prompt for that
                                if (eventToAdd.SubOutPlayerID() === undefined) {
                                    window.scrollTo(0, 0);

                                    showPlayerSelect(1, false);
                                    return;
                                }
                            }
                            else {
                                eventToAdd.SubOutPlayerID(playerId);
                            }

                            break;
                        case 6: // Yellow Card
                        case 7: // Red Card
                            eventToAdd.CardPlayerID(playerId);

                            break;
                    }
                }
                else if (eventToAdd.SportID() === 2) {
                    switch (eventToAdd.FloorballEREventTypeID()) {
                        case 1: // Goal
                            if (eventReportPlayerSelectIndex === 0) {
                                eventToAdd.GoalPlayerID(playerId);

                                if (playerId > 0) {
                                    eventToAdd.IsOwnGoal(false);
                                }
                                else {
                                    eventToAdd.IsOwnGoal(isOwnGoal);
                                }
                            } else if (eventReportPlayerSelectIndex === 1) {
                                eventToAdd.Assist1PlayerID(playerId);
                            } else {
                                eventToAdd.Assist2PlayerID(playerId);
                            }

                            break;
                        case 2: // Penalty
                            eventToAdd.PenaltyPlayerID(playerId);

                            if (!eventToAdd.FloorballPenaltyTypeID()) {
                                eventToAddObs(eventToAdd);

                                showPenaltyTypeSelect();

                                scrollToReport();
                                return;
                            }

                            break;
                        case 16:
                            eventToAdd.SubInPlayerID(playerId);
                            break;
                        case 3: // Chance
                        case 17: // Player of the game
                            eventToAdd.EventPlayerID(playerId);
                            break;
                        case 21:
                            eventToAdd.SubOutPlayerID(playerId);
                            break;
                    }
                }
                else if (eventToAdd.SportID() === 6) {
                    switch (eventToAdd.FutsalEREventTypeID()) {
                        case 1: // Goal
                            if (eventReportPlayerSelectIndex === 0) {
                                eventToAdd.GoalPlayerID(playerId);

                                if (playerId > 0) {
                                    eventToAdd.IsOwnGoal(false);
                                }
                                else {
                                    eventToAdd.IsOwnGoal(isOwnGoal);
                                }
                            } else {
                                eventToAdd.AssistPlayerID(playerId);
                            }

                            break;
                        case 4: // Substitute in
                            if (eventReportPlayerSelectIndex === 0) {
                                eventToAdd.SubInPlayerID(playerId);

                                // If no subout-player was selected yet, prompt for that
                                if (eventToAdd.SubOutPlayerID() === undefined) {
                                    scrollToReport();

                                    showPlayerSelect(1, false);
                                    return;
                                }
                            }
                            else {
                                eventToAdd.SubOutPlayerID(playerId);
                            }

                            break;
                        case 6: // Yellow Card
                        case 7: // Red Card
                            eventToAdd.CardPlayerID(playerId);

                            break;
                    }
                }

                eventToAddObs(eventToAdd);

                scrollToReport();

                $('#eventReportPlayerSelect').hide();
                $('#eventReportEventSave').show();
            },

            showPlayerSelect = function (playerSelectIndex, showOwnGoal) {
                eventReportPlayerSelectIndex = playerSelectIndex;
                eventReportShowOwnGoal(showOwnGoal);
                eventReportShowUnknownPlayer(true);
                eventReportShowNoPlayer(false);

                if (eventToAdd.SportID() === 1) {
                    switch (eventToAdd.FootballEREventTypeID()) {
                        case 1: // Goal
                            if (playerSelectIndex === 0) {
                                eventReportSelectPlayerTitle(eventReportingTexts.WhoScored);
                            } else {
                                eventReportSelectPlayerTitle(eventReportingTexts.WhoAssisted);
                            }

                            break;
                        case 4: // Substitution 
                            if (playerSelectIndex === 0) {
                                eventReportSelectPlayerTitle(eventReportingTexts.WhoIsComingOn);
                            } else {
                                eventReportSelectPlayerTitle(eventReportingTexts.WhoIsGoingOff);
                            }
                            break;
                        case 6: // Yellow card
                        case 7: // Red card
                            eventReportSelectPlayerTitle(eventReportingTexts.WhoGotBooked);
                            break;
                    }
                }
                else if (eventToAdd.SportID() === 2) {
                    switch (eventToAdd.FloorballEREventTypeID()) {
                        case 1: // Goal
                            if (playerSelectIndex === 0) {
                                eventReportSelectPlayerTitle(eventReportingTexts.WhoScored);
                            } else {
                                eventReportSelectPlayerTitle(eventReportingTexts.WhoAssisted);
                                eventReportShowNoPlayer(true);
                            }

                            break;
                        case 2: // Penalty 
                            eventReportSelectPlayerTitle(eventReportingTexts.WhoGotAPenalty);
                            break;
                        case 3: // Chance
                            eventReportSelectPlayerTitle(eventReportingTexts.WhoHadTheChance);
                            break;
                        case 16:
                            eventReportSelectPlayerTitle('What goalie came in?');
                            eventReportShowUnknownPlayer(false);
                            break;
                        case 17:
                            eventReportSelectPlayerTitle(eventReportingTexts.WhoIsThePlayerOfTheGame);
                            eventReportShowUnknownPlayer(false);
                            break;
                        case 21:
                            eventReportSelectPlayerTitle('What goalie went out?');
                            eventReportShowUnknownPlayer(false);
                            break;
                    }
                }
                else if (eventToAdd.SportID() === 6) {
                    switch (eventToAdd.FutsalEREventTypeID()) {
                        case 1: // Goal
                            if (playerSelectIndex === 0) {
                                eventReportSelectPlayerTitle(eventReportingTexts.WhoScored);
                            } else {
                                eventReportSelectPlayerTitle(eventReportingTexts.WhoAssisted);
                            }

                            break;
                        case 4: // Substitution 
                            if (playerSelectIndex === 0) {
                                eventReportSelectPlayerTitle(eventReportingTexts.WhoIsComingOn);
                            } else {
                                eventReportSelectPlayerTitle(eventReportingTexts.WhoIsGoingOff);
                            }
                            break;
                        case 6: // Yellow card
                        case 7: // Red card
                            eventReportSelectPlayerTitle(eventReportingTexts.WhoGotBooked);
                            break;
                    }
                }

                $('.eventReportSubMenu').hide();
                $('#eventReportPlayerSelect').show();
            },

            showChanceTypeSelect = function () {
                if (eventReportChanceTypes().length === 0) {
                    datamanager.getFloorballChanceTypesForSelectList({
                        success: function (json) {
                            var underlayingArray = eventReportChanceTypes();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            eventReportChanceTypes.valueHasMutated();

                            $('.eventReportSubMenu').hide();
                            $('#eventReportChanceTypeSelect').show();
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
                else {
                    $('.eventReportSubMenu').hide();
                    $('#eventReportChanceTypeSelect').show();
                }
            },

            showGoalTypeSelect = function () {
                if (eventReportGoalTypes().length === 0) {
                    datamanager.getFloorballGoalTypesForSelectList({
                        success: function (json) {
                            var underlayingArray = eventReportGoalTypes();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            eventReportGoalTypes.valueHasMutated();

                            $('.eventReportSubMenu').hide();
                            $('#eventReportGoalTypeSelect').show();
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
                else {
                    $('.eventReportSubMenu').hide();
                    $('#eventReportGoalTypeSelect').show();
                }
            },

            showPenaltyTypeSelect = function () {
                if (eventReportPenaltyTypes().length === 0) {
                    datamanager.getFloorballPenaltyTypesForSelectList({
                        success: function (json) {
                            var underlayingArray = eventReportPenaltyTypes();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            eventReportPenaltyTypes.valueHasMutated();

                            $('.eventReportSubMenu').hide();
                            $('#eventReportPenaltyTypeSelect').show();
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
                else {
                    $('.eventReportSubMenu').hide();
                    $('#eventReportPenaltyTypeSelect').show();
                }
            },

            showCreateEventReport = function () {
                $('.gameview-tab').hide();
                $('#create-eventreport-tab').show();

                $('.eventreport-subview-tab').hide();
                $('#eventreport-create').show();
            },

            showReportScore = function () {
                $('.eventreport-subview-tab').hide();
                $('#eventreport-report-score').show();
            },

            createEventReport = function (data) {
                if (gameHeaderInfo().SportID === 1) {
                    var FootballEventReport = new viewmodel.FootballEventReportForInsert()
                        .GameID(currentGameId)
                        .NumberOfPeriods(data.NumberOfPeriods)
                        .NumberOfOvertimePeriods(2)
                        .PeriodLengthInSeconds(Number(data.PeriodLength) * 60)
                        .OvertimePeriodLengthInSeconds(Number(data.OvertimeLength) * 60)
                        .GamesDecidedByOvertime(data.Overtime)
                        .GamesDecidedByPenalties(data.Penalties);

                    var newFootballEventReport = ko.toJS(FootballEventReport);

                    shell.showProgressIndicator(eventReportingTexts.CreatingReport);

                    datamanager.insertFootballEventReport(newFootballEventReport, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            insertEventReportResponseHelper(json);
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                } else if (gameHeaderInfo().SportID === 2) {
                    var FloorballEventReport = new viewmodel.FloorballEventReportForInsert()
                        .GameID(currentGameId)
                        .NumberOfPeriods(data.NumberOfPeriods)
                        .PeriodLengthInSeconds(Number(data.PeriodLength) * 60)
                        .OvertimePeriodLengthInSeconds(Number(data.OvertimeLength) * 60)
                        .GamesDecidedByOvertime(data.Overtime)
                        .GamesDecidedByPenalties(data.Penalties);

                    var newFloorballEventReport = ko.toJS(FloorballEventReport);

                    shell.showProgressIndicator(eventReportingTexts.CreatingReport);

                    datamanager.insertFloorballEventReport(newFloorballEventReport, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            insertEventReportResponseHelper(json);
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                } else if (gameHeaderInfo().SportID === 6) {
                    var FutsalEventReport = new viewmodel.FutsalEventReportForInsert()
                        .GameID(currentGameId)
                        .NumberOfPeriods(data.NumberOfPeriods)
                        .NumberOfOvertimePeriods(2)
                        .PeriodLengthInSeconds(Number(data.PeriodLength) * 60)
                        .OvertimePeriodLengthInSeconds(Number(data.OvertimeLength) * 60)
                        .GamesDecidedByOvertime(data.Overtime)
                        .GamesDecidedByPenalties(data.Penalties);

                    var newFutsalEventReport = ko.toJS(FutsalEventReport);

                    shell.showProgressIndicator(eventReportingTexts.CreatingReport);

                    datamanager.insertFutsalEventReport(newFutsalEventReport, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            insertEventReportResponseHelper(json);
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                } else {
                    alert('Denna sport stöds ännu inte');
                }
            },

            updateEventReport = function (data) {
                if (gameHeaderInfo().SportID === 1) {
                    var FootballEventReport = new viewmodel.FootballEventReportForInsert()
                        .EventReportID(data.EventReportID)
                        .GameID(currentGameId)
                        .NumberOfPeriods(data.NumberOfPeriods)
                        .NumberOfOvertimePeriods(2)
                        .PeriodLengthInSeconds(Number(data.PeriodLength) * 60)
                        .OvertimePeriodLengthInSeconds(Number(data.OvertimeLength) * 60)
                        .GamesDecidedByOvertime(data.Overtime)
                        .GamesDecidedByPenalties(data.Penalties);

                    var newFootballEventReport = ko.toJS(FootballEventReport);

                    shell.showProgressIndicator(MiscTexts.Updating);

                    datamanager.updateFootballEventReport(newFootballEventReport, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            eventReport(json);
                            toggleEventReportTab();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                } else if (gameHeaderInfo().SportID === 2) {
                    var FloorballEventReport = new viewmodel.FloorballEventReportForInsert()
                        .EventReportID(data.EventReportID)
                        .GameID(currentGameId)
                        .NumberOfPeriods(data.NumberOfPeriods)
                        .PeriodLengthInSeconds(Number(data.PeriodLength) * 60)
                        .OvertimePeriodLengthInSeconds(Number(data.OvertimeLength) * 60)
                        .GamesDecidedByOvertime(data.Overtime)
                        .GamesDecidedByPenalties(data.Penalties);

                    var newFloorballEventReport = ko.toJS(FloorballEventReport);

                    shell.showProgressIndicator(MiscTexts.Updating);

                    datamanager.updateFloorballEventReport(newFloorballEventReport, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            eventReport(json);
                            toggleEventReportTab();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                } else if (gameHeaderInfo().SportID === 6) {
                    var FutsalEventReport = new viewmodel.FutsalEventReportForInsert()
                        .EventReportID(data.EventReportID)
                        .GameID(currentGameId)
                        .NumberOfPeriods(data.NumberOfPeriods)
                        .NumberOfOvertimePeriods(2)
                        .PeriodLengthInSeconds(Number(data.PeriodLength) * 60)
                        .OvertimePeriodLengthInSeconds(Number(data.OvertimeLength) * 60)
                        .GamesDecidedByOvertime(data.Overtime)
                        .GamesDecidedByPenalties(data.Penalties);

                    var newFutsalEventReport = ko.toJS(FutsalEventReport);

                    shell.showProgressIndicator(MiscTexts.Updating);

                    datamanager.updateFutsalEventReport(newFutsalEventReport, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            eventReport(json);
                            toggleEventReportTab();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                } else {
                    alert('Denna sport stöds ännu inte');
                }
            },

            insertEventReportResponseHelper = function (json) {
                $('.eventreport-button').removeClass('hide');

                memberIsEventReporting(true);

                $(".magazine-tabs button").removeClass("active");
                $('.eventreport-tab-button').addClass("active");

                eventReport(json);
                eventReportSeconds = 0;

                eventReportTime(secondsToDateString(eventReportSeconds));
                eventReportTimer = setTimeout(runEventReportTimer, 1000);
                /*eventReportTimer = setInterval(runEventReportTimer, 1000);*/

                cancelOverlay();
                toggleEventReportTab();
            },

            showEventReportClock = function (fromEREvent) {
                var minutesPart;
                var secondsPart;

                if (fromEREvent) {
                    minutesPart = Math.floor(eventToAdd.GameClockSecond() / 60);
                    secondsPart = eventToAdd.GameClockSecond() % 60;
                }
                else {
                    minutesPart = Math.floor(eventReportSeconds / 60);
                    secondsPart = eventReportSeconds % 60;
                }

                $('#clockMinutesPart').val(pad(minutesPart, 2));
                $('#clockSecondsPart').val(pad(secondsPart, 2));

                $('.eventReportSubMenu').hide();
                $('#eventReportClock').show();
            },

            saveEREvent = function () {
                eventToAdd.EventText($('#eventReportText').val());

                if (eventToAdd.SportID() === 1) {
                    if (eventToAdd.FootballEREventTypeID() === 8) {
                        if (eventToAdd.EventText().length === 0) {
                            alert(eventReportingTexts.YouMustWriteAComment);

                            return;
                        }
                    }

                    var erevent = ko.toJS(eventToAdd);

                    shell.showProgressIndicator(MiscTexts.Saving);

                    if (erevent.FootballEREventID > 0) {
                        datamanager.updateFootballEREvent(erevent, {
                            success: function (json) {
                                shell.hideProgressIndicator();

                                resetEventReporting();
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });
                    } else {
                        datamanager.insertFootballEREvent(erevent, {
                            success: function (json) {
                                shell.hideProgressIndicator();

                                resetEventReporting();

                                eventReport(json);
                                eventReportSeconds = json.LatestReportedGameClockSecond;
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });
                    }
                }
                else if (eventToAdd.SportID() === 2) {
                    if (eventToAdd.FloorballEREventTypeID() === 4) {
                        if (eventToAdd.EventText().length === 0) {
                            alert(eventReportingTexts.YouMustWriteAComment);

                            return;
                        }
                    }

                    // If the clock is stopped, we dont' allow the user to set the time so we don't
                    // need to check it
                    if (eventReport().ClockIsStopped === false) {
                        var seconds = Number($('#eventreport-edit-seconds').val());
                        var minutes = Number($('#eventreport-edit-minutes').val());

                        if (seconds > 59) {
                            $('#eventreport-time-error').fadeIn(100);
                            /*alert(eventReportingTexts.InvalidTimeSelected);*/

                            return;
                        }

                        // TODO: Should we check if the user has typed something beyond what is 'accepted' for the current period? 
                        if (minutes > 120) {
                            $('#eventreport-time-error').fadeIn(100);
                            /*alert(eventReportingTexts.InvalidTimeSelected);*/

                            return;
                        }

                        var totalSeconds = seconds + (minutes * 60);

                        eventToAdd.GameClockSecond(totalSeconds);
                    }

                    var floorballerevent = ko.toJS(eventToAdd);

                    shell.showProgressIndicator(MiscTexts.Saving);

                    if (floorballerevent.FloorballEREventID > 0) {
                        datamanager.updateFloorballEREvent(floorballerevent, {
                            success: function (json) {
                                shell.hideProgressIndicator();

                                resetEventReporting();
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });
                    } else {
                        datamanager.insertFloorballEREvent(floorballerevent, {
                            success: function (json) {
                                shell.hideProgressIndicator();

                                resetEventReporting();

                                eventReport(json);
                                eventReportSeconds = json.LatestReportedGameClockSecond;
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });
                    }
                }
                else if (eventToAdd.SportID() === 6) {
                    if (eventToAdd.FutsalEREventTypeID() === 8) {
                        if (eventToAdd.EventText().length === 0) {
                            alert(eventReportingTexts.YouMustWriteAComment);

                            return;
                        }
                    }

                    var futsalerevent = ko.toJS(eventToAdd);

                    shell.showProgressIndicator(MiscTexts.Saving);

                    if (futsalerevent.FutsalEREventID > 0) {
                        datamanager.updateFutsalEREvent(futsalerevent, {
                            success: function (json) {
                                shell.hideProgressIndicator();

                                resetEventReporting();
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });
                    } else {
                        datamanager.insertFutsalEREvent(futsalerevent, {
                            success: function (json) {
                                shell.hideProgressIndicator();

                                resetEventReporting();

                                eventReport(json);
                                eventReportSeconds = json.LatestReportedGameClockSecond;
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                alert(error);
                            }
                        });
                    }
                }
            },

            resetEventReporting = function () {
                eventToAddObs('');
                eventToAdd = null;

                $('#eventReportText').val('');

                $('.eventReportSubMenu').hide();
                $('#eventReportMainMenu').show();

                eventReportShowOwnGoal(false);
                eventReportPlayerSelectIndex = 0;

                scrollToReport();
            },

            editEREvent = function (data) {
                if (data.EREventInfo.SportID === 1) {
                    datamanager.getFootballEREventForEdit(data.LiveTimeItemID, {
                        success: function (json) {
                            eventToAdd = new viewmodel.FootballEREventVM()
                                .FootballEREventID(json.FootballEREvent.FootballEREventID)
                                .FootballEventReportID(json.FootballEREvent.FootballEventReportID)
                                .FootballEREventTypeID(json.FootballEREvent.FootballEREventTypeID)
                                .SportID(1)
                                .GameClockSecond(json.FootballEREvent.GameClockSecond)
                                .TeamID(json.FootballEREvent.TeamID)
                                .CardPlayerID(json.FootballEREvent.CardPlayerID)
                                .SubInPlayerID(json.FootballEREvent.SubInPlayerID)
                                .SubOutPlayerID(json.FootballEREvent.SubOutPlayerID)
                                .GoalPlayerID(json.FootballEREvent.GoalPlayerID)
                                .IsOwnGoal(json.FootballEREvent.IsOwnGoal)
                                .CurrentScore(json.FootballEREvent.CurrentScore)
                                .EventText(json.FootballEREvent.EventText);

                            if (json.SaveTextHeadline)
                                eventToAdd.SaveTextHeadline(json.SaveTextHeadline);

                            if (json.FootballEREvent.TeamID > 0) {
                                if (json.FootballEREvent.TeamID === gameHeaderInfo().HomeTeamID) {                                    
                                    eventToAdd.ClubAndTeamName = ko.observable(gameHeaderInfo().HomeTeamClubName);
                                    eventToAdd.ClubLogoURL = ko.observable(gameHeaderInfo().HomeTeamClubLogoURL);
                                } else {                                    
                                    eventToAdd.ClubAndTeamName = ko.observable(gameHeaderInfo().AwayTeamClubName);
                                    eventToAdd.ClubLogoURL = ko.observable(gameHeaderInfo().AwayTeamClubLogoURL);
                                }
                            }

                            if (json.FootballEREvent.FootballEREventTypeID === 1) {
                                if (eventToAdd.GoalPlayerID() === null) {
                                    if (eventToAdd.IsOwnGoal()) {
                                        eventToAdd.GoalPlayerID(-1);
                                    }
                                    else {
                                        eventToAdd.GoalPlayerID(0);
                                    }
                                }

                                if (json.FootballEREvent.AssistPlayerID !== null) {
                                    eventToAdd.AssistPlayerID(json.FootballEREvent.AssistPlayerID);
                                }
                            }

                            if (json.FootballEREvent.FootballEREventTypeID === 4) {
                                if (eventToAdd.SubInPlayerID() === null) {
                                    eventToAdd.SubInPlayerID(0);
                                }

                                if (eventToAdd.SubOutPlayerID() === null) {
                                    eventToAdd.SubOutPlayerID(0);
                                }
                            }

                            if (json.FootballEREvent.FootballEREventTypeID === 6 || json.FootballEREvent.FootballEREventTypeID === 7) {
                                if (eventToAdd.CardPlayerID() === null) {
                                    eventToAdd.CardPlayerID(0);
                                }
                            }

                            editEREventHelper(json);
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
                else if (data.EREventInfo.SportID === 2) {
                    datamanager.getFloorballEREventForEdit(data.LiveTimeItemID, {
                        success: function (json) {
                            eventToAdd = new viewmodel.FloorballEREventVM()
                                .FloorballEREventID(json.FloorballEREvent.FloorballEREventID)
                                .FloorballEventReportID(json.FloorballEREvent.FloorballEventReportID)
                                .FloorballEREventTypeID(json.FloorballEREvent.FloorballEREventTypeID)
                                .SportID(2)
                                .GameClockSecond(json.FloorballEREvent.GameClockSecond)
                                .TeamID(json.FloorballEREvent.TeamID)
                                .GoalPlayerID(json.FloorballEREvent.GoalPlayerID)
                                .Assist1PlayerID(json.FloorballEREvent.Assist1PlayerID)
                                .Assist2PlayerID(json.FloorballEREvent.Assist2PlayerID)
                                .PenaltyPlayerID(json.FloorballEREvent.PenaltyPlayerID)
                                .EventPlayerID(json.FloorballEREvent.EventPlayerID)
                                .SubInPlayerID(json.FloorballEREvent.SubInPlayerID)
                                .SubOutPlayerID(json.FloorballEREvent.SubOutPlayerID)
                                .FloorballPenaltyTypeID(json.FloorballEREvent.FloorballPenaltyTypeID)
                                .FloorballChanceTypeID(json.FloorballEREvent.FloorballChanceTypeID)
                                .FloorballGoalTypeID(json.FloorballEREvent.FloorballGoalTypeID)
                                .IsOwnGoal(json.FloorballEREvent.IsOwnGoal)
                                .CurrentScore(json.FloorballEREvent.CurrentScore)
                                .EventText(json.FloorballEREvent.EventText);

                            if (json.SaveTextHeadline)
                                eventToAdd.SaveTextHeadline(json.SaveTextHeadline);

                            if (json.FloorballEREvent.TeamID > 0) {
                                if (json.FloorballEREvent.TeamID === gameHeaderInfo().HomeTeamID) {
                                    eventToAdd.ClubAndTeamName = ko.observable(gameHeaderInfo().HomeTeamClubName);
                                    eventToAdd.ClubLogoURL = ko.observable(gameHeaderInfo().HomeTeamClubLogoURL);
                                } else {
                                    eventToAdd.ClubAndTeamName = ko.observable(gameHeaderInfo().AwayTeamClubName);
                                    eventToAdd.ClubLogoURL = ko.observable(gameHeaderInfo().AwayTeamClubLogoURL);
                                }
                            }

                            if (json.FloorballEREvent.FloorballEREventTypeID === 1) {
                                if (eventToAdd.GoalPlayerID() === null) {
                                    if (eventToAdd.IsOwnGoal()) {
                                        eventToAdd.GoalPlayerID(-1);
                                    }
                                    else {
                                        eventToAdd.GoalPlayerID(0);
                                    }
                                }

                                if (json.FloorballEREvent.FloorballGoalTypeID !== null) {
                                    if (eventReportGoalTypes().length === 0) {
                                        datamanager.getFloorballGoalTypesForSelectList({
                                            success: function (model) {
                                                var underlayingArray = eventReportGoalTypes();

                                                for (var i = 0; i < model.length; i++) {
                                                    underlayingArray.push(model[i]);
                                                }

                                                eventReportGoalTypes.valueHasMutated();

                                                eventToAdd.FloorballGoalTypeID(json.FloorballEREvent.FloorballGoalTypeID);
                                            },
                                            error: function (error) {
                                                console.log(error);
                                            }
                                        });
                                    }
                                    else {
                                        eventToAdd.FloorballGoalTypeID(json.FloorballEREvent.FloorballGoalTypeID);
                                    }
                                }

                                if (json.FloorballEREvent.Assist1PlayerID !== null) {
                                    eventToAdd.Assist1PlayerID(json.FloorballEREvent.Assist1PlayerID);
                                }

                                if (json.FloorballEREvent.Assist2PlayerID !== null) {
                                    eventToAdd.Assist2PlayerID(json.FloorballEREvent.Assist2PlayerID);
                                }
                            } else if (json.FloorballEREvent.FloorballEREventTypeID === 2) {
                                if (json.FloorballEREvent.PenaltyPlayerID !== null) {
                                    eventToAdd.PenaltyPlayerID(json.FloorballEREvent.PenaltyPlayerID);
                                }

                                if (json.FloorballEREvent.FloorballPenaltyTypeID !== null) {
                                    if (eventReportPenaltyTypes().length === 0) {
                                        datamanager.getFloorballPenaltyTypesForSelectList({
                                            success: function (model) {
                                                var underlayingArray = eventReportPenaltyTypes();

                                                for (var i = 0; i < model.length; i++) {
                                                    underlayingArray.push(model[i]);
                                                }

                                                eventReportPenaltyTypes.valueHasMutated();

                                                eventToAdd.FloorballPenaltyTypeID(json.FloorballEREvent.FloorballPenaltyTypeID);
                                            },
                                            error: function (error) {
                                                console.log(error);
                                            }
                                        });
                                    }
                                    else {
                                        eventToAdd.FloorballPenaltyTypeID(json.FloorballEREvent.FloorballPenaltyTypeID);
                                    }
                                }
                            } else if (json.FloorballEREvent.FloorballEREventTypeID === 3) { // Chance
                                if (json.FloorballEREvent.FloorballChanceTypeID !== null) {
                                    if (eventReportChanceTypes().length === 0) {
                                        datamanager.getFloorballChanceTypesForSelectList({
                                            success: function (model) {
                                                var underlayingArray = eventReportChanceTypes();

                                                for (var i = 0; i < model.length; i++) {
                                                    underlayingArray.push(model[i]);
                                                }

                                                eventReportChanceTypes.valueHasMutated();

                                                eventToAdd.FloorballChanceTypeID(json.FloorballEREvent.FloorballChanceTypeID);
                                            },
                                            error: function (error) {
                                                console.log(error);
                                            }
                                        });
                                    }
                                    else {
                                        eventToAdd.FloorballChanceTypeID(json.FloorballEREvent.FloorballChanceTypeID);
                                    }
                                }
                            }

                            editEREventHelper(json);
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
                else if (data.EREventInfo.SportID === 6) {
                    datamanager.getFutsalEREventForEdit(data.LiveTimeItemID, {
                        success: function (json) {
                            eventToAdd = new viewmodel.FutsalEREventVM()
                                .FutsalEREventID(json.FutsalEREvent.FutsalEREventID)
                                .FutsalEventReportID(json.FutsalEREvent.FutsalEventReportID)
                                .FutsalEREventTypeID(json.FutsalEREvent.FutsalEREventTypeID)
                                .SportID(6)
                                .GameClockSecond(json.FutsalEREvent.GameClockSecond)
                                .TeamID(json.FutsalEREvent.TeamID)
                                .CardPlayerID(json.FutsalEREvent.CardPlayerID)
                                .SubInPlayerID(json.FutsalEREvent.SubInPlayerID)
                                .SubOutPlayerID(json.FutsalEREvent.SubOutPlayerID)
                                .GoalPlayerID(json.FutsalEREvent.GoalPlayerID)
                                .IsOwnGoal(json.FutsalEREvent.IsOwnGoal)
                                .CurrentScore(json.FutsalEREvent.CurrentScore)
                                .EventText(json.FutsalEREvent.EventText);

                            if (json.SaveTextHeadline)
                                eventToAdd.SaveTextHeadline(json.SaveTextHeadline);

                            if (json.FutsalEREvent.TeamID > 0) {
                                if (json.FutsalEREvent.TeamID === gameHeaderInfo().HomeTeamID) {
                                    eventToAdd.ClubAndTeamName = ko.observable(gameHeaderInfo().HomeTeamClubName);
                                    eventToAdd.ClubLogoURL = ko.observable(gameHeaderInfo().HomeTeamClubLogoURL);
                                } else {
                                    eventToAdd.ClubAndTeamName = ko.observable(gameHeaderInfo().AwayTeamClubName);
                                    eventToAdd.ClubLogoURL = ko.observable(gameHeaderInfo().AwayTeamClubLogoURL);
                                }
                            }

                            if (json.FutsalEREvent.FutsalEREventTypeID === 1) {
                                if (eventToAdd.GoalPlayerID() === null) {
                                    if (eventToAdd.IsOwnGoal()) {
                                        eventToAdd.GoalPlayerID(-1);
                                    }
                                    else {
                                        eventToAdd.GoalPlayerID(0);
                                    }
                                }

                                if (json.FutsalEREvent.AssistPlayerID !== null) {
                                    eventToAdd.AssistPlayerID(json.FutsalEREvent.AssistPlayerID);
                                }
                            }

                            if (json.FutsalEREvent.FutsalEREventTypeID === 4) {
                                if (eventToAdd.SubInPlayerID() === null) {
                                    eventToAdd.SubInPlayerID(0);
                                }

                                if (eventToAdd.SubOutPlayerID() === null) {
                                    eventToAdd.SubOutPlayerID(0);
                                }
                            }

                            if (json.FutsalEREvent.FutsalEREventTypeID === 6 || json.FutsalEREvent.FutsalEREventTypeID === 7) {
                                if (eventToAdd.CardPlayerID() === null) {
                                    eventToAdd.CardPlayerID(0);
                                }
                            }

                            editEREventHelper(json);
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
            },

            editEREventHelper = function (json) {
                eventReportPlayers([]);

                var underlayingArray = eventReportPlayers();

                for (var i = 0; i < json.EventTeamPlayers.length; i++) {
                    underlayingArray.push(json.EventTeamPlayers[i]);
                }

                eventReportPlayers.valueHasMutated();

                // To ensure that gamePlayers are loaded when we continue to eventreport
                if (gamePlayers === null) {
                    datamanager.getPlayersForGameSelectLists(gameHeaderInfo().HomeTeamID, gameHeaderInfo().AwayTeamID, currentGameId, {
                        success: function (json) {
                            gamePlayers = json;
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }

                eventToAddObs(eventToAdd);

                $(".magazine-tabs button").removeClass("active");
                $('.eventreport-tab-button').addClass("active");

                scrollToReport();
                hideTabs();

                $('#eventreport-tab').show();

                $('.leftMagazineGame').addClass('toggleHide');
                $('.rightMagazineGame').addClass('toggleShow').removeClass('toggleHide defaultHidden');

                $('.eventReportSubMenu').hide();
                $('#eventReportEventSave').fadeIn(200);
            },

            deleteEREvent = function (data) {
                shell.showProgressIndicator(MiscTexts.Deleting)

                if (data.EREventInfo.SportID === 1) {
                    datamanager.deleteFootballEREvent(data.LiveTimeItemID, {
                        success: function (json) {
                            if (eventReport()) {
                                datamanager.getFootballEventReport(eventReport().FootballEventReportID, {
                                    success: function (json) {
                                        resetEventReporting();

                                        eventReport(json);
                                        eventReportSeconds = json.LatestReportedGameClockSecond;

                                        shell.hideProgressIndicator();
                                    },
                                    error: function (error) {
                                        console.log(error);

                                        shell.hideProgressIndicator();
                                    }
                                });
                            } else {
                                shell.hideProgressIndicator();
                            }
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                } else if (data.EREventInfo.SportID === 2) {
                    datamanager.deleteFloorballEREvent(data.LiveTimeItemID, {
                        success: function (json) {
                            if (eventReport()) {
                                datamanager.getFloorballEventReport(eventReport().FloorballEventReportID, {
                                    success: function (json) {
                                        resetEventReporting();

                                        eventReport(json);
                                        eventReportSeconds = json.LatestReportedGameClockSecond;

                                        shell.hideProgressIndicator();
                                    },
                                    error: function (error) {
                                        console.log(error);

                                        shell.hideProgressIndicator();
                                    }
                                });
                            } else {
                                shell.hideProgressIndicator();
                            }
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                } else if (data.EREventInfo.SportID === 6) {
                    datamanager.deleteFutsalEREvent(data.LiveTimeItemID, {
                        success: function (json) {
                            if (eventReport()) {
                                datamanager.getFutsalEventReport(eventReport().FutsalEventReportID, {
                                    success: function (json) {
                                        resetEventReporting();

                                        eventReport(json);
                                        eventReportSeconds = json.LatestReportedGameClockSecond;

                                        shell.hideProgressIndicator();
                                    },
                                    error: function (error) {
                                        console.log(error);

                                        shell.hideProgressIndicator();
                                    }
                                });
                            } else {
                                shell.hideProgressIndicator();
                            }
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                }
            },

            saveFinalScore = function () {
                var homeTeamScore = Number($('#reportScoreHomeTeam').val());
                var awayTeamScore = Number($('#reportScoreAwayTeam').val());

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.updateGameFinalResult(currentGameId, homeTeamScore, awayTeamScore)
                    .then(function (data) {
                        shell.hideProgressIndicator();

                        var newHeader = gameHeaderInfo();

                        newHeader.HomeTeamScore = homeTeamScore;
                        newHeader.AwayTeamScore = awayTeamScore;
                        newHeader.GameStatusID = 3;

                        gameHeaderInfo.valueHasMutated();

                        cancelEventReport();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    });
            },

            playVideo = function (item, event) {
                var elem = $(event.target).closest('.gameMediaRoot');

                elem.find('.streamSubscriptionInfo').hide();

                if (item.SocialEntityID && item.SocialEntityID > 0) {
                    datamanager.insertSocialEntityView(item.SocialEntityID);
                }

                if (item.PartnerFeaturePrerolls.length > 0) {
                    // If we already have a running timer, stop it and clear stuff
                    if (billboardTimer !== null) {
                        clearTimeout(billboardTimer);
                        billboardTimer = null;

                        mediaRootTarget.find('.video-preroll').fadeOut(300);
                        mediaRootTarget.find('.overlay-container').show();
                        mediaRootTarget.find('.swVideoPlayer').hide();
                    }

                    billboardList = [];

                    // Push all the billboards into a temp-list
                    for (var i = 0; i < item.PartnerFeaturePrerolls.length; i++) {
                        billboardList.push(item.PartnerFeaturePrerolls[i]);
                    }

                    // Save reference to root target
                    mediaRootTarget = $(event.target).closest('.gameMediaRoot');
                    mediaRootTarget.find('.video-preroll').fadeIn(300);

                    currentPreRoll(billboardList[0]);

                    if (billboardList[0].PartnerFeatureID > 0) {
                        datamanager.trackPartnerFeatureView(billboardList[0].PartnerFeatureID, billboardList[0].PartnerFeaturePlacementID, 0, billboardList[0].PartnerFeatureEntityID, 2);
                    }

                    runTimer(billboardList[0].DisplayTime * 1000);
                } else {
                    elem.find('.overlay-container').hide();
                    elem.find('.swVideoPlayer').show();
                    elem.find('.vjs-tech').show();
                    elem.find('.vjs-tech').get(0).play();                    
                }

                $('#live-stream-toggle-' + item.GameMediaItemID).show();

                event.preventDefault();
                event.stopPropagation();
            },

            addGoalPartner = function (item) {
                $('.celldetailseventreport .partner-container').hide();

                item.EREventInfo.PartnerFeature = gameGoalPartner;

                firstGoalFound = true;
            },

            addGoalAnimation = function (item) {
                var showAnimation = false;

                if (gameHeaderInfo().MemberIsFollowingHomeTeam === false && gameHeaderInfo().MemberIsFollowingAwayTeam === false) {
                    showAnimation = true;
                } else if (gameHeaderInfo().MemberIsFollowingHomeTeam && gameHeaderInfo().MemberIsFollowingAwayTeam) {
                    showAnimation = true;
                } else if (item.EREventInfo.IsAwayTeamAction && gameHeaderInfo().MemberIsFollowingAwayTeam) {
                    showAnimation = true;
                } else if (item.EREventInfo.IsAwayTeamAction === false && gameHeaderInfo().MemberIsFollowingHomeTeam) {
                    showAnimation = true;
                }

                if (showAnimation) {
                    timesToNextGoalAnimation = timesToNextGoalAnimation - 1;
                }

                if (showAnimation && remainingGoalAnimations > 0 && timesToNextGoalAnimation < 0) {
                    $("html").animate({
                        scrollTop: $("#contentToolbar").offset().top - 200
                    }, 500);

                    showGoalAnimation();
                }

                if (timesToNextGoalAnimation < 0)
                    timesToNextGoalAnimation = gameGoalAnimationPartner.ShowEveryNthGoal - 1;
            },

            showGoalAnimation = function () {
                var animationPath = '';

                if (gameGoalAnimationPartner.GoalAnimationType === 2) {
                    animationPath = '/content/lottie/GoalAnimation_SvenskaSpel.json';
                }
                else if (gameGoalAnimationPartner.GoalAnimationType === 3) {
                    animationPath = '/content/lottie/GoalAnimation_ICA.json';
                }
                else
                    return;

                var animationOuter = $('#animation-container').fadeIn(100);
                var animationElement = $('#animation-inner');

                remainingGoalAnimations = remainingGoalAnimations - 1;

                var animation = bodymovin.loadAnimation({
                    container: animationElement.get(0),
                    path: animationPath,
                    renderer: 'svg/canvas/html',
                    loop: false,
                    autoplay: true
                });

                datamanager.trackPartnerFeatureView(gameGoalAnimationPartner.PartnerFeatureID, gameGoalAnimationPartner.PartnerFeaturePlacementID, 0, currentGameId, 2);

                animation.addEventListener('complete', function () {
                    animation.destroy();

                    animationOuter.fadeOut(100);
                });
            },

            printGameProtocol = function () {

                window.open('/printgameprotocol/getgameprotocolpdf?id=' + currentGameId, '_new');

                // printgameprotocol/GetGameProtocolPDF?id=345
                console.log('print');
            },

            searchPenaltyTypes = function (data, event) {

                var s = $(event.target).val();

                if (s.length === 0)
                    penaltyTypeSearchString('-');
                else
                    penaltyTypeSearchString(s);                
            },

            eventReportPenaltyTypesFiltered = ko.computed(function () {
                return ko.utils.arrayFilter(eventReportPenaltyTypes(), function (item) {

                    if (penaltyTypeSearchString() === '-')
                        return true;

                    return item.Name.toLowerCase().indexOf(penaltyTypeSearchString().toLowerCase()) !== -1;
                });
            }),

            runTimer = function (displayTime) {
                billboardTimer = setTimeout(function () {
                    billboardList.shift();

                    if (billboardList.length === 0) {
                        mediaRootTarget.find('.video-preroll').fadeOut(300);
                        mediaRootTarget.find('.overlay-container').hide();
                        mediaRootTarget.find('.swVideoPlayer').show();
                        mediaRootTarget.find('.vjs-tech').show();
                        billboardTimer = null;

                        var player = mediaRootTarget.find('.vjs-tech').get(0);

                        if (player) {
                            player.play();
                        }
                    } else {
                        currentPreRoll(billboardList[0]);
                        
                        if (billboardList[0].PartnerFeatureID > 0) {
                            datamanager.trackPartnerFeatureView(billboardList[0].PartnerFeatureID, billboardList[0].PartnerFeaturePlacementID, 0, billboardList[0].PartnerFeatureEntityID, 2);
                        }

                        runTimer(billboardList[0].DisplayTime * 1000);
                    }
                }, displayTime); 
            },

            init = function () {
                $("#magazinegameviewassetupload").fileReaderJS(opts);                                
            };

        init();

        ko.bindingHandlers.playerNameFromId = {
            update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var valueUnwrapped = ko.utils.unwrapObservable(valueAccessor());
                var textContent = '';

                if (valueUnwrapped === undefined || valueUnwrapped === null) {
                    textContent = eventReportingTexts.NoPlayerSelected;
                }
                else {
                    if (valueUnwrapped === -1) {
                        textContent = eventReportingTexts.OwnGoal;
                    }
                    else if (valueUnwrapped === 0) {
                        textContent = eventReportingTexts.Unknown + ' (' + eventReportingTexts.DidNotSee + ')';
                    }
                    else {
                        var eventPlayer = null;

                        if (eventToAdd && eventToAdd.SportID() === 1 && eventToAdd.FootballEREventID() > 0) {
                            eventPlayer = ko.utils.arrayFirst(eventReportPlayers(), function (item) {
                                return item.PlayerID === valueUnwrapped;
                            });
                        }
                        else if (eventToAdd && eventToAdd.SportID() === 2 && eventToAdd.FloorballEREventID() > 0) {
                            eventPlayer = ko.utils.arrayFirst(eventReportPlayers(), function (item) {
                                return item.PlayerID === valueUnwrapped;
                            });
                        }
                        else if (eventToAdd && eventToAdd.SportID() === 6 && eventToAdd.FutsalEREventID() > 0) {
                            eventPlayer = ko.utils.arrayFirst(eventReportPlayers(), function (item) {
                                return item.PlayerID === valueUnwrapped;
                            });
                        }
                        else if (gamePlayers) {
                            eventPlayer = gamePlayers.HomeTeamPlayers.find(e => e.PlayerID === valueUnwrapped);

                            if (!eventPlayer) {
                                eventPlayer = gamePlayers.AwayTeamPlayers.find(e => e.PlayerID === valueUnwrapped);
                            }
                        }

                        if (eventPlayer) {
                            if (eventPlayer.ShirtNumber > 0)
                                textContent = eventPlayer.ShirtNumber + '. ' + eventPlayer.FullName;
                            else
                                textContent = eventPlayer.FullName;
                        }
                    }                    
                }

                ko.bindingHandlers.text.update(element, function () { return textContent; });
            }
        };

        ko.bindingHandlers.chanceNameFromId = {
            update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var valueUnwrapped = ko.utils.unwrapObservable(valueAccessor());
                var textContent = '';

                if (valueUnwrapped === undefined || valueUnwrapped === null) {
                    textContent = eventReportingTexts.NoChanceTypeSelected;
                }
                else {
                    var chanceType = ko.utils.arrayFirst(eventReportChanceTypes(), function (item) {
                        return item.FloorballChanceTypeID === valueUnwrapped;
                    });

                    if (chanceType !== null)
                        textContent = chanceType.Name;
                }

                ko.bindingHandlers.text.update(element, function () { return textContent; });
            }
        };

        ko.bindingHandlers.goalTypeNameFromId = {
            update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var valueUnwrapped = ko.utils.unwrapObservable(valueAccessor());
                var textContent = '';

                if (valueUnwrapped === undefined || valueUnwrapped === null) {
                    textContent = eventReportingTexts.NoGoalTypeSelected;
                }
                else {
                    var goalType = ko.utils.arrayFirst(eventReportGoalTypes(), function (item) {
                        return item.FloorballGoalTypeID === valueUnwrapped;
                    });

                    if (goalType !== null)
                        textContent = goalType.Name;
                }

                ko.bindingHandlers.text.update(element, function () { return textContent; });
            }
        };               

        ko.bindingHandlers.penaltyNameFromId = {
            update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var valueUnwrapped = ko.utils.unwrapObservable(valueAccessor());
                var textContent = '';

                if (valueUnwrapped !== undefined) {
                    var penaltyType = ko.utils.arrayFirst(eventReportPenaltyTypes(), function (item) {
                        return item.FloorballPenaltyTypeID === valueUnwrapped;
                    });

                    if (penaltyType !== null)
                        textContent = penaltyType.Name;
                }
                else {
                    textContent = eventReportingTexts.NoPenaltyTypeSelected;
                }

                ko.bindingHandlers.text.update(element, function () { return textContent; });
            }
        };                

        return {            
            initialize: initialize,            
            activate: activate,
            cleanup: cleanup,
            currentGameId: currentGameId,
            liveStreamDownloadLink: liveStreamDownloadLink,
            LEDBanner: LEDBanner,
            currentPreRoll: currentPreRoll,

            addComment: addComment,
            addPicture: addPicture,
            addGameReport: addGameReport,            
            shareToFB: shareToFB,
            addSocialEmotion: addSocialEmotion,
            toggleComments: toggleComments,

            //Game Header properties
            gameHeaderInfo: gameHeaderInfo,
            leagueHeader: leagueHeader,
            gameAccessInfo: gameAccessInfo,

            /*Attendee properties*/
            attendeesCount: attendeesCount,
            /*attendeeThumbnailURLs: attendeeThumbnailURLs,*/
            attendees: attendees,
            socialEmotions: socialEmotions,                                                           

            /*GameLineups*/
            teams: teams,
            gameLineUps: gameLineUps,
            homeTeamLineUp: homeTeamLineUp,
            awayTeamLineUp: awayTeamLineUp,

            homeTeamPlayers: homeTeamPlayers,
            awayTeamPlayers: awayTeamPlayers,
            homeTeamSubstitutes: homeTeamSubstitutes,
            awayTeamSubstitutes: awayTeamSubstitutes,
            homeTeamStaff: homeTeamStaff,
            awayTeamStaff: awayTeamStaff,

            /*League properties*/            
            relatedGames: relatedGames,

            showMagazineGameView: showMagazineGameView,            
            viewAllAttendees: viewAllAttendees,                        

            navigateToGameHeaderNavigation: navigateToGameHeaderNavigation,
            navigateToHomeTeam: navigateToHomeTeam,
            navigateToAwayTeam: navigateToAwayTeam,
            navigateToTeam: navigateToTeam,
            navigateToTeamPlayer: navigateToTeamPlayer,
            navigateToStatisticRow: navigateToStatisticRow,
            navigateToRegistration: navigateToRegistration,
            navigateToLogin: navigateToLogin,
            navigateToEditLiveStream: navigateToEditLiveStream,
            navigateToArena: navigateToArena,
            navigateToLeague: navigateToLeague,

            navigateToAddReferees: navigateToAddReferees,
            navigateToEditTeams: navigateToEditTeams,
            navigateToEditGoalieStatistics: navigateToEditGoalieStatistics,
            navigateToFairPlayDetailsView: navigateToFairPlayDetailsView,
            navigateToLiveStreamAdmin: navigateToLiveStreamAdmin,
            navigateToGame: navigateToGame,
            navigateToStreamPayment: navigateToStreamPayment,
            navigateToFansRanking: navigateToFansRanking,
            feedRows: feedRows,
            unmoderatedPosts: unmoderatedPosts,
            overviewItems: overviewItems,            
            leagueTable: leagueTable,
            gameAttentionInfoItems: gameAttentionInfoItems,
            gameMediaItems: gameMediaItems,
            activeGameMediaItem: activeGameMediaItem,
            eventReport: eventReport,            
            eventReportToAdd: eventReportToAdd,
            gameStats: gameStats,

            saveComment: saveComment,
            saveLiveStreamPrice: saveLiveStreamPrice,
            writeBeforeGameReport: writeBeforeGameReport,
            writeAfterGameReport: writeAfterGameReport,
            createGameTeamRoster: createGameTeamRoster,
            createGameLineUp: createGameLineUp,
            onKeyPressAllowNumeric: onKeyPressAllowNumeric,
            onKeyPressAllowDecimal: onKeyPressAllowDecimal,

            onGameResultGuess: onGameResultGuess,

            showFeedElement: showFeedElement,
            showLiveDetails: showLiveDetails,
            showModerateMenu: showModerateMenu,
            deleteLiveStream: deleteLiveStream,
            deleteGameVideo: deleteGameVideo,
            deleteTimelineItem: deleteTimelineItem,
            editTimelineItem: editTimelineItem,
            reportGameMediaItem: reportGameMediaItem,            
            reportTimelineItem: reportTimelineItem,
            disconnectHighlight: disconnectHighlight,
            editLiveStream: editLiveStream,
            generateDownloadLink: generateDownloadLink,
            denyPost: denyPost,
            acceptPost: acceptPost,
            getMoreUnmoderatedPosts: getMoreUnmoderatedPosts,

            selectGameTeamRosterTeam: selectGameTeamRosterTeam,
            selectGameLineUpTeam: selectGameLineUpTeam,
            showLineUp: showLineUp,
            showLiveStream: showLiveStream,
            getPictureURL: getPictureURL,
            getAdminInformation: getAdminInformation,
            clearGameCache: clearGameCache,
            
            gameAdminInformation: gameAdminInformation,
            hideTimelineComments: hideTimelineComments,
            cancelOverlay: cancelOverlay,            

            // for uploads
            assetUploads: shell.globalUploadQueue,

            //preloading
            setGameHeaderInfo: setGameHeaderInfo,

            fairPlayItemForGame: fairPlayItemForGame,            
            liveStreamPriceModel: liveStreamPriceModel,

            toggleLiveStream: toggleLiveStream,

            toggleFeedTab: toggleFeedTab,
            toggleLineUpTab: toggleLineUpTab,
            toggleOverviewTab: toggleOverviewTab,
            toggleTableTab: toggleTableTab,
            toggleModerateTab: toggleModerateTab,
            toggleEventReportTab: toggleEventReportTab,
            toggleOvertime: toggleOvertime,
            toggleHomeTeam: toggleHomeTeam,
            toggleAwayTeam: toggleAwayTeam,

            toggleGameStatsTab: toggleGameStatsTab,

            toggleLiveStreamLive: toggleLiveStreamLive,
            toggleLiveStreamReplay: toggleLiveStreamReplay,

            lineUpPartnerBlurb: lineUpPartnerBlurb,  
            overviewPartnerBlurb: overviewPartnerBlurb,
            overviewStatisticsBlurb: overviewStatisticsBlurb,
            leaguePartnerBlurb: leaguePartnerBlurb,

            selectGameMediaItem: selectGameMediaItem,
            reloadGameMediaItems: reloadGameMediaItems,

            showAdminView: showAdminView,
            showAdminLiveStream: showAdminLiveStream,
            showOverview: showOverview,
            showEditSpectators: showEditSpectators,
            memberCanLiveStream: memberCanLiveStream,
            memberCanModerateGame: memberCanModerateGame,
            memberIsEventReporting: memberIsEventReporting,
            memberIsSportswikAdmin: memberIsSportswikAdmin,
            createInterview: createInterview,
            removePicture: removePicture,
            updateSpectators: updateSpectators,
            showGoalAnimation: showGoalAnimation,            
            printGameProtocol: printGameProtocol,

            /* Event reporting */
            deleteEREvent: deleteEREvent,
            editEREvent: editEREvent,
            startStopPeriod: startStopPeriod,
            saveEREvent: saveEREvent,            
            eventClicked: eventClicked,            
            eventReportSelectTeam: eventReportSelectTeam,
            eventReportSelectPlayer: eventReportSelectPlayer,
            eventReportSelectCard: eventReportSelectCard,
            eventReportSelectChanceType: eventReportSelectChanceType,
            eventReportSelectGoalType: eventReportSelectGoalType,
            eventReportClearGoalType: eventReportClearGoalType,
            eventReportClearPlayer: eventReportClearPlayer,
            eventReportSelectPenaltyType: eventReportSelectPenaltyType,
            eventReportTime: eventReportTime,
            eventReportPlayers: eventReportPlayers,
            eventReportChanceTypes: eventReportChanceTypes,
            eventReportPenaltyTypes: eventReportPenaltyTypes,
            eventReportGoalTypes: eventReportGoalTypes,
            eventReportPenaltyTypesFiltered: eventReportPenaltyTypesFiltered,
            eventReportShowOwnGoal: eventReportShowOwnGoal,
            eventReportShowUnknownPlayer: eventReportShowUnknownPlayer,
            eventReportShowNoPlayer: eventReportShowNoPlayer,
            eventToAddObs: eventToAddObs,
            eventReportChangeClock: eventReportChangeClock,
            eventReportCancelChangeClock: eventReportCancelChangeClock,
            showPlayerSelect: showPlayerSelect,
            showChanceTypeSelect: showChanceTypeSelect,
            showPenaltyTypeSelect: showPenaltyTypeSelect,
            showGoalTypeSelect: showGoalTypeSelect,
            showEventReportClock: showEventReportClock,
            showCreateEventReport: showCreateEventReport,
            showReportScore: showReportScore,
            createEventReport: createEventReport,
            updateEventReport: updateEventReport,
            eventReportSelectPlayerTitle: eventReportSelectPlayerTitle,
            setEventReportGameStatus: setEventReportGameStatus,
            existingEventReports: existingEventReports,            
            gainControlOfEventReport: gainControlOfEventReport,
            canTakeControlOfReport: canTakeControlOfReport,
            cancelEventReport: cancelEventReport,
            deleteEventReport: deleteEventReport,
            navigateToSaveEvent: navigateToSaveEvent,
            gainedFocus: gainedFocus,
            lostFocus: lostFocus,
            showOvertimeMinutes: showOvertimeMinutes,
            overviewGameInfo: overviewGameInfo,

            searchPenaltyTypes: searchPenaltyTypes,
            saveFinalScore: saveFinalScore,
            playVideo: playVideo,
            addHighlight: addHighlight,
            addReplay: addReplay,
            addEventReport: addEventReport,
            editEventReport: editEventReport,
            planLiveStream: planLiveStream,
            scheduleLiveStream: scheduleLiveStream
        };
    });;
define('viewmodels/vm.magazinegameviewdetails',
    ['ko', 'config', 'router', 'messenger', 'models/model', 'datamanager', 'viewmodels/vm.shell', 'helpers/sw.imagehelper', 'presenter', 'navigation', 'underscore'],
    function (ko, config, router, messenger, model, datamanager, shell, swimagehelper, presenter, navigation, _) {
        var
            viewIsInitialized = false,
            gameId,

            //Game Header properties
            gameHeaderInfo = ko.observable(),
            currentGame = 0,

            /*Attendee properties*/
            attendeesAtTheGame = ko.observableArray(),
            attendeesAtTheGameCount = ko.observable(0),
            attendeesAtTheGamePage = 0,
            gettingMoreAttendeesAtTheGame = false,
            noMoreAttendeesAtTheGameToGet = ko.observable(false),
            attendeesOnline = ko.observableArray(),
            attendeesOnlineCount = ko.observable(0),
            attendeesOnlinePage = 0,
            gettingMoreAttendeesOnline = false,
            noMoreAttendeesOnlineToGet = ko.observable(false),
            attendeesLiveOnline = ko.observableArray(),
            attendeesLiveOnlineCount = ko.observable(0),
            attendeesLiveOnlinePage = 0,
            gettingMoreAttendeesLiveOnline = false,
            noMoreAttendeesLiveOnlineToGet = ko.observable(false),
            activeTab = 3,

            numberAttendeesToGet = 48,

            /*PicsAndVideo properties*/
            pics = ko.observableArray(),
            videos = ko.observableArray(),
            picsCount = ko.observable(),
            videosCount = ko.observable(),

            /*Discussion properties*/
            discussionPosts = ko.observableArray(),
            discussionPostsCount = ko.computed(function () {
                return '' + discussionPosts().length + ')';
            }),

            gameDiscussionPost = ko.observable(),

            /*GameReports properties*/
            gameReports = ko.observableArray(),

            /*EventReports properties*/
            eventReports = ko.observableArray(),

            //Initialize loads data for the view and can be called when the view should be shown, or earlier to pre-load data 
            initialize = function (game, gameId, section, callback) {
                messenger.publish.viewModelActivated();

                currentGame = gameId;

                if (game) {
                    gameHeaderInfo(game.GameHeaderInfo);
                }
                else {
                    datamanager.getGameHeaderInfo(gameId, {
                        success: function (json) {
                            gameHeaderInfo(json);
                        },
                        error: function (response) {
                            //alert(response);
                        }
                    });
                }

                //Set variable to know that we have initalized the view
                viewIsInitialized = true;

                //Call callback if there is one
                if (_.isFunction(callback)) {
                    callback();
                }

            },

            getDiscussionPosts = function () {
                // TODO: Remove everything connected to this
            },

            //Activate shows the Magazine gameview details and is called from the router
            activate = function (routeData, callback) {

                gameId = routeData.gameId;
                //            window.scrollTo(0,0);

                //If the view is not intialized (the member made a browser refresh), run init with default values and the route info
                if (viewIsInitialized === false) {
                    initialize(null, routeData.gameId, routeData.section);
                }

                // Hide all details sections, the one sent in will be shown later
                $('.attendeeDetails').hide();
                $('.picsAndVideosDetails').hide();
                $('.gameReportsDetails').hide();
                $('.eventReportsDetails').hide();
                $('.discussionDetails').hide();

                switch (routeData.section) {
                    case "attendees":                        
                        datamanager.initGameAttendees(gameId, {
                            success: function (json) {                                
                                _.each(json, function (attendees) {
                                    switch (attendees.GameCheckInTypeID) {
                                        case 1:
                                            attendeesAtTheGameCount(attendees.NumberOfGameCheckins);
                                            break;
                                        case 2:
                                            attendeesOnlineCount(attendees.NumberOfGameCheckins);
                                            break;
                                        case 3:
                                            attendeesLiveOnlineCount(attendees.NumberOfGameCheckins);
                                            break;
                                    }
                                });
                            },
                            error: function (error) {
                                console.log(error);
                            }
                        });

                        //Clear the observable arrays
                        attendeesAtTheGame.removeAll();
                        attendeesOnline.removeAll();
                        attendeesLiveOnline.removeAll();

                        // Init the first tab
                        getAttendees(activeTab);

                        $('.attendeeDetails .attendee-tabs .default-tab').addClass('active');
                        $('.attendeeDetails').show();
                        $('#attendeesLiveOnlineTab').fadeIn(200);

                        $(window).scroll(infiniteScrolling);
                        break;

                    case "picsandvideos":
                        //Clear the observable arrays
                        pics([]);
                        videos([]);

                        datamanager.getPicsAndVideosForMagazineGameViewDetails(gameId, shell.currentMember.MemberID, {
                            success: function (json) {
                                _.each(json.Pics, function (pic) {
                                    pics.push(pic);
                                });

                                picsCount(json.PicsCount);
                                _.each(json.Videos, function (video) {
                                    videos.push(video);
                                });
                                videosCount(json.VideosCount);
                            },
                            error: function (response) {
                                //alert(response);
                            }
                        });

                        ////Show the details section
                        $('.picsAndVideosDetails').show();

                        break;
                    case "discussion":

                        getDiscussionPosts();

                        //Show the details section
                        $('.discussionDetails').show();

                        break;
                    default:
                        break;

                }

                showToolbar();
            },

            infiniteScrolling = function () {
                switch (activeTab) {
                    case 1:
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && attendeesAtTheGame().length !== 0) {
                            if (!gettingMoreAttendeesAtTheGame && !noMoreAttendeesAtTheGameToGet()) {
                                getAttendees(1);
                            }
                        }
                        break;
                    case 2:
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && attendeesOnline().length !== 0) {
                            if (!gettingMoreAttendeesOnline && !noMoreAttendeesOnlineToGet()) {
                                getAttendees(2);
                            }
                        }
                        break;
                    case 3:
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && attendeesLiveOnline().length !== 0) {
                            
                            if (!gettingMoreAttendeesLiveOnline && !noMoreAttendeesLiveOnlineToGet()) {
                                getAttendees(3);
                            }
                        }
                        break;
                }
            },

            getAttendees = function (type) {
                switch (type) {
                    case 1:
                        gettingMoreAttendeesAtTheGame = true;

                        datamanager.getGameAttendees(gameId, type, attendeesAtTheGamePage, numberAttendeesToGet, {
                            success: function (json) {
                                attendeesAtTheGamePage += 1;
                                gettingMoreAttendeesAtTheGame = false;

                                _.each(json, function (attendee) {
                                    attendeesAtTheGame.push(attendee);
                                });

                                if (json.length < numberAttendeesToGet)
                                    noMoreAttendeesAtTheGameToGet(true);
                            },
                            error: function (error) {
                                gettingMoreAttendeesAtTheGame = false;

                                console.log(error);
                            }

                        });
                        break;
                    case 2:
                        gettingMoreAttendeesOnline = true;

                        datamanager.getGameAttendees(gameId, type, attendeesOnlinePage, numberAttendeesToGet, {                            
                            success: function (json) {
                                attendeesOnlinePage += 1;
                                gettingMoreAttendeesOnline = false;

                                _.each(json, function (attendee) {
                                    attendeesOnline.push(attendee);
                                });

                                if (json.length < numberAttendeesToGet)
                                    noMoreAttendeesOnlineToGet(true);
                            },
                            error: function (error) {
                                gettingMoreAttendeesOnline = false;

                                console.log(error);
                            }
                        });
                        break;
                    case 3:
                        gettingMoreAttendeesLiveOnline = true;

                        datamanager.getGameAttendees(gameId, type, attendeesLiveOnlinePage, numberAttendeesToGet, {
                            success: function (json) {
                                attendeesLiveOnlinePage += 1;
                                gettingMoreAttendeesLiveOnline = false;

                                _.each(json, function (attendee) {
                                    attendeesLiveOnline.push(attendee);
                                });
                                if (json.length < numberAttendeesToGet)
                                    noMoreAttendeesLiveOnlineToGet(true);
                            },
                            error: function (error) {
                                gettingMoreAttendeesLiveOnline = false;

                                console.log(error);
                            }
                        });
                        break;
                }
            },

            validationErrors = ko.computed(function () {
                var valArray = gameDiscussionPost() ? ko.validation.group(gameDiscussionPost())() : [];
                return valArray;
            }),

            cleanup = function () {
                console.log('Cleanup!');
                activeTab = 3;

                $('.attendeeDetails .attendee-tabs button').removeClass('active');
                $('#attendeesLiveOnlineTab').fadeIn(200);
                $('.attendeeDetails .attendeesTab').hide();

                attendeesAtTheGame([]);
                attendeesAtTheGamePage = 0;
                attendeesAtTheGameCount(0);
                gettingMoreAttendeesAtTheGame = false;
                noMoreAttendeesAtTheGameToGet(false);

                attendeesOnline([]);
                attendeesOnlinePage = 0;
                attendeesOnlineCount(0);
                gettingMoreAttendeesOnline = false;
                noMoreAttendeesOnlineToGet(false);

                attendeesLiveOnline([]);
                attendeesLiveOnlinePage = 0;
                attendeesLiveOnlineCount(0);
                gettingMoreAttendeesLiveOnline = false;
                noMoreAttendeesLiveOnlineToGet(false);                

                $(window).unbind('scroll', infiniteScrolling);
            },

            showLiveDetails = function (data) {
                router.navigateTo(config.hashes.livedetails + '/' + gameId + '/' + data.PictureID + '/2');
            },

            showLiveDetailsVideo = function (data) {
                router.navigateTo(config.hashes.livedetails + '/' + gameId + '/' + data.VideoID + '/5');
            },

            showAttendeeTab = function (type, data, event) {
                $('.attendeeDetails .attendee-tabs button').removeClass('active');

                $(event.target).closest('button').addClass('active');

                $('.attendeeDetails .attendeesTab').hide();

                activeTab = type;

                switch (type) {
                    case 1:
                        if (attendeesAtTheGame().length === 0)
                            getAttendees(type);

                        $('#attendeesAtTheGameTab').fadeIn(200);
                        
                        break;
                    case 2:
                        if (attendeesOnline().length === 0)
                            getAttendees(type);

                        $('#attendeesOnlineTab').fadeIn(200);

                        break;
                    case 3:
                        if (attendeesLiveOnline().length === 0)
                            getAttendees(type);

                        $('#attendeesLiveOnlineTab').fadeIn(200);
                        break;
                }
            },

            saveComment = function () {
                var gameDiscussionPostModel = new model.GameDiscussionPost()
                    .InsertMemberID(shell.currentMember.MemberID)
                    .UpdateMemberID(shell.currentMember.MemberID)
                    .MemberID(shell.currentMember.MemberID)
                    .GameID(currentGame)
                    .Text($('#commentTextDetails').val());
                gameDiscussionPost(gameDiscussionPostModel);

                if (validationErrors().length === 0) {
                    datamanager.insertGameDiscussionPost(ko.toJS(gameDiscussionPost()), {
                        success: function (json) {
                            getDiscussionPosts();
                            presenter.toggleActivity(false);
                        },
                        error: function (response) {
                            alert(response);
                            presenter.toggleActivity(false);
                        }
                    });
                    $('#commentTextDetails').val('');
                }

                return false;
            },

            showToolbar = function () {

                $('#reload').show();

                $('#timelinePicker').unbind(); 
                $('#timelinePicker').click(function (){
                    router.navigateTo('#/live/' + gameId);
                });

                $('#timelinePicker').show();
            },

            back = function () {
                router.navigateBack();
            },

            deletePicture = function (data) {
                var answer = confirm("Delete Picture?");
                if (answer) {
                    // delete from observablearray
                    datamanager.deletePicture(data.PictureID, {
                        success: function (json) {
                            pics.remove(data);
                            toastr.success('Picture successfully deleted!');
                            //delete from observable Array
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
                else {
                    toastr.success("Canceled deleting picture!");
                }
            },

            reportPicture = function (selectedPicture) {
                var answer = confirm("Report Picture?");
                if (answer) {
                    toastr.success('Picture should be reported!');
                }
                else {
                    toastr.success("Canceled reporting picture!");
                }
            },

            navigateToLeague = function () {
                router.navigateTo(config.hashes.leaguesite + '/' + gameHeaderInfo().LeagueID);
            },

            getPictureURL = function (pictureInfo, screenEstate) {
                return swimagehelper.getPictureURLWithSize(pictureInfo, screenEstate);
            };

        return {
            activate: activate,
            initialize: initialize,
            cleanup: cleanup,

            gameHeaderInfo: gameHeaderInfo,

            attendeesAtTheGameCount: attendeesAtTheGameCount,
            attendeesAtTheGame: attendeesAtTheGame,
            attendeesOnlineCount: attendeesOnlineCount,
            attendeesOnline: attendeesOnline,
            attendeesLiveOnline: attendeesLiveOnline,
            attendeesLiveOnlineCount: attendeesLiveOnlineCount,

            pics: pics,
            videos: videos,
            picsCount: picsCount,
            videosCount: videosCount,
            deletePicture: deletePicture,
            reportPicture: reportPicture,

            gameReports: gameReports,
            eventReports: eventReports,
            saveComment: saveComment,
            showLiveDetails: showLiveDetails,
            showLiveDetailsVideo: showLiveDetailsVideo,
            showAttendeeTab: showAttendeeTab,

            noMoreAttendeesLiveOnlineToGet: noMoreAttendeesLiveOnlineToGet,
            noMoreAttendeesOnlineToGet: noMoreAttendeesOnlineToGet,
            noMoreAttendeesAtTheGameToGet: noMoreAttendeesAtTheGameToGet,

            discussionPostsCount:discussionPostsCount,
            discussionPosts: discussionPosts,

            getPictureURL: getPictureURL,
            navigation: navigation,

            navigateToLeague: navigateToLeague,

            back: back
        };
    });;
define('viewmodels/vm.member',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'toastr', 'viewmodels/vm.imagecropper', 'models/viewmodel', 'models/model', 'models/model.mapper', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, shell, toastr, imagecropper, viewmodel, model, modelmapper, _) {
        
        var profileMember = ko.observable(),
            memberId = ko.observable(),
            agreementInfo = ko.observable(),

            showPrivacySettings = ko.observable(false),
            loadingData = false,

            showAdminViews = ko.observable(shell.currentMember.IsSportswikAdmin),

            children = ko.observableArray(),
            memberGuardians = ko.observableArray(),
            memberActions = ko.observableArray(),

            isMyMember = ko.observable(true),
            currentPage = ko.observable(''),

            invitesFromTeam = ko.observableArray(),
            subscriptions = ko.observable(),

            genders = ko.observableArray(),
            countries = ko.observableArray(),
            years = ko.observableArray(),
            accountInfo = ko.observable(),            

            activate = function (routeData, callback) {
                routeData.subview = 'profile';

                showAdminViews(shell.currentMember.IsSportswikAdmin);

                if (_.isFunction(callback)) {
                    callback();
                }

                activatesubview(routeData);
            },

            showAdminView = ko.computed(function () {
                return $.cookie('adminMode') ? true : false;
            }),

            activatesubview = function (routeData) {
                var currentView = routeData.subview;

                $('.member-profile-header').show();

                if (!loadingData) {
                    loadingData = true;
                    loadData(currentView);
                }
            },

            loadData = function (currentView) {
                if (memberId() === undefined || memberId() === '')
                    memberId(shell.currentMember.MemberID);

                $('#member-' + currentView).show();
                $('#subTopbar-' + currentView).addClass('active');

                if (profileMember() === undefined || profileMember() === '') {
                    initMemberProfile(currentView, true);
                } else {
                    loadingData = false;
                    switch (currentView) {
                        case 'profile':
                            {
                                currentPage(currentView);
                                messenger.publish.viewModelActivated();
                            }
                            break;
                        case 'privacysettings':
                            {
                                currentPage(currentPage);

                                // Prevent people from navigating to privacysettings
                                if (showPrivacySettings() === false)
                                    router.navigateTo(config.hashes.member);
                            }
                            break;
                        case 'editinformation':
                            {
                                currentPage('profile');

                                if (years().length === 0 || countries().length === 0 || genders().length === 0) {
                                    datamanager.initMemberEditProfile(profileMember().MemberID, {
                                        success: function (json) {
                                            countries([]);
                                            genders([]);
                                            years([]);

                                            var underlayingArray = countries();
                                            for (var i = 0; i < json.Countries.length; i++) {
                                                underlayingArray.push(json.Countries[i]);
                                            }
                                            countries.valueHasMutated();

                                            underlayingArray = genders();
                                            for (var j = 0; j < json.Genders.length; j++) {
                                                underlayingArray.push(json.Genders[j]);
                                            }
                                            genders.valueHasMutated();

                                            underlayingArray = years();
                                            for (var k = 0; k < json.Years.length; k++) {
                                                underlayingArray.push(json.Years[k]);
                                            }
                                            years.valueHasMutated();

                                            $("#editInformationGender").val(profileMember().GenderID);
                                            $("#editInformationYearOfBirth").val(profileMember().YearOfBirth);
                                            $("#editInformationCountry").val(profileMember().CountryID);
                                        },
                                        error: function (response) {
                                            console.log(response);
                                        }
                                    });
                                } else {
                                    $("#editInformationGender").val(profileMember().GenderID);
                                    $("#editInformationYearOfBirth").val(profileMember().YearOfBirth);
                                    $("#editInformationCountry").val(profileMember().CountryID);
                                }
                            }
                            break;
                        case 'children':
                            {
                                currentPage(currentView);
                            }
                            break;
                        case 'changephonenumber':
                            {
                                currentPage('profile');

                                if (countries().length === 0) {
                                    datamanager.getCountriesForDialing({
                                        success: function (json) {
                                            var underlayingArray = countries();
                                            for (var i = 0; i < json.length; i++) {
                                                underlayingArray.push(json[i]);
                                            }
                                            countries.valueHasMutated();

                                            $("#changePhoneNumberPrefix").val(profileMember().CountryCodePrefix);
                                        },
                                        error: function (response) {
                                        }
                                    });
                                }
                            }
                            break;
                        case 'changeemail':
                            {
                                currentPage('profile');
                            }
                            break;
                        case 'agreements':
                            {
                                currentPage('account');

                                datamanager.getSignedAgreements({
                                    success: function (json) {
                                        agreementInfo(json);
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            }
                            break;
                        case 'subscriptions':
                            currentPage('account');

                            datamanager.getMemberPurchases({
                                success: function (json) {
                                    subscriptions(json);
                                },
                                error: function (response) {
                                    alert(response);
                                }
                            });
                            break;
                        case 'guardians':
                            {
                                currentPage(currentView);
                            }
                            break;
                        case 'memberactions':
                            {
                                currentPage(currentView);

                                datamanager.getMemberActions({
                                    success: function (json) {
                                        memberActions([]);

                                        var underlayingArray = memberActions();

                                        for (var i = 0; i < json.length; i++) {
                                            underlayingArray.push(json[i]);
                                        }

                                        memberActions.valueHasMutated();
                                    },
                                    error: function (response) {
                                    }
                                });
                            }
                            break;
                        case 'account':
                            {
                                currentPage(currentView);

                                datamanager.getMemberAccountInfo({
                                    success: function (json) {
                                        accountInfo(json);
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            }
                            break;
                        default:
                            {
                                //TODO: broken route
                            }
                    }
                }
            },

            disableField = function (fieldName) {
                $(fieldName).addClass('disabled-control');
                $(fieldName).prop('readonly', true);
            },

            enableField = function (fieldName) {
                $(fieldName).removeClass('disabled-control');
                $(fieldName).prop('readonly', false);
            },

            initMemberProfile = function (currentView, callSubView) {
                showPreloader();

                datamanager.initMemberProfile(memberId(), {
                    success: function (json) {
                        profileMember(json.MemberDetails);

                        if (json.MemberDetails.CanEditName) {
                            enableField('#memberEditFirstName')
                            enableField('#memberEditLastName')
                        } else {
                            disableField('#memberEditFirstName')
                            disableField('#memberEditLastName')
                        }

                        showPrivacySettings(json.ShowPrivacySettings);

                        isMyMember(profileMember().MemberID === shell.currentMember.MemberID);

                        children([]);
                        memberGuardians([]);

                        var underlayingArray = children();
                        for (var i = 0; i < json.Children.length; i++) {
                            underlayingArray.push(json.Children[i]);
                        }
                        children.valueHasMutated();

                        underlayingArray = memberGuardians();
                        for (var j = 0; j < json.MemberGuardians.length; j++) {
                            underlayingArray.push(json.MemberGuardians[j]);
                        }
                        memberGuardians.valueHasMutated();

                        removePreloader();

                        if (callSubView)
                            loadData(currentView);
                    },
                    error: function (response) {
                        loadingData = false;

                        removePreloader();
                    }
                });
            },

            cleanup = function () {
                $('.member-subview').hide();
                $('.save-status').hide();

                loadingData = false;
            },

            clearMember = function () {
                memberId('');
                profileMember('');

                if (!loadingData) {
                    loadingData = true;
                    loadData('profile');
                }
            },

            removePreloader = function () {
                $('#member-view-preloader').hide();
                $('#member-view-afterloaded').show();
            },

            showPreloader = function () {
                $('#member-view-preloader').show();
                $('#member-view-afterloaded').hide();
            },

            logout = function () {
                document.getElementById('logoutForm').submit();
            },

            navigateToProfile = function () {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.member;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.member);
                    }
                };
                return navigationItem;
            },

            navigateToChildren = function () {
                return createMemberNavigationItem('children');
            },

            navigateToGuardians = function () {
                return createMemberNavigationItem('guardians');
            },

            navigateToMemberActions = function () {
                return createMemberNavigationItem('memberactions');
            },

            navigateToAccount = function () {
                return createMemberNavigationItem('account');
            },

            navigateToAddInvite = function () {
                return createMemberNavigationItem('sendinvite');
            },

            navigateToAgreements = function () {
                return createMemberNavigationItem('agreements');
            },

            navigateToSubscriptionsAndPurchases = function () {
                return createMemberNavigationItem('subscriptions');
            },

            createMemberNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.member + '/' + endPath;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.member + '/' + endPath);
                    }
                };
            },

            navigateToChangePhoneNumber = function () {
                $('#changePhoneNumberIntro').show();
                $('#changePhoneNumberVerification').hide();

                router.navigateTo(config.hashes.member + '/changephonenumber');
            },

            navigateToChangeEmail = function () {
                $('#changeEmailIntro').show();
                $('#changeEmailVerification').hide();

                router.navigateTo(config.hashes.member + '/changeemail');
            },

            navigateToPrivacySettings = function () {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.member + '/privacysettings';
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.member + '/privacysettings');
                    }
                };
                return navigationItem;
            },

            navigateToChild = function (data) {
                if (data.PlayerID > 0) {
                    router.navigateTo(config.hashes.teamplayer + '/' + data.PlayerID + '/0');
                } else {
                    profileMember('');
                    memberId(data.MemberID);

                    router.navigateTo(config.hashes.member);
                }
            },

            navigateToGuardian = function (data) {
                profileMember('');
                memberId(data.MemberID);

                router.navigateTo(config.hashes.member);
            },

            navigateToInvites = function () {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.member + '/invites';
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.member + '/invites');
                    }
                };
                return navigationItem;
            },

            navigateToEditInformation = function () {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.member + '/editinformation';
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.member + '/editinformation');
                    }
                };
                return navigationItem;
            },            

            showReceipt = function (data) {
                if (data.PaymentTypeID === 1) // Swish
                    window.open('/Payment/PrintPaymentReceiptPDF?PaymentID=' + data.PaymentID, '_new');
                else if (data.PaymentTypeID === 2) // Stripe
                    window.open('/Payment/PrintStripePaymentReceiptPDF?PaymentID=' + data.PaymentID, '_new');
            },

            navigateToMemberAction = function (data) {
                switch (data.MemberActionTypeID) {
                    case 2:
                        router.navigateTo('/' + config.hashes.discover);
                        break;
                    case 7:
                        router.navigateTo('/' + config.hashes.member + '/editinformation');
                        break;
                    case 8:
                        router.navigateTo('/' + config.hashes.team + '/' + data.MemberActionItemID);
                        break;

                }
            },

            navigateToPurchaseLiveStream = function () {
                router.navigateTo(config.hashes.stream + '/subscription');
            },

            changeEmail = function () {
                $('#changeEmailError').hide();
                var newEmail = $('#changeEmailField').val();

                if (newEmail) {
                    shell.showProgressIndicator(MiscTexts.Sending);

                    datamanager.generateChangeEmailRequest(memberId(), newEmail, {
                        success: function (json) {
                            $('#changeEmailIntro').hide();
                            $('#changeEmailVerification').show();

                            shell.hideProgressIndicator();
                        },
                        error: function (response) {
                            $('#changeEmailError').show();
                            $('#changeEmailErrorText').text(response);

                            shell.hideProgressIndicator();
                        }
                    });
                }
            },

            changePhoneNumber = function () {
                $('#changePhoneNumberError').hide();
                var newPhoneNumber = $('#changePhoneNumberField').val();
                var countryCodePrefix = $('#changePhoneNumberPrefix').val();

                if (newPhoneNumber) {
                    shell.showProgressIndicator(MiscTexts.Sending);
                    datamanager.generateChangePhoneNumberRequest(memberId(), encodeURIComponent(countryCodePrefix), newPhoneNumber, {
                        success: function (json) {
                            $('#changePhoneNumberIntro').hide();
                            $('#changePhoneNumberVerification').show();

                            shell.hideProgressIndicator();
                        },
                        error: function (response) {
                            $('#changePhoneNumberError').show();
                            $('#changePhoneNumberErrorText').text(response);

                            shell.hideProgressIndicator();
                        }
                    });
                }
            },

            verifyEmailChange = function () {
                $('#changeEmailError').hide();
                var verificationCode = $('#changeEmailVerificationCode').val();

                if (verificationCode) {
                    datamanager.verifyEmailChange(verificationCode, {
                        success: function (json) {
                            if (json) {
                                alert(MemberTexts.ThisChangeRequiresReLogin);
                                router.navigateTo('/');
                            }
                            else {
                                cleanup();

                                initMemberProfile('profile', true);
                            }
                        },
                        error: function (response) {
                            $('#changeEmailError').show();
                            $('#changeEmailErrorText').text(response);
                        }
                    });
                }
            },

            verifyPhoneNumberChange = function () {
                $('#changePhoneNumberError').hide();
                var verificationCode = $('#changePhoneNumberVerificationCode').val();

                if (verificationCode) {
                    datamanager.verifyPhoneNumberChange(verificationCode, {
                        success: function (json) {
                            cleanup();

                            initMemberProfile('profile', true);

                            //router.navigateTo(config.hashes.member);
                        },
                        error: function (response) {
                            $('#changePhoneNumberError').show();
                            $('#changePhoneNumberErrorText').text(response);
                        }
                    });
                }
            },

            changeEmailVerificationCodeKeyUp = function () {
                var verificationCode = $('#changeEmailVerificationCode').val();

                $('#changeEmailVerificationCodeButton').prop('disabled', verificationCode.length !== 4);
            },

            changePhoneNumberVerificationCodeKeyUp = function () {
                var verificationCode = $('#changePhoneNumberVerificationCode').val();

                $('#changePhoneNumberVerificationCodeButton').prop('disabled', verificationCode.length !== 4);
            },

            updateReferencePicture = function () {
                var referencePictureData = '';

                if ($('#referencePicData').val())
                    referencePictureData = $('#referencePicData').val();

                var referencePictureForMember = new viewmodel.ReferencePicture()
                    .MemberID(memberId())
                    .PictureBase64(referencePictureData);

                datamanager.updateReferencePicture(ko.toJS(referencePictureForMember), {
                    success: function (json) {
                        initMemberProfile('', false);
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            changeProfilePicture = function () {
                $('.memberProfileFilePicker').focus().trigger('click');
            },

            changeReferencePicture = function () {
                $('.referencePictureFilePicker').focus().trigger('click');
            },

            deleteReferencePicture = function () {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    //$('#referencePictureImage').attr('src', '');

                    datamanager.deleteReferencePicture(memberId(), {
                        success: function (json) {
                            initMemberProfile('', false);
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
            },

            deleteProfilePicture = function () {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteMemberProfilePicture(memberId(), {
                        success: function (json) {
                            if (isMyMember() === true) {
                                if ($(".memberProfilePic").children().length > 0)
                                    $(".memberProfilePic").empty();

                                $(".memberProfilePic").css('background-image', 'url(\'https://sportswik.blob.core.windows.net/memberpictures/defaultplayeravatar.png\')');
                            } else {
                                if ($(".memberProfileView").children().length > 0)
                                    $(".memberProfileView").empty();

                                $(".memberProfileView").css('background-image', 'url(\'https://sportswik.blob.core.windows.net/memberpictures/defaultplayeravatar.png\')');
                            }
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
            },

            savePrivacySettings = function () {
                var hideProfilePicture = $('#hideProfilePicture').is(":checked");
                var hideProfileName = $('#hideProfileName').is(":checked");
                var photographyForbidden = $('#photographyForbidden').is(":checked");

                var memberForMember = new viewmodel.MemberForMemberDetails()
                    .MemberID(memberId())
                    .PhotographyForbidden(photographyForbidden)
                    .HideProfilePicture(hideProfilePicture)
                    .HideProfileName(hideProfileName);

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.updateMemberSettings(ko.toJS(memberForMember), {
                    success: function (json) {
                        shell.hideProgressIndicator();
                        $('.save-status').show();
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();

                        alert(response);
                    }
                });
            },

            saveMemberInformation = function () {
                var countryID = $('#editInformationCountry').val();
                var yearOfBirth = $('#editInformationYearOfBirth').val();
                var genderID = $('#editInformationGender').val();
                var editMemberID = profileMember().MemberID;
                var firstName = profileMember().FirstName;
                var lastName = profileMember().LastName;
                var thumbnailURL = profileMember().ThumbnailURL;
                var pictureURL = profileMember().PictureURL;

                if (firstName.length === 0) {
                    alert(MemberTexts.FirstNameIsRequired);
                    return;
                }

                if (lastName.length === 0) {
                    alert(MemberTexts.LastNameIsRequired);
                    return;
                }

                if (yearOfBirth === null || yearOfBirth.length === 0)
                    yearOfBirth = "0";

                var memberForMember = new viewmodel.MemberForMemberDetails()
                    .MemberID(editMemberID)
                    .FirstName(firstName)
                    .LastName(lastName)
                    .ThumbnailURL(thumbnailURL)
                    .PictureURL(pictureURL)
                    .HasActivatedPushNotifications(profileMember().HasActivatedPushNotifications)
                    .YearOfBirth(yearOfBirth)
                    .GenderID(genderID)
                    .CountryID(countryID);

                var memberDto = ko.toJS(memberForMember);

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.updateMember(memberDto, {
                    success: function (json) {
                        datamanager.initMemberProfile(memberId(), {
                            success: function (json) {
                                profileMember(json.MemberDetails);

                                shell.hideProgressIndicator();

                                router.navigateBack();
                            },
                            error: function (response) {
                                router.navigateBack();
                            }
                        });
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();

                        console.log(response);
                        alert(response);
                    }
                });
            },

            profilePictureDataSelected = function (base64Data) {
                if (isMyMember() === true) {
                    $('.memberProfilePic').css('background-image', 'url(' + base64Data + ')');
                } else {
                    $('.memberProfileView').css('background-image', 'url(' + base64Data + ')');
                }
            },

            handleMemberPicFileSelect = function (evt) {
                var files = evt.target.files; // FileList object

                for (var i = 0; i < files.length; i++) {
                    var f = files[i];

                    if (!f.type.match('image.*')) {
                        continue;
                    }

                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var base64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            imagecropper.activate(base64data, 1, 1, true, cropperCallback);
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },

            cropperCallback = function (cropData, croppedData, base64data) {
                shell.showProgressIndicator(MiscTexts.Uploading);

                var memberForMember = new viewmodel.MemberForMemberDetails()
                    .MemberID(memberId())
                    .CropData(cropData)
                    .PictureBase64(base64data);

                datamanager.updateMemberPicture(ko.toJS(memberForMember), {
                    success: function (json) {
                        if (isMyMember() === true)
                            shell.currentMember.PictureBase64 = croppedData;

                        profilePictureDataSelected(croppedData);

                        shell.hideProgressIndicator();
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();

                        alert(response);
                    }
                });
            },

            handleReferencePicFileSelect = function (evt) {
                var files = evt.target.files; // FileList object

                // Loop through the FileList and render image files as thumbnails.
                for (var i = 0; i < files.length; i++) {
                    var f = files[i];

                    // Only process image files.
                    if (!f.type.match('image.*')) {
                        continue;
                    }

                    var reader = new FileReader();

                    // Closure to capture the file information.
                    reader.onload = (function (theFile) {
                        return function (e) {
                            var base64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);
                            // Set profile picture base64 on hidden field                            
                            $('#referencePicData').val(base64data);

                            updateReferencePicture();
                        };
                    })(f);

                    // Read in the image file as a data URL.
                    reader.readAsDataURL(f);
                }
            },

            init = function () {
                $(document).on('change', '.memberProfileFilePicker', function (evt) {
                    handleMemberPicFileSelect(evt);
                });

                $(document).on('change', '.referencePictureFilePicker', function (evt) {
                    handleReferencePicFileSelect(evt);
                });
            },

            cancelSubscription = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Updating);

                    datamanager.cancelStripeSubscription(data.SubscriptionID)
                        .then(function () {
                            datamanager.getMemberPurchases({
                                success: function (json) {
                                    subscriptions(json);

                                    shell.hideProgressIndicator();
                                },
                                error: function (response) {
                                    shell.hideProgressIndicator();

                                    alert(response);
                                }
                            });    
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();

                            alert(error.responseText);
                        });
                }
            },

            optInClicked = function (data, event) {
                var isChecked = $(event.target).is(":checked");


                datamanager.changeOptInSettingForMemberAgreement(data.AgreementID, isChecked, {
                    success: function (json) {
                        // Succeed silently
                    },
                    error: function (json) {
                        alert(json);
                    }
                });                

                return true;
            },

            adminMode = function () {
                if ($.cookie('adminMode')) {
                    $.removeCookie("adminMode");
                    $("#admin-mode").removeClass("btn-default");
                    $("#admin-mode").addClass("btn-success");
                } else {
                    $.cookie('adminMode', 'true');
                    $("#admin-mode").removeClass("btn-success");
                    $("#admin-mode").addClass("btn-default");
                }

                location.reload();
            },            

            presentationMode = function () {
                $('#magazinegameview-view > .gameViewWrapper > .contentBlock:not(.liveGame)').hide();

                toastr.success('Presentation mode enabled!');
            };

        init();
        
        return {
            member: profileMember,
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,
            clearMember: clearMember,
            currentPage: currentPage,
            changeProfilePicture: changeProfilePicture,
            deleteProfilePicture: deleteProfilePicture,
            changeReferencePicture: changeReferencePicture,
            deleteReferencePicture: deleteReferencePicture, 
            savePrivacySettings: savePrivacySettings,
            saveMemberInformation: saveMemberInformation,
            agreementInfo: agreementInfo,

            navigateToProfile: navigateToProfile,
            navigateToChildren: navigateToChildren,
            navigateToGuardians: navigateToGuardians,
            navigateToMemberActions: navigateToMemberActions,
            navigateToInvites: navigateToInvites,
            navigateToAccount: navigateToAccount,            
            navigateToAddInvite: navigateToAddInvite,
            navigateToChangePhoneNumber: navigateToChangePhoneNumber,
            navigateToChangeEmail: navigateToChangeEmail,
            navigateToPrivacySettings: navigateToPrivacySettings,            
            navigateToChild: navigateToChild,
            navigateToGuardian: navigateToGuardian,
            navigateToEditInformation: navigateToEditInformation,
            navigateToMemberAction: navigateToMemberAction,
            navigateToPurchaseLiveStream: navigateToPurchaseLiveStream,
            navigateToSubscriptionsAndPurchases: navigateToSubscriptionsAndPurchases,
            navigateToAgreements: navigateToAgreements,                        

            //admin properties
            showAdminViews: showAdminViews,
            invitesFromTeam: invitesFromTeam,            
            subscriptions: subscriptions,            

            genders: genders,
            years: years,            

            children: children,
            memberGuardians: memberGuardians,
            memberActions: memberActions,            
            accountInfo: accountInfo,
            countries: countries,                                    
            logout: logout,            
            showPrivacySettings: showPrivacySettings,            

            changeEmail: changeEmail,
            changePhoneNumber: changePhoneNumber,
            verifyEmailChange: verifyEmailChange,
            verifyPhoneNumberChange: verifyPhoneNumberChange,
            changeEmailVerificationCodeKeyUp: changeEmailVerificationCodeKeyUp,
            changePhoneNumberVerificationCodeKeyUp: changePhoneNumberVerificationCodeKeyUp,

            showReceipt: showReceipt,
            cancelSubscription: cancelSubscription,

            optInClicked: optInClicked,
            memberTexts: MemberTexts,

            isMyMember: isMyMember,
            presentationMode: presentationMode,
            adminMode: adminMode,            
            showAdminView: showAdminView
        };
    });
;
define('viewmodels/vm.memberdetails',
    ['ko', 'messenger', 'datamanager', 'underscore'],
    function (ko, messenger, datamanager, _) {
        var 
            member = ko.observableArray(),

            activate = function (routeData, callback) {

                messenger.publish.viewModelActivated();

                datamanager.getMemberForMemberDetails(routeData.memberId, {
                    success: function (json) {
                        member(json);
                    },
                    error: function (response) {
                    }
                });

                if (_.isFunction(callback)) {
                    callback();
                }
            },

            init = function () {};
        
        init();
        
        return {
            activate: activate,
            member: member
        };
    });
;
define('viewmodels/vm.membernotifications',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'viewmodels/vm.shell', 'datamanager', 'underscore'],
    function ($, ko, config, router, messenger, shell, datamanager, _) {

        var memberNotifications = ko.observableArray(),
            gettingNotifications = ko.observable(false),
            noMoreNotificationsToGet = ko.observable(false),

            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();

                $(window).scroll(infiniteScrolling);

                shell.globalMemberNotificationsNumber(0);

                if (_.isFunction(callback)) { callback(); }

                if (memberNotifications().length === 0) {
                    getNotifications();
                }
            },

            cleanup = function () {
                // TODO: instead of clearing the list each time, only get newer notifications when we reload the list
                memberNotifications([]);

                $(window).unbind('scroll', infiniteScrolling);
            },

            navigateToNotification = function (data, event) {
                if (data.Status === 1 || data.Status === 2) {
                    var target;

                    if (event.target)
                        target = event.target;
                    else if (event.srcElement)
                        target = event.srcElement;

                    if (target.nodeType === 3) // defeat Safari bug
                        target = target.parentNode;

                    var listElement = $(target).closest("li");                                
                    listElement.removeClass('notRead');

                    datamanager.setMemberNotificationStatus(data.MemberNotificationID, 3, {
                        success: function (json) {
                            shell.globalMemberNotificationsNumber(shell.globalMemberNotificationsNumber() - 1);
                        },
                        error: function (response) {

                        }
                    });
                }

                switch (data.MemberNotificationTypeID) {
                    case 1: // Game
                        switch (data.ActionTypeID) {
                            case 27:
                            case 32:
                                // Do nothing
                                break;
                            default:
                                router.navigateTo('/' + config.hashes.magazinegameview + '/' + data.MemberNotificationItemID);
                        }
                        
                        break;
                    case 2: // Team   
                        switch (data.ActionTypeID) {
                            case 26: // InfoItemPosted
                                router.navigateTo('/' + config.hashes.team + '/' + data.MemberNotificationItemID + '/posts');
                                break;
                            default:
                                router.navigateTo('/' + config.hashes.team + '/' + data.MemberNotificationItemID);
                                break;
                        }
                        
                        break;
                    case 4: // Picture
                        router.navigateTo('/' + config.hashes.picturedetails + '/' + data.MemberNotificationItemID);
                        break;
                    case 5: // Video
                        router.navigateTo('/' + config.hashes.videodetails + '/' + data.MemberNotificationItemID);
                        break;
                    case 6: // DiscussionPost
                        router.navigateTo('/' + config.hashes.discussionpostdetails + '/' + data.MemberNotificationItemID);
                        break;
                    case 7:
                        break;
                    case 8:
                        router.navigateTo('/' + config.hashes.team + '/' + data.MemberNotificationItemID + '/staff');
                        break;
                    case 9:
                        router.navigateTo('/' + config.hashes.team + '/' + data.MemberNotificationItemID + '/players');                    
                        break;
                    case 10:
                        router.navigateTo('/' + config.hashes.team + '/' + data.MemberNotificationItemID + '/followers');
                        break;
                    case 11: // Live stream
                        break;
                    case 12:
                        switch (data.ActionTypeID) {
                            case 17: // Trial started
                                // TODO: Where to navigate
                                router.navigateTo('/' + config.hashes.member + '/account');

                                break;
                            case 18: // Subscription purchased
                                // TODO: Where to navigate
                                router.navigateTo('/' + config.hashes.member + '/account');

                                break;
                        }
                        break;
                    case 13: // Challenge
                        break;
                    case 14: // LeagueOrganizer
                        switch (data.ActionTypeID) {
                            case 26: // InfoItemPosted
                                router.navigateTo('/' + config.hashes.leagueorganizersite + '/' + data.MemberNotificationItemID + '/posts');
                                break;
                            default:
                                router.navigateTo('/' + config.hashes.leagueorganizersite + '/' + data.MemberNotificationItemID);
                                break;
                        }
                        break;
                    case 15: // Club
                        switch (data.ActionTypeID) {
                            case 26: // InfoItemPosted
                                router.navigateTo('/' + config.hashes.club + '/' + data.MemberNotificationItemID + '/posts');
                                break;
                            default:
                                router.navigateTo('/' + config.hashes.club + '/' + data.MemberNotificationItemID);
                                break;
                        }
                        break;
                    case 16:
                        switch (data.ActionTypeID) {
                            case 28:
                                router.navigateTo('/' + config.hashes.gameteamrequest + '/' + data.MemberNotificationItemID);
                                break;
                            case 29:
                                router.navigateTo('/' + config.hashes.magazinegameview + '/' + data.MemberNotificationItemID);
                                
                                break;
                            case 30:
                                // TODO: request denied
                                break;
                        }
                        break;
                    case 17:
                        switch (data.ActionTypeID) {
                            case 24:
                                router.navigateTo('/' + config.hashes.leaguesite + '/' + data.MemberNotificationItemID + '/weeklyhighlights');
                                break;
                        }
                        break;
                    case 18:
                        router.navigateTo('/' + config.hashes.infoitemdetails + '/' + data.MemberNotificationItemID);
                        break;
                }
            },

            getNotifications = function () {
                gettingNotifications(true);

                var notificationId = memberNotifications().length ? memberNotifications()[memberNotifications().length - 1].MemberNotificationID : 0;

                datamanager.getMemberNotificationsForSelectList(notificationId, {
                    success: function (json) {
                        gettingNotifications(false);

                        if (json.length !== 0) {
                            var underlayingArray = memberNotifications();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            memberNotifications.valueHasMutated();
                        }
                        else {
                            noMoreNotificationsToGet(true);
                        }

                        removePreloader('membernotifications-list');
                    
                    },
                    error: function (response) {
                        gettingNotifications(false);

                        removePreloader('membernotifications-list');
                    }
                });
            },

             removePreloader = function (subviewname) {
                 $('#' + subviewname + ' .preloader').hide();
                 $('#' + subviewname + ' .afterloaded').show();

                 $('#membernotifications-view .main-preloader').hide();
                 $('#membernotifications-view .main-afterloaded').show();
             },

            infiniteScrolling = function () {
                if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && memberNotifications().length !== 0) {
                    if (!gettingNotifications() && !noMoreNotificationsToGet()) {
                        getNotifications();                    
                    }
                }

                // TODO:
            };

        return {
            activate: activate,
            cleanup: cleanup,

            navigateToNotification: navigateToNotification,

            memberNotifications: memberNotifications
        };
    });;
define('viewmodels/vm.memberrequest',
    ['ko', 'messenger', 'datamanager', 'toastr', 'underscore'],
    function (ko, messenger, datamanager, toastr, _) {
        var allMembers = ko.observableArray(),
            allMemberRequests = ko.observableArray(),

       createMember = function (routeData, data) {
            // Saves post with datamanger
           datamanager.createMemberFromMemberRequest(routeData.MemberRequestID, {
                success: function (json) {
                    toastr.success('Member created');
                    getData();
                },
                error: function (response) {
                    toastr.success('Error when creating member');
                }
            });
        },

        getAllMembers = function () {
            datamanager.getAllMembers({
                success: function (json) {
                    allMembers(json);
                },
                error: function (response) {
                    toastr.success('Error when fetching all members');
                }
            });
        },

        getAllMemberReuests = function () {
            datamanager.getAllMemberRequests({
                success: function (json) {
                    allMemberRequests(json);
                },
                error: function (response) {
                    toastr.success('Error when fetching all member requests');
                }
            });
        },
 
        activate = function (routeData, callback) {
            messenger.publish.viewModelActivated();
            getData();
            if (_.isFunction(callback)) {
                callback();
            }
        },

        getData = function () {
            getAllMembers();
            getAllMemberReuests();
        },

        init = function () {};
        
        init();
        
        return {
            activate: activate,
            allMembers: allMembers,
            allMemberRequests: allMemberRequests,
            createMember: createMember
        };
    });
;
define('viewmodels/vm.mygames',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, _) {

        var previousGames = ko.observableArray(),
            comingGames = ko.observableArray(),
            hasActiveSubscription = ko.observable(false),
            initMemberSubscriptionInfo = ko.observable(),
            activeEvents = ko.observableArray(),

            activate = function (routeData, callback) {
                datamanager.initMyGames({
                    success: function (json) {
                        initMemberSubscriptionInfo(json.InitMemberSubscriptionInfo);

                        previousGames([]);
                        comingGames([]);
                        activeEvents([]);

                        var underlayingArray = previousGames();

                        for (var i = 0; i < json.PreviousGames.length; i++) {
                            underlayingArray.push(json.PreviousGames[i]);
                        }

                        previousGames.valueHasMutated();

                        underlayingArray = comingGames();

                        for (var j = 0; j < json.ComingGames.length; j++) {
                            underlayingArray.push(json.ComingGames[j]);
                        }

                        comingGames.valueHasMutated();

                        underlayingArray = activeEvents();

                        for (var k = 0; k < json.ActiveEvents.length; k++) {
                            underlayingArray.push(json.ActiveEvents[k]);
                        }

                        activeEvents.valueHasMutated();

                        $('#mygames-view .preloader').hide();
                        $('#mygames-view .main-afterloaded').show();

                        if (json.PreviousGames.length < 10)
                            $('#getMorePreviousStreamedGames').hide();

                        if (json.ComingGames.length < 10)
                            $('#getMoreComingStreamedGames').hide();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            cleanup = function () {
                previousGames([]);
                comingGames([]);

                $('#getMorePreviousStreamedGames').show();
                $('#getMoreComingStreamedGames').show();

                $('#mygames-view .preloader').show();
                $('#mygames-view .main-afterloaded').hide();
            },

            getMorePreviousGames = function () {
                var underlyingArray = previousGames();

                if (underlyingArray.length > 0) {
                    var lastItem = underlyingArray[underlyingArray.length - 1];

                    datamanager.getPreviousStreamedGames(lastItem.GameID, {
                        success: function (json) {
                            if (json.length < 10)
                                $('#getMorePreviousStreamedGames').hide();

                            for (var i = 0; i < json.length; i++) {
                                underlyingArray.push(json[i]);
                            }

                            previousGames.valueHasMutated();
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            getMoreComingGames = function () {
                var underlyingArray = comingGames();

                if (underlyingArray.length > 0) {
                    var lastItem = underlyingArray[underlyingArray.length - 1];

                    datamanager.getComingStreamedGames(lastItem.GameID, {
                        success: function (json) {
                            if (json.length < 10)                                
                                $('#getMoreComingStreamedGames').hide();

                            for (var i = 0; i < json.length; i++) {
                                underlyingArray.push(json[i]);
                            }

                            comingGames.valueHasMutated();
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            togglePreviousGames = function (data, event) {
                $(".mygames-tabs button").removeClass("active");

                $(event.target).addClass("active");

                $('#mygames-previousgames').fadeIn(200);
                $('#mygames-cominggames').hide();
            },

            toggleComingGames = function (data, event) {
                $(".mygames-tabs button").removeClass("active");

                $(event.target).addClass("active");

                $('#mygames-previousgames').hide();
                $('#mygames-cominggames').fadeIn(200);
            },

            scrollToGames = function () {
                $("html").animate({
                    scrollTop: $("#mygames-cominggames").offset().top - 120
                }, 500);
            },

            navigateToPurchaseGame = function (data) {
                datamanager.getPaymentTeam(data.GameID, {
                    success: function (teamId) {
                        
                        if (data.IsPayPerView)
                            router.navigateTo(config.hashes.stream + '/game/' + data.GameID);
                        else if (teamId > 0)
                            router.navigateTo(config.hashes.stream + '/subscription/' + teamId);
                        else
                            router.navigateTo(config.hashes.stream + '/subscription');
                        
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            navigateToTeams = function () {
               router.navigateTo(config.hashes.myteams);
            },

            navigateToPurchaseStreamAccount = function (data) {
                console.log(data);
                /*router.navigateTo(data.SubscriptionLink);*/
                router.navigateTo(config.hashes.stream + '/event/' + data.ID);

                //#/stream/event/13
            };

        return {
            activate: activate,
            cleanup: cleanup,

            previousGames: previousGames,
            comingGames: comingGames,

            getMorePreviousGames: getMorePreviousGames,
            getMoreComingGames: getMoreComingGames,

            initMemberSubscriptionInfo: initMemberSubscriptionInfo,
            activeEvents: activeEvents,

            togglePreviousGames: togglePreviousGames,
            toggleComingGames: toggleComingGames,

            scrollToGames: scrollToGames,

            navigateToPurchaseGame: navigateToPurchaseGame,
            navigateToPurchaseStreamAccount: navigateToPurchaseStreamAccount,
            navigateToTeams: navigateToTeams
        };
    });;
define('viewmodels/vm.myteams',
    ['ko', 'messenger', 'config', 'router', 'datamanager', 'viewmodels/vm.shell', 'toastr', 'underscore'],
    function (ko, messenger, config, router, datamanager, shell, toastr, _) {
        var seasonsForTeamsIFollow = ko.observableArray(),
            seasonsForMyTeams = ko.observableArray(),
            leagues = ko.observableArray(),
            memberActions = ko.observableArray(),
            activeTab = ko.observable('roles-tab'),

            activate = function (routeData, callback) {

                messenger.publish.viewModelActivated();

                // TODO: when to clean teams?
                if (seasonsForMyTeams().length === 0) {
                    getMyTeams();
                }

                if (_.isFunction(callback)) {
                    callback();
                }
            },

            getMyTeams = function () {
                $('#myteams-view .preloader').show();
                $('#myteams-view .afterloaded').hide();

                datamanager.initMyTeams({
                    success: function (model) {
                        seasonsForMyTeams([]);
                        seasonsForTeamsIFollow([]);

                        var underlayingArray = seasonsForMyTeams();

                        for (var i = 0; i < model.Roles.length; i++) {
                            underlayingArray.push(model.Roles[i]);
                        }

                        seasonsForMyTeams.valueHasMutated();

                        underlayingArray = seasonsForTeamsIFollow();

                        for (var j = 0; j < model.TeamsIFollow.length; j++) {
                            underlayingArray.push(model.TeamsIFollow[j]);
                        }

                        seasonsForTeamsIFollow.valueHasMutated();

                        $('#myteams-view .preloader').hide();
                        $('#myteams-view .afterloaded').show();
                    },
                    error: function (response) {
                        $('#myteams-view .preloader').hide();
                        $('#myteams-view .afterloaded').show();
                    }
                });

                // Ugly hack for Floorball....
                if (Number(applicationID) === 3) {
                    datamanager.getMemberActionsFloorball({
                        success: function (model) {
                            memberActions([]);                            

                            var underlayingArray = memberActions();

                            for (var i = 0; i < model.length; i++) {
                                underlayingArray.push(model[i]);
                            }

                            memberActions.valueHasMutated();
                        },
                        error: function (response) {

                        }
                    });
                }
            },

            getTeamsIFollow = function () {
                $('#myteams-view .preloader').show();
                $('#myteams-view .afterloaded').hide();

                datamanager.getTeamsIFollow({
                    success: function (model) {
                        seasonsForTeamsIFollow([]);
                        var underlayingArray = seasonsForTeamsIFollow();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        seasonsForTeamsIFollow.valueHasMutated();

                        $('#myteams-view .preloader').hide();
                        $('#myteams-view .afterloaded').show();
                    },
                    error: function (response) {
                        $('#myteams-view .preloader').hide();
                        $('#myteams-view .afterloaded').show();
                    }
                });
            },

            toggleMyRoles = function () {
                $('#myteams-leagues').hide();
                $('#myteams-roles').show();

                activeTab('roles-tab');
            },

            toggleLeagues = function () {
                $('#myteams-leagues').show();
                $('#myteams-roles').hide();

                activeTab('league-tab');

                $('#myteams-view .preloader').show();
                $('#myteams-view .afterloaded').hide();

                datamanager.getLeaguesIFollow({
                    success: function (model) {
                        leagues([]);

                        var underlayingArray = leagues();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        leagues.valueHasMutated();

                        $('#myteams-view .preloader').hide();
                        $('#myteams-view .afterloaded').show();
                    },
                    error: function (response) {

                    }
                });
            },
            
            navigateToMemberAction = function (data) {
                switch (data.MemberActionTypeID) {
                    case 2:
                        router.navigateTo('/' + config.hashes.discover);
                        break;
                    case 7:
                        router.navigateTo('/' + config.hashes.member + '/editinformation');
                        break;
                    case 8:
                        router.navigateTo('/' + config.hashes.team + '/' + data.MemberActionItemID);
                        break;

                }
            },

            navigateToMemberActions = function () {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.member + '/memberactions';
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.member + '/memberactions');
                    }
                };
                return navigationItem;
            },

            navigateToLeagueView = function (league) {
                navigationItem = {
                    getHrefString: function () {
                        return '/' + config.hashes.leaguesite + '/' + league.LeagueID;
                    },
                    toClick: function () {
                        router.navigateTo('/' + config.hashes.leaguesite + '/' + league.LeagueID);
                    }
                };
                return navigationItem;
            },

            unfollow = function (item) {
                event.stopPropagation();                

                var r = confirm(MemberTexts.AreYouSureYouNoLongerWantToFollowThisTeam);

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Deleting);

                    datamanager.unfollowTeam(item.ItemID, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            seasonsForTeamsIFollow([]);
                            getTeamsIFollow();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });

                }
            },

            unfollowLeague = function (item) {
                event.stopPropagation();

                var r = confirm(MemberTexts.AreYouSureYouNoLongerWantToFollowThisCompetition);

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Deleting);
                   
                    datamanager.unfollowLeague(item.LeagueID, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            leagues([]);

                            datamanager.getLeaguesIFollow({
                                success: function (model) {
                                    var underlayingArray = leagues();

                                    for (var i = 0; i < model.length; i++) {
                                        underlayingArray.push(model[i]);
                                    }

                                    leagues.valueHasMutated();
                                },
                                error: function (response) {

                                }
                            });
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });

                }
            },

            navigateToItem = function (item) {
                switch (item.DeepLinkTypeID) {
                    case 69: // Team page
                        router.navigateTo(config.hashes.team + '/' + item.ItemID);
                        break;
                    case 53: // Club
                        router.navigateTo(config.hashes.club + '/' + item.ItemID);
                        break;
                    case 18: // League organizer
                        router.navigateTo(config.hashes.leagueorganizersite + '/' + item.ItemID);
                        break;
                    default:
                        console.log('Unknown type clicked!');
                }
            },

            navigateToSearch = function () {
                router.navigateTo(config.hashes.discover);
            },

            cleanup = function () {

            };

        return {
            activate: activate,
            cleanup: cleanup,

            activeTab: activeTab,

            toggleMyRoles: toggleMyRoles,
            toggleLeagues: toggleLeagues,

            unfollow: unfollow,
            unfollowLeague: unfollowLeague,

            navigateToItem: navigateToItem,
            navigateToSearch: navigateToSearch, 
            navigateToMemberAction: navigateToMemberAction,
            navigateToMemberActions: navigateToMemberActions,
            navigateToLeagueView: navigateToLeagueView,

            seasonsForMyTeams: seasonsForMyTeams,
            seasonsForTeamsIFollow: seasonsForTeamsIFollow,
            leagues: leagues,
            memberActions: memberActions
        };
    });
;
define('viewmodels/vm.partneradmin',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.audience', 'viewmodels/vm.targetfilter', 'viewmodels/vm.imagecropper', 'viewmodels/vm.shell', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, audience, targetfilter, imagecropper, shell, _) {

        var partnerFeatureTypes = ko.observableArray(),
            partnerFeatureSets = ko.observableArray(),
            partnerFeatureSet = ko.observable(),
            partnerFeaturePackage = ko.observable(),
            partnerPackages = ko.observableArray(),
            partner = ko.observable(),
            partnerDetails = ko.observable(),
            partnerFeatureSetForEdit = ko.observable(),
            partnerPackageForEdit = ko.observable(),
            partnerFeatures = ko.observableArray(),
            partnerFeature = ko.observable(),            

            partnerId = 0,
            reloadAndSelectPackage = false,

            currentActivePartners = ko.observableArray(),
            currentActivePlacements = ko.observableArray(),
            activePartners = ko.observableArray(),
            inactivePartners = ko.observableArray(),
            chart,
            currentPage = ko.observable(''),
            currentView = '',

            activate = function (routeData, callback) {
                routeData.subview = 'start';

                $('#partneradmin-view .preloader').show();
                $('#partneradmin-view .afterloaded').hide();

                activatesubview(routeData);
            },

            activatesubview = function (routeData) {
                currentView = routeData.subview;
                currentPage(currentView);

                $('.partneradmin-subview').hide();
                $('#partneradmin-' + currentView).show();

                switch (currentView) {
                    case 'start':
                        {
                            datamanager.initPartnerAdmin({
                                success: function (json) {
                                    activePartners([]);
                                    inactivePartners([]);

                                    var underlayingArray = activePartners();

                                    for (var i = 0; i < json.ActivePartners.length; i++) {
                                        underlayingArray.push(json.ActivePartners[i]);
                                    }

                                    activePartners.valueHasMutated();

                                    underlayingArray = inactivePartners();

                                    for (var j = 0; j < json.InactivePartners.length; j++) {
                                        underlayingArray.push(json.InactivePartners[j]);
                                    }

                                    inactivePartners.valueHasMutated();


                                    hidePreloader();
                                },
                                error: function (error) {
                                    hidePreloader();

                                    alert(error);
                                }
                            });
                        }
                        break;
                    case 'partner':
                        {
                            partnerId = Number(routeData.Id);

                            if (partnerDetails() && partnerDetails().PartnerID === partnerId) {
                                // The partner is already loaded, might need to refresh some data?
                            }
                            else {
                                showPreloader();

                                datamanager.getPartnerForAdminDetails(partnerId, {
                                    success: function (json) {
                                        partnerDetails(json);

                                        hidePreloader();
                                    },
                                    error: function (error) {
                                        alert(error);

                                        hidePreloader();
                                    }
                                });
                            }
                        }
                        break;
                    case 'featurestats':
                        {
                            partnerId = Number(routeData.Id);
                            var elem = document.querySelector("#chart");

                            if (chart)
                                chart.destroy();

                            datamanager.getPartnerFeatureData(partnerId, {
                                success: function (json) {
                                    var clicks = [];
                                    var views = [];

                                    for (var i = 0; i < json.Clicks.length; i++) {
                                        var timeStamp = moment(json.Clicks[i].Date).valueOf();
                                        var innerArr = [timeStamp, json.Clicks[i].Amount];

                                        clicks.push(innerArr)
                                    }

                                    for (var j = 0; j < json.Views.length; j++) {
                                        var timeStamp2 = moment(json.Views[j].Date).valueOf();
                                        var itemToAdd = [timeStamp2, json.Views[j].Amount];

                                        views.push(itemToAdd)
                                    }

                                    var options = {
                                        series: [
                                            {
                                                name: 'Visningar',
                                                data: views
                                            }
                                            //,
                                            //{
                                            //    name: 'Klick',
                                            //    data: clicks
                                            //}
                                        ],
                                        chart: {
                                            type: 'line',
                                            stacked: false,
                                            height: 550,
                                            zoom: {
                                                type: 'x',
                                                enabled: true,
                                                autoScaleYaxis: true
                                            },
                                            toolbar: {
                                                autoSelected: 'zoom'
                                            }
                                        },
                                        dataLabels: {
                                            enabled: false
                                        },
                                        markers: {
                                            size: 0,
                                        },
                                        stroke: {
                                            show: true,
                                            curve: 'straight',
                                            lineCap: 'butt',
                                            colors: undefined,
                                            width: 1,
                                            dashArray: 0,
                                        },
                                        yaxis: {
                                            labels: {
                                                formatter: function (val) {
                                                    return (val).toFixed(0);
                                                },
                                            },
                                            title: {
                                                text: 'Antal'
                                            },
                                        },
                                        xaxis: {
                                            type: 'datetime',
                                        },
                                        tooltip: {
                                            shared: false,
                                            y: {
                                                formatter: function (val) {
                                                    return (val);
                                                }
                                            }
                                        }
                                    };

                                    chart = new ApexCharts(elem, options);
                                    chart.render();

                                    chart.appendSeries({
                                        name: 'Klick',
                                        data: clicks
                                    });
                                },
                                error: function (error) {

                                }
                            });

                            //new Chart(document.getElementById("myChart"),
                            //    {
                            //        "type": "line",
                            //        "data": {
                            //            "labels": ["January", "", "March", "April", "May", "June", "July"],
                            //            "datasets": [
                            //                {
                            //                    "label": "Visningar",
                            //                    "data": [65, 59, 80, 81, 56, 55, 40],
                            //                    "fill": false,
                            //                    "borderColor": "rgb(75, 192, 192)",
                            //                    "lineTension": 0
                            //                },
                            //                {
                            //                    "label": "Klick",
                            //                    "data": [3, 7, 4, 2, 10, 12, 15],
                            //                    "fill": false,
                            //                    "borderColor": "rgb(192, 75, 192)",
                            //                    "lineTension": 0
                            //                },
                            //            ]
                            //        }, "options": {}
                            //    });

                            hidePreloader();
                        }
                        break;
                    case 'createfeature':
                        {
                            partnerId = Number(routeData.Id);
                            partnerPackages([]);
                            partnerFeatureSets([]);

                            $('#createPartnerFeatureSelectSet').hide();

                            // TODO: Should be able to pass in PartnerPackageID
                            // TODO: Should be able to pass in PartnerFeatureSetID

                            datamanager.getPartnerPackagesForPartner(partnerId, {
                                success: function (json) {
                                    var underlayingArray = partnerPackages();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    partnerPackages.valueHasMutated();
                                },
                                error: function (error) {
                                }
                            });

                            if (partnerFeatureTypes().length === 0) {
                                datamanager.getPartnerFeatureTypes({
                                    success: function (json) {
                                        partnerFeatureTypes([]);

                                        var underlayingArray = partnerFeatureTypes();

                                        for (var i = 0; i < json.length; i++) {
                                            underlayingArray.push(json[i]);
                                        }

                                        partnerFeatureTypes.valueHasMutated();
                                    },
                                    error: function (error) {
                                    }
                                });
                            }

                            datamanager.getPartnerFeatureForCreateView(partnerId, {
                                success: function (json) {
                                    partnerFeature(json);

                                    $('#partneradmin-createfeature .parsley-errors-list').hide();

                                    hidePreloader();
                                },
                                error: function (error) {
                                    hidePreloader();
                                }
                            })
                        }
                        break;
                    case 'set':
                        {
                            if (routeData.Id > 0) {
                                datamanager.initPartnerFeatureSet(routeData.Id, {
                                    success: function (json) {
                                        partnerFeatures([]);

                                        partnerFeatureSet(json);

                                        var underlayingArray = partnerFeatures();

                                        for (var i = 0; i < json.PartnerFeatures.length; i++) {
                                            underlayingArray.push(json.PartnerFeatures[i]);
                                        }

                                        partnerFeatures.valueHasMutated();

                                        hidePreloader();
                                    },
                                    error: function (error) {
                                        hidePreloader();
                                    }
                                });
                            }
                            else {
                                // Invalid route
                            }
                        }
                        break;
                    case 'package':
                        {
                            if (routeData.Id > 0) {
                                datamanager.initPartnerPackage(routeData.Id, {
                                    success: function (json) {                                        
                                        partnerFeatureSets([]);
                                        partnerFeaturePackage(json);

                                        var underlayingArray = partnerFeatureSets();

                                        for (var i = 0; i < json.PartnerFeatureSets.length; i++) {
                                            underlayingArray.push(json.PartnerFeatureSets[i]);
                                        }

                                        partnerFeatureSets.valueHasMutated();

                                        hidePreloader();
                                    },
                                    error: function (error) {
                                        hidePreloader();
                                    }
                                });
                            }
                            else {
                                // Invalid route
                            }
                        }
                        break;
                    case 'editset':
                        {
                            if (routeData.Id > 0) {
                                datamanager.getPartnerFeatureSetForEditView(routeData.Id, {
                                    success: function (model) {
                                        partnerId = model.PartnerID;
                                        partnerFeatureSetForEdit(model);

                                        $('#partneradmin-editset .parsley-errors-list').hide();
                                        $("input[name=featureSetAudience][value='" + model.AudienceType + "']").prop("checked", true);
                                        $("input[name=featureSetTargetFilter][value='" + model.TargetFilterType + "']").prop("checked", true);

                                        var dateTimeModel = {
                                            StartDate: moment(model.StartDate).format("YYYY-MM-DD"),
                                            StartTime: moment(model.StartDate).format("HH:mm"),

                                            EndDate: moment(model.EndDate).format("YYYY-MM-DD"),
                                            EndTime: moment(model.EndDate).format("HH:mm")
                                        };

                                        $('#featureSetStartDate').val(moment(model.StartDate).format("YYYY-MM-DD"));
                                        $('#featureSetStartTime').val(moment(model.StartDate).format("HH:mm"));

                                        $('#featureSetEndDate').val(moment(model.EndDate).format("YYYY-MM-DD"));
                                        $('#featureSetEndTime').val(moment(model.EndDate).format("HH:mm"));

                                        datamanager.getPartnerPackagesForPartner(model.PartnerID, {
                                            success: function (json) {
                                                partnerPackages([]);

                                                var underlayingArray = partnerPackages();

                                                for (var i = 0; i < json.length; i++) {
                                                    underlayingArray.push(json[i]);
                                                }

                                                partnerPackages.valueHasMutated();

                                                hidePreloader();
                                            },
                                            error: function (error) {
                                                hidePreloader();
                                            }
                                        });
                                    },
                                    error: function (error) {
                                        console.log(error);

                                        hidePreloader();
                                    }
                                });

                            } else {
                                if (partnerId === 0) {
                                    router.navigateTo('/' + config.hashes.partneradmin + '/start');
                                } else {
                                    datamanager.getPartnerFeatureSetForEditView(0, {
                                        success: function (model) {
                                            partnerFeatureSetForEdit(model);
                                            model.PartnerID = partnerId;

                                            $('#partneradmin-editset .parsley-errors-list').hide();
                                            $("input[name=featureSetAudience][value='" + model.AudienceType + "']").prop("checked", true);

                                            $('#featureSetStartDate').val(moment(model.StartDate).format("YYYY-MM-DD"));
                                            $('#featureSetStartTime').val(moment(model.StartDate).format("HH:mm"));

                                            $('#featureSetEndDate').val(moment(model.EndDate).format("YYYY-MM-DD"));
                                            $('#featureSetEndTime').val(moment(model.EndDate).format("HH:mm"));

                                            datamanager.getPartnerPackagesForPartner(model.PartnerID, {
                                                success: function (json) {
                                                    partnerPackages([]);

                                                    var underlayingArray = partnerPackages();

                                                    for (var i = 0; i < json.length; i++) {
                                                        underlayingArray.push(json[i]);
                                                    }

                                                    partnerPackages.valueHasMutated();

                                                    hidePreloader();
                                                },
                                                error: function (error) {
                                                    hidePreloader();
                                                }
                                            });
                                        },
                                        error: function (error) {
                                            console.log(error);

                                            hidePreloader();
                                        }
                                    });
                                }
                            }
                        }
                        break;
                    case 'editpartner':
                        {
                            if (routeData.Id) {
                                datamanager.getPartnerForEditView(routeData.Id, {
                                    success: function (json) {
                                        console.log(json);

                                        partner(json);

                                        hidePreloader();
                                    },
                                    error: function (error) {
                                        hidePreloader();

                                        alert(error);
                                    }
                                });
                            } else {
                                datamanager.getPartnerForEditView(0, {
                                    success: function (json) {
                                        partner(json);

                                        hidePreloader();
                                    },
                                    error: function (error) {
                                        hidePreloader();

                                        alert(error);
                                    }
                                });
                            }
                        }
                        break;
                    case 'features':
                        {
                            datamanager.getActivePartnerFeatures({
                                success: function (json) {
                                    currentActivePartners([]);

                                    var underlayingArray = currentActivePartners();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    currentActivePartners.valueHasMutated();

                                    hidePreloader();
                                },
                                error: function (error) {
                                    hidePreloader();
                                }
                            });

                        }
                        break;
                    case 'placements':
                        {
                            datamanager.getActivePlacements({
                                success: function (json) {
                                    currentActivePlacements([]);

                                    var underlayingArray = currentActivePlacements();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    currentActivePlacements.valueHasMutated();

                                    hidePreloader();
                                },
                                error: function (error) {
                                    hidePreloader();
                                }
                            });

                        }
                        break;
                }
            },

            hidePreloader = function () {
                $('#partneradmin-view .preloader').hide();
                $('#partneradmin-view .afterloaded').show();
            },

            showPreloader = function () {
                $('#partneradmin-view .preloader').show();
                $('#partneradmin-view .afterloaded').hide();
            },

            navigateToPartnerAdminStart = function () {
                return createNavigationItem('start');
            },

            navigateToPartnerAdminPartner = function (data) {
                router.navigateTo('/' + config.hashes.partneradmin + '/partner/' + data.PartnerID);
            },

            createNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.partneradmin + '/' + endPath;
                    },
                    toClick: function () {
                        window.scrollTo(0, 0);
                        router.navigateTo(config.hashes.partneradmin + '/' + endPath);
                    }
                };
            },

            navigateToPartnerFeature = function (partnerFeature) {
                navigationItem = {
                    getHrefString: function () {
                        return '/' + config.hashes.partnerfeature + '/' + partnerFeature.PartnerFeatureID;
                    },
                    toClick: function () {
                        router.navigateTo('/' + config.hashes.partnerfeature + '/' + partnerFeature.PartnerFeatureID);
                    }
                };
                return navigationItem;
            },

            navigateToPartnerAdminEditPartner = function () {
                router.navigateTo(config.hashes.partneradmin + '/editpartner');
            },

            navigateToPartnerAdminActiveFeatures = function () {
                router.navigateTo(config.hashes.partneradmin + '/features');
            },

            navigateToPartnerAdminActivePlacements = function () {
                router.navigateTo(config.hashes.partneradmin + '/placements');
            },

            navigateToEditPartnerFeature = function (data) {
                router.navigateTo('/' + config.hashes.partnerfeature + '/' + data.PartnerFeatureID + '/edit');
            },

            navigateToPartnerAdminFeatureStats = function (data) {
                router.navigateTo('/' + config.hashes.partneradmin + '/featurestats/' + data.PartnerFeatureID);
            },

            navigateToPartnerAdminFeatureSet = function (data) {
                router.navigateTo('/' + config.hashes.partneradmin + '/set/' + data.PartnerFeatureSetID);
            },

            navigateToPartnerAdminPackage = function (data) {
                router.navigateTo('/' + config.hashes.partneradmin + '/package/' + data.PartnerPackageID);
            },

            navigateToViewPartnerFeature = function (data) {
                router.navigateTo('/' + config.hashes.partnerfeature + '/' + data.PartnerFeatureID);
            },

            editPartner = function (data) {
                router.navigateTo(config.hashes.partneradmin + '/editpartner/' + data.PartnerID);
            },

            editPartnerFeatureSet = function (data) {
                router.navigateTo(config.hashes.partneradmin + '/editset/' + data.PartnerFeatureSetID);
            },

            selectPartnerPackage = function (data, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                $('#createSetPackageError').hide();

                partnerFeatureSetForEdit().PartnerPackageID = data.PartnerPackageID;
            },

            selectPartnerPackageForFeature = function (data, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                partnerFeature().PartnerPackageID = data.PartnerPackageID;

                $('#createPartnerFeatureSelectSet').show();
                $('#createFeaturePackageError').hide();

                datamanager.getPartnerSetForPartnerPackage(data.PartnerPackageID, {
                    success: function (json) {
                        partnerFeatureSets([]);

                        var underlayingArray = partnerFeatureSets();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        partnerFeatureSets.valueHasMutated();
                    },
                    error: function (error) {

                    }

                });
            },

            selectPartnerSetForFeature = function (data, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                $('#createFeatureSetError').hide();

                partnerFeature().PartnerFeatureSetID = data.PartnerFeatureSetID;
            },

            selectPartnerFeatureType = function (data, event) {
                $(event.target).closest('.dropdown').children().first().text(data.Name);

                $('#createFeatureTypeError').hide();

                partnerFeature().PartnerFeatureTypeID = data.PartnerFeatureTypeID;
            },

            createNewPartnerFeature = function () {
                router.navigateTo(config.hashes.partneradmin + '/createfeature/' + partnerId);
            },

            createPartnerPackage = function (selectPackage) {
                if (selectPackage === 0)
                    reloadAndSelectPackage = false;
                else
                    reloadAndSelectPackage = true;

                datamanager.getPartnerPackageForEditView(0, {
                    success: function (json) {
                        partnerPackageForEdit(json);

                        partnerPackageForEdit().PartnerID = partnerId;

                        $('#partneradmin-view .editPartnerPackage').show();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            createPartnerSet = function (data) {
                console.log(data);

                alert('Not implemented yet');
            },

            createPartnerFeatureSet = function () {
                router.navigateTo(config.hashes.partneradmin + '/editset');
            },

            editPartnerPackage = function (data) {
                datamanager.getPartnerPackageForEditView(data.PartnerPackageID, {
                    success: function (json) {
                        partnerPackageForEdit(json);

                        $('#partneradmin-view .editPartnerPackage').show();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            editAudience = function (data) {
                audience.activate(data.AudienceID, 3, audienceCallback);

                return false;
            },

            editTargetFilter = function (data) {
                targetfilter.activate(data.TargetFilterID, targetFilterCallback);

                return false;
            },

            savePartner = function (data, event) {
                var ts = ko.toJS(data);

                var formInstance = $(event.target).closest('form').parsley();

                if (formInstance.validate()) {
                    shell.showProgressIndicator(MiscTexts.Saving);

                    datamanager.updatePartner(ts, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            router.navigateTo('/' + config.hashes.partneradmin + '/start');
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                }
            },

            savePartnerFeature = function (data, event) {
                var ts = ko.toJS(data);
                console.log(ts);

                var formInstance = $(event.target).closest('form').parsley();
                var fieldsValid = true;

                if (data.PartnerPackageID === 0) {
                    $('#createFeaturePackageError').show();
                    fieldsValid = false;
                } else if (data.PartnerFeatureSetID === 0) {
                    $('#createFeatureSetError').show();
                    fieldsValid = false;
                }

                if (data.PartnerFeatureTypeID === 0) {
                    $('#createFeatureTypeError').show();
                    fieldsValid = false;
                }

                if (formInstance.validate() && fieldsValid) {
                    shell.showProgressIndicator(MiscTexts.Saving);

                    datamanager.insertPartnerFeature(ts, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            partnerDetails('');
                            partnerFeature('');

                            router.navigateTo('/' + config.hashes.partnerfeature + '/' + json + '/edit');
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                }
            },

            savePartnerFeatureSet = function (data, event) {
                data.AudienceType = $("input[name='featureSetAudience']:checked").val();
                data.TargetFilterType = $("input[name='featureSetTargetFilter']:checked").val();

                var startDate = $('#featureSetStartDate').val();
                var endDate = $('#featureSetEndDate').val();

                var startTime = $('#featureSetStartTime').val();
                var endTime = $('#featureSetEndTime').val();

                data.StartDate = moment(startDate + "T" + startTime).utc().format("YYYY-MM-DD HH:mm:ss");
                data.EndDate = moment(endDate + "T" + endTime).utc().format("YYYY-MM-DD HH:mm:ss");

                if (data.StartDate > data.EndDate) {
                    alert('Starttiden kan inte vara efter sluttiden');
                    return;
                }

                var ts = ko.toJS(data);
                var fieldsValid = true;

                if (partnerFeatureSetForEdit().PartnerPackageID === 0) {
                    $('#createSetPackageError').show();

                    fieldsValid = false;
                }

                var formInstance = $(event.target).closest('form').parsley();

                if (formInstance.validate() && fieldsValid) {
                    shell.showProgressIndicator(MiscTexts.Saving);

                    datamanager.updatePartnerFeatureSet(ts, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            partnerDetails('');

                            router.navigateTo('/' + config.hashes.partneradmin + '/partner/' + data.PartnerID);
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                }
            },

            savePartnerPackage = function (data, event) {
                var ts = ko.toJS(data);
                console.log(ts);

                var formInstance = $(event.target).closest('form').parsley();

                if (formInstance.validate()) {
                    shell.showProgressIndicator(MiscTexts.Saving);

                    datamanager.updatePartnerPackage(ts, {
                        success: function (partnerPackageId) {
                            shell.hideProgressIndicator();

                            console.log(partnerPackageId);

                            if (reloadAndSelectPackage) {
                                // TODO: Currently only works reloading when creating a package from a feature set
                                if (partnerFeatureSetForEdit()) {
                                    partnerFeatureSetForEdit().PartnerPackageID = partnerPackageId;

                                    datamanager.getPartnerPackagesForPartner(partnerFeatureSetForEdit().PartnerID, {
                                        success: function (json) {
                                            partnerPackages([]);

                                            var underlayingArray = partnerPackages();

                                            for (var i = 0; i < json.length; i++) {
                                                underlayingArray.push(json[i]);

                                                if (json[i].PartnerPackageID === partnerPackageId)
                                                    partnerFeatureSetForEdit().PartnerPackageName = json[i].Name;
                                            }

                                            partnerPackages.valueHasMutated();

                                            $('#partnerPackageName').text(partnerFeatureSetForEdit().PartnerPackageName);
                                            $('#partneradmin-view .editPartnerPackage').hide();

                                            $('#createSetPackageError').hide();
                                        },
                                        error: function (error) {
                                            $('#partneradmin-view .editPartnerPackage').hide();
                                        }
                                    });
                                }
                            }
                            else {
                                reloadPartnerDetails(3);

                                $('#partneradmin-view .editPartnerPackage').hide();
                            }
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                }
            },

            reloadPartnerDetails = function (tab) {
                datamanager.getPartnerForAdminDetails(partnerId, {
                    success: function (json) {
                        partnerDetails(json);

                        $(".partner-tabs li").removeClass('selected');
                        $(".partner-tabs .content").hide();

                        switch (tab) {
                            case 1:
                                $('#partner-tab-features').show();
                                break;
                            case 2:
                                $('#partner-tab-set').show();
                                break;
                            case 3:
                                $('#partner-tab-packages').show();
                                break;
                        }

                        $(".partner-tabs li:nth-child(" + tab + ")").addClass('selected');
                    },
                    error: function (error) {
                    }
                });
            },

            cancelEditPartner = function () {
                router.navigateTo('/' + config.hashes.partneradmin + '/start');
            },

            cancelEditPartnerPackage = function () {
                $('#partneradmin-view .editPartnerPackage').hide();
            },

            cancelCreatePartnerFeature = function (data) {
                router.navigateTo('/' + config.hashes.partneradmin + '/partner/' + data.PartnerID);
            },

            cancelEditPartnerFeatureSet = function (data) {
                router.navigateTo('/' + config.hashes.partneradmin + '/partner/' + data.PartnerID);
            },

            deletePartnerFeatureSet = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deletePartnerFeatureSet(data.PartnerFeatureSetID, {
                        success: function (json) {
                            reloadPartnerDetails(2);
                        },
                        error: function (error) {

                        }
                    });
                }
            },

            deletePartnerPackage = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deletePartnerPackage(data.PartnerPackageID, {
                        success: function (json) {
                            reloadPartnerDetails(3);
                        },
                        error: function (error) {

                        }
                    });
                }


            },

            showAudience = function () {
                //audience.activate(1, audienceCallback);
                audience.activate(18, 3, audienceCallback);
            },

            audienceCallback = function (audienceId) {
                if (audienceId === 1) {
                    $("input[name=featureSetAudience][value='" + partnerFeatureSetForEdit().AudienceType + "']").prop("checked", true);
                } else {
                    partnerFeatureSetForEdit().AudienceID = audienceId;
                    partnerFeatureSetForEdit().AudienceType = 3;
                    $("input[name=featureSetAudience][value='3']").prop("checked", true);
                }
            },

            targetFilterCallback = function (targetFilterId) {
                if (targetFilterId === 1) {
                    partnerFeatureSetForEdit().TargetFilterType = 1;
                    $("input[name=featureSetTargetFilter][value='1']").prop("checked", true);
                } else {
                    partnerFeatureSetForEdit().TargetFilterId = targetFilterId;
                    partnerFeatureSetForEdit().TargetFilterType = 2;
                    $("input[name=featureSetTargetFilter][value='2']").prop("checked", true);
                }
            },

            cropperCallback = function (cropData, croppedData, base64data) {
                $('#partner-logo-preview .imageMaskContain').show();
                $('#partner-logo-preview .imageMaskContain').css('background-image', 'url(' + croppedData + ')');
                $('#partner-logo-preview img').hide();

                //var pictureBase64data = croppedData.substr(croppedData.indexOf("base64,") + 7);

                partner().Base64Logo = base64data;
                partner().LogoCropData = cropData;                
            },

            selectPartnerTab = function (type, data, event) {
                $(".partner-tabs li").removeClass('selected');
                $(".partner-tabs .content").hide();

                $(event.target).addClass('selected');

                switch (type) {
                    case 1:
                        $('#partner-tab-features').show();
                        break;
                    case 2:
                        $('#partner-tab-set').show();
                        break;
                    case 3:
                        $('#partner-tab-packages').show();
                        break;
                }
            },

            cleanup = function () {
            },

            selectPicture = function () {
                $('#partneradmin-view .partnerFilePicker').focus().trigger('click');
            },            

            handleFileSelect = function (evt) {
                var f = evt.target.files[0];

                if (f.type.match('image.*')) {
                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var pictureBase64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            imagecropper.activate(pictureBase64data, 1, 1, false, cropperCallback);
                        };
                    })(f);

                    reader.readAsDataURL(f);
                } 
            },

            init = function () {
                $(document).on('change', '#partneradmin-view .partnerFilePicker', function (evt) {
                    handleFileSelect(evt);
                    evt.target.value = '';
                });
            };

        init();

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,

            partner: partner,
            partnerFeatureSet: partnerFeatureSet,
            partnerFeaturePackage: partnerFeaturePackage,
            partnerFeature: partnerFeature,
            partnerFeatures: partnerFeatures,
            partnerDetails: partnerDetails,
            partnerFeatureSetForEdit: partnerFeatureSetForEdit,
            partnerPackageForEdit: partnerPackageForEdit,

            currentPage: currentPage,

            navigateToPartnerFeature: navigateToPartnerFeature,
            navigateToPartnerAdminStart: navigateToPartnerAdminStart,
            navigateToPartnerAdminPartner: navigateToPartnerAdminPartner,
            navigateToPartnerAdminEditPartner: navigateToPartnerAdminEditPartner,
            navigateToPartnerAdminActiveFeatures: navigateToPartnerAdminActiveFeatures,
            navigateToPartnerAdminActivePlacements: navigateToPartnerAdminActivePlacements,
            navigateToPartnerAdminFeatureStats: navigateToPartnerAdminFeatureStats,
            navigateToPartnerAdminFeatureSet: navigateToPartnerAdminFeatureSet,
            navigateToPartnerAdminPackage: navigateToPartnerAdminPackage,

            navigateToEditPartnerFeature: navigateToEditPartnerFeature,            
            navigateToViewPartnerFeature: navigateToViewPartnerFeature,
            

            editPartnerFeatureSet: editPartnerFeatureSet,
            editPartnerPackage: editPartnerPackage,
            editPartner: editPartner,
            editAudience: editAudience,
            editTargetFilter: editTargetFilter,

            createNewPartnerFeature: createNewPartnerFeature,
            createPartnerPackage: createPartnerPackage,
            createPartnerSet: createPartnerSet,
            createPartnerFeatureSet: createPartnerFeatureSet,

            savePartner: savePartner,
            savePartnerFeatureSet: savePartnerFeatureSet,
            savePartnerPackage: savePartnerPackage,
            savePartnerFeature: savePartnerFeature,

            cancelEditPartner: cancelEditPartner,
            cancelEditPartnerFeatureSet: cancelEditPartnerFeatureSet, 
            cancelEditPartnerPackage: cancelEditPartnerPackage,
            cancelCreatePartnerFeature: cancelCreatePartnerFeature,

            selectPicture: selectPicture,

            deletePartnerFeatureSet: deletePartnerFeatureSet,
            deletePartnerPackage: deletePartnerPackage,

            showAudience: showAudience,
            selectPartnerTab: selectPartnerTab,
            selectPartnerPackage: selectPartnerPackage,
            selectPartnerPackageForFeature: selectPartnerPackageForFeature,
            selectPartnerSetForFeature: selectPartnerSetForFeature,
            selectPartnerFeatureType: selectPartnerFeatureType,

            currentActivePartners: currentActivePartners,
            currentActivePlacements: currentActivePlacements,
            activePartners: activePartners,
            inactivePartners: inactivePartners,            
            partnerFeatureTypes: partnerFeatureTypes,
            partnerFeatureSets: partnerFeatureSets,
            partnerPackages: partnerPackages            
        };
    });
;
define('viewmodels/vm.partnerfeature',
    ['jquery', 'config', 'router', 'ko', 'messenger', 'datamanager', 'viewmodels/vm.imagecropper', 'viewmodels/vm.shell', 'models/viewmodel', 'underscore'],
    function ($, config, router, ko, messenger, datamanager, imagecropper, shell, viewmodel, _) {

        var partnerFeatureId = 0,
            partnerFeature = ko.observable(),
            partnerFeaturePreview = ko.observable(),
            partnerFeatureForEdit = ko.observable(),

            newPartnerFeatureSetID = 0,
            imageAspectX = 0,
            imageAspectY = 0,
            useRoundImage = false,
            imagePreviewId,
            videoPreviewId,
            newVideoAsset = null,
            newSlide,
            currentSlide = ko.observable(),
            errorTimer,
            slideDragId,

            pictureCarousel = ko.observableArray(),

            activate = function (routeData, callback) {
                routeData.subview = 'start';

                activatesubview(routeData);
            },

            activatesubview = function (routeData, callback) {
                $('#partnerfeature-view .preloader').show();
                $('#partnerfeature-view .afterloaded').hide();

                partnerFeatureId = routeData.Id;
                newVideoAsset = null

                var currentView = routeData.subview;
                var currentViewName = 'partnerfeature-' + currentView;

                //var currentPage(currentView);

                $('.partnerfeature-subview').hide();
                $('#partnerfeature-' + currentView).show();

                switch (currentView) {
                    case 'start':
                        datamanager.getPartnerFeatureForDetailView(partnerFeatureId, {
                            success: function (json) {
                                console.log(json);
                                partnerFeature(json);

                                $('#partnerfeature-view .preloader').hide();
                                $('#partnerfeature-view .afterloaded').show();
                            },
                            error: function (error) {
                                $('#partnerfeature-view .preloader').hide();
                                $('#partnerfeature-view .afterloaded').show();

                                alert(error);
                            }
                        });
                        break;
                    case 'edit':
                        datamanager.getPartnerFeatureForEditView(partnerFeatureId, {
                            success: function (json) {
                                partnerFeatureForEdit(json);

                                if (json.PartnerFeatureTypeID === 5 || json.PartnerFeatureTypeID === 13) {
                                    var underlayingArray = pictureCarousel();

                                    for (var i = 0; i < json.PartnerFeature.PicturesForEdit.length; i++) {
                                        underlayingArray.push(json.PartnerFeature.PicturesForEdit[i]);
                                    }

                                    pictureCarousel.valueHasMutated();
                                }

                                $('#partnerfeature-view .preloader').hide();
                                $('#partnerfeature-view .afterloaded').show();
                            },
                            error: function (error) {
                                $('#partnerfeature-view .preloader').hide();
                                $('#partnerfeature-view .afterloaded').show();

                                alert(error);
                            }
                        });
                        break;
                }
            },

            editPartnerFeature = function (data) {
                router.navigateTo(config.hashes.partnerfeature + '/' + data.PartnerFeatureID + '/edit');
            },

            navigateToPartner = function (data) {
                router.navigateTo(config.hashes.partneradmin + '/partner/' + data.PartnerID);
            },

            generatePreview = function () {
                if (partnerFeatureForEdit().PartnerFeatureTypeID !== 26) {
                    partnerFeaturePreview(partnerFeatureForEdit());

                    $('#partnerfeature-view .previewOverlay').fadeIn(100);
                } else {
                    var animationPath = '';

                    if (partnerFeatureForEdit().PartnerFeature.GoalAnimationType === 2) {
                        animationPath = '/content/lottie/GoalAnimation_SvenskaSpel.json';
                    }
                    else if (partnerFeatureForEdit().PartnerFeature.GoalAnimationType === 3) {
                        animationPath = '/content/lottie/GoalAnimation_ICA.json';
                    }
                    else
                        return;

                    var animationOuter = $('#animation-container').fadeIn(100);
                    var animationElement = $('#animation-inner');

                    var animation = bodymovin.loadAnimation({
                        container: animationElement.get(0),
                        path: animationPath,
                        renderer: 'svg/canvas/html',
                        loop: false,
                        autoplay: true
                    });

                    animation.addEventListener('complete', function () {
                        animation.destroy();

                        animationOuter.fadeOut(100);
                    });
                }
            },

            selectFlipCardType = function (type, data, event) {
                partnerFeatureForEdit().PartnerFeature.TypeID = type;

                $(event.target).closest('li.dropdown').find('a').first().text($(event.target).text());

                // TODO: Dölj saker beroende på vad vi valt
            },

            selectGoalAnimationType = function (type, data, event) {
                partnerFeatureForEdit().PartnerFeature.GoalAnimationType = type;

                $(event.target).closest('li.dropdown').find('a').first().text($(event.target).text());

                // TODO: Dölj saker beroende på vad vi valt
            },

            selectFontType = function (type, data, event) {
                partnerFeatureForEdit().PartnerFeature.FontType = type;

                switch (type) {
                    case 1:
                        partnerFeatureForEdit().PartnerFeature.FontClassName = 'font-standard';
                        break;
                    case 2:
                        partnerFeatureForEdit().PartnerFeature.FontClassName = 'font-ica';
                        break;
                }

                $(event.target).closest('li.dropdown').find('a').first().text($(event.target).text());
            },

            savePartnerFeature = function (data, event) {
                $('#partner-feature-error').fadeOut(100);

                var formInstance = $(event.target).closest('form').parsley();

                if (formInstance.validate()) {
                    // TODO: Need to validate Pictures and/or videos here

                    // If we are uploading a video we need to wait for that to finish first
                    if (newVideoAsset !== null) {
                        saveVideo();
                    }
                    else {
                        savePartnerFeatureHelper();
                    }
                }
            },

            savePartnerFeatureHelper = function () {
                console.log(partnerFeatureForEdit());
                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.updatePartnerFeature(partnerFeatureForEdit(), {
                    success: function (json) {
                        var placements = [];

                        $(".partnerFeaturePlacementList li.checked").each(function (key, value) {
                            placements.push(ko.contextFor(value).$data.PartnerFeaturePlacementID);
                        });

                        datamanager.updatePartnerFeaturePlacements(partnerFeatureForEdit().PartnerFeatureID, placements)
                            .then(function (result) {
                                shell.hideProgressIndicator();

                                // Navigate to Partner
                                router.navigateTo('/' + config.hashes.partneradmin + '/partner/' + partnerFeatureForEdit().PartnerID);
                            })
                            .fail(function (error) {
                            });
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        $('#partner-feature-error').fadeIn(300);
                        $('#partner-feature-error p').text(error);

                        if (errorTimer)
                            clearTimeout(errorTimer);

                        errorTimer = setTimeout(function () {
                            $('#partner-feature-error').fadeOut(300);
                        }, 30000);
                    }
                });
            },

            copyPartnerFeature = function () {
                if (newPartnerFeatureSetID === 0)
                    newPartnerFeatureSetID = partnerFeature().PartnerFeatureSetID;

                shell.showProgressIndicator('Kopierar...');

                datamanager.copyPartnerFeature(partnerFeature().PartnerFeatureID, newPartnerFeatureSetID)
                    .then(function (result) {
                        shell.hideProgressIndicator();

                        $('#partnerfeature-view .copyFeatureOverlay').fadeOut(100);

                        router.navigateTo(config.hashes.partnerfeature + '/' + result + '/edit');
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    });
            },

            saveVideo = function () {
                shell.showPartialProgressIndicator(MiscTexts.Uploading);

                datamanager.postPartnerFeatureVideo(newVideoAsset.UploadAssetId, {
                    success: function (data) {
                        newVideoAsset.Id = data.VideoID;

                        const containerURL = new azblob.ContainerURL(data.SasToken, azblob.StorageURL.newPipeline(new azblob.AnonymousCredential));

                        (async () => await uploadVideoFile(containerURL))();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    }
                });
            },

            uploadVideoFile = async function (containerURL) {
                try {
                    const promises = [];

                    const blockBlobURL = azblob.BlockBlobURL.fromContainerURL(containerURL, 'videoid' + newVideoAsset.Id + '.mp4');

                    var blockSize = newVideoAsset.FileSize > 1024 * 1024 * 32 ? 1024 * 1024 * 4 : 1024 * 512;
                    var options = {
                        storeBlobContentMD5: false,
                        blockSize: blockSize,
                        progress: ev => shell.updateProgress(Math.round((ev.loadedBytes / newVideoAsset.FileSize) * 100))
                    };

                    promises.push(azblob.uploadBrowserDataToBlockBlob(
                        azblob.Aborter.none, newVideoAsset.File, blockBlobURL, options));

                    await Promise.all(promises);

                    datamanager.updatePartnerVideoInfo(newVideoAsset.UploadAssetId, newVideoAsset.Id, {
                        success: function (json) {
                            console.log(json);

                            partnerFeatureForEdit().PartnerFeature.VideoInfo.VideoURL = json.VideoURL;

                            shell.hideProgressIndicator();

                            savePartnerFeatureHelper();
                        },
                        error: function (response) {
                            shell.hideProgressIndicator();

                            alert(response);
                        }
                    });

                } catch (error) {
                    console.log(error);

                    shell.hideProgressIndicator();
                }
            },

            selectPicture = function (aspectX, aspectY, roundImage, data, event) {
                imageAspectX = aspectX;
                imageAspectY = aspectY;
                useRoundImage = roundImage;

                // Get which container we should use from the 'data-container'-attribute
                imagePreviewId = $(event.target).attr('data-container');

                $('#partnerfeature-view .partnerFilePicker').focus().trigger('click');
            },

            selectVideo = function (data, event) {
                // Get which container we should use from the 'data-container'-attribute
                videoPreviewId = $(event.target).attr('data-container');

                $('#partnerfeature-view .partnerFilePicker').focus().trigger('click');
            },

            clearPicture = function () {
                // Get which container we should use from the 'data-container'-attribute
                imagePreviewId = $(event.target).attr('data-container');

                setPreviewData(null, '', '');

                $('#' + imagePreviewId + ' .imageMaskContain').hide();
                $('#' + imagePreviewId + ' .imageMaskContain').css('background-image', 'none');
                $('#' + imagePreviewId + ' img').show();
            },

            selectPlacement = function (data, event) {
                $(event.target).closest('li').toggleClass('checked');
            },

            selectPartnerSetForFeature = function (data, event) {
                $(event.target).closest('.dropdown').children().first().text($(event.target).text());

                newPartnerFeatureSetID = data.PartnerFeatureSetID;

                console.log(newPartnerFeatureSetID);
            },

            handleFileSelect = function (evt) {
                var f = evt.target.files[0];

                if (f.type.match('image.*')) {
                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var pictureBase64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            imagecropper.activate(pictureBase64data, imageAspectX, imageAspectY, useRoundImage, cropperCallback);
                        };
                    })(f);

                    reader.readAsDataURL(f);
                } else if (f.type.match('video')) {
                    newVideoAsset = new UploadAsset();

                    newVideoAsset.File = f;
                    newVideoAsset.FileSize = f.size;

                    var fileURL = URL.createObjectURL(f)
                    var videoNode = $('#' + videoPreviewId).get(0);

                    videoNode.src = fileURL

                    setVideoPreviewData(fileURL);
                }
            },

            cropperCallback = function (cropData, croppedData, base64data) {
                $('#' + imagePreviewId + ' .imageMaskContain').show();
                $('#' + imagePreviewId + ' .imageMaskContain').css('background-image', 'url(' + croppedData + ')');
                $('#' + imagePreviewId + ' img').hide();

                var pictureBase64data = croppedData.substr(croppedData.indexOf("base64,") + 7);

                setPreviewData(cropData, pictureBase64data, base64data);
            },

            setVideoPreviewData = function (url) {
                switch (partnerFeatureForEdit().PartnerFeatureTypeID) {
                    case 1:
                    case 3:
                    case 20:
                    case 22:
                        partnerFeatureForEdit().PartnerFeature.VideoInfo.VideoURL = url;
                        break;
                }
            },

            setPreviewData = function (cropData, pictureBase64data, base64data) {
                // Add for each PartnerFeatureTypeID

                switch (partnerFeatureForEdit().PartnerFeatureTypeID) {
                    case 2:
                        if (imagePreviewId === 'partner-2-image') {
                            partnerFeatureForEdit().PartnerFeature.Base64ImagePreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Image = base64data;
                            partnerFeatureForEdit().PartnerFeature.ImageCropData = cropData;

                        }
                        else {
                            partnerFeatureForEdit().PartnerFeature.Base64LogoPreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Logo = base64data;
                            partnerFeatureForEdit().PartnerFeature.LogoCropData = cropData;
                        }

                        break;
                    case 4:
                        if (imagePreviewId === 'partner-4-image') {
                            partnerFeatureForEdit().PartnerFeature.Base64ImagePreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Image = base64data;
                            partnerFeatureForEdit().PartnerFeature.ImageCropData = cropData;
                        }
                        else {
                            partnerFeatureForEdit().PartnerFeature.Base64LogoPreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Logo = base64data;
                            partnerFeatureForEdit().PartnerFeature.LogoCropData = cropData;
                        }

                        break;
                    case 5: // Carousel                        
                        if (imagePreviewId === 'partner-5-logo') {
                            partnerFeatureForEdit().PartnerFeature.Base64LogoPreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Logo = base64data;
                            partnerFeatureForEdit().PartnerFeature.LogoCropData = cropData;
                        }
                        else {
                            // In the case of the Carousel we need to do some special stuff
                            newSlide = new viewmodel.PictureForEdit();

                            newSlide.LinkTitle = '';
                            newSlide.Description = '';
                            newSlide.PictureURL = '';
                            newSlide.Base64PicturePreview = pictureBase64data;
                            newSlide.Base64Picture = base64data;
                            newSlide.PictureCropData = cropData;

                            currentSlide(newSlide);
                        }

                        break;
                    case 8:
                        {
                            if (imagePreviewId === 'partner-8-image') {
                                partnerFeatureForEdit().PartnerFeature.Base64ImagePreview = pictureBase64data;
                                partnerFeatureForEdit().PartnerFeature.Base64Image = base64data;
                                partnerFeatureForEdit().PartnerFeature.ImageCropData = cropData;
                            }
                            else {
                                partnerFeatureForEdit().PartnerFeature.Base64LogoPreview = pictureBase64data;
                                partnerFeatureForEdit().PartnerFeature.Base64Logo = base64data;
                                partnerFeatureForEdit().PartnerFeature.LogoCropData = cropData;
                            }
                        }
                        break;
                    case 1:
                    case 3:
                    case 6:
                    case 7:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 15:
                    case 17:                    
                        partnerFeatureForEdit().PartnerFeature.Base64LogoPreview = pictureBase64data;
                        partnerFeatureForEdit().PartnerFeature.Base64Logo = base64data;
                        partnerFeatureForEdit().PartnerFeature.LogoCropData = cropData;
                        break;
                    case 13: // Carousel instagram 
                        if (imagePreviewId === 'partner-13-logo') {
                            partnerFeatureForEdit().PartnerFeature.Base64LogoPreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Logo = base64data;
                            partnerFeatureForEdit().PartnerFeature.LogoCropData = cropData;
                        }
                        else {
                            // In the case of the Carousel we need to do some special stuff
                            newSlide = new viewmodel.PictureForEdit();

                            newSlide.LinkTitle = '';
                            newSlide.Description = '';
                            newSlide.PictureURL = '';
                            newSlide.Base64PicturePreview = pictureBase64data;
                            newSlide.Base64Picture = base64data;
                            newSlide.PictureCropData = cropData;

                            currentSlide(newSlide);
                        }

                        break;
                    case 14:
                        if (imagePreviewId === 'partner-14-billboard') {
                            partnerFeatureForEdit().PartnerFeature.Base64BillboardPreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Billboard = base64data;
                            partnerFeatureForEdit().PartnerFeature.BillboardCropData = cropData;
                        }
                        else {
                            partnerFeatureForEdit().PartnerFeature.Base64BillboardPortraitPreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64BillboardPortrait = base64data;
                            partnerFeatureForEdit().PartnerFeature.BillboardPortraitCropData = cropData;
                        }
                        break;
                    case 16:
                    case 18: 
                        partnerFeatureForEdit().PartnerFeature.Base64ImagePreview = pictureBase64data;
                        partnerFeatureForEdit().PartnerFeature.Base64Image = base64data;
                        partnerFeatureForEdit().PartnerFeature.ImageCropData = cropData;
                        break;
                    case 28:
                        if (imagePreviewId === 'partner-28-largeimage') {
                            partnerFeatureForEdit().PartnerFeature.Base64LargeImagePreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64LargeImage = base64data;
                            partnerFeatureForEdit().PartnerFeature.LargeImageCropData = cropData;
                        } else if (imagePreviewId === 'partner-28-mediumimage') {
                            partnerFeatureForEdit().PartnerFeature.Base64MediumImagePreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64MediumImage = base64data;
                            partnerFeatureForEdit().PartnerFeature.MediumImageCropData = cropData;
                        } else {
                            partnerFeatureForEdit().PartnerFeature.Base64ImagePreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Image = base64data;
                            partnerFeatureForEdit().PartnerFeature.ImageCropData = cropData;
                        }
                        
                        break;
                    case 19: {
                        if (imagePreviewId === 'partner-19-logo') {
                            partnerFeatureForEdit().PartnerFeature.Base64LogoPreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Logo = base64data;
                            partnerFeatureForEdit().PartnerFeature.LogoCropData = cropData;
                        } else {
                            partnerFeatureForEdit().PartnerFeature.Base64ImagePreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Image = base64data;
                            partnerFeatureForEdit().PartnerFeature.ImageCropData = cropData;
                        }
                        break;
                    }
                    case 21:
                    case 23:
                    case 31:
                    case 32: {
                        partnerFeatureForEdit().PartnerFeature.Base64ImagePreview = pictureBase64data;
                        partnerFeatureForEdit().PartnerFeature.Base64Image = base64data;
                        partnerFeatureForEdit().PartnerFeature.ImageCropData = cropData;

                        break;
                    }
                    case 24: {
                        if (imagePreviewId === 'partner-24-logo') {
                            partnerFeatureForEdit().PartnerFeature.Base64LogoPreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Logo = base64data;
                            partnerFeatureForEdit().PartnerFeature.LogoCropData = cropData;
                        } else if (imagePreviewId === 'partner-24-title') {
                            partnerFeatureForEdit().PartnerFeature.Base64TitlePicturePreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64TitlePicture = base64data;
                            partnerFeatureForEdit().PartnerFeature.TitlePictureCropData = cropData;
                        } else {
                            partnerFeatureForEdit().PartnerFeature.Base64PushLogoPreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64PushLogo = base64data;
                            partnerFeatureForEdit().PartnerFeature.PushLogoCropData = cropData;
                        }

                        break;
                    }
                    case 25:
                        partnerFeatureForEdit().PartnerFeature.Base64HeaderPicturePreview = pictureBase64data;
                        partnerFeatureForEdit().PartnerFeature.Base64HeaderPicture = base64data;
                        partnerFeatureForEdit().PartnerFeature.HeaderPictureCropData = cropData;
                        break;
                    case 27:
                        if (imagePreviewId === 'partner-27-topimage') {
                            partnerFeatureForEdit().PartnerFeature.Base64TopPicturePreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64TopPicture = base64data;
                            partnerFeatureForEdit().PartnerFeature.TopPictureCropData = cropData;
                        } else {
                            partnerFeatureForEdit().PartnerFeature.Base64BottomPicturePreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64BottomPicture = base64data;
                            partnerFeatureForEdit().PartnerFeature.BottomPictureCropData = cropData;
                        } 
                        break;
                    case 33:
                        if (imagePreviewId === 'partner-33-logo') {
                            partnerFeatureForEdit().PartnerFeature.Base64LogoPreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Logo = base64data;
                            partnerFeatureForEdit().PartnerFeature.LogoCropData = cropData;                        
                        } else {
                            partnerFeatureForEdit().PartnerFeature.Base64ImagePreview = pictureBase64data;
                            partnerFeatureForEdit().PartnerFeature.Base64Image = base64data;
                            partnerFeatureForEdit().PartnerFeature.ImageCropData = cropData;
                        }
                        break;
                }
            },

            addSlide = function (data) {
                var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0, v = c === 'x' ? r : r & 0x3 | 0x8;
                    return v.toString(16);
                });

                newSlide.LinkTitle = currentSlide().LinkTitle;
                newSlide.Description = currentSlide().Description;
                newSlide.ID = guid;
                pictureCarousel.push(newSlide);
                partnerFeatureForEdit().PartnerFeature.PicturesForEdit.push(newSlide);

                // Clear out the edit fields
                newSlide = null;
                currentSlide('');
            },

            selectSlide = function (data, event) {
                $('#partnerfeature-edit .slides li').removeClass('checked');
                $(event.target).closest('li').addClass('checked');

                currentSlide(data);
            },

            cancelEditSlide = function () {
                newSlide = null;
                currentSlide('');
                $('#partnerfeature-edit .slides li').removeClass('checked');
            },

            updateSlide = function (data) {
                newSlide = null;
                currentSlide('');

                var existingItem = partnerFeatureForEdit().PartnerFeature.PicturesForEdit.find(element => element.ID === data.ID);

                if (existingItem) {
                    existingItem.LinkTitle = data.LinkTitle;
                    existingItem.Description = data.Description;
                }

                $('#partnerfeature-edit .slides li').removeClass('checked');
            },

            removeSlide = function (data) {
                console.log(data);

                newSlide = null;
                currentSlide('');

                // Remove the slide from the observableArray
                pictureCarousel.remove(function (f) {
                    return f.ID === data.ID;
                });

                partnerFeatureForEdit().PartnerFeature.PicturesForEdit = arrayRemove(partnerFeatureForEdit().PartnerFeature.PicturesForEdit, data.ID);

                $('#partnerfeature-edit .slides li').removeClass('checked');
            },

            arrayRemove = function (arr, value) {
                return arr.filter(function (f) {
                    return f.ID !== value;
                });
            },

            closePreview = function () {
                $('#partnerfeature-view .previewOverlay').fadeOut(100);
            },

            showPersonalizationHelp = function () {
                $('#partnerfeature-view .personalizationHelp').fadeIn(100);
            },

            showClubPersonalizationHelp = function () {
                $('#partnerfeature-view .clubPersonalizationHelp').fadeIn(100);
            },

            closeHelp = function () {
                $('#partnerfeature-view .personalizationHelp').fadeOut(100);
                $('#partnerfeature-view .clubPersonalizationHelp').fadeOut(100);
            },

            showCopyPartnerFeature = function () {
                $('#partnerfeature-view .copyFeatureOverlay').fadeIn(100);
            },

            closeCopy = function () {
                $('#partnerfeature-view .copyFeatureOverlay').fadeOut(100);
            },

            deletePartnerFeature = function () {
                alert('Inte implementerat än');
            },

            dragStart = function (data, event) {
                slideDragId = data.ID;

                return true;
            },

            dragEnd = function (data, event) {
                $(event.target).closest('li').removeClass('dragHover');

                return true;
            },

            dragLeave = function (data, event) {
                $(event.target).closest('li').removeClass('dragHover');
            },

            dragEnter = function (data, event) {
                $(event.target).closest('li').addClass('dragHover');

                event.stopPropagation();
                event.preventDefault();
            },

            dragDrop = function (data, event) {
                $(event.target).closest('li').removeClass('dragHover');

                var index = -1;
                var releaseIndex = -1;

                for (let i = 0; i < pictureCarousel().length; i++) {
                    if (pictureCarousel()[i].ID === slideDragId) {
                        index = i;
                        break;
                    }
                }

                for (let j = 0; j < pictureCarousel().length; j++) {
                    if (pictureCarousel()[j].ID === data.ID) {
                        releaseIndex = j;
                        break;
                    }
                }

                if (index !== releaseIndex) {
                    var item = pictureCarousel.splice(index, 1)[0];

                    pictureCarousel.splice(releaseIndex, 0, item);

                    var list = partnerFeatureForEdit().PartnerFeature.PicturesForEdit;
                    var item2 = list.splice(index, 1)[0];

                    list.splice(releaseIndex, 0, item2);
                }

                return true;
            },

            playAnimationsTest = function () {
                $(".tech-slideshow .text-container").removeClass("animate-me");
                $(".tech-slideshow .image-1").removeClass("animate-me");
                

                errorTimer = setTimeout(function () {
                    $(".tech-slideshow .text-container").addClass("animate-me");
                    $(".tech-slideshow .image-1").addClass("animate-me");
                }, 1000);
            },

            cleanup = function () {
                partnerFeature('');
                partnerFeatureForEdit('');
                partnerFeaturePreview('');

                pictureCarousel([]);                

                $('#partner-feature-error').hide();

                partnerFeatureId = 0;
                newPartnerFeatureSetID = 0;
                imageAspectX = 0;
                imageAspectY = 0;
                useRoundImage = false;
                imagePreviewId = '';
                videoPreviewId = '';
                newVideoAsset = null;
                newSlide = null;
                currentSlide('');
                slideDragId = '';
            },

            init = function () {                
                $(document).on('change', '#partnerfeature-view .partnerFilePicker', function (evt) {
                    handleFileSelect(evt);
                    evt.target.value = '';
                });
            };

        init();

        return {
            partnerFeature: partnerFeature,
            partnerFeatureForEdit: partnerFeatureForEdit,
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,

            pictureCarousel: pictureCarousel,
            
            closePreview: closePreview,            
            selectPicture: selectPicture,            
            selectVideo: selectVideo,
            clearPicture: clearPicture,            

            showCopyPartnerFeature: showCopyPartnerFeature,
            showPersonalizationHelp: showPersonalizationHelp,
            showClubPersonalizationHelp: showClubPersonalizationHelp,
            closeHelp: closeHelp,
            closeCopy: closeCopy,

            deletePartnerFeature: deletePartnerFeature,

            currentSlide: currentSlide,
            addSlide: addSlide,
            updateSlide: updateSlide,
            selectSlide: selectSlide,
            cancelEditSlide: cancelEditSlide,
            removeSlide: removeSlide,

            selectPlacement: selectPlacement,
            selectPartnerSetForFeature: selectPartnerSetForFeature,

            dragStart: dragStart,
            dragEnd: dragEnd,
            dragDrop: dragDrop,
            dragLeave: dragLeave,
            dragEnter: dragEnter,

            selectFlipCardType: selectFlipCardType,
            selectGoalAnimationType: selectGoalAnimationType,
            selectFontType: selectFontType,

            generatePreview: generatePreview,
            savePartnerFeature: savePartnerFeature,
            copyPartnerFeature: copyPartnerFeature,

            partnerFeaturePreview: partnerFeaturePreview,
            editPartnerFeature: editPartnerFeature,
            navigateToPartner: navigateToPartner,
            
            playAnimationsTest: playAnimationsTest
        };
    });
;
define('viewmodels/vm.picturedetails',
    ['ko', 'config', 'router', 'presenter', 'datamanager', 'models/model', 'models/viewmodel', 'toastr', 'underscore', 'helpers/sw.socialentityhelper', 'models/viewmodel.mapper'],
    function (ko, config, router, presenter, datamanager, model, viewmodel, toastr, _, socialentityhelper, viewmodelmapper) {
        var pictureId = ko.observable(),
            pictureInfo = ko.observable(),

            activate = function (routeData, callback) {
                window.scrollTo(0, 0);

                pictureId(routeData.Id);

                getPicture();

                //Call callback if there is one
                if (_.isFunction(callback)) {
                    callback();
                }
            },

            cleanup = function () {
                $("#picturedetails-view .socialEntityDetailCommentText").val('');
            },

            goBackCmd = function () {
                presenter.toggleActivity(false);
                router.navigateBack();
            },

            getPicture = function () {
                datamanager.getPictureForDetailsView(pictureId(), {
                    success: function (json) {
                        pictureInfo(json);
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            deletePicture = function (pictureId) {
                var answer = confirm("Delete picture?");
                if (answer) {
                    datamanager.deletePicture(pictureId, {
                        success: function (json) {
                            router.navigateBack();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
                else {
                    toastr.success("Canceled deleting picture!");
                }
            },

            reportContent = function (pictureId) {
                var answer = confirm("Report content?");
                if (answer) {
                    var reportContentModel = new viewmodel.ReportContent()
                        .ReportTypeID(3)
                        .ReportContentID(pictureId)
                        .ReportContentTypeID(2)
                        .ReportContentGameID(0)
                        .ReportContentReason('');

                    datamanager.reportContentWithReason(viewmodelmapper.reportcontent.toDto(reportContentModel), {
                        success: function () {
                            toastr.success('Content successfully reported!');
                            goBackCmd();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
                else {
                    toastr.success("Canceled reporting content!");
                }
            },

            onSocialEntityCommentPostClick = function (data) {

                var commentText = $("#picturedetails-view .socialEntityDetailCommentText").val();

                if (commentText !== '') {

                    var socialEntityComment = new model.SocialEntityComment()
                        .SocialEntityID(data.SocialEntityInfo.SocialEntityID)
                        .Text(commentText);

                    datamanager.insertSocialEntityComment(ko.toJS(socialEntityComment), {
                        success: function (result) {
                            cleanup();
                            getPicture();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }
            },

            onSocialEntityCommentDeleteClick = function (data) {

                if (data.SocialEntityCommentID !== '') {
                    datamanager.deleteSocialEntityComment(data.SocialEntityCommentID, {
                        success: function (result) {
                            cleanup();
                            getPicture();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }

            },

            onSocialEntityCommentReportClick = function (data) {

                if (data.SocialEntityCommentID !== '') {
                    var reportContentModel = new viewmodel.ReportContent()
                        .ReportTypeID(1)
                        .ReportContentID(data.SocialEntityCommentID)
                        .ReportContentTypeID(8)
                        .ReportContentGameID(0)
                        .ReportContentReason('');

                    datamanager.reportContentWithReason(viewmodelmapper.reportcontent.toDto(reportContentModel), {
                        success: function () {
                            cleanup();
                            getPicture();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }
            };

        return {
            activate: activate,
            cleanup: cleanup,
            pictureInfo: pictureInfo,
            goBackCmd: goBackCmd,
            socialentityhelper: socialentityhelper,
            onSocialEntityCommentPostClick: onSocialEntityCommentPostClick,
            onSocialEntityCommentDeleteClick: onSocialEntityCommentDeleteClick,
            onSocialEntityCommentReportClick: onSocialEntityCommentReportClick,
            socialEntityTexts: socialEntityTexts
        };
    });;
define('viewmodels/vm.player',
    ['ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'models/viewmodel', 'models/model', 'models/model.mapper', 'underscore'],
    function (ko, config, router, messenger, datamanager, shell, viewmodel, model, modelmapper, _) {

        var player = ko.observable(),
            playerHeader = ko.observable(),
            playerId = 0,
            currentPage = ko.observable(),

            activate = function (routeData, callback) {
                routeData.subview = 'profile';

                messenger.publish.viewModelActivated();

                if (_.isFunction(callback)) {
                    callback();
                }

                activatesubview(routeData);
            },

            activatesubview = function (routeData) {
                var currentView = routeData.subview;
                currentPage(currentView);

                playerId = Number(routeData.Id);

                $('.player-subview').hide();
                $('#player-' + currentView).show();

                if (playerHeader() !== undefined) {
                    if (playerHeader().PlayerID !== playerId) {
                        getPlayerHeader();

                        clearObservables();
                    }
                }
                else {
                    getPlayerHeader();
                }

                //if (playerProfile() === undefined || playerProfile() === '') {
                //    initTeamPlayerProfile(routeData, true);
                //}

            },

            getPlayerHeader = function () {
                datamanager.getPlayerHeader(playerId, {
                    success: function (json) {
                        playerHeader(json);

                        console.log(json);
                    },
                    error: function (json) {
                        alert(json);
                    }
                });
            },

            clearObservables = function () {

            },

            cleanup = function () {
            },

            navigateToProfile = function () {
                return createNavigationItem("profile");
            },

            navigateToStats = function () {
                return createNavigationItem("stats");
            },

            navigateToHighlights = function () {
                return createNavigationItem("highlights");
            },

            createNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.player + '/' + playerId + '/' + endPath;
                    },
                    toClick: function () {
                        window.scrollTo(0, 0);
                        router.navigateTo(config.hashes.player + '/' + playerId + '/' + endPath);
                    }
                };
            };

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,

            playerHeader: playerHeader,
            currentPage: currentPage,

            navigateToProfile: navigateToProfile,
            navigateToStats: navigateToStats,
            navigateToHighlights: navigateToHighlights,
        };
    });
;
define('viewmodels/vm.playerguardian',
    ['ko', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'underscore'],
    function (ko, router, messenger, datamanager, shell, _) {

        var playerGuardian = ko.observable(),
            teamHeaderInfo = ko.observable(),
            currentPlayerGuardianId,

        activate = function (routeData, callback) {
            messenger.publish.viewModelActivated();

            currentPlayerGuardianId = routeData.playerGuardianId;

            datamanager.getPlayerGuardianForDetailsView(routeData.playerGuardianId, {
                success: function (json) {
                    playerGuardian(json);

                    // Get teamHeaderInfo to see if user can edit item
                    if (typeof teamHeaderInfo() === 'undefined') {
                        datamanager.initTeamVC(playerGuardian().TeamID, {
                            success: function (model) {
                                teamHeaderInfo(model.TeamHeaderInfo);
                            },
                            error: function (response) {
                            }
                        });
                    }
                },
                error: function (json) {
                }
            });

            if (_.isFunction(callback)) {
                callback();
            }
        },

        cleanup = function () {
            teamHeaderInfo('');
        },

        initialize = function (data, callback) {
            teamHeaderInfo(data);

            if (_.isFunction(callback)) {
                callback();
            }
        },

        getTeamHeaderInfo = function () {

        },

        navigateToEditPlayerGuardian = function () {
            window.location = 'playerguardian' + '/addedit/' + playerGuardian().TeamID + '/' + playerGuardian().PlayerGuardianID;
        },

        removePlayerGuardian = function () {
            //console.log(currentPlayerId);
            var r = confirm("Are you sure you want to delete this player?");
            if (r === true) {
                datamanager.deletePlayerGuardian(currentPlayerGuardianId, {
                    success: function (json) {
                        router.navigateBack();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            }

        },

        memberIsTeamAdministrator = ko.computed(function () {
            return shell.currentMember.IsSportswikAdmin || typeof teamHeaderInfo() !== 'undefined' && teamHeaderInfo().MemberIsTeamAdministrator;
        });

        return {
            activate: activate,
            cleanup: cleanup,
            initialize: initialize,
            playerGuardian: playerGuardian,
            navigateToEditPlayerGuardian: navigateToEditPlayerGuardian,
            memberIsTeamAdministrator: memberIsTeamAdministrator,
            teamHeaderInfo: teamHeaderInfo,
            removePlayerGuardian: removePlayerGuardian
        };
    });
;
define('viewmodels/vm.reportitem',
    ['jquery', 'ko', 'config', 'router', 'datamanager', 'underscore', 'viewmodels/vm.shell', 'models/viewmodel', 'models/viewmodel.mapper'],
    function ($, ko, config, router, datamanager, _, shell, viewmodel, viewmodelmapper) {
        var currentItemId,
            currentTypeId,
            currentGameId,

            activate = function (itemId, typeId, gameId) {
                currentItemId = itemId;
                currentTypeId = typeId;
                currentGameId = gameId;

                $('#reportitem-description').val('');

                $('#reportitem-view').show();
                $('#reportitem-view .fade-overlay').addClass('active');
            },

            reportItem = function () {
                var reason = $('#reportitem-description').val();

                if (reason.length === 0) {
                    alert('Du måste beskriva varför du vill anmäla det här inlägget');
                    return;
                }

                var reportContentModel = new viewmodel.ReportContent()
                    .ReportTypeID(2)
                    .ReportContentID(currentItemId)
                    .ReportContentTypeID(currentTypeId)
                    .ReportContentGameID(currentGameId)
                    .ReportContentReason(reason);

                shell.showProgressIndicator("Anmäler...");

                datamanager.reportContentWithReason(viewmodelmapper.reportcontent.toDto(reportContentModel), {
                    success: function () {
                        shell.hideProgressIndicator();

                        closeDialog();
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();

                        alert(response);

                        closeDialog();
                    }
                });                
            },

            closeDialog = function () {
                $('#reportitem-view').hide();
                $('#reportitem-view .fade-overlay').removeClass('active');
            };
            
        return {
            activate: activate,

            reportItem: reportItem,
            closeDialog: closeDialog
        };
    });;
define('viewmodels/vm.shell',
    ['ko', 'datamanager', 'config', 'toastr', 'underscore', 'models/viewmodel'],
    function (ko, datamanager, config, toastr, _, viewmodel) {
        var
            currentLanguage = ko.observable("sv"),
            languages = ko.observableArray([
                { name: "Swedish", code: "sv" },
                { name: "English", code: "default" }
            ]),

            globalUploadQueue = ko.observableArray(),
            globalMemberNotificationsNumber = ko.observable(0),
            tracking = [],
            trackTimer = null,
            videoTimer = null,
            trackingInterval = 30,
            activeCastedVideos = [],
            maxTrackingQueue = 10,
            maxSessionQueue = 10,

            menuHashes = config.hashes,

            activate = function (routeData) {
                window.addEventListener('beforeunload', function (e) {
                    sendTracking();
                    sendSessionTracking(true);
                });

                videoTimer = setInterval(function () {
                    sendSessionTracking(false);
                }, 60 * 1000);
            },

            showProgressIndicator = function (text) {
                $("#loading").fadeIn();
                $("#loadingSpinnerText").text(text);
            },

            hideProgressIndicator = function () {
                $("#loading").fadeOut();
                $("#loadingProgressWrapper").hide();
            },

            showPartialProgressIndicator = function (text) {
                $("#loading").fadeIn();
                $("#loadingSpinnerText").text(text);
                $("#loadingProgressWrapper").show();
                $("#loadingProgress").val(0);

            },

            updateProgress = function (progress) {
                $("#loadingProgress").val(progress);
            },

            showAdminView = function () {
                return $.cookie('adminMode') ? true : false;
            },

            memberIsLoggedIn = function () {
                if (member !== undefined && member.MemberID !== undefined && member.MemberID > 0)
                    return true;

                return false;
            },

            trackPartner = function (partnerFeatureId, partnerFeaturePlacementId, extraTrackingProperty, entityId) {
                var partnerFeature = new viewmodel.PartnerFeatureView();

                partnerFeature.PartnerFeatureID = partnerFeatureId;
                partnerFeature.PartnerFeaturePlacementID = partnerFeaturePlacementId;
                partnerFeature.ExtraTrackingProperty = extraTrackingProperty;
                partnerFeature.PartnerFeatureEntityID = entityId;
                partnerFeature.TimeStamp = moment.utc().toDate();

                tracking.push(partnerFeature);

                if (trackTimer === null) {
                    trackTimer = setInterval(sendTracking, trackingInterval * 1000);
                }

                if (tracking.length >= maxTrackingQueue) {
                    sendTracking();
                }

                //console.log(partnerFeature);

                //datamanager.trackPartnerFeatureView(partnerFeatureId, partnerFeaturePlacementId, extraTrackingProperty, entityId, 2);
            },

            addEventToTrackingCookie = function (item) {
                var _root;
                var sendEvents = false;
                var cookieExists = false;

                if ($.cookie('sw_session')) {
                    cookieExists = true;

                    // TODO: Check if there are no events, and the cookie is old. Then clear the cookie
                }

                if (cookieExists) {
                    _root = $.parseJSON($.cookie('sw_session'));

                    _root.Events.push(item);

                    if (_root.Events.length > maxSessionQueue)
                        sendEvents = true;

                } else {
                    var d = moment.utc().toDate();

                    _root = {
                        'UserSessionTrackingID': 0,
                        'StartTime': d,
                        'Events': []
                    };

                    _root.Events.push(item);

                    var currentMemberId = 1;

                    if (_.isObject(member)) {
                        currentMemberId = member.MemberID;
                    } 

                    var _data = {
                        'MemberID': currentMemberId,
                        'StartTime': d,
                        'AppVersion': '',
                        'Os': 'Web',
                        'OsVersion': '',
                        'Model': '',
                        'Brand': ''
                    };

                    datamanager.insertUserSessionExternal(_data)
                        .then(function (sessionId) {
                            _root.UserSessionTrackingID = sessionId;

                            $.cookie('sw_session', ko.toJSON(_root));
                        })
                        .fail(function (error) {
                            console.log(error);
                        });

                    //datamanager.insertUserSessionExternal(_data, {
                    //    success: function (sessionId) {

                    //        _root.UserSessionTrackingID = sessionId;

                    //        $.cookie('sw_session', ko.toJSON(_root));
                    //    },
                    //    error: function (error) {
                    //        console.log(error);
                    //    }
                    //});
                }

                $.cookie('sw_session', ko.toJSON(_root));

                if (sendEvents)
                    sendSessionTracking(false);
            },

            insertVideoEvent = function (video) {
                var videoId = getVideoId(video);
                var type = getVideoType(video);

                if ($.cookie('sw_session')) {
                    var _root = $.parseJSON($.cookie('sw_session'));

                    for (var i = 0; i < _root.Events.length; i++) {
                        if (_root.Events[i].EventTypeID === 'VideoView' &&
                            _root.Events[i].JsonData.ID === videoId &&
                            _root.Events[i].JsonData.Type === type &&
                            _root.Events[i].Done === false) {
                            // There is already an "open" event with the same type/id

                            console.log('We have an unfinished video start, ignore!', _root.Events[i]);

                            return;
                        }
                    }
                }

                var itemToAdd = {
                    'EventTypeID': 'VideoView',
                    'TimeStamp': moment.utc().toDate(),
                    'Done': false,
                    'JsonData': {
                        'ID': videoId,
                        'Type': type,
                        'GameID': video.GameID,
                        'Duration': 0
                    }
                };

                addEventToTrackingCookie(itemToAdd);
            },

            insertChromecastConnectedEvent = function (video) {
                var videoId = getVideoId(video);
                var type = getVideoType(video);

                activeCastedVideos.push(videoId);

                var itemToAdd = {
                    'EventTypeID': 'CastMediaStart',
                    'TimeStamp': moment.utc().toDate(),
                    'Done': true,
                    'JsonData': {
                        'ID': videoId,
                        'Type': type,
                        'GameID': video.GameID,
                        'ReceiverType': 'Chromecast'
                    }
                };

                addEventToTrackingCookie(itemToAdd);
            },

            insertChromecastDisconnectedEvent = function (video) {
                var videoId = getVideoId(video);
                var type = getVideoType(video);

                // Check if the video is in the list of items that we are casting
                // If not, ignore it
                if (!activeCastedVideos.includes(videoId)) {
                    console.log('Video ' + videoId + ' not in list, ignoring it');
                    return;
                }

                // Remove the item from the list
                const index = activeCastedVideos.indexOf(videoId);
                activeCastedVideos.splice(index, 1);

                var itemToAdd = {
                    'EventTypeID': 'CastMediaEnd',
                    'TimeStamp': moment.utc().toDate(),
                    'Done': true,
                    'JsonData': {
                        'ID': videoId,
                        'Type': type,
                        'GameID': video.GameID,
                        'ReceiverType': 'Chromecast'
                    }
                };

                addEventToTrackingCookie(itemToAdd);
            },

            updateVideoEvent = function (lastStart, video, isDone) {
                var videoId = getVideoId(video);
                var type = getVideoType(video);

                let seconds = Math.round(Math.abs(moment.utc().toDate().getTime() - lastStart.getTime()) / 1000);

                if ($.cookie('sw_session')) {
                    var _root = $.parseJSON($.cookie('sw_session'));

                    for (var i = 0; i < _root.Events.length; i++) {
                        if (_root.Events[i].EventTypeID === 'VideoView' &&
                            _root.Events[i].JsonData.ID === videoId &&
                            _root.Events[i].JsonData.Type === type &&
                            _root.Events[i].Done === false) {

                            _root.Events[i].JsonData.Duration = seconds;

                            if (isDone)
                                _root.Events[i].Done = true;

                            $.cookie('sw_session', ko.toJSON(_root));
                            return;
                        }
                    }
                }

                // TODO: What to do if there is no 'video start', should never happen right?
            },

            getVideoId = function (video) {
                if (video.VideoID) {
                    return video.VideoID;
                }
                else if (video.GameMediaItemID) {
                    return video.GameMediaItemID;
                }
                else if (video.HighlightID) {
                    return video.HighlightID;
                }

                return 0;
            },

            getVideoType = function (video) {
                if (video.VideoID) {
                    return 4;
                }
                else if (video.GameMediaItemID) {
                    return video.GameMediaItemTypeID;
                }
                else if (video.HighlightID) {
                    return 5;
                }

                return 0;
            }

            sendSessionTracking = function (force) {
                // Check for a cookie
                if (!$.cookie('sw_session'))
                    return;

                // Get the cookie
                var _data = $.parseJSON($.cookie('sw_session'));

                // we have not yet gotten a session, then we can't send it
                if (_data.UserSessionTrackingID === 0)
                    return;

                // No events, return
                if (_data.Events.length === 0)
                    return;

                var currentMemberId = 1;

                if (_.isObject(member)) {
                    currentMemberId = member.MemberID;
                };

                // Save the events to a temp variable
                    var param = {
                    'MemberID': currentMemberId,
                    'UserSessionTrackingID': _data.UserSessionTrackingID,
                    'Events': _data.Events
                };                                

                // Empty all events and save the cookie, just so that new events are sent later
                _data.Events = [];

                // Loop backwards since we might remove the item in the loop
                for (var i = param.Events.length - 1; i >= 0; i--) {
                    if (force === true)
                        param.Events[i].Done = true;
                    else if (param.Events[i].Done === false) {
                        // TODO: Some sort of sanity check here if the item was created a long time ago perhaps?
                        // param.Events[i].TimeStamp

                        //var diff = (param.Events[i].TimeStamp - dt1.getTime()) / 1000;
                        //diff /= 60;
                        //return Math.abs(Math.round(diff));

                    }                    

                    // Put back all events that aren't 'Done', unless we force it
                    if (param.Events[i].Done === false) {
                        // Item not done, put it back in the queue
                        _data.Events.push(param.Events[i]);

                        // Remove it from the events we are sending
                        param.Events.splice(i, 1);
                    } else {
                        // Need to stringify the JsonData to a string before it is sent
                        param.Events[i].JsonData = JSON.stringify(param.Events[i].JsonData);
                    }
                }

                // Save the cookie with empty (remaining) events
                $.cookie('sw_session', ko.toJSON(_data)); 

                datamanager.updateUserSessionExternal(param)
                    .then(function () {
                        console.log('Success sending tracking');
                    })
                    .fail(function (error) {
                        console.log('Failed sending tracking', error);
                    });
            },

            sendTracking = function () {
                if (trackTimer !== null) {
                    clearInterval(trackTimer);
                    trackTimer = null;
                }

                if (tracking.length > 0) {
                    // If production only?
                    if (swconstants.applicationId === 2 ||
                        swconstants.applicationId === 4 ||
                        swconstants.applicationId === 5) {
                        var trackPartnerFeatureVM = new viewmodel.TrackPartnerFeatureViewVM();

                        if (_.isObject(member)) {
                            trackPartnerFeatureVM.MemberID = member.MemberID;
                        } else {
                            trackPartnerFeatureVM.MemberID = 0;
                        }

                        for (var i = 0; i < tracking.length; i++) {
                            trackPartnerFeatureVM.Items.push(tracking[i]);
                        }

                        console.log('Sending tracking!');

                        datamanager.trackPartnerFeatureViewsExternal(trackPartnerFeatureVM);
                    } else {
                        datamanager.trackPartnerFeatureViews(tracking);
                    }
                    
                    tracking = [];
                }
            },

            showToast = function (text) {
                if (toastr)
                    toastr.success(text);
                else
                    alert(text);
            },

            showError = function (text, title) {
                if (toastr)
                    toastr.error(text, title);
                else
                    alert(text);
            },

            init = function () {   
                activate();                
            };

        init();

        return {
            activate: activate,
            currentMember: member,
            memberIsLoggedIn: memberIsLoggedIn,
            menuHashes: menuHashes,
            currentLanguage: currentLanguage,
            languages: languages,            
            showProgressIndicator: showProgressIndicator,
            hideProgressIndicator: hideProgressIndicator,
            showPartialProgressIndicator: showPartialProgressIndicator,
            updateProgress: updateProgress,
            showToast: showToast,
            showError: showError,
            showAdminView: showAdminView,
            trackPartner: trackPartner,
            insertVideoEvent: insertVideoEvent,
            insertChromecastConnectedEvent: insertChromecastConnectedEvent,
            insertChromecastDisconnectedEvent: insertChromecastDisconnectedEvent,
            updateVideoEvent: updateVideoEvent,
            globalUploadQueue: globalUploadQueue,
            globalMemberNotificationsNumber: globalMemberNotificationsNumber
        };
    });;
define('viewmodels/vm.socialentitycomments',
    ['ko', 'datamanager', 'models/model', 'models/viewmodel', 'models/viewmodel.mapper', 'underscore'],
    function (ko, datamanager, model, viewmodel, viewmodelmapper, _) {
        var comments = ko.observableArray(),
            page = 0,
            socialEntityId = 0,
            pageSize = 25,
            afterLoaded = ko.observable(false),
            morePostsToGet = ko.observable(false),
            commentText = ko.observable(''),

            activate = function (param) {
                socialEntityId = param;

                $('#socialentitycomments-view').show();
                $('#socialentitycomments-view .fade-overlay').addClass('active');

                initComments();
            },

            initComments = function () {
                page = 0;

                datamanager.getSocialEntityComments(socialEntityId, page, pageSize, {
                    success: function (json) {
                        page += 1;

                        comments([]);

                        var underlayingArray = comments();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        comments.valueHasMutated();

                        if (json.length === pageSize)
                            morePostsToGet(true);

                        afterLoaded(true);
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            getMoreItems = function () {
                datamanager.getSocialEntityComments(socialEntityId, page, pageSize, {
                    success: function (json) {
                        page += 1;

                        var underlayingArray = comments();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        if (json.length < pageSize)
                            morePostsToGet(false);

                        comments.valueHasMutated();

                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            onKeyDown = function (data, event) {
                if (event.keyCode === 13) {
                    onPostClick();
                }

                return true;
            },

            onPostClick = function () {
                if (commentText().length > 0) {
                    var socialEntityComment = new model.SocialEntityComment()
                        .SocialEntityID(socialEntityId)
                        .Text(commentText());

                    commentText('');

                    datamanager.insertSocialEntityComment(ko.toJS(socialEntityComment), {
                        success: function (result) {
                            initComments();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }
            },

            onSocialEntityCommentReportClick = function (data, event) {
                var reportContentModel = new viewmodel.ReportContent()
                    .ReportTypeID(1)
                    .ReportContentID(data.SocialEntityCommentID)
                    .ReportContentTypeID(8)
                    .ReportContentGameID(0)
                    .ReportContentReason('');

                datamanager.reportContentWithReason(viewmodelmapper.reportcontent.toDto(reportContentModel), {
                    success: function () {
                        initComments();
                    },
                    error: function (response) {
                        return response;
                    }
                });
            },

            onSocialEntityCommentDeleteClick = function (data) {                
                datamanager.deleteSocialEntityComment(data.SocialEntityCommentID, {
                    success: function (result) {
                        initComments();
                    },
                    error: function (response) {
                        return response;
                    }
                });
            },

            closeDialog = function () {
                $('#socialentitycomments-view .fade-overlay').removeClass('active');
                $('#socialentitycomments-view').hide();

                page = 0;
                comments([]);
                morePostsToGet(false);
                afterLoaded(false);
                commentText('');
            };


        return {
            activate: activate,
            closeDialog: closeDialog,
            getMoreItems: getMoreItems,

            afterLoaded: afterLoaded,
            onPostClick: onPostClick,
            onKeyDown: onKeyDown,
            commentText: commentText,

            onSocialEntityCommentReportClick: onSocialEntityCommentReportClick,
            onSocialEntityCommentDeleteClick: onSocialEntityCommentDeleteClick,

            morePostsToGet: morePostsToGet,
            comments: comments
        }
    });;
define('viewmodels/vm.socialentitylikes',
    ['ko', 'datamanager', 'underscore'],
    function (ko, datamanager, _) {
        var likes = ko.observableArray(),
            socialEntityId = 0,

            activate = function (param) {
                socialEntityId = param;

                $('#socialentitylikes-view').show();
                $('#socialentitylikes-view .fade-overlay').addClass('active');


                datamanager.getSocialEntityLikesVC(socialEntityId, {
                    success: function (json) {
                        likes([]);

                        var underlayingArray = likes();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        likes.valueHasMutated();
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            closeDialog = function () {
                $('#socialentitylikes-view .fade-overlay').removeClass('active');
                $('#socialentitylikes-view').hide();

                likes([]);                
            };


        return {
            activate: activate,
            closeDialog: closeDialog,
            likes: likes
        }
    });;
define('viewmodels/vm.socialentityviews',
    ['ko', 'datamanager', 'underscore'],
    function (ko, datamanager, _) {
        var views = ko.observableArray(),
            page = 0,
            socialEntityId = 0,
            pageSize = 25,
            morePostsToGet = ko.observable(false),

            activate = function (param) {
                socialEntityId = param;

                $('#socialentityviews-view').show();
                $('#socialentityviews-view .fade-overlay').addClass('active');

                datamanager.getSocialEntityViews(socialEntityId, page, pageSize, {
                    success: function (json) {
                        page += 1;

                        views([]);

                        var underlayingArray = views();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        views.valueHasMutated();

                        if (json.length === pageSize)
                            morePostsToGet(true);

                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            getMoreItems = function () {
                datamanager.getSocialEntityViews(socialEntityId, page, pageSize, {
                    success: function (json) {
                        page += 1;

                        var underlayingArray = views();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        if (json.length < pageSize)
                            morePostsToGet(false);

                        views.valueHasMutated();

                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            closeDialog = function () {
                $('#socialentityviews-view .fade-overlay').removeClass('active');
                $('#socialentityviews-view').hide();   

                page = 0;
                views([]);
                morePostsToGet(false);
            };

            
        return {
            activate: activate,
            closeDialog: closeDialog,
            getMoreItems: getMoreItems,

            morePostsToGet: morePostsToGet,
            views: views
        }
    });;
define('viewmodels/vm.sockethelper',
    ['underscore'],
    function (_) {
        var
            hub = $.connection.webSocketHub,
            connectionState = 0, //0 = not connected, 1 = connecting, 2 = connected
            notificationsUpdateCallback = null,
            gameContentDeleteCallback = null,
            socialEmotionCallback = null,
            gameContentUpdateCallback = null,
            gameContentInsertCallback = null,
            gameCompactContentInsertCallback = null,
            gameCompactContentUpdateCallback = null,
            gameModeratedPostInsertedCallback = null,
            gameHeaderUpdateCallback = null,
            gameCheckInCallback = null,
            gameMediaItemInsertCallback = null,
            gameMediaItemUpdateCallback = null,
            gameMediaItemDeleteCallback = null,
            gamePlayerUpdateCallback = null,
            gameTeamStaffUpdateCallback = null,
            liveStreamHealthChangeCallback = null,
            callbacks = [],

            setupListeners = function () {
                if (hub) {
                    hub.client.gameContentDelete = function (item) {
                        if (gameContentDeleteCallback && _.isFunction(gameContentDeleteCallback))
                            gameContentDeleteCallback(item);
                    };

                    hub.client.gameContentUpdate = function (item) {
                        if (gameContentUpdateCallback && _.isFunction(gameContentUpdateCallback))
                            gameContentUpdateCallback(item);
                    };

                    hub.client.gameContentInsert = function (item) {
                        if (gameContentInsertCallback && _.isFunction(gameContentInsertCallback))
                            gameContentInsertCallback(item);
                    };

                    hub.client.gameCompactContentInsert = function (item) {
                        if (gameCompactContentInsertCallback && _.isFunction(gameCompactContentInsertCallback))
                            gameCompactContentInsertCallback(item);
                    };

                    hub.client.gameCompactContentUpdate = function (item) {
                        if (gameCompactContentUpdateCallback && _.isFunction(gameCompactContentUpdateCallback))
                            gameCompactContentUpdateCallback(item);
                    };

                    hub.client.gameModeratedPostInserted = function (item) {
                        if (gameModeratedPostInsertedCallback && _.isFunction(gameModeratedPostInsertedCallback))
                            gameModeratedPostInsertedCallback(item);
                    };


                    hub.client.gameHeaderUpdate = function (item) {
                        if (gameHeaderUpdateCallback && _.isFunction(gameHeaderUpdateCallback))
                            gameHeaderUpdateCallback(item);
                    };

                    hub.client.gameCheckIn = function (item) {
                        if (gameCheckInCallback && _.isFunction(gameCheckInCallback))
                            gameCheckInCallback(item);
                    };

                    hub.client.gameMediaItemInsert = function (item) {
                        if (gameMediaItemInsertCallback && _.isFunction(gameMediaItemInsertCallback))
                            gameMediaItemInsertCallback(item);
                    };

                    hub.client.gameMediaItemUpdate = function (item) {
                        if (gameMediaItemUpdateCallback && _.isFunction(gameMediaItemUpdateCallback))
                            gameMediaItemUpdateCallback(item);
                    }

                    hub.client.gameMediaItemDelete = function (item) {
                        if (gameMediaItemDeleteCallback && _.isFunction(gameMediaItemDeleteCallback))
                            gameMediaItemDeleteCallback(item);
                    };

                    hub.client.gamePlayerUpdate = function (item) {
                        if (gamePlayerUpdateCallback && _.isFunction(gamePlayerUpdateCallback))
                            gamePlayerUpdateCallback(item);
                    };

                    hub.client.gameTeamStaffUpdate = function (item) {
                        if (gameTeamStaffUpdateCallback && _.isFunction(gameTeamStaffUpdateCallback))
                            gameTeamStaffUpdateCallback(item);
                    };

                    hub.client.liveStreamHealthChange = function (item) {
                        if (liveStreamHealthChangeCallback && _.isFunction(liveStreamHealthChangeCallback))
                            liveStreamHealthChangeCallback(item);
                    };

                    hub.client.notificationsUpdate = function () {
                        if (notificationsUpdateCallback && _.isFunction(notificationsUpdateCallback))
                            notificationsUpdateCallback();
                    };

                    hub.client.socialEntityEmotionPosted = function (item) {
                        if (socialEmotionCallback && _.isFunction(socialEmotionCallback))
                            socialEmotionCallback(item);
                    };
                }
            },

            onNotificationsUpdateListener = function (callback) {
                if (_.isFunction(callback)) {
                    notificationsUpdateCallback = callback;
                }
            },

            onGameContentDeleteListener = function (callback) {
                if (_.isFunction(callback)) {
                    gameContentDeleteCallback = callback;
                }
            },

            onGameContentUpdateListener = function (callback) {
                if (_.isFunction(callback)) {
                    gameContentUpdateCallback = callback;
                }
            },

            onGameHeaderUpdateListener = function (callback) {
                if (_.isFunction(callback)) {
                    gameHeaderUpdateCallback = callback;
                }
            },

            onGameContentInsertListener = function (callback) {
                if (_.isFunction(callback)) {
                    gameContentInsertCallback = callback;
                }
            },

            onGameCompactContentInsertListener = function (callback) {
                if (_.isFunction(callback)) {
                    gameCompactContentInsertCallback = callback;
                }
            },

            onGameCompactContentUpdateListener = function (callback) {
                if (_.isFunction(callback)) {
                    gameCompactContentUpdateCallback = callback;
                }
            },

            onModeratedPostInsertedListener = function (callback) {
                if (_.isFunction(callback)) {
                    gameModeratedPostInsertedCallback = callback;
                }
            },

            onGameMediaItemInsertListener = function (callback) {
                if (_.isFunction(callback)) {
                    gameMediaItemInsertCallback = callback;
                }
            },

            onGameMediaItemUpdateListener = function (callback) {
                if (_.isFunction(callback)) {
                    gameMediaItemUpdateCallback = callback;
                }
            },

            onGameMediaItemDeleteListener = function (callback) {
                if (_.isFunction(callback)) {
                    gameMediaItemDeleteCallback = callback;
                }
            },

            onGamePlayerUpdateListener = function (callback) {
                if (_.isFunction(callback)) {
                    gamePlayerUpdateCallback = callback;
                }
            },

            onGameTeamStaffUpdateListener = function (callback) {
                if (_.isFunction(callback)) {
                    gameTeamStaffUpdateCallback = callback;
                }
            },

            onLiveStreamHealthChangeListener = function (callback) {
                if (_.isFunction(callback)) {
                    liveStreamHealthChangeCallback = callback;
                }
            },

            onGameCheckInListener = function (callback) {
                if (_.isFunction(callback)) {
                    gameCheckInCallback = callback;
                }
            },

            onSocialEmotionPostedListener = function (callback) {
                if (_.isFunction(callback)) {
                    socialEmotionCallback = callback;
                }
            },

            disconnectFromHub = function (callback) {
                if (_.isFunction(callback)) {
                    callbacks.push(callback);
                }

                $.connection.hub.stop().done(function () {
                    connectionState = 0;

                    callbacks.forEach(function (element) {
                        element();
                    });

                    callbacks = [];
                });
            },

            connectToHub = function (callback) {
                if (connectionState < 2) {
                    if (_.isFunction(callback)) {
                        callbacks.push(callback);
                    }
                }

                if (connectionState === 0) {
                    connectionState = 1;
                    setupListeners();

                    $.connection.hub.start().done(function () {                        
                        connectionState = 2;

                        callbacks.forEach(function (element) {
                            element();
                        });

                        callbacks = [];
                    });

                    $.connection.hub.disconnected(function () {
                        connectionState = 0;
                        console.log("SignalR was disconnected");
                    });

                } else if (connectionState === 2) {
                    if (_.isFunction(callback)) {
                        callback();
                    }
                }
            };
        return {
            hub: hub,
            connectToHub: connectToHub,
            disconnectFromHub: disconnectFromHub,
            onNotificationsUpdateListener: onNotificationsUpdateListener,
            onGameContentDeleteListener: onGameContentDeleteListener,
            onGameContentUpdateListener: onGameContentUpdateListener,                  
            onGameHeaderUpdateListener: onGameHeaderUpdateListener,
            onGameCheckInListener: onGameCheckInListener,            
            onGameMediaItemInsertListener: onGameMediaItemInsertListener,
            onGameMediaItemUpdateListener: onGameMediaItemUpdateListener,
            onGameMediaItemDeleteListener: onGameMediaItemDeleteListener,
            onGamePlayerUpdateListener: onGamePlayerUpdateListener,
            onGameTeamStaffUpdateListener: onGameTeamStaffUpdateListener,
            onLiveStreamHealthChangeListener: onLiveStreamHealthChangeListener,
            onGameContentInsertListener: onGameContentInsertListener,
            onGameCompactContentInsertListener: onGameCompactContentInsertListener,
            onGameCompactContentUpdateListener: onGameCompactContentUpdateListener,
            onModeratedPostInsertedListener: onModeratedPostInsertedListener,
            onSocialEmotionPostedListener: onSocialEmotionPostedListener
        };
    });;
define('viewmodels/vm.staff',
    ['ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'viewmodels/vm.appconfig', 'underscore'],
    function (ko, config, router, messenger, datamanager, shell, appconfig, _) {

        var staff = ko.observable(),
            teamHeaderInfo = ko.observable(),
            currentTeamStaffId = ko.observable(),

            activate = function (routeData, callback) {
                var currentView = 'profile';

                messenger.publish.viewModelActivated();

                currentTeamStaffId(routeData.staffId);

                $('#staff-' + currentView).show();

                datamanager.getTeamStaffForDetailsView(routeData.staffId, {
                    success: function (json) {
                        staff(json);
                        // Get teamHeaderInfo to see if user can edit item
                        if (typeof teamHeaderInfo() === 'undefined') {
                            datamanager.initTeamVC(staff().TeamID, {
                                success: function (model) {
                                    teamHeaderInfo(model.TeamHeaderInfo);
                                },
                                error: function (response) {
                                }
                            });
                        }

                        $('#teamStaffProfileTopbar-' + currentView).addClass('active');
                    },
                    error: function (json) {
                    }
                });

                if (_.isFunction(callback)) {
                    callback();
                }
            },

            cleanup = function () {
                teamHeaderInfo('');
            },

            initialize = function (data, callback) {
                teamHeaderInfo(data);

                if (_.isFunction(callback)) {
                    callback();
                }
            },

            canDeleteTeamStaff = function () {
                return appconfig.canDeleteTeamStaff();
            },

            removeTeamStaff = function () {
                //console.log(currentPlayerId);
                var r = confirm(MiscTexts.AreYouSure);
                if (r === true) {
                    datamanager.deleteTeamStaff(currentTeamStaffId(), {
                        success: function (json) {
                            router.navigateBack();
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }

            },

            acceptRequest = function () {
                datamanager.setTeamStaffRequestStatus(currentTeamStaffId(), 0, {
                    success: function (json) {
                        router.navigateBack();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            denyRequest = function () {
                var r = confirm(MiscTexts.AreYouSure);
                if (r === true) {
                    datamanager.setTeamStaffRequestStatus(currentTeamStaffId(), 2, {
                        success: function (json) {
                            router.navigateBack();
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            navigateToEditTeamStaff = function () {
                router.navigateTo(config.hashes.teamadmin + '/' + staff().TeamID + '/addeditteamstaff/' + staff().TeamStaffID);
                //window.location = 'teamstaff' + '/addedit/' + staff().TeamID + '/' + staff().TeamStaffID;
            },

            navigateToProfile = function () {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.staff + '/' + currentTeamStaffId();
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.staff + '/' + currentTeamStaffId());
                    }
                };
                return navigationItem;
            },

            memberIsTeamAdministrator = ko.computed(function () {
                return shell.currentMember.IsSportswikAdmin || typeof teamHeaderInfo() !== 'undefined' && teamHeaderInfo().MemberIsTeamAdministrator;
            });
      
        return {
            activate: activate,
            cleanup: cleanup,
            initialize: initialize,
            staff: staff,

            memberTexts: MemberTexts,

            canDeleteTeamStaff: canDeleteTeamStaff,
            acceptRequest: acceptRequest,
            denyRequest: denyRequest,
            removeTeamStaff: removeTeamStaff,
            navigateToEditTeamStaff: navigateToEditTeamStaff,
            navigateToProfile: navigateToProfile,
            memberIsTeamAdministrator: memberIsTeamAdministrator,
            teamHeaderInfo: teamHeaderInfo
        };
    });
;
define('viewmodels/vm.stream',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, shell, _) {

        var teamId = 0,
            clubId = 0,
            entityId = 0,
            domainType = '',
            voucherId = 0,
            selectedTeam = ko.observable(),
            showTeamSelectSection = ko.observable(false),
            canSelectTeam = ko.observable(false),
            streamModel = ko.observable(),
            generalListItem = ko.observable(),

            seasons = ko.observableArray(),
            genders = ko.observableArray(),
            clubTeams = ko.observableArray(),

            gameHeaderInfo = ko.observable(''),

            teamsIFollow = ko.observableArray(),
            myRoles = ko.observableArray(),
            subscriptions = ko.observableArray(),

            selectedGender = ko.observable(0),
            selectedSeason = ko.observable(),
            teamSearchString = ko.observable('-'),

            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();

                $('.stream-subview').hide();
                $('#stream-start').show();

                if (routeData.section !== undefined) {
                    domainType = routeData.section;
                }

                if (routeData.entityId !== undefined) {
                    entityId = routeData.entityId;
                }

                if (routeData.teamId !== undefined) {
                    teamId = routeData.teamId;
                }

                switch (domainType) {
                    case 'game':
                        {
                            datamanager.getStreamSubscriptionForGame(entityId, {
                                success: function (model) {
                                    teamsIFollow([]);
                                    myRoles([]);
                                    subscriptions([]);

                                    streamModel(model.InitStreamSubscription);

                                    canSelectTeam(model.InitStreamSubscription.CanSelectTeam);
                                    showTeamSelectSection(model.InitStreamSubscription.ShowTeamSelectSection);
                                    
                                    gameHeaderInfo(model.GameHeaderInfo);

                                    if (model.ListItem) {
                                        generalListItem(model.ListItem);
                                    } else {
                                        generalListItem('');
                                    }

                                    if (model.SelectedTeam) {
                                        selectedTeam(model.SelectedTeam);
                                        teamId = model.SelectedTeam.TeamID;
                                    }

                                    $('#phoneNumber').prop('disabled', model.HasUserGuardian);

                                    var underlayingSubscriptionArray = subscriptions();

                                    for (var k = 0; k < model.Subscriptions.length; k++) {
                                        underlayingSubscriptionArray.push(model.Subscriptions[k]);
                                    }

                                    subscriptions.valueHasMutated();

                                    $('#stream-view .main-preloader').hide();
                                    $('#stream-view .main-afterloaded').show();

                                    var underlayingArray = teamsIFollow();

                                    for (var i = 0; i < model.TeamsIFollow.length; i++) {
                                        underlayingArray.push(model.TeamsIFollow[i]);
                                    }

                                    teamsIFollow.valueHasMutated();

                                    // Ettan customization, move this to some property instead, this looks horrible...
                                    if (model.GameHeaderInfo.LeagueCategoryID == 46) {
                                        $('#teamsIFollowTitle').hide();
                                        $('#cantFindTeam').hide();

                                    } else {
                                        $('#teamsIFollowTitle').show();
                                        $('#cantFindTeam').show();
                                    }
                                },
                                error: function (error) {
                                    alert(error);
                                }
                            });
                        }
                        break;
                    case 'event':
                        datamanager.getStreamSubscriptionForEvent(entityId, {
                            success: function (model) {
                                teamsIFollow([]);
                                myRoles([]);
                                subscriptions([]);

                                streamModel(model.InitStreamSubscription);

                                // This is awful, really need to change this to something more dynamic
                                canSelectTeam(model.InitStreamSubscription.CanSelectTeam);
                                showTeamSelectSection(model.InitStreamSubscription.ShowTeamSelectSection);

                                if (model.ListItem) {
                                    generalListItem(model.ListItem);
                                } else {
                                    generalListItem('');
                                }                             

                                if (model.SelectedTeam) {
                                    selectedTeam(model.SelectedTeam);
                                    teamId = model.SelectedTeam.TeamID;
                                }

                                $('#phoneNumber').prop('disabled', model.HasUserGuardian);

                                var underlayingSubscriptionArray = subscriptions();

                                for (var k = 0; k < model.Subscriptions.length; k++) {
                                    underlayingSubscriptionArray.push(model.Subscriptions[k]);
                                }

                                subscriptions.valueHasMutated();

                                $('#stream-view .main-preloader').hide();
                                $('#stream-view .main-afterloaded').show();

                                var underlayingArray = teamsIFollow();

                                for (var i = 0; i < model.TeamsIFollow.length; i++) {
                                    underlayingArray.push(model.TeamsIFollow[i]);
                                }

                                teamsIFollow.valueHasMutated();

                                // Ettan customization, move this to some property instead, this looks horrible...
                                if (entityId == 27) {                                    
                                    $('#teamsIFollowTitle').hide();
                                    $('#cantFindTeam').hide();

                                } else {
                                    $('#teamsIFollowTitle').show();
                                    $('#cantFindTeam').show();
                                }
                            },
                            error: function (error) {
                                alert(error);
                            }
                        });
                        break;
                    case 'subscription':
                        datamanager.getStreamSubscription(entityId, {
                            success: function (model) {
                                teamsIFollow([]);
                                myRoles([]);
                                subscriptions([]);

                                streamModel(model.InitStreamSubscription);

                                canSelectTeam(model.InitStreamSubscription.CanSelectTeam);
                                showTeamSelectSection(model.InitStreamSubscription.ShowTeamSelectSection);

                                selectedTeam(model.SelectedTeam);                                
                                teamId = model.SelectedTeam.TeamID;

                                $('#phoneNumber').prop('disabled', model.HasUserGuardian);

                                var underlayingArray = teamsIFollow();

                                for (var i = 0; i < model.TeamsIFollow.length; i++) {
                                    underlayingArray.push(model.TeamsIFollow[i]);
                                }

                                teamsIFollow.valueHasMutated();

                                var underlayingArrayMyRoles = myRoles();

                                for (var j = 0; j < model.TeamRoles.length; j++) {
                                    underlayingArrayMyRoles.push(model.TeamRoles[j]);
                                }

                                myRoles.valueHasMutated();

                                var underlayingSubscriptionArray = subscriptions();

                                for (var k = 0; k < model.Subscriptions.length; k++) {
                                    underlayingSubscriptionArray.push(model.Subscriptions[k]);
                                }

                                subscriptions.valueHasMutated();

                                $('#stream-view .main-preloader').hide();
                                $('#stream-view .main-afterloaded').show();
                            },
                            error: function (error) {
                                alert(error);
                            }
                        });
                        break;

                }
            },

            cleanup = function () {
                teamId = 0;
                voucherId = 0;
                gameHeaderInfo('');
                subscriptions([])

                $('#voucherForm').hide();

                $('#stream-view .main-preloader').show();
                $('#stream-view .main-afterloaded').hide();
            },

            getClubTeams = function (clubId) {
                datamanager.initClubTeams(clubId, {
                    success: function (json) {
                        seasons([]);
                        clubTeams([]);

                        var underlayingArray = clubTeams;

                        for (var i = 0; i < json.Teams.length; i++) {
                            underlayingArray.push(json.Teams[i]);
                        }

                        clubTeams.valueHasMutated();

                        underlayingArray = genders();

                        for (var k = 0; k < json.Genders.length; k++) {
                            underlayingArray.push(json.Genders[k]);
                        }
                        genders.valueHasMutated();

                        if (genders().length > 1)
                            $('#streamClubGenderDefaultChoice').show();
                        else if (genders().length === 1) {
                            selectGender(genders()[0]);

                            $('#streamClubGenderDefaultChoice').hide();
                        }

                        underlayingArray = seasons;

                        for (var l = 0; l < json.Seasons.length; l++) {
                            underlayingArray.push(json.Seasons[l]);

                            if (json.Seasons[l].IsDefault) {
                                selectedSeason(json.Seasons[l].SeasonID);

                                $('#streamClubSeasonDropDownTitle').text(json.Seasons[l].SeasonName);
                            }
                        }

                        seasons.valueHasMutated();
                    },
                    error: function (json) {
                    }
                });
            },

            selectTeamClick = function (data) {
                selectedTeam(data);

                teamId = data.TeamID;

                $('.stream-subview').hide();
                $('#stream-start').show();

                $('html, body').animate({
                    scrollTop: $(".selectTeamBlock").offset().top - 60
                }, 0);
            },

            createPayment = function (data, event) {
                $('.validation-error').hide();

                if (teamId === 0) {
                    var r = confirm('Du har inte valt någon förening att stötta, vill du ändå genomföra köpet?');

                    if (r === false)
                        return;
                }

                // Get the SelectedTeamID
                // Get the phonenumber
                // Get the type of subscription

                var phoneNumber = $('#phoneNumber').val();
                //var subscriptionType = 0;
                var message = $('#swishErrorMessage').val();

                var subscriptionType = $('input[name=memberSubscriptionType]:checked').val();

                if (!subscriptionType) {
                    $('.validation-error.subscription').show();
                    $('.validation-error.subscription p').text(MiscTexts.YouMustSelectASubscription);

                    $('html, body').animate({
                        scrollTop: $(".subscriptionTypeBlock").offset().top - 60
                    }, 0);

                    return;
                }

                $(event.target).prop("disabled", true);

                $("#loading").fadeIn();
                $("#loadingSpinnerText").text(MiscTexts.CreatingPayment);

                datamanager.createSwishPayment(teamId, entityId, phoneNumber, subscriptionType, voucherId, message)
                    .then(function (json) {
                        if (json.Status === 1) { // CREATED
                            // Redirect to swish payment page
                            window.location.replace('/stream/payment');
                        }
                        else if (json.Status === 3) { // PAID
                            // Redirect to success page
                            window.location.replace('/stream/success/' + json.PaymentID);
                        }
                        else {
                            $(event.target).prop("disabled", false);

                            $('.validation-error.summary').show();
                            $('.validation-error.summary p').text(json.Message);

                            $("#loading").fadeOut();
                        }
                    })
                    .fail(function (error) {
                        $("#loading").fadeOut();

                        $(event.target).prop("disabled", false);

                        alert(error.responseText);
                    });
            },

            createStripePayment = function (data, event) {
                $('.validation-error').hide();

                var subscriptionType = $('input[name=memberSubscriptionType]:checked').val();

                if (!subscriptionType) {
                    $('.validation-error.subscription').show();
                    $('.validation-error.subscription p').text(MiscTexts.YouMustSelectASubscription);

                    $('html, body').animate({
                        scrollTop: $(".subscriptionTypeBlock").offset().top - 60
                    }, 0);

                    return;
                }

                $(event.target).prop("disabled", true);

                $("#loading").fadeIn();
                $("#loadingSpinnerText").text(MiscTexts.CreatingPayment);

                datamanager.createStripePayment(teamId, entityId, domainType, subscriptionType, voucherId)
                    .then(function (json) {
                        if (json.Status === 1) { // CREATED
                            // Redirect to swish payment page
                            window.location.replace(json.URL);
                        }
                        else if (json.Status === 3) { // PAID
                            // Redirect to success page
                            window.location.replace('/stream/successpayment/' + json.PaymentID);
                        }
                        else {
                            $(event.target).prop("disabled", false);

                            $('.validation-error.summary').show();
                            $('.validation-error.summary p').text(json.Message);

                            $("#loading").fadeOut();
                        }
                    })
                    .fail(function (error) {
                        $("#loading").fadeOut();

                        $(event.target).prop("disabled", false);

                        alert(error.responseText);
                    });
            },

            selectGender = function (item) {
                selectedGender(item.GenderID);

                switch (item.GenderID) {
                    case 1:
                        $('#streamClubGenderDropDownTitle').text(MemberTexts.Gender);
                        break;
                    case 2:
                    case 3:
                        $('#streamClubGenderDropDownTitle').text(item.Name);
                        break;
                }
            },

            selectSeason = function (item) {
                selectedSeason(item.SeasonID);

                $('#streamClubSeasonDropDownTitle').text(item.SeasonName);

                datamanager.getTeamsForClub(clubId, item.SeasonID, {
                    success: function (json) {
                        clubTeams([]);

                        var underlayingArray = clubTeams;

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        clubTeams.valueHasMutated();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            searchTeams = function () {
                teamSearchString($('#streamTeamSearchField').val());

                if (teamSearchString().length === 0)
                    teamSearchString('-');
            },

            searchTeamsKeyDown = function (data, event) {
                if (event.keyCode === 13) {
                    searchTeams();
                }
            },

            showVoucherForm = function () {
                $('#voucherForm').toggle();
            },

            onKeyPressAllowAlphanumeric = function (data, event) {
                var regex = new RegExp("^[a-zA-Z0-9]+$");
                var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);

                if (!regex.test(key)) {
                    event.preventDefault();
                    return false;
                }

                return true;
            },

            memberSubscriptionTypeChanged = function (data) {
                showTeamSelectSection(data.CanSelectTeam);     
                canSelectTeam(data.CanSelectTeam);

                return true;
            },

            onVoucherKeyUp = function (data, event) {                
                var voucherCode = $(event.target).val();

                if (voucherCode.length > 5) {
                    datamanager.getLiveStreamVoucher(entityId, voucherCode, {
                        success: function (model) {
                            if (model.IsValid) {
                                $(event.target).addClass('greatSuccess');

                                var subscriptionType = $('input[name=memberSubscriptionType]:checked').val();

                                if (subscriptionType) {                                    
                                    var selectedSubscription = ko.utils.arrayFirst(subscriptions(), function (s) {
                                        return s.LiveStreamSubscriptionID === Number(subscriptionType);
                                    });
                                    
                                    var newPrice = selectedSubscription.Price - model.Amount;

                                    if (newPrice < 0) {
                                        $('#voucherInformationText').text(MemberTexts.VoucherIsMoreThanPurchasePrice);
                                        $('#voucherInformationText').show();
                                    }
                                    else if (newPrice > 0) {
                                        $('#voucherInformationText').text(string.format("{0}{1} {2}", MemberTexts.YourNewPriceIfYouUseTheVoucherIs, newPrice, MiscTexts.DefaultCurrencyShortname));
                                        $('#voucherInformationText').show();
                                    }      

                                    voucherId = model.ID;
                                }
                            } else {
                                $(event.target).addClass('noSuccess');

                                if (model.ErrorMessage) {
                                    $('#voucherInformationText').text(model.ErrorMessage);
                                    $('#voucherInformationText').show();
                                }
                                else {
                                    $('#voucherInformationText').hide();
                                }
                                
                                voucherId = 0;
                            }
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                } else {
                    $(event.target).removeClass('greatSuccess');
                    $(event.target).removeClass('noSuccess');
                    $('#voucherInformationText').hide();
                    voucherId = 0;
                }              
            },

            onKeyPressAllowNumericAndSpace = function (d, e) {
                return e.metaKey || e.which <= 0 || e.which === 8 || e.which === 32 || /[0-9]/.test(String.fromCharCode(e.which));
            },

            clubTeamsFiltered = ko.computed(function () {
                return ko.utils.arrayFilter(clubTeams(), function (item) {
                    var match = false;

                    if (selectedGender() === 0)
                        match = true;
                    else {
                        match = item.GenderID === selectedGender();

                        // If the gender is selected and doesn't match, we can return here
                        if (!match)
                            return false;
                    }

                    if (teamSearchString() !== '-') {
                        var s = teamSearchString().toLowerCase().replace(" ", "");

                        // Search the team name
                        match = item.TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1;

                        // Search the team alias if it is set
                        if (item.TeamAlias.toLowerCase().replace(" ", "").indexOf(s) !== -1)
                            match = true;

                        for (var i = 0; i < item.TeamStaffForClubTeamView.length; i++) {
                            // Search TeamStaff for the name
                            if (item.TeamStaffForClubTeamView[i].FullName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }

                        for (var j = 0; j < item.Leagues.length; j++) {
                            // Search Leagues for the TeamName
                            if (item.Leagues[j].TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }

                            // Search Leagues for the LeagueName
                            if (item.Leagues[j].LeagueName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }
                    }

                    return match;
                });
            }),

            clearSelectedGender = function () {
                selectedGender(0);

                $('#streamClubGenderDropDownTitle').text('Kön');
            },

            navigateToStart = function () {
                $('.stream-subview').hide();
                $('#stream-start').show();
            },

            navigateToSearchClub = function () {
                $('.stream-subview').hide();
                $('#stream-clubs').show();

                window.scrollTo(0, 0);
            },

            navigateToClubTeams = function () {
                $('.stream-subview').hide();
                $('#stream-selectteam').show();
                
                getClubTeams(clubId);

                window.scrollTo(0, 0);
            },

            navigateToSelectTeam = function() {
                $('.stream-subview').hide();
                $('#stream-teams').show();

                window.scrollTo(0, 0);
            },

            init = function () {
                var templ = Hogan.compile([
                    '<div class="{{isActiveCss}}">',
                    '<div class="teamLogo imageMaskContain" style="background-image:url({{LogoURL}})"></div>',
                    '<div>',
                    '<h5>{{Title}}</h5>',
                    '<h4>{{Subtitle}}</h4>',
                    '<h4>{{Description}}</h4>',
                    '</div>',
                    '</div>'
                ].join(''));

                searchteams = new Bloodhound({
                    datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Name'),
                    queryTokenizer: Bloodhound.tokenizers.whitespace,
                    remote:
                    {
                        url: '/api/searchapi/searchclubs?searchstring=%QUERY',
                        ajax: {
                            beforeSend: function (xhr) {
                                $(".searchSpinner").fadeIn();                                    
                            }
                        },
                        filter: function (parsedResponse) {
                            $(".searchSpinner").fadeOut();

                            var dataset = [];

                            for (i = 0; i < parsedResponse.length; i++) {
                                parsedResponse[i].searchterm = parsedResponse[i].Name;
                                dataset.push(parsedResponse[i]);
                            }

                            return dataset;
                        }
                    },
                    valueKey: 'searchterm',
                    limit: 10
                });

                searchteams.initialize();

                teamSearch = $('#clubstreamsearch').typeahead(null,
                    {
                        name: 'teams-searchview',
                        displayKey: 'Name',
                        source: searchteams.ttAdapter(),
                        templates: {
                            
                            suggestion: function (data) {
                                return templ.render(data);
                            }
                        }
                    });

                // Event handler for search selected team
                teamSearch.on('typeahead:selected', function (evt, data) {
                    //clubId = data.ClubID;
                    clubId = data.EntityID;

                    navigateToClubTeams();
                });
            };

        init();

        return {
            activate: activate,
            cleanup: cleanup,

            teamsIFollow: teamsIFollow,
            myRoles: myRoles,
            subscriptions: subscriptions,
            showTeamSelectSection: showTeamSelectSection,
            canSelectTeam: canSelectTeam,
            selectedTeam: selectedTeam,
            gameHeaderInfo: gameHeaderInfo,            
            seasons: seasons,
            genders: genders,
            clubTeamsFiltered: clubTeamsFiltered,
            selectGender: selectGender,
            selectSeason: selectSeason,
            searchTeams: searchTeams,
            searchTeamsKeyDown: searchTeamsKeyDown,            
            clearSelectedGender: clearSelectedGender,

            streamModel: streamModel,
            generalListItem: generalListItem,

            onVoucherKeyUp: onVoucherKeyUp,
            onKeyPressAllowAlphanumeric: onKeyPressAllowAlphanumeric,
            onKeyPressAllowNumericAndSpace: onKeyPressAllowNumericAndSpace,
            memberSubscriptionTypeChanged: memberSubscriptionTypeChanged,

            showVoucherForm: showVoucherForm,                        

            selectTeamClick: selectTeamClick,
            createPayment: createPayment,
            createStripePayment: createStripePayment,
            navigateToStart: navigateToStart,
            navigateToSelectTeam: navigateToSelectTeam,
            navigateToSearchClub: navigateToSearchClub,
            navigateToClubTeams: navigateToClubTeams
        };
    });;
define('viewmodels/vm.systemadministrators',
    ['jquery', 'config', 'router', 'ko', 'messenger', 'viewmodels/vm.shell', 'datamanager', 'underscore'],
    function ($, config, router, ko, messenger, shell, datamanager, _) {

        var members = ko.observableArray(),
            foundMembers = ko.observableArray(),

            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();

                $('.systemadministrators-subview').hide();
                $('#systemadministrators-members').show();

                if (members().length === 0)
                    getSystemAdministrators();
            },

            getSystemAdministrators = function () {
                shell.showProgressIndicator(MiscTexts.GettingData);

                datamanager.getSystemAdministrators({
                    success: function (json) {
                        shell.hideProgressIndicator();

                        members([]);

                        var underlayingArray = members();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        members.valueHasMutated();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            insertSystemAdministrator = function (data) {
                var r = confirm("Vill du lägga till " + data.FullName + ' som administratör?');

                if (r === true) {                    
                    datamanager.insertSystemAdministrator(data.MemberID, {
                        success: function () {
                            $('.systemadministrators-subview').hide();
                            $('#systemadministrators-members').show();

                            foundMembers([]);

                            getSystemAdministrators();
                            $('#searchForAdminMemberText').val('');
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }                
            },

            deleteSystemAdministrator = function (data) {
                var r = confirm("Är du säker på att du vill ta bort denna administratör?");

                if (r === true) {
                    datamanager.deleteSystemAdministrator(data.SystemAdministratorID, {
                        success: function (json) {
                            getSystemAdministrators();

                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            searchMembers = function () {
                var searchText = $('#searchForAdminMemberText').val();

                if (searchText.length < 3)
                    return;

                shell.showProgressIndicator(MiscTexts.Searching);

                datamanager.adminSearchMember(searchText)
                    .then(function (json) {
                        shell.hideProgressIndicator();

                        foundMembers([]);

                        var underlayingArray = foundMembers();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        foundMembers.valueHasMutated();
                    })
                    .fail(function (error) {
                        alert(error.responseText);
                    });
            },

            onKeyPress = function (d, e) {
                if (e.which === 13)
                    searchMembers();

                return true;
            },

            navigateToAdministratorList = function () {
                $('.systemadministrators-subview').hide();
                $('#systemadministrators-members').show();
            },

            navigateToAddAdministrator = function () {
                $('.systemadministrators-subview').hide();
                $('#systemadministrators-addmember').show();
            },

            navigateToMember = function (data) {
                router.navigateTo(config.hashes.adminmember + '/' + data.MemberID);
            },

            cleanup = function () {
            };

        return {
            activate: activate,
            cleanup: cleanup,

            members: members,
            foundMembers: foundMembers,

            deleteSystemAdministrator: deleteSystemAdministrator,
            insertSystemAdministrator: insertSystemAdministrator,
            
            searchMembers: searchMembers,
            onKeyPress: onKeyPress,

            navigateToAdministratorList: navigateToAdministratorList,
            navigateToAddAdministrator: navigateToAddAdministrator,
            navigateToMember: navigateToMember
        };
    });;
define('viewmodels/vm.targetfilter',
    ['ko', 'router', 'presenter', 'messenger', 'datamanager', 'models/viewmodel', 'viewmodels/vm.shell', 'underscore'],
    function (ko, router, presenter, messenger, datamanager, viewmodel, shell, _) {
        var previousTab = 'start',

            targetFilterString = ko.observable(InfoItemTexts.FilterAll),
            targetFilterId = 0,

            targetFilterLoaded = false,
            targetFilterData = null,

            targetFilterFilterTypes = ko.observableArray(),
            targetFilterLeagueOrganizers = ko.observableArray(),
            targetFilterGenders = ko.observableArray(),
            targetFilterAgeCategories = ko.observableArray(),
            targetFilterLeagues = ko.observableArray(),

            currentFilterLeagues = ko.observableArray(),
            currentFilterGames = ko.observableArray(),
            currentFilterClubs = ko.observableArray(),
            currentFilterLeagueCategories = ko.observableArray(),
            currentFilterSpecialLeagueCategories = ko.observableArray(),

            leagueCategoriesLoaded = false,
            leaguesLoaded = false,
            gamesLoaded = false,
            clubsLoaded = false,

            isInternational = false,

            previouslySelectedItems = [],

            callbackMethod,

            activate = function (id, callback) {
                cleanUpView();

                targetFilterId = id;

                callbackMethod = callback;

                $('#targetfilter-view').show();
                $('#targetfilter-view .fade-overlay').addClass('active');

                datamanager.initTargetFilterForPartnerEditView(targetFilterId, {
                    success: function (json) {
                        console.log(json);

                        targetFilterFilterTypes([]);

                        var underlayingArray = targetFilterFilterTypes();

                        for (var i = 0; i < json.TargetFilterFilterTypes.length; i++) {
                            underlayingArray.push(json.TargetFilterFilterTypes[i]);
                        }

                        targetFilterFilterTypes.valueHasMutated();

                        if (json.TargetFilterData) {
                            targetFilterData = json.TargetFilterData;

                            parseTargetFilterData(json.TargetFilterData);
                        }

                    },
                    error: function (error) {
                        console.log(error);
                    }
                });

                showTabHelper('start');
            },

            cleanUpView = function () {
                targetFilterId = 0;
                targetFilterLoaded = false;
                leagueCategoriesLoaded = false;
                leaguesLoaded = false;
                gamesLoaded = false;
                clubsLoaded = false;

                isInternational = false;

                targetFilterFilterTypes([]);

                currentFilterLeagues([]);
                currentFilterGames([]);
                currentFilterClubs([]);
                currentFilterLeagueCategories([]);
                currentFilterSpecialLeagueCategories([]);

                resetTargetFilters();
            },

            closeFilterTargetDialog = function () {
                $('#targetfilter-view').hide();
                $('#targetfilter-view .fade-overlay').removeClass('active');

                if (callbackMethod)
                    callbackMethod(targetFilterId);
            },

            parseTargetFilterData = function (data) {                
                for (var i = 0; i < data.TargetFilterTypeData.length; i++) {
                    if (data.TargetFilterTypeData[i].TargetFilterTypeValues.length > 0) {
                        if (data.TargetFilterTypeData[i].TargetFilterTypeID === 13) {
                            if (data.TargetFilterTypeData[i].TargetFilterTypeValues[0] === 0) {
                                $('#targetfilter-type-13 .filterText').text('Nej');
                                isInternational = false;
                            }
                            else {
                                $('#targetfilter-type-13 .filterText').text('Ja');
                                isInternational = true;
                            }
                        }
                        else {
                            // Find the correct span-tag based on the ID
                            var item = $('#targetfilter-type-' + data.TargetFilterTypeData[i].TargetFilterTypeID + ' .filterText');

                            // Set the text to the amount of selected items
                            item.text(data.TargetFilterTypeData[i].TargetFilterTypeValues.length);
                        }

                        // If the data is league, add the data to a list
                        if (data.TargetFilterTypeData[i].TargetFilterTypeID === 4) {
                            for (var j = 0; j < data.TargetFilterTypeData[i].TargetFilterTypeValues.length; j++) {
                                var newLeagueItem = new viewmodel.NameValue();

                                newLeagueItem.Name('');
                                newLeagueItem.Value(data.TargetFilterTypeData[i].TargetFilterTypeValues[j]);

                                currentFilterLeagues.push(newLeagueItem);
                            }
                        } else if (data.TargetFilterTypeData[i].TargetFilterTypeID === 14) {
                            for (var k = 0; k < data.TargetFilterTypeData[i].TargetFilterTypeValues.length; k++) {
                                var newGameItem = new viewmodel.NameValue();

                                newGameItem.Name('');
                                newGameItem.Value(data.TargetFilterTypeData[i].TargetFilterTypeValues[k]);

                                currentFilterGames.push(newGameItem);
                            }                        
                        } else if (data.TargetFilterTypeData[i].TargetFilterTypeID === 3) {
                            for (var l = 0; l < data.TargetFilterTypeData[i].TargetFilterTypeValues.length; l++) {
                                var newLeagueCategoryItem = new viewmodel.NameValue();

                                newLeagueCategoryItem.Name('');
                                newLeagueCategoryItem.Value(data.TargetFilterTypeData[i].TargetFilterTypeValues[l]);

                                currentFilterLeagueCategories.push(newLeagueCategoryItem);
                            }
                        } else if (data.TargetFilterTypeData[i].TargetFilterTypeID === 15) {
                            for (var m = 0; m < data.TargetFilterTypeData[i].TargetFilterTypeValues.length; m++) {
                                currentFilterSpecialLeagueCategories.push(data.TargetFilterTypeData[i].TargetFilterTypeValues[m]);
                            }
                        } else if (data.TargetFilterTypeData[i].TargetFilterTypeID === 16) {
                            for (var n = 0; n < data.TargetFilterTypeData[i].TargetFilterTypeValues.length; n++) {
                                var newClubItem = new viewmodel.NameValue();

                                newClubItem.Name('');
                                newClubItem.Value(data.TargetFilterTypeData[i].TargetFilterTypeValues[n]);

                                currentFilterClubs.push(newClubItem);
                            }
                        }
                    }
                }
            },

            generateTargetFilterFilter = function () {
                var filter = new viewmodel.TargetFilterFilterData()
                    .TargetFilterID(targetFilterId)
                    .TargetFilterEntityID(0)
                    .InfoItemID(0)
                    .InfoItemType(0);

                var leagueOrganizerFilterType = leagueOrganizerFilterType = new viewmodel.TargetFilterFilterTypeData()
                    .TargetFilterFilterTypeID(2);

                filter.TargetFilterFilterTypeData.push(leagueOrganizerFilterType);

                $('#targetfilter-leagueorganizerfilter .targetFilterLeagueOrganizerList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    leagueOrganizerFilterType.TargetFilterFilterTypeValues.push(data.TargetFilterTypeValueID);
                });

                // If the tab is not yet loaded and we have previously saved data, load that instead
                if (targetFilterLeagueOrganizers().length === 0 && targetFilterData !== null) {
                    loadDefaultData(leagueOrganizerFilterType, 2);
                }

                /*************** AGE CATEGORY ****************/
                var ageCategoryFilterType = new viewmodel.TargetFilterFilterTypeData()
                    .TargetFilterFilterTypeID(11);

                filter.TargetFilterFilterTypeData.push(ageCategoryFilterType);

                $('#targetfilter-agecategoryfilter .targetFilterAgeCategoryList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    ageCategoryFilterType.TargetFilterFilterTypeValues.push(data.TargetFilterTypeValueID);
                });

                if (targetFilterAgeCategories().length === 0 && targetFilterData !== null) {
                    loadDefaultData(ageCategoryFilterType, 11);
                }

                /*************** GENDER ****************/
                var genderFilterType = new viewmodel.TargetFilterFilterTypeData()
                    .TargetFilterFilterTypeID(12);

                filter.TargetFilterFilterTypeData.push(genderFilterType);

                $('#targetfilter-genderfilter .targetFilterGenderList li.checked').not('.selectAll').each(function (key, value) {
                    var data = ko.contextFor(value).$data;

                    genderFilterType.TargetFilterFilterTypeValues.push(data.TargetFilterTypeValueID);
                });

                if (targetFilterGenders().length === 0 && targetFilterData !== null) {
                    loadDefaultData(genderFilterType, 12);
                }

                /*************** INTERNATIONAL ****************/
                var internationalFilterType = new viewmodel.TargetFilterFilterTypeData()
                    .TargetFilterFilterTypeID(13);

                filter.TargetFilterFilterTypeData.push(internationalFilterType);

                internationalFilterType.TargetFilterFilterTypeValues.push(isInternational);


                /*************** LEAGUE ****************/
                var leagueFilterType = new viewmodel.TargetFilterFilterTypeData()
                    .TargetFilterFilterTypeID(4);

                filter.TargetFilterFilterTypeData.push(leagueFilterType);

                ko.utils.arrayForEach(currentFilterLeagues(), function (item) {
                    leagueFilterType.TargetFilterFilterTypeValues.push(item.Value);
                });

                /*************** GAMES ****************/
                var gameFilterType = new viewmodel.TargetFilterFilterTypeData()
                    .TargetFilterFilterTypeID(14);

                filter.TargetFilterFilterTypeData.push(gameFilterType);

                ko.utils.arrayForEach(currentFilterGames(), function (item) {
                    gameFilterType.TargetFilterFilterTypeValues.push(item.Value);
                });

                /*************** CLUBS ****************/
                var clubFilterType = new viewmodel.TargetFilterFilterTypeData()
                    .TargetFilterFilterTypeID(16);

                filter.TargetFilterFilterTypeData.push(clubFilterType);

                ko.utils.arrayForEach(currentFilterClubs(), function (item) {
                    clubFilterType.TargetFilterFilterTypeValues.push(item.Value);
                });

                /*************** LEAGUECATEGORIES ****************/
                var leagueCategoryFilterType = new viewmodel.TargetFilterFilterTypeData()
                    .TargetFilterFilterTypeID(3);

                filter.TargetFilterFilterTypeData.push(leagueCategoryFilterType);

                ko.utils.arrayForEach(currentFilterLeagueCategories(), function (item) {
                    leagueCategoryFilterType.TargetFilterFilterTypeValues.push(item.Value);
                });

                /*************** SPECIAL LEAGUECATEGORIES ****************/
                var specialLeagueCategoryFilterType = new viewmodel.TargetFilterFilterTypeData()
                    .TargetFilterFilterTypeID(15);

                filter.TargetFilterFilterTypeData.push(specialLeagueCategoryFilterType);

                ko.utils.arrayForEach(currentFilterSpecialLeagueCategories(), function (item) {
                    specialLeagueCategoryFilterType.TargetFilterFilterTypeValues.push(item);
                });

                return filter;
            },

            loadDefaultData = function (filterType, tagetFilterTypeId) {
                const items = targetFilterData.TargetFilterTypeData.filter(w => w.TargetFilterTypeID === tagetFilterTypeId);

                if (items.length > 0 && items[0].TargetFilterTypeValues.length > 0) {
                    items[0].TargetFilterTypeValues.forEach(function (item) {
                        filterType.TargetFilterFilterTypeValues.push(item);
                    });
                }
            },

            resetTargetFilters = function () {
                targetFilterString(InfoItemTexts.FilterAll);

                targetFilterLeagueOrganizers([]);
                targetFilterGenders([]);
                targetFilterAgeCategories([]);
                targetFilterLeagues([]);

                targetFilterData = null;
            },

            backToHome = function () {
                showTabHelper('start');
            },

            navigateBack = function () {
                showTabHelper(previousTab);
            },

            navigateBackFromTargetFilter = function (type) {
                showTabHelper(previousTab);
            },

            toggleInternational = function (data, event) {
                if (isInternational) {
                    $('#targetfilter-type-13 .filterText').text('Nej');
                    isInternational = false;
                } else {
                    $('#targetfilter-type-13 .filterText').text('Ja');
                    isInternational = true;
                }
            },

            saveTargetFilter = function () {
                var targetFilterDataString = ko.toJS(generateTargetFilterFilter());

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.insertTargetFilterForPartner(targetFilterDataString)
                    .then(function (json) {
                        targetFilterId = Number(json.TargetFilterID);

                        shell.hideProgressIndicator();

                        previousTab = 'start';
                        showTabHelper(previousTab);

                        closeFilterTargetDialog();
                    })
                    .fail(function (error) {
                        console.log(error);

                        shell.hideProgressIndicator();

                        alert('Error');
                    });
            },

            showFilterType = function (data) {
                previousTab = 'start';

                switch (data.TargetFilterFilterTypeID) {
                    case 2: // LeagueOrganizer
                        if (targetFilterLeagueOrganizers().length === 0) {
                            datamanager.initTargetFilterForFilterType(data.TargetFilterFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = targetFilterLeagueOrganizers();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    targetFilterLeagueOrganizers.valueHasMutated();

                                    setSavedTargetFilterValues("targetFilterLeagueOrganizerList", data.TargetFilterFilterTypeID);
                                    setPreviouslyCheckedValues("targetFilterLeagueOrganizerList");
                                    showTabHelper('leagueorganizerfilter');
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        } else {
                            setPreviouslyCheckedValues("targetFilterLeagueOrganizerList");
                            showTabHelper('leagueorganizerfilter');
                        }

                        break;
                    case 3: // LeagueCategory           
                        if (targetFilterId > 1 && leagueCategoriesLoaded === false) {
                            datamanager.initTargetFilterNameValues(targetFilterId, data.TargetFilterFilterTypeID, {
                                success: function (json) {
                                    ko.utils.arrayForEach(currentFilterLeagueCategories(), function (item) {
                                        var found = json.find(function (element) {
                                            return element.Value === ko.toJS(item.Value);
                                        });

                                        if (found)
                                            item.Name(found.Name);
                                    });

                                    leagueCategoriesLoaded = true;
                                    showTabHelper('leaguecategoryfilter');
                                },
                                error: function (error) {
                                    console.log(error);

                                    showTabHelper('leaguecategoryfilter');
                                }
                            });
                        } else {
                            showTabHelper('leaguecategoryfilter');
                        }
                        
                        break;
                    case 4: // League                       
                        if (targetFilterId > 1 && leaguesLoaded === false) {
                            datamanager.initTargetFilterNameValues(targetFilterId, data.TargetFilterFilterTypeID, {
                                success: function (json) {
                                    ko.utils.arrayForEach(currentFilterLeagues(), function (item) {
                                        var found = json.find(function (element) {
                                            return element.Value === ko.toJS(item.Value);
                                        });

                                        if (found)
                                            item.Name(found.Name);
                                    });

                                    leaguesLoaded = true;
                                    showTabHelper('leaguefilter');
                                },
                                error: function (error) {
                                    console.log(error);

                                    showTabHelper('leaguefilter');
                                }
                            });
                        } else {
                            showTabHelper('leaguefilter');
                        }                        
                        
                        break;
                    case 11: // AgeCategory                        
                        if (targetFilterAgeCategories().length === 0) {
                            datamanager.initTargetFilterForFilterType(data.TargetFilterFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = targetFilterAgeCategories();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    targetFilterAgeCategories.valueHasMutated();

                                    setSavedTargetFilterValues("targetFilterAgeCategoryList", data.TargetFilterFilterTypeID);
                                    setPreviouslyCheckedValues("targetFilterAgeCategoryList");
                                    showTabHelper('agecategoryfilter');
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        } else {
                            setPreviouslyCheckedValues("targetFilterAgeCategoryList");
                            showTabHelper('agecategoryfilter');
                        }
                        break;
                    case 12: // Gender
                        if (targetFilterGenders().length === 0) {
                            datamanager.initTargetFilterForFilterType(data.TargetFilterFilterTypeID, {
                                success: function (json) {
                                    var underlayingArray = targetFilterGenders();

                                    for (var i = 0; i < json.length; i++) {
                                        underlayingArray.push(json[i]);
                                    }

                                    targetFilterGenders.valueHasMutated();

                                    setSavedTargetFilterValues("targetFilterGenderList", data.TargetFilterFilterTypeID);
                                    setPreviouslyCheckedValues("targetFilterGenderList");
                                    showTabHelper('genderfilter');
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        } else {
                            setPreviouslyCheckedValues("targetFilterGenderList");
                            showTabHelper('genderfilter');
                        }
                        break;
                    case 13: // International
                        alert('International är inte implementerat än');
                        break;
                    case 14: // Game
                        {
                            if (targetFilterId > 1 && gamesLoaded === false) {
                                datamanager.initTargetFilterNameValues(targetFilterId, data.TargetFilterFilterTypeID, {
                                    success: function (json) {
                                        console.log(json);

                                        ko.utils.arrayForEach(currentFilterGames(), function (item) {
                                            var found = json.find(function (element) {
                                                return element.Value === ko.toJS(item.Value);
                                            });

                                            if (found)
                                                item.Name(found.Name);
                                        });

                                        gamesLoaded = true;
                                        showTabHelper('gamefilter');
                                    },
                                    error: function (error) {
                                        console.log(error);

                                        showTabHelper('gamefilter');
                                    }
                                });
                            } else {
                                showTabHelper('gamefilter');
                            }
                        }
                        
                        break;
                    case 15: // Special LeagueCategory
                        showTabHelper('specialleaguecategoryfilter');
                        break;
                    case 16:
                        {
                            if (targetFilterId > 1 && clubsLoaded === false) {
                                datamanager.initTargetFilterNameValues(targetFilterId, data.TargetFilterFilterTypeID, {
                                    success: function (json) {
                                        console.log(json);

                                        ko.utils.arrayForEach(currentFilterClubs(), function (item) {
                                            var found = json.find(function (element) {
                                                return element.Value === ko.toJS(item.Value);
                                            });

                                            if (found)
                                                item.Name(found.Name);
                                        });

                                        clubsLoaded = true;
                                        showTabHelper('clubfilter');
                                    },
                                    error: function (error) {
                                        console.log(error);

                                        showTabHelper('clubfilter');
                                    }
                                });
                            } else {
                                showTabHelper('clubfilter');
                            }
                        }
                        break;
                }
            },

            selectAll = function (listClass, id, data, event) {
                $("#targetfilter-view " + listClass + " li").removeClass('checked');
                $(event.target).closest('li').addClass('checked');

                $('#targetfilter-type-' + id + ' .filterText').text(InfoItemTexts.FilterAll);
            },

            selectItem = function (listClass, id, data, event) {
                $("#targetfilter-view " + listClass + " li.selectAll").removeClass('checked');
                $(event.target).closest('li').toggleClass('checked');

                if (!$("#targetfilter-view " + listClass + " li.checked").length) {
                    $("#targetfilter-view " + listClass + " li.selectAll").addClass('checked');

                    $('#targetfilter-type-' + id + ' .filterText').text(InfoItemTexts.FilterAll);
                }
                else {
                    $('#targetfilter-type-' + id + ' .filterText').text($(listClass + " li.checked").size());
                }
            },

            setPreviouslyCheckedValues = function (listname) {
                previouslySelectedItems = [];

                $("#targetfilter-view ." + listname + " li.checked").not('.selectAll').each(function (key, value) {
                    previouslySelectedItems.push(ko.contextFor(value).$data.TargetFilterTypeValueID);
                });
            },

            setSavedTargetFilterValues = function (listname, targetFilterTypeID) {
                if (targetFilterData !== null) {
                    const items = targetFilterData.TargetFilterTypeData.filter(w => w.TargetFilterTypeID === targetFilterTypeID);

                    if (items.length > 0 && items[0].TargetFilterTypeValues.length > 0) {
                        $("#targetfilter-view ." + listname + " li.selectAll").removeClass('checked');

                        items[0].TargetFilterTypeValues.forEach(function (item) {
                            $("#targetfilter-view ." + listname + " li").not('.selectAll').each(function (key, value) {
                                var data = ko.contextFor(value).$data;

                                if (Number(data.TargetFilterTypeValueID) === Number(item)) {
                                    $(this).addClass('checked');

                                    return false;
                                }
                            });
                        });
                    }
                }
            },

            addLeague = function () {
                var value = $('#targetFilterLeagueID').val();

                if (value.length === 0 || !Number(value))
                    return;

                var existingItem = ko.utils.arrayFirst(currentFilterLeagues(), function (item) {
                    return Number(value) === Number(ko.toJS(item.Value));
                });

                if (existingItem) {
                    alert('Den serien är redan inlagd');
                    return;
                }
                    
                datamanager.getTargetFilterLeagueName(value, {
                    success: function (json) {
                        var newItem = new viewmodel.NameValue();

                        newItem.Name(json);
                        newItem.Value(value);

                        currentFilterLeagues.push(newItem);

                        console.log(ko.toJS(currentFilterLeagues));

                        $('#targetFilterLeagueID').val('');
                        $('#targetfilter-type-4 .filterText').text(currentFilterLeagues().length);
                    },
                    error: function () {
                        alert('Serien existerar inte');
                    }
                });
            },

            removeLeague = function (data) {
                var existingItem = ko.utils.arrayFirst(currentFilterLeagues(), function (item) {
                    return data === item;
                });                

                currentFilterLeagues.remove(existingItem);

                if (currentFilterLeagues().length === 0)
                    $('#targetfilter-type-4 .filterText').text(InfoItemTexts.FilterAll);
                else
                    $('#targetfilter-type-4 .filterText').text(currentFilterLeagues().length);

                console.log(ko.toJS(currentFilterLeagues));
            },

            addGame = function () {
                var value = $('#targetFilterGameID').val();

                if (value.length === 0 || !Number(value))
                    return;

                var existingItem = ko.utils.arrayFirst(currentFilterGames(), function (item) {
                    return Number(value) === Number(ko.toJS(item.Value));
                });

                if (existingItem) {
                    alert('Den matchen är redan inlagd');
                    return;
                }

                datamanager.getTargetFilterGameName(value, {
                    success: function (json) {
                        var newItem = new viewmodel.NameValue();

                        newItem.Name(json);
                        newItem.Value(value);

                        currentFilterGames.push(newItem);
                        
                        $('#targetFilterGameID').val('');
                        $('#targetfilter-type-14 .filterText').text(currentFilterGames().length);
                    },
                    error: function () {
                        alert('Matchen existerar inte');
                    }
                });
            },

            removeGame = function (data) {
                var existingItem = ko.utils.arrayFirst(currentFilterGames(), function (item) {
                    return data === item;
                });

                currentFilterGames.remove(existingItem);

                if (currentFilterGames().length === 0)
                    $('#targetfilter-type-14 .filterText').text(InfoItemTexts.FilterAll);
                else
                    $('#targetfilter-type-14 .filterText').text(currentFilterGames().length);
            },

            addClub = function () {
                var value = $('#targetFilterClubID').val();

                if (value.length === 0 || !Number(value))
                    return;

                var existingItem = ko.utils.arrayFirst(currentFilterClubs(), function (item) {
                    return Number(value) === Number(ko.toJS(item.Value));
                });

                if (existingItem) {
                    alert('Den klubben är redan inlagd');
                    return;
                }

                datamanager.getTargetFilterClubName(value, {
                    success: function (json) {
                        var newItem = new viewmodel.NameValue();

                        newItem.Name(json);
                        newItem.Value(value);

                        currentFilterClubs.push(newItem);

                        $('#targetFilterClubID').val('');
                        $('#targetfilter-type-16 .filterText').text(currentFilterClubs().length);
                    },
                    error: function () {
                        alert('Klubben existerar inte');
                    }
                });
            },

            removeClub = function (data) {
                var existingItem = ko.utils.arrayFirst(currentFilterClubs(), function (item) {
                    return data === item;
                });

                currentFilterClubs.remove(existingItem);

                if (currentFilterClubs().length === 0)
                    $('#targetfilter-type-16 .filterText').text(InfoItemTexts.FilterAll);
                else
                    $('#targetfilter-type-16 .filterText').text(currentFilterClubs().length);
            },

            addLeagueCategory = function () {
                var value = $('#targetFilterLeagueCategoryID').val();
                
                if (value.length === 0 || !Number(value))
                    return;

                var existingItem = ko.utils.arrayFirst(currentFilterLeagueCategories(), function (item) {
                    return Number(value) === Number(ko.toJS(item.Value));
                });

                if (existingItem) {
                    alert('Den seriekategorin är redan inlagd');
                    return;
                }

                datamanager.getTargetFilterLeagueCategoryName(value, {
                    success: function (json) {
                        var newItem = new viewmodel.NameValue();

                        newItem.Name(json);
                        newItem.Value(value);

                        currentFilterLeagueCategories.push(newItem);

                        $('#targetFilterLeagueCategoryID').val('');
                        $('#targetfilter-type-3 .filterText').text(currentFilterLeagueCategories().length);
                    },
                    error: function () {
                        alert('Seriekategorin existerar inte');
                    }
                });
            },
           
            removeLeagueCategory = function (data) {
                var existingItem = ko.utils.arrayFirst(currentFilterLeagueCategories(), function (item) {
                    return data === item;
                });

                currentFilterLeagueCategories.remove(existingItem);

                if (currentFilterLeagueCategories().length === 0)
                    $('#targetfilter-type-3 .filterText').text(InfoItemTexts.FilterAll);
                else
                    $('#targetfilter-type-3 .filterText').text(currentFilterLeagueCategories().length);
            },

            addSpecialLeagueCategory = function () {
                var value = $('#targetFilterSpecialLeagueCategoryID').val();

                if (value.length === 0)
                    return;

                if (!Number(value))
                    return;

                var existingItem = ko.utils.arrayFirst(currentFilterSpecialLeagueCategories(), function (item) {
                    return Number(value) === Number(item);
                });

                if (existingItem) {
                    return;
                }

                currentFilterSpecialLeagueCategories.push(value);

                $('#targetFilterSpecialLeagueCategoryID').val('');
                $('#targetfilter-type-15 .filterText').text(currentFilterSpecialLeagueCategories().length);
            },

            removeSpecialLeagueCategory = function (data) {
                var existingItem = ko.utils.arrayFirst(currentFilterSpecialLeagueCategories(), function (item) {
                    return data === item;
                });

                currentFilterSpecialLeagueCategories.remove(existingItem);

                if (currentFilterSpecialLeagueCategories().length === 0)
                    $('#targetfilter-type-15 .filterText').text(InfoItemTexts.FilterAll);
                else
                    $('#targetfilter-type-15 .filterText').text(currentFilterSpecialLeagueCategories().length);
            },

            showTabHelper = function (currentView) {
                if (currentView === 'start') {
                    previousTab = 'start';
                }

                $('.targetfilter-subview').hide();
                $('#targetfilter-' + currentView).show();
            };

        return {
            activate: activate,
            closeFilterTargetDialog: closeFilterTargetDialog,

            saveTargetFilter: saveTargetFilter,

            selectAll: selectAll,
            selectItem: selectItem,

            setSavedTargetFilterValues: setSavedTargetFilterValues,
            setPreviouslyCheckedValues: setPreviouslyCheckedValues,

            showFilterType: showFilterType,

            targetFilterFilterTypes: targetFilterFilterTypes,

            backToHome: backToHome,
            navigateBack: navigateBack,
            navigateBackFromTargetFilter: navigateBackFromTargetFilter,

            toggleInternational: toggleInternational,

            targetFilterLeagueOrganizers: targetFilterLeagueOrganizers,
            targetFilterGenders: targetFilterGenders,
            targetFilterAgeCategories: targetFilterAgeCategories,
            targetFilterLeagues: targetFilterLeagues,

            currentFilterLeagues: currentFilterLeagues,
            currentFilterGames: currentFilterGames,
            currentFilterClubs: currentFilterClubs,
            currentFilterLeagueCategories: currentFilterLeagueCategories,
            currentFilterSpecialLeagueCategories: currentFilterSpecialLeagueCategories,

            addLeague: addLeague,
            addGame: addGame,
            addClub: addClub,
            addLeagueCategory: addLeagueCategory,
            addSpecialLeagueCategory: addSpecialLeagueCategory,

            removeLeague: removeLeague,
            removeGame: removeGame,
            removeClub: removeClub,
            removeLeagueCategory: removeLeagueCategory,
            removeSpecialLeagueCategory: removeSpecialLeagueCategory
        };
    });;
define('viewmodels/vm.team',
    ['ko', 'config', 'router', 'messenger', 'datamanager', 'navigation', 'viewmodels/vm.shell', 'viewmodels/vm.appconfig', 'helpers/sw.uihelper', 'viewmodels/vm.magazinegameview', 'models/model', 'models/model.mapper', 'underscore', 'viewmodels/vm.teamplayer', 'viewmodels/vm.staff', 'toastr', 'helpers/sw.utils', 'presenter', 'viewmodels/vm.infoitem'],
    function (ko, config, router, messenger, datamanager, navigation, shell, appconfig, uihelper, magazinegameview, model, modelmapper, _, vmteamplayer, vmstaff, toastr, utils, presenter, infoitem) {
        var teamId = 0,
            initTeamModel = ko.observable(),            
            initPicsAndVideosModel = ko.observable(),
            initTeamPartnersModel = ko.observable(),
            initPlayPage = ko.observable(),
            breadCrumb = ko.observable(),

            followersForTeamModel = ko.observable(),
            teamReplaySponsors = ko.observableArray(),            
            teamHeaderInfo = ko.observable(),
            games = ko.observableArray(),
            comingGames = ko.observableArray(),
            pastGames = ko.observableArray(),
            players = ko.observableArray(),
            staff = ko.observableArray(),
            admins = ko.observableArray(),
            countries = ko.observableArray(),

            pictures = ko.observableArray(),
            videos = ko.observableArray(),
            highlights = ko.observableArray(),
            replays = ko.observableArray(),
            liveGames = ko.observableArray(),
            plannedGames = ko.observableArray(),

            teamMemberinviteModel = ko.observable(),
            searchLiveReporter = ko.observable(),
            matchingMember = ko.observable(),

            postsFilterType = ko.observable(0),
            posts = ko.observableArray(),

            adminReporters = ko.observableArray(),
            liveReporters = ko.observableArray(),
            leagues = ko.observableArray(),
            pastLeagues = ko.observableArray(),
            followers = ko.observableArray(),
            possibleLiveReporters = ko.observable(),
            possibleTeamAdmins = ko.observable(),
            playerGuardianFollowers = ko.observableArray(),
            teamStaffFollowers = ko.observableArray(),
            playerFollowers = ko.observableArray(),

            matchingMembers = ko.observableArray(),            
            seasons = ko.observableArray(),
            selectedSeason = ko.observable(0),
            lastScrollPosition = 0,
            
            initInfoItem = ko.observable(),
            teamInfo = ko.observable(),
            canAddEditAdmin = ko.observable(false),
            canAddEditLiveReporter = ko.observable(false),

            gettingGamesPast = ko.observable(false),
            gettingGamesComing = ko.observable(false),
            gettingLeaguesPast = ko.observable(false),
            gettingLeaguesComing = ko.observable(false),
            gettingMoreInfoPosts = false,
            gettingPages = false,
            gettingPictures = ko.observable(false),
            gettingVideos = ko.observable(false),
            gettingHighlights = ko.observable(false),
            gettingReplays = ko.observable(false),
            gettingLiveGames = ko.observable(false),
            gettingPlannedGames = ko.observable(false),

            noMoreGamesToGetPast = ko.observable(false),
            noMoreGamesToGetComing = ko.observable(false),
            noMoreLeaguesToGetPast = ko.observable(false),
            noMoreLeaguesToGetComing = ko.observable(false),            
            noMorePicturesToGet = false,
            noMoreVideosToGet = false,
            noMoreInfoPostsToGet = false,
            noMorePagesToGet = false,
            noMoreHighlightsToGet = false,
            noMoreReplaysToGet = false,
            noMorePlannedGamesToGet = false,
            noMoreLiveGamesToGet = false,

            partnerFeaturesEnabled = ko.observable(false),
            hasSponsors = ko.observable(false),
            currentActiveTabId = 1,
            currentViewName = '',
            currentView = '',

            numberOfFollowers = ko.observable(),
            numberOfPlayers = ko.observable(),
            numberOfTeamStaffMembers = ko.observable(),            

            blurbsInTeamFeed = ko.observableArray(),
            blurbsWithLiveStreams = ko.observableArray(),
            frontPageBlurbsSuitableForHalfPage = [0, 1, 9, 12, 17, 18, 901, 903, 904, 905],

            currentMember = shell.currentMember,
            memberIsLoggedIn = ko.observable(false),

            activate = function (routeData, callback) {
                routeData.subview = 'start';

                if (parseInt(routeData.teamID) !== teamId) {
                    $('#team-view .main-preloader').show();
                    $('#team-view .main-afterloaded').hide();                    
                }
                
                activatesubview(routeData);

                if (_.isFunction(callback)) { callback(); }
            },

            activatesubview = function (routeData) {
                if (_.isObject(shell.currentMember)) {
                    memberIsLoggedIn(true);
                }

                if (parseInt(routeData.teamID) !== teamId) {
                    window.scrollTo(0, 0);
                } else {
                    $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                }

                teamId = parseInt(routeData.teamID);
                currentView = routeData.subview;
                currentViewName = 'team-' + currentView;                
                breadCrumb(currentView);

                $('.team-subview').hide();
                $('#team-' + currentView).show();

                if (teamHeaderInfo() !== undefined) {
                    if (teamHeaderInfo().TeamID !== teamId) {
                        getTeamHeaderInfo();

                        clearObservables();
                    }
                }
                else {
                    getTeamHeaderInfo();
                }

                // Hides the moreItemsList when switching views on mobile by adding the hidden class again                
                $('.moreMenuItemsList').addClass('hiddenOnWideDisplay');

                switch (currentView) {
                    case 'start':
                        {
                            if (initTeamModel() === undefined || initTeamModel() === '') {
                                loadTeamSite();
                            }

                            if (comingGames().length === 0) {
                                datamanager.getComingTeamGames(teamId, 0, {
                                    success: function (model) {
                                        comingGames([]);
                                        var underlayingArray = comingGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        comingGames.valueHasMutated();
                                    },
                                    error: function (response) {

                                    }
                                });
                            }                                                     
                        }
                        break;
                    case 'info':
                        {
                            //initteamadmin
                            datamanager.initTeamVC(teamId, {
                                success: function (model) {
                                    teamHeaderInfo(model.TeamHeaderInfo);
                                    removePreloader(currentViewName);                                    
                                },
                                error: function (response) {
                                    removePreloader(currentViewName);
                                }
                            });
                        }
                        break;
                    case 'feed':
                        {
                            $(window).scroll(infiniteScrollingTeamFeed);

                            // initialize teamfeed
                            initTeamFeed();

                            if (followersForTeamModel() === undefined || followersForTeamModel() === '') {
                                showPreloader();

                                datamanager.getFollowers(teamId, {
                                    success: function (model) {
                                        followersForTeamModel(model);
                                    },
                                    error: function (response) {

                                    }
                                });
                            }

                            if (comingGames().length === 0) {
                                datamanager.getComingTeamGames(teamId, 0, {
                                    success: function (model) {
                                        comingGames([]);
                                        var underlayingArray = comingGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        comingGames.valueHasMutated();
                                    },
                                    error: function (response) {

                                    }
                                });
                            }
                        }
                        break;
                    case 'games':
                        {                            
                            if (games().length === 0) {
                                datamanager.getComingTeamGames(teamId, 0, {
                                    success: function (model) {
                                        games([]);
                                        var underlayingArray = games();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        games.valueHasMutated();

                                        if (games().length === 0) {
                                            togglePastGames();
                                        }

                                        removePreloader(currentViewName);
                                        subViewLoaded();                                        
                                    },
                                    error: function (response) {
                                        removePreloader(currentViewName);
                                    }
                                });
                            }

                            // If we haven't loaded any past games, load the first 10 games
                            if (pastGames().length === 0) {
                                getGames(2);
                            }
                        }
                        break;
                    case 'players':
                        {
                            if (players().length === 0) {
                                datamanager.initPlayersAdminVC(teamId, {
                                    success: function (model) {
                                        players([]);

                                        var underlayingArray = players();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        players.valueHasMutated();
                                        removePreloader(currentViewName);
                                        subViewLoaded();                                        
                                    },
                                    error: function (response) {
                                        removePreloader(currentViewName);
                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                        }
                        break;
                    case 'staff':
                        {
                            if (staff().length === 0) {
                                datamanager.initTeamStaffAdminVC(teamId, {
                                    success: function (model) {
                                        staff([]);
                                        var underlayingArray = staff();

                                        //Add the pages to the page cache
                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        staff.valueHasMutated();

                                        removePreloader(currentViewName);
                                        subViewLoaded();                                        
                                    },
                                    error: function (response) {
                                        removePreloader(currentViewName);
                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                        }
                        break;
                    case 'posts':
                        {
                            if (posts().length === 0) {
                                datamanager.initTeamInfoItems(teamId, {
                                    success: function (model) {
                                        posts([]);

                                        initInfoItem(model);

                                        var underlayingArray = posts();

                                        for (var i = 0; i < model.InfoItemBlurbs.length; i++) {
                                            underlayingArray.push(model.InfoItemBlurbs[i]);
                                        }

                                        posts.valueHasMutated();

                                        removePreloader(currentViewName);
                                        subViewLoaded();

                                        if (posts().length === 0)
                                            noMoreInfoPostsToGet = true;
                                    },
                                    error: function (response) {
                                        alert(response);

                                        removePreloader(currentViewName);
                                        subViewLoaded();
                                    }
                                });
                            } else {
                                removePreloader(currentViewName);
                                subViewLoaded();
                            }
                        }
                        break;
                    case 'leagues':
                        {
                            if (currentActiveTabId !== 3 && currentActiveTabId !== 4) {
                                currentActiveTabId = 3;
                            }

                            if (leagues().length === 0) {
                                getLeagues(1);
                            }

                            // If we haven't loaded any past leagues, load the first 10 games
                            if (pastLeagues().length === 0) {
                                getLeagues(2);
                            }
                        }
                        break;                    
                    case 'admins':
                        {
                            datamanager.initTeamVC(teamId, {
                                success: function (model) {
                                    admins([]);
                                    var underlayingArray = admins();

                                    //Add the pages to the page cache
                                    for (var i = 0; i < model.Administrators.length; i++) {
                                        underlayingArray.push(model.Administrators[i]);
                                    }

                                    admins.valueHasMutated();
                                    removePreloader(currentViewName);
                                    subViewLoaded();                                    
                                },
                                error: function (response) {
                                    removePreloader(currentViewName);
                                    subViewLoaded();
                                }
                            });
                        }
                        break;
                    case 'partners':
                        {
                            datamanager.initTeamPartners(teamId, {
                                success: function (model) {
                                    initTeamPartnersModel(model);

                                    if (model.TeamSponsors.length > 0)
                                        hasSponsors(true);
                                    else
                                        hasSponsors(false);

                                    removePreloader(currentViewName);
                                },
                                error: function (response) {
                                    removePreloader(currentViewName);
                                }
                            });
                        }
                        break;
                    case 'livereporters':
                        {
                            datamanager.initTeamLiveReporters(teamId, {
                                success: function (model) {
                                    liveReporters([]);
                                    adminReporters([]);

                                    canAddEditAdmin(model.CanAddEditAdmin);
                                    canAddEditLiveReporter(model.CanAddEditLiveReporter);

                                    var underlayingArray = adminReporters();
                                    for (var i = 0; i < model.AdminReporters.length; i++) {
                                        underlayingArray.push(model.AdminReporters[i]);
                                    }
                                    adminReporters.valueHasMutated();

                                    underlayingArray = liveReporters();
                                    for (var j = 0; j < model.LiveReporters.length; j++) {
                                        underlayingArray.push(model.LiveReporters[j]);
                                    }
                                    liveReporters.valueHasMutated();

                                    removePreloader(currentViewName);
                                    subViewLoaded();
                                },
                                error: function (response) {
                                    removePreloader(currentViewName);
                                    subViewLoaded();
                                }
                            });
                        }
                        break;
                    case 'addlivereporter':
                        {
                            if (countries().length === 0) {
                                datamanager.getCountriesForDialing({
                                    success: function (json) {
                                        countries(json);

                                        // Hard-coded for swiss
                                        searchLiveReporter({ 'Id': 45, 'Value': '' });
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            } else {
                                // Hard-coded for swiss
                                searchLiveReporter({ 'Id': 45, 'Value': '' });
                            }

                            if (possibleLiveReporters() === undefined || possibleLiveReporters() === '') {
                                shell.showProgressIndicator(MiscTexts.GettingData);

                                datamanager.getPossibleLiveReportersForTeam(teamId, {
                                    success: function (json) {
                                        possibleLiveReporters(json);

                                        shell.hideProgressIndicator();
                                        removePreloader(currentViewName);
                                    },
                                    error: function (response) {
                                        alert(response);

                                        removePreloader(currentViewName);
                                    }
                                });
                            } else {
                                removePreloader(currentViewName);
                            }
                        }
                        break;
                    case 'addteamadmin':
                        {
                            if (possibleTeamAdmins() === undefined || possibleTeamAdmins() === '') {
                                shell.showProgressIndicator(MiscTexts.GettingData);

                                datamanager.getPossibleTeamAdmins(teamId, {
                                    success: function (json) {
                                        possibleTeamAdmins(json);

                                        shell.hideProgressIndicator();
                                        removePreloader(currentViewName);
                                    },
                                    error: function (response) {
                                        alert(response);

                                        removePreloader(currentViewName);
                                    }
                                });
                            } else {
                                removePreloader(currentViewName);
                            }
                        }
                        break;
                    case 'followers':
                        {
                            loadFollowers();
                        }
                        break;
                    case 'invite':
                        {
                            //$('#inviteMemberPhoneNumber').val('');

                            if (countries().length === 0) {
                                datamanager.getCountriesForDialing({
                                    success: function (json) {
                                        countries(json);

                                        var m = new model.MemberInvite()
                                            .FirstName('')
                                            .LastName('')
                                            .TeamID(teamId)
                                            .MobilePhone('')
                                            .CountryCodePrefix('+46');

                                        teamMemberinviteModel(m);
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            } else {
                                var m = new model.MemberInvite()
                                    .FirstName('')
                                    .LastName('')
                                    .TeamID(teamId)
                                    .MobilePhone('')
                                    .CountryCodePrefix('+46');

                                teamMemberinviteModel(m);
                            }

                            removePreloader(currentViewName);
                        }
                        break;
                    case 'play': {
                        // Only do init if we haven't done it already
                        if (initPlayPage() === undefined || initPlayPage() === '') {
                            window.scrollTo(0, 0);

                            datamanager.initTeamPlayPage(teamId, {
                                success: function (model) {
                                    initPlayPage(model);

                                    subViewLoaded();
                                    hidePreloader();
                                },
                                error: function (response) {
                                    hidePreloader();

                                    alert(response);
                                }
                            });
                        } else {
                            $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                        }

                        break;
                    }
                    case 'pictures':
                        {
                            breadCrumb('play');

                            if (pictures().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getPicturesForTeam(teamId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = pictures();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        pictures.valueHasMutated();

                                        removePreloader(currentViewName);
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        removePreloader(currentViewName);
                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                        }
                        break;
                    case 'videos':
                        {
                            breadCrumb('play');

                            if (videos().length === 0) {
                                window.scrollTo(0, 0);

                                datamanager.getVideosForTeam(teamId, 8, 0, {
                                    success: function (model) {
                                        var underlayingArray = videos();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        videos.valueHasMutated();

                                        removePreloader(currentViewName);
                                        subViewLoaded();
                                    },
                                    error: function (response, xhr) {
                                        alert(response);

                                        removePreloader(currentViewName);
                                        subViewLoaded();
                                    }
                                });
                            } else {
                                hidePreloader();
                                subViewLoaded();

                                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                            }
                        }
                        break;
                    case 'highlights': {
                        breadCrumb('play');

                        if (highlights().length === 0) {
                            window.scrollTo(0, 0);

                            datamanager.getHighlightsForTeam(teamId, 8, 0, {
                                success: function (model) {
                                    var underlayingArray = highlights();

                                    for (var i = 0; i < model.length; i++) {
                                        underlayingArray.push(model[i]);
                                    }

                                    highlights.valueHasMutated();

                                    if (model.length < 8)
                                        noMoreHighlightsToGet = true;

                                    hidePreloader();
                                    subViewLoaded();
                                },
                                error: function (response, xhr) {
                                    alert(response);

                                    subViewLoaded();
                                }
                            });
                        } else {
                            hidePreloader();
                            subViewLoaded();

                            $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                        }
                        break;
                    }
                    case 'replays': {
                        breadCrumb('play');

                        if (replays().length === 0) {
                            window.scrollTo(0, 0);

                            datamanager.getReplaysForTeam(teamId, 8, 0, {
                                success: function (model) {
                                    var underlayingArray = replays();

                                    for (var i = 0; i < model.length; i++) {
                                        underlayingArray.push(model[i]);
                                    }

                                    replays.valueHasMutated();

                                    if (model.length < 8)
                                        noMoreReplaysToGet = true;

                                    hidePreloader();
                                    subViewLoaded();
                                },
                                error: function (response, xhr) {
                                    alert(response);

                                    subViewLoaded();
                                }
                            });
                        } else {
                            hidePreloader();
                            subViewLoaded();

                            $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                        }
                        break;
                    }
                    case 'planned': {
                        breadCrumb('play');

                        if (plannedGames().length === 0) {
                            window.scrollTo(0, 0);

                            datamanager.getPlannedGamesForTeam(teamId, 8, 0, {
                                success: function (model) {
                                    var underlayingArray = plannedGames();

                                    for (var i = 0; i < model.length; i++) {
                                        underlayingArray.push(model[i]);
                                    }

                                    plannedGames.valueHasMutated();

                                    if (model.length < 8)
                                        noMorePlannedGamesToGet = true;

                                    hidePreloader();
                                    subViewLoaded();
                                },
                                error: function (response, xhr) {
                                    alert(response);

                                    subViewLoaded();
                                }
                            });
                        } else {
                            hidePreloader();
                            subViewLoaded();

                            $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                        }
                        break;
                    }
                    case 'live': {
                        breadCrumb('play');

                        if (liveGames().length === 0) {
                            window.scrollTo(0, 0);

                            datamanager.getLiveGamesForTeam(teamId, 8, 0, {
                                success: function (model) {
                                    var underlayingArray = liveGames();

                                    for (var i = 0; i < model.length; i++) {
                                        underlayingArray.push(model[i]);
                                    }

                                    liveGames.valueHasMutated();

                                    if (model.length < 8)
                                        noMoreLiveGamesToGet = true;

                                    hidePreloader();
                                    subViewLoaded();
                                },
                                error: function (response, xhr) {
                                    alert(response);

                                    subViewLoaded();
                                }
                            });
                        } else {
                            hidePreloader();
                            subViewLoaded();

                            $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
                        }
                        break;
                    }
                    case 'admin': {
                        datamanager.initTeamAdminDetails(teamId, {
                            success: function (json) {
                                teamInfo(json.TeamInfo);

                                removePreloader(currentViewName);
                                subViewLoaded();
                            },
                            error: function (error) {
                                router.navigateTo("/");
                            }
                        });
                    }
                    default:
                        {
                            //TODO: broken route
                        }
                }

                $(window).scroll(infiniteScrolling);
            },

            clearObservables = function () {
                initTeamModel('');                
                initPicsAndVideosModel('');
                initTeamPartnersModel('');
                initPlayPage('');
                followersForTeamModel('');
                possibleLiveReporters('');
                possibleTeamAdmins('');
                teamHeaderInfo('');
                initInfoItem('');

                players([]);
                games([]);
                pastGames([]);
                comingGames([]);
                staff([]);
                followers([]);
                playerGuardianFollowers([]);
                teamStaffFollowers([]);
                playerFollowers([]);
                leagues([]);
                pastLeagues([]);
                admins([]);
                adminReporters([]);
                liveReporters([]);
                pictures([]);
                videos([]);
                posts([]);
                teamReplaySponsors([]);                
                blurbsWithLiveStreams([]);
                toggleComingGames();
                toggleComingLeagues();

                hasSponsors(false);
                postsFilterType(0);

                noMoreGamesToGetPast(false);
                noMoreGamesToGetComing(false);
                noMoreLeaguesToGetPast(false);
                noMoreLeaguesToGetComing(false);
                noMorePicturesToGet = false;
                noMoreVideosToGet = false;
                noMoreInfoPostsToGet = false;
                noMorePagesToGet = false;
                noMoreHighlightsToGet = false;
                noMoreReplaysToGet = false;
                noMorePlannedGamesToGet = false;
                noMoreLiveGamesToGet = false;

                $('.team-subview .afterSubViewLoaded').hide();
                $('.team-subview .beforeSubViewLoaded').show();

                showPreloader();
            },

            cleanup = function () {
                lastScrollPosition = $(window).scrollTop();

                // unbind the infinite scrolling, only used for certain subviews
                $(window).unbind('scroll', infiniteScrolling);
                $(window).unbind('scroll', infiniteScrollingTeamFeed);                

                $('.uploadTeamBannerOverlay').show();

                gettingGamesPast(false);
                gettingGamesComing(false);
                gettingLeaguesPast(false);
                gettingLeaguesComing(false);

                gettingPictures(false);
                gettingVideos(false);
                gettingHighlights(false);
                gettingReplays(false);
                gettingLiveGames(false);
                gettingPlannedGames(false);                
                gettingMoreInfoPosts = false;
                gettingPages = false;
            },            

            removePreloader = function (subviewname) {
                //$('#' + subviewname + ' .preloader').hide();
                //$('#' + subviewname + ' .afterloaded').show();

                //$('#team-view .main-preloader').hide();
                //$('#team-view .main-afterloaded').show();

                $('#team-view-preloader').hide();
                $('#team-view-afterloaded').show();

                // Really really really ugly hack for Innebandy... don't like this one
                if (shell.showAdminView()) {
                    $(".innebandy-special").each(function () {
                        $(this).removeClass('innebandy-special');
                    });
                }
            },            

            hidePreloader = function () {
                $('#team-view-preloader').hide();
                $('#team-view-afterloaded').show();

                if (shell.showAdminView()) {
                    $(".innebandy-special").each(function () {
                        $(this).removeClass('innebandy-special');
                    });
                }
            },

            showPreloader = function () {
                $('#team-view-preloader').show();
                $('#team-view-afterloaded').hide();
            },

            subViewLoaded = function () {
                $("#" + currentViewName + " .afterSubViewLoaded").show();
                $("#" + currentViewName + " .beforeSubViewLoaded").hide();
            },

            sticktothetop = function () {
                var window_top = $(window).scrollTop();
                var top = $('#stick-here').offset().top;
                if (window_top > top) {
                    $('#stickThis').addClass('stick');
                    $('#stick-here').height($('#stickThis').outerHeight());
                } else {
                    $('#stickThis').removeClass('stick');
                    $('#stick-here').height(0);
                }
            },

            loadTeamSite = function () {
                datamanager.initTeamSite(teamId, {
                    success: function (model) {
                        styleFrontPageBlurbs(model.MagazineBlurbs);
                        initPicsAndVideosModel(model.PicturesAndVideos);
                        followersForTeamModel(model.FollowersForTeam);

                        initTeamModel(model);

                        if (model.TeamSponsors.length > 0)
                            hasSponsors(true);
                        else
                            hasSponsors(false);

                        removePreloader(currentViewName);
                        subViewLoaded();
                    },
                    error: function (response) {
                        removePreloader(currentViewName);
                        subViewLoaded();
                    }
                });
            },

            initTeamFeed = function () {
                $('#team-view .infiniteScrollStatus').html(MagazineTexts.LoadingMoreContent);

                datamanager.initTeamAdminTeamFeed(teamId, {
                    success: function (model) {
                        removePreloader(currentViewName);
                        
                        blurbsInTeamFeed([]);

                        var underlayingArray = blurbsInTeamFeed();

                        styleBlurbs(model);

                        var discPostInfoCounter = 0;

                        //Add the pages to the page cache
                        for (var i = 0; i < model.length; i++) {
                            if (model[i].MagazineBlurbTypeID === 0) {
                                hasExampleMagazineBlurb = true;
                            }

                            if (typeof model[i].DiscussionPostInfo !== 'undefined') {
                                discPostInfoCounter++;
                            }
                            underlayingArray.push(model[i]);
                        }

                        blurbsInTeamFeed.valueHasMutated();

                        // Check if only teamfeed disussionposts then reload more item

                        if (discPostInfoCounter >= 2) {
                            // Load more items
                            getTeamFeedPagesFromServer();
                        }

                        if (model.length < 3) {
                            $('#teamMagazineInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfYourFeed);
                        } else {
                            $('#teamMagazineInfiniteScrollStatus').html(MagazineTexts.LoadingMoreContent);
                        }
                    },
                    error: function (response) {
                        removePreloader(currentViewName);
                    }
                });
            },            

            filterPosts = function (type) {
                if (type === postsFilterType()) {
                    return;
                }

                postsFilterType(type);
                posts([]);
                reloadInfoItems();
            },

            reloadInfoItems = function () {
                gettingMoreInfoPosts = true;
                noMoreInfoPostsToGet = false;

                if (postsFilterType() === 0) {
                    datamanager.getMoreTeamInfoItems(teamId, 0, {
                        success: function (json) {
                            posts([]);

                            gettingMoreInfoPosts = false;

                            if (json.length === 0) {
                                noMoreInfoPostsToGet = true;
                            } else {
                                var underlayingArray = posts();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                posts.valueHasMutated();
                            }
                        },
                        error: function (error) {

                        }
                    });
                }
                else if (postsFilterType() === 1) {
                    datamanager.getMoreManagedTeamInfoItems(teamId, 0, true, {
                        success: function (json) {
                            posts([]);

                            gettingMoreInfoPosts = false;

                            if (json.length === 0) {
                                noMoreInfoPostsToGet = true;
                            } else {

                                var underlayingArray = posts();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                posts.valueHasMutated();
                            }
                        },
                        error: function (error) {

                        }
                    });
                } else if (postsFilterType() === 2) {
                    datamanager.getMoreManagedTeamInfoItems(teamId, 0, false, {
                        success: function (json) {
                            posts([]);

                            gettingMoreInfoPosts = false;

                            if (json.length === 0) {
                                noMoreInfoPostsToGet = true;
                            } else {
                                var underlayingArray = posts();

                                for (var i = 0; i < json.length; i++) {
                                    underlayingArray.push(json[i]);
                                }

                                posts.valueHasMutated();
                            }
                        },
                        error: function (error) {

                        }
                    });
                }
            },

            infiniteScrollingTeamFeed = function () {
                if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && blurbsInTeamFeed().length !== 0) {
                    if (!gettingPages && !noMorePagesToGet) {

                        getTeamFeedPagesFromServer();
                    }
                }
            },            

            infiniteScrolling = function () {
                switch (currentView) {
                    case 'pictures': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && pictures().length !== 0) {
                            if (!gettingPictures() && !noMorePicturesToGet) {
                                getPictures();
                            }
                        }

                        break;
                    }
                    case 'videos': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && videos().length !== 0) {
                            if (!gettingVideos() && !noMoreVideosToGet) {
                                getVideos();
                            }
                        }

                        break;
                    }
                    case 'planned': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && plannedGames().length !== 0) {
                            if (!gettingPlannedGames() && !noMorePlannedGamesToGet) {
                                getPlannedGames();
                            }
                        }

                        break;
                    }
                    case 'live': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && liveGames().length !== 0) {
                            if (!gettingLiveGames() && !noMoreLiveGamesToGet) {
                                getLiveGames();
                            }
                        }

                        break;
                    }
                    case 'highlights': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && highlights().length !== 0) {
                            if (!gettingHighlights() && !noMoreHighlightsToGet) {
                                getHighlights();
                            }
                        }

                        break;
                    }
                    case 'replays': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && replays().length !== 0) {
                            if (!gettingReplays() && !noMoreReplaysToGet) {
                                getReplays();
                            }
                        }
                        break;
                    }  
                    case 'posts': {
                        if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && posts().length !== 0) {
                            if (!gettingMoreInfoPosts && !noMoreInfoPostsToGet) {
                                gettingMoreInfoPosts = true;

                                var infoItemId = posts().length ? posts()[posts().length - 1].InfoItemID : 0;

                                switch (postsFilterType()) {
                                    case 0:
                                        datamanager.getMoreTeamInfoItems(teamId, infoItemId, {
                                            success: function (json) {
                                                gettingMoreInfoPosts = false;

                                                if (json.length === 0) {
                                                    noMoreInfoPostsToGet = true;
                                                } else {
                                                    var underlayingArray = posts();

                                                    for (var i = 0; i < json.length; i++) {
                                                        underlayingArray.push(json[i]);
                                                    }

                                                    posts.valueHasMutated();
                                                }
                                            },
                                            error: function (error) {

                                            }
                                        });
                                        break;
                                    case 1:
                                        datamanager.getMoreManagedTeamInfoItems(teamId, infoItemId, true, {
                                            success: function (json) {
                                                gettingMoreInfoPosts = false;

                                                if (json.length === 0) {
                                                    noMoreInfoPostsToGet = true;
                                                } else {

                                                    var underlayingArray = posts();

                                                    for (var i = 0; i < json.length; i++) {
                                                        underlayingArray.push(json[i]);
                                                    }

                                                    posts.valueHasMutated();
                                                }
                                            },
                                            error: function (error) {

                                            }
                                        });
                                        break;
                                    case 2:
                                        datamanager.getMoreManagedTeamInfoItems(teamId, infoItemId, false, {
                                            success: function (json) {
                                                gettingMoreInfoPosts = false;

                                                if (json.length === 0) {
                                                    noMoreInfoPostsToGet = true;
                                                } else {

                                                    var underlayingArray = posts();

                                                    for (var i = 0; i < json.length; i++) {
                                                        underlayingArray.push(json[i]);
                                                    }

                                                    posts.valueHasMutated();
                                                }
                                            },
                                            error: function (error) {

                                            }
                                        });
                                        break;
                                }
                            }
                        }
                        break;
                    }
                    default:
                        // TODO: move this into case
                        switch (currentActiveTabId) {
                            case 1:
                                {
                                    if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && games().length !== 0) {
                                        if (!gettingGamesComing() && !noMoreGamesToGetComing()) {
                                            getGames(1);
                                        }
                                    }
                                }
                                break;
                            case 2:
                                {
                                    if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && pastGames().length !== 0) {
                                        if (!gettingGamesPast() && !noMoreGamesToGetPast()) {
                                            getGames(2);
                                        }
                                    }
                                }
                                break;
                            case 3:
                                {
                                    if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && leagues().length !== 0) {
                                        if (!gettingLeaguesComing() && !noMoreLeaguesToGetComing()) {
                                            getLeagues(1);
                                        }
                                    }
                                }
                                break;
                            case 4:
                                {
                                    if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && pastLeagues().length !== 0) {
                                        if (!gettingLeaguesPast() && !noMoreLeaguesToGetPast()) {
                                            getLeagues(2);
                                        }
                                    }
                                }
                                break;
                        }
                        break;
                }
            },

            getPictures = function () {
                gettingPictures(true);

                var lastPictureID = 0;

                if (pictures().length !== 0) {
                    var lastPageInCache = pictures()[pictures().length - 1];

                    lastPictureID = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getPicturesForTeam(teamId, 9, lastPictureID, {
                    success: function (model) {
                        var underlayingArray = pictures();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        pictures.valueHasMutated();

                        if (model.length < 9) {
                            noMorePicturesToGet = true;                            
                        }

                        gettingPictures(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingPictures(false);
                    }
                });
            },

            getVideos = function () {
                gettingVideos(true);

                var lastVideoID = 0;

                if (videos().length !== 0) {
                    var lastPageInCache = videos()[videos().length - 1];

                    lastVideoID = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getVideosForTeam(teamId, 9, lastVideoID, {
                    success: function (model) {
                        var underlayingArray = videos();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        videos.valueHasMutated();

                        if (model.length < 9) {
                            noMoreVideosToGet = true;                            
                        }

                        gettingVideos(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingVideos(false);
                    }
                });
            },

            getHighlights = function () {
                gettingHighlights(true);

                var lastGameId = 0;

                if (highlights().length !== 0) {
                    var lastPageInCache = highlights()[highlights().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getHighlightsForTeam(teamId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = highlights();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        highlights.valueHasMutated();

                        if (model.length < 9) {
                            noMoreHighlightsToGet = true;
                        }

                        gettingHighlights(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingHighlights(false);
                    }
                });
            },

            getPlannedGames = function () {
                gettingPlannedGames(true);

                var lastGameId = 0;

                if (plannedGames().length !== 0) {
                    var lastPageInCache = plannedGames()[plannedGames().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getPlannedGamesForTeam(teamId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = plannedGames();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        plannedGames.valueHasMutated();

                        if (model.length < 9) {
                            noMorePlannedGamesToGet = true;
                        }

                        gettingPlannedGames(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingPlannedGames(false);
                    }
                });
            },

            getLiveGames = function () {
                gettingLiveGames(true);

                var lastGameId = 0;

                if (liveGames().length !== 0) {
                    var lastPageInCache = liveGames()[liveGames().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getLiveGamesForTeam(teamId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = liveGames();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        liveGames.valueHasMutated();

                        if (model.length < 9) {
                            noMoreLiveGamesToGet = true;
                        }

                        gettingLiveGames(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingLiveGames(false);
                    }
                });
            },

            getReplays = function () {
                gettingReplays(true);

                var lastGameId = 0;

                if (replays().length !== 0) {
                    var lastPageInCache = replays()[replays().length - 1];

                    lastGameId = lastPageInCache.DeepLinkItemID;
                }

                datamanager.getReplaysForTeam(teamId, 9, lastGameId, {
                    success: function (model) {
                        var underlayingArray = replays();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        replays.valueHasMutated();

                        if (model.length < 9) {
                            noMoreReplaysToGet = true;
                        }

                        gettingReplays(false);
                    },
                    error: function (response, xhr) {
                        alert(response);

                        gettingReplays(false);
                    }
                });
            },

            loadFollowers = function () {
                datamanager.initTeamFollowers(teamId, {
                    success: function (model) {
                        followers(model.Followers);
                        playerGuardianFollowers(model.PlayerGuardians);
                        playerFollowers(model.Players);
                        teamStaffFollowers(model.TeamStaff);
                        // TODO: load model

                        removePreloader(currentViewName);                        
                    },
                    error: function (response) {
                        removePreloader(currentViewName);
                    }
                });
            },

            deleteLeagueTeam = function (leagueTeam) {
                //Check if there are other leagueTeam rows connected to the same Original team id
                var otherLeagueTeamsForOriginalTeam = "";

                ko.utils.arrayForEach(leagues(), function (item) {
                    if (leagueTeam.OriginalTeamID === item.OriginalTeamID && leagueTeam.LeagueTeamID !== item.LeagueTeamID) {
                        otherLeagueTeamsForOriginalTeam = otherLeagueTeamsForOriginalTeam + item.LeagueName + " " + item.SeasonName + " ";
                    }
                });

                ko.utils.arrayForEach(pastLeagues(), function (item) {
                    if (leagueTeam.OriginalTeamID === item.OriginalTeamID && leagueTeam.LeagueTeamID !== item.LeagueTeamID) {
                        otherLeagueTeamsForOriginalTeam = otherLeagueTeamsForOriginalTeam + item.LeagueName + " " + item.SeasonName + " ";
                    }
                });

                var leaguesForRemovalString = "";

                if (otherLeagueTeamsForOriginalTeam.length > 0) {
                    leaguesForRemovalString = teamAdminTexts.TheTeamYouWantToDisconnectAlsoPlayIn + otherLeagueTeamsForOriginalTeam;
                }
                var r = confirm(leaguesForRemovalString + "\n" + "\n" + teamAdminTexts.RemoveTeamFromLeagueConfirmQuestion);

                if (r === true) {
                    shell.showProgressIndicator(teamAdminTexts.DisconnectingTeamFromLeague);
                    //presenter.toggleSaveActivity(true, teamAdminTexts.DisconnectingTeamFromLeague);
                    datamanager.deleteLeagueTeam(leagueTeam.LeagueTeamID, {
                        success: function () {
                            shell.hideProgressIndicator();
                            //presenter.toggleSaveActivity(false, '');
                            window.location.reload();
                        },
                        error: function (response) {
                            shell.hideProgressIndicator();
                            alert(response);
                            //presenter.toggleSaveActivity(false);
                        }
                    });
                }
            },

            acceptFollowerRequest = function (data) {
                datamanager.setFollowerRequestStatus(data.FollowerRequestID, 1, {
                    success: function (json) {
                        followers.remove(function (f) {
                            return f.FollowerRequestID === data.FollowerRequestID;
                        });

                        loadFollowers();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            denyFollowerRequest = function (data) {
                var r = confirm("Are you sure you want to remove this request?");
                if (r === true) {
                    datamanager.setFollowerRequestStatus(data.FollowerRequestID, 2, {
                        success: function (json) {
                            followers.remove(function (f) {
                                return f.FollowerRequestID === data.FollowerRequestID;
                            });
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            uploadTeamBannerClick = function () {
                $('.teamBannerTeamPageFilePicker').focus().trigger('click');
            },

            getTeamFeedPagesFromServer = function () {
                var lastPageInCache,
                    lastGameID,
                    lastTimeStamp;

                gettingPages = true;

                //Loop through the current pages in the feed                
                var lastThreeBlurbTypes = [];

                if (blurbsInTeamFeed().length !== 0) {
                    lastPageInCache = blurbsInTeamFeed()[blurbsInTeamFeed().length - 1];

                    gameIds = [];
                    lastGameID = 0;

                    for (var i = 0; i < blurbsInTeamFeed().length; i++) {
                        //Exclude all blurbs that does not have a gameID (some 90X like "unpaid season ticket")
                        var _gameID = blurbsInTeamFeed()[i].GameID;
                        if (_.isNumber(_gameID)) {
                            lastGameID = _gameID;
                            gameIds.push(_gameID);
                        }
                    }

                    if (blurbsInTeamFeed().length > 2) {
                        for (i = blurbsInTeamFeed().length - 3; i < blurbsInTeamFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInTeamFeed()[i].MagazineBlurbTypeID);
                        }
                    } else if (blurbsInTeamFeed().length > 1) {
                        for (i = 0; i < blurbsInTeamFeed().length; i++) {
                            lastThreeBlurbTypes.push(blurbsInTeamFeed()[i].MagazineBlurbTypeID);
                        }
                    } else {
                        lastThreeBlurbTypes.push(blurbsInTeamFeed()[0].MagazineBlurbTypeID);
                    }

                    lastTimeStamp = lastPageInCache.TimeStamp;
                } else {
                    blurbsInTeamFeed.removeAll();
                    gameIds = null;
                    lastTimeStamp = new Date();
                }

                //Get the next three pages from the server
                datamanager.GetBlurbsForTeamFeed(shell.currentMember.MemberID, moment(lastTimeStamp).utc().format('YYYY-MM-DD HH:mm:ss.SSS'), lastThreeBlurbTypes, lastGameID, teamId)
                    .then(function (json) {
                        styleBlurbs(json);

                        if (json.length === 0) {
                            noMorePagesToGet = true;
                            $('#teamMagazineInfiniteScrollStatus').html(MagazineTexts.YouHaveReachedTheEndOfYourFeed);
                        }

                        var underlayingArray = blurbsInTeamFeed();

                        //Add the pages to the page cache
                        for (var i = 0; i < json.length; i++) {
                            if (json[i].MagazineBlurbTypeID === 0)
                                hasExampleMagazineBlurb = true;

                            underlayingArray.push(json[i]);
                        }

                        blurbsInTeamFeed.valueHasMutated();
                        gettingPages = false;

                    })
                    .fail(function (error) {
                        gettingPages = false;
                    });
            },            

            getGames = function (currentListid) {
                switch (currentListid) {
                    case 1:
                        {
                            gettingGamesComing(true);

                            var comingGameId = games().length ? games()[games().length - 1].GameID : 0;

                            datamanager.getComingTeamGames(teamId, comingGameId, {
                                success: function (model) {
                                    gettingGamesComing(false);

                                    if (model.length !== 0) {
                                        var underlayingArray = games();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        games.valueHasMutated();
                                    }
                                    else {
                                        noMoreGamesToGetComing(true);
                                    }
                                },
                                error: function (response) {
                                    gettingGamesComing(false);
                                }
                            });
                        }
                        break;
                    case 2:
                        {
                            gettingGamesPast(true);

                            var previousGameId = pastGames().length ? pastGames()[pastGames().length - 1].GameID : 0;

                            datamanager.getPreviousTeamGames(teamId, previousGameId, {
                                success: function (model) {
                                    gettingGamesPast(false);

                                    if (model.length !== 0) {
                                        var underlayingArray = pastGames();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        pastGames.valueHasMutated();
                                    }
                                    else {
                                        noMoreGamesToGetPast(true);
                                    }
                                },
                                error: function (response) {
                                    gettingGamesPast(false);
                                }
                            });
                        }
                        break;
                    default:
                        break;
                }
            },

            getLeagues = function (currentListid) {
                switch (currentListid) {
                    case 1:
                        {
                            var comingLeagueTeamId = leagues().length ? leagues()[leagues().length - 1].LeagueTeamID : 0;

                            gettingLeaguesComing(true);

                            datamanager.getComingTeamAdminLeagueTeams(teamId, comingLeagueTeamId, {
                                success: function (model) {
                                    gettingLeaguesComing(false);

                                    if (model.length !== 0) {
                                        var underlayingArray = leagues();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        leagues.valueHasMutated();
                                    }
                                    else {
                                        noMoreLeaguesToGetComing(true);
                                    }

                                    removePreloader(currentViewName);
                                    subViewLoaded();
                                },
                                error: function (response) {
                                    gettingLeaguesComing(false);

                                    removePreloader(currentViewName);
                                    subViewLoaded();
                                }
                            });
                        }
                        break;
                    case 2:
                        {
                            var pastLeagueTeamId = pastLeagues().length ? pastLeagues()[pastLeagues().length - 1].LeagueTeamID : 0;

                            gettingLeaguesPast(true);

                            datamanager.getPreviousTeamAdminLeagueTeams(teamId, pastLeagueTeamId, {
                                success: function (model) {
                                    gettingLeaguesPast(false);
                                    if (model.length !== 0) {
                                        var underlayingArray = pastLeagues();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        pastLeagues.valueHasMutated();

                                        removePreloader(currentViewName);
                                    }
                                    else {
                                        noMoreLeaguesToGetPast(true);
                                    }
                                },
                                error: function (response) {
                                    gettingLeaguesPast(false);
                                }
                            });
                        }
                        break;
                    default:
                        break;
                }
            },

            navigateToFollowTeamForUnauthorizedUser = function () {
                window.location.href = "/Account/Login/";
            },

            navigateToTeamAdminPage = function () {
                router.navigateTo('/' + config.hashes.teamadmin + '/' + teamHeaderInfo().TeamID);
            },

            navigateToFollowTeamUrl = function () {
                return config.hashes.teams + '/1/' + teamId;
            },

            navigateToEditTeam = function () {
                window.location.href = '/team/addedit/' + teamHeaderInfo().ClubID + '/' + teamHeaderInfo().TeamID;
            },

            followTheTeam = function (data, event) {
                if ($(event.target).hasClass('btn-gray-inverted'))
                    return;

                shell.showProgressIndicator(MemberTexts.Following);

                datamanager.followTeam(teamId)
                    .then(function (json) {
                        shell.hideProgressIndicator();

                        if (json === 0) {
                            // Succesful follow
                        } else {
                            // Request
                            alert('Förfrågan skickad! För att följa detta lag måste den godkännas av en lagadministratör.');
                        }

                        $(event.target).removeClass('btn-secondary').addClass('btn-gray-inverted').html(MemberTexts.Following);
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error);
                    });
            },

            deleteTeam = function () {
                var r = confirm(teamAdminTexts.AreYouSureYouWantToDeleteThisTeam);
                if (r === true) {
                    presenter.toggleSaveActivity(true, teamAdminTexts.DeletingTeam);
                    datamanager.deleteTeam(teamHeaderInfo().TeamID, {
                        success: function () {
                            presenter.toggleSaveActivity(false, '');
                            window.location.href = "/";
                        },
                        error: function (response) {
                            alert(response);
                            presenter.toggleSaveActivity(false);
                        }
                    });
                }
            },

            deleteFollower = function (follower) {
                var r = confirm(teamAdminTexts.AreYouSureYouWantToDeleteThisFollower);

                if (r === true) {
                    shell.showProgressIndicator(teamAdminTexts.DeletingFollower);

                    datamanager.deleteFollower(follower.MemberTeamRoleID, {
                        success: function () {
                            shell.hideProgressIndicator();

                            followers.remove(function (f) {
                                return f.MemberTeamRoleID === follower.MemberTeamRoleID;
                            });
                        },
                        error: function (response) {
                            alert(response);

                            shell.hideProgressIndicator();
                        }
                    });
                }
            },

            deleteLiveReporter = function (item) {
                var r = confirm('Är du säker att du vill ta bort denna live reporter?');

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Deleting);

                    datamanager.deleteLiveReporter(item.TeamLiveReporterID, {
                        success: function () {
                            shell.hideProgressIndicator();

                            liveReporters.remove(function (f) {
                                return f.TeamLiveReporterID === item.TeamLiveReporterID;
                            });
                        },
                        error: function (response) {
                            alert(response);

                            shell.hideProgressIndicator();
                        }
                    });
                }
            },

            deleteAdmin = function (item) {
                var r = confirm('Är du säker på att du vill ta bort denna admin?');

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Deleting);

                    datamanager.deleteTeamAdmin(item.TeamAdministratorID, {
                        success: function () {
                            shell.hideProgressIndicator();

                            adminReporters.remove(function (f) {
                                return f.TeamAdministratorID === item.TeamAdministratorID;
                            });
                        },
                        error: function (response) {
                            alert(response);

                            shell.hideProgressIndicator();
                        }
                    });
                }
            },

            createTeamNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.team + '/' + teamId + '/' + endPath;
                    },
                    toClick: function () {
                        window.scrollTo(0, 0);
                        router.navigateTo(config.hashes.team + '/' + teamId + '/' + endPath);
                    }
                };
            },

            styleBlurbs = function (json) {
                for (var i = 0; i < json.length; i++) {
                    json[i].isHalfPageLeft = false;
                    json[i].isHalfPageRight = false;
                }
            },            

            styleFrontPageBlurbs = function (json) {
                for (var i = 0; i < json.length; i++) {
                    json[i].isHalfPageLeft = false;
                    json[i].isHalfPageRight = false;
                }

                for (i = 0; i < json.length - 1; i++) {
                    if (_.contains(frontPageBlurbsSuitableForHalfPage, json[i].MagazineBlurbTypeID) && _.contains(frontPageBlurbsSuitableForHalfPage, json[i + 1].MagazineBlurbTypeID)) {
                        json[i].isHalfPageLeft = true;
                        json[i + 1].isHalfPageRight = true;

                        i = i + 1;

                        if (i > json.length - 2) {
                            break;
                        }
                    }
                }
            },

            navigateToTeamStart = function () {
                return createTeamNavigationItem('start');
            },

            navigateToTeamFeed = function () {
                return createTeamNavigationItem('feed');
            },

            navigateToTeamInfo = function () {
                return createTeamNavigationItem('info');
            },

            navigateToTeamGames = function () {
                return createTeamNavigationItem('games');
            },

            navigateToTeamPlayers = function () {
                return createTeamNavigationItem('players');
            },

            navigateToTeamStaff = function () {
                return createTeamNavigationItem('staff');
            },

            navigateToTeamLeagues = function () {
                return createTeamNavigationItem('leagues');
            },

            navigateToTeamAdmins = function () {
                return createTeamNavigationItem('admins');
            },

            navigateToTeamAdmin = function () {
                return createTeamNavigationItem('admin');
            },

            navigateToTeamLiveReporters = function () {
                return createTeamNavigationItem('livereporters');
            },

            navigateToTeamPartners = function () {
                return createTeamNavigationItem('partners');
            },            

            navigateToTeamPosts = function () {
                return createTeamNavigationItem('posts');
            },            

            navigateToFollowers = function () {
                return createTeamNavigationItem('followers');
            },

            navigateToInvite = function () {
                return createTeamNavigationItem('invite');
            },

            navigateToTeamPictures = function () {
                return createTeamNavigationItem('pictures');
            },

            navigateToTeamVideos = function () {
                return createTeamNavigationItem('videos');
            },

            navigateToTeamPlay = function () {
                return createTeamNavigationItem('play');
            },

            navigateToClub = function (team) {
                navigationItem = {
                    getHrefString: function () {
                        if (memberIsLoggedIn())
                            return config.hashes.club + '/' + team.ClubID;
                        else
                            return config.hashes.club + '/' + team.ClubID;

                    },
                    toClick: function () {
                        if (memberIsLoggedIn())
                            router.navigateTo(config.hashes.club + '/' + team.ClubID);
                        else
                            router.navigateTo(config.hashes.club + '/' + team.ClubID);

                    }
                };
                return navigationItem;
            },

            navigateToGame = function (game) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.magazinegameview + '/' + game.GameID;
                    },
                    toClick: function () {
                        magazinegameview.setGameHeaderInfo(game);
                        router.navigateTo(config.hashes.magazinegameview + '/' + game.GameID);
                    }
                };
                return navigationItem;
            },

            navigateToPlayer = function (player) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.teamplayer + '/' + player.TeamPlayerID + '/0';
                    },
                    toClick: function () {
                        vmteamplayer.initialize(ko.toJS(teamHeaderInfo), function () {
                            router.navigateTo(config.hashes.teamplayer + '/' + player.TeamPlayerID + '/0');
                        });
                    }
                };
                return navigationItem;
            },

            navigateToPicture = function (picture) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.livedetails + '/' + picture.GameID + '/' + picture.PictureID + '/2';
                    },
                    toClick: function () {
                        if (memberIsLoggedIn()) {
                            router.navigateTo(config.hashes.livedetails + '/' + picture.GameID + '/' + picture.PictureID + '/2');
                        } else {
                            alert(MemberTexts.SignUpRequired);
                        }
                    }
                };
                return navigationItem;
            },

            navigateToVideo = function (video) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.livedetails + '/' + video.GameID + '/' + video.VideoID + '/5';
                    },
                    toClick: function () {
                        if (memberIsLoggedIn()) {
                            router.navigateTo(config.hashes.livedetails + '/' + video.GameID + '/' + video.VideoID + '/5');
                        } else {
                            alert(MemberTexts.SignUpRequired);
                        }

                    }
                };
                return navigationItem;
            },

            navigateToFollower = function (item) {
                if (item.TeamRoleID === 2)
                    router.navigateTo(config.hashes.teamplayer + '/' + item.TeamFollowerID + '/0');
                else if (item.TeamRoleID === 1)
                    router.navigateTo(config.hashes.staff + '/' + item.TeamFollowerID);

            },            

            navigateToTeam = function (teamIdParam) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.team + '/' + teamIdParam;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.team + '/' + teamIdParam);
                    }
                };
                return navigationItem;
            },

            navigateToAddGame = function () {
                window.location.href = '/leagueTeamGame' + '/addedit/' + teamId;
            },

            navigateToEditGame = function (game) {
                window.location.href = '/leagueTeamGame/addedit/' + teamHeaderInfo().TeamID + '/' + game.GameID;
            },

            navigateToAddPlayer = function () {
                window.location.href = '/player' + '/addedit/' + teamId;
            },

            navigateToAddPlayerGuardian = function () {
                window.location.href = '/playerguardian' + '/addedit/' + teamId;
            },            

            navigateToStaff = function (staff) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.staff + '/' + staff.TeamStaffID;
                    },
                    toClick: function () {
                        vmstaff.initialize(ko.toJS(teamHeaderInfo), function () {
                            router.navigateTo(config.hashes.staff + '/' + staff.TeamStaffID);
                        });

                    }
                };
                return navigationItem;
            },

            navigateToNewTeamStaff = function () {
                navigationItem = {
                    getHrefString: function () {
                        return '/' + config.hashes.teamadmin + '/' + teamId + '/searchteamstaff';
                    },
                    toClick: function () {
                        router.navigateTo('/' + config.hashes.teamadmin + '/' + teamId + '/searchteamstaff');
                    }
                };
                return navigationItem;
            },

            navigateToNewPlayer = function () {
                navigationItem = {
                    getHrefString: function () {
                        return '/' + config.hashes.teamadmin + '/' + teamId + '/searchplayers';
                    },
                    toClick: function () {
                        router.navigateTo('/' + config.hashes.teamadmin + '/' + teamId + '/searchplayers');
                    }
                };
                return navigationItem;
            },

            navigateToAddTeamStaff = function () {
                window.location.href = '/teamstaff' + '/addedit/' + teamId;
            },

            navigateToLeagueView = function (league) {
                navigationItem = {
                    getHrefString: function () {
                        if (memberIsLoggedIn()) {
                            return config.hashes.leaguesite + '/' + league.LeagueID;
                        } else {
                            return config.hashes.leaguesite + '/' + league.LeagueID;
                        }

                    },
                    toClick: function () {
                        if (memberIsLoggedIn()) {
                            router.navigateTo(config.hashes.leaguesite + '/' + league.LeagueID);
                        } else {
                            router.navigateTo(config.hashes.leaguesite + '/' + league.LeagueID);
                        }

                    }
                };
                return navigationItem;
            },

            navigateToLeague = function (data) {
                router.navigateTo(config.hashes.leaguesite + '/' + data.LeagueID);
            },

            navigateToAddInvite = function () {
                navigationItem = {
                    getHrefString: function () {
                        return '/' + config.hashes.member + '/sendinvite/' + teamId;
                    },
                    toClick: function () {
                        router.navigateTo('/' + config.hashes.member + '/sendinvite/' + teamId);
                    }
                };
                return navigationItem;
            },           

            navigateToDeepLink = function (data, event) {
                navigation.navigateToDeepLink(data);
            },

            showAdminView = ko.computed(function () {
                return $.cookie('adminMode') ? true : false;
            }),

            toggleMoreItemList = function () {
                $('.moreMenuItemsList').toggleClass('hiddenOnWideDisplay');
            },

            toggleComingGames = function () {
                currentActiveTabId = 1;
                window.scrollTo(0, 0);
                $('#toggleComingGames').addClass('active');
                $('#togglePastGames').removeClass('active');

                $('#comingTeamGamesList').show();
                $('#pastTeamGamesList').hide();
            },

            togglePastGames = function () {
                currentActiveTabId = 2;
                window.scrollTo(0, 0);
                $('#toggleComingGames').removeClass('active');
                $('#togglePastGames').addClass('active');

                $('#comingTeamGamesList').hide();
                $('#pastTeamGamesList').show();
            },

            toggleComingLeagues = function () {
                currentActiveTabId = 3;
                window.scrollTo(0, 0);
                $('#toggleComingLeagues').addClass('active');
                $('#togglePastLeagues').removeClass('active');

                $('#leaguesList').show();
                $('#pastleaguesList').hide();
            },

            togglePastLeagues = function () {
                currentActiveTabId = 4;
                window.scrollTo(0, 0);
                $('#toggleComingLeagues').removeClass('active');
                $('#togglePastLeagues').addClass('active');

                $('#pastleaguesList').show();
                $('#leaguesList').hide();
            },

            teamIsSportswikTeam = ko.computed(function () {
                return typeof teamHeaderInfo() !== 'undefined' && teamHeaderInfo().TeamTypeID === 3;
            }),

            teamIsProfixioTeam = ko.computed(function () {
                return typeof teamHeaderInfo() !== 'undefined' && typeof teamHeaderInfo().ExternalDataSourceID !== 'undefined' && teamHeaderInfo().ExternalDataSourceID > 100;
            }),

            memberFollowsTeam = ko.computed(function () {
                return typeof teamHeaderInfo() !== 'undefined' && teamHeaderInfo().MemberTeamRoleID !== 0;
            }),

            memberIsSportswikAdmin = ko.computed(function () {
                return shell.currentMember.IsSportswikAdmin;
            }),

            memberIsTeamAdministrator = ko.computed(function () {
                return shell.currentMember.IsSportswikAdmin || typeof teamHeaderInfo() !== 'undefined' && teamHeaderInfo().MemberIsTeamAdministrator;
            }),

            followButtonText = ko.computed(function () {
                if (memberFollowsTeam()) {
                    return teamAdminTexts.AddNewRole;
                } else {
                    return teamAdminTexts.Follow;
                }
            }),

            getTeamHeaderInfo = function () {
                datamanager.getTeamHeaderInfoForTeamSite(teamId, {
                    success: function (model) {
                        teamHeaderInfo(model);

                        partnerFeaturesEnabled(model.PartnerFeaturesEnabled);

                        removePreloader('');
                    },
                    error: function (response) {
                    }
                });
            },

            getTeamHeaderInfoTest = function () {
                datamanager.getTeamHeaderInfoTest(teamId, {
                    success: function (model) {
                        console.log(model);
                    },
                    error: function (response) {
                        console.log(response);
                    }
                });
            },

            sendInvite = function () {
                if (teamMemberinviteModel().MobilePhone().length === 0) {
                    alert(teamAdminTexts.MobilePhoneNumberRequired);
                    return;
                }

                uihelper.displayLoadingIndicator(MiscTexts.Sending);

                var smsInvite = ko.toJS(teamMemberinviteModel);

                datamanager.sendSMSInvite(smsInvite, {
                    success: function (json) {
                        uihelper.hideLoadingIndicator();

                        alert(clubAdminTexts.InvitesSent);

                        router.navigateBack();
                    },
                    error: function (response) {
                        uihelper.hideLoadingIndicator();

                        alert(response);
                    }
                });
            },

            addComment = function () {
                router.navigateTo(config.hashes.gamecomment + '/' + currentGameId);
            },

            editGame = function (item) {
                router.navigateTo(config.hashes.game + '/' + item.GameID + /edit/ + teamId);
            },

            deleteGame = function (item) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteGame(item.GameID, {
                        success: function () {
                            shell.showToast('Matchen är borttagen');

                            if (currentActiveTabId === 1) // coming games
                            {
                                games.remove(function (f) {
                                    return f.GameID === item.GameID;
                                });
                            }
                            else if (currentActiveTabId === 2) // Previous games
                            {
                                pastGames.remove(function (f) {
                                    return f.GameID === item.GameID;
                                });
                            }
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            addLiveReporter = function (item) {
                var r = confirm(teamAdminTexts.WouldYouLikeToAdd + " " + item.FullName + " " + teamAdminTexts.AsLiveReporter + " ?");

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Adding);

                    datamanager.insertTeamLiveReporter(teamId, item.MemberID)
                        .then(function (json) {
                            $('#team-view .overlay').hide();

                            shell.hideProgressIndicator();

                            adminReporters([]);
                            liveReporters([]);

                            window.scrollTo(0, 0);
                            router.navigateTo(config.hashes.team + '/' + teamId + '/livereporters');
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();
                        });
                }
            },

            addTeamAdmin = function (item) {
                var r = confirm(teamAdminTexts.WouldYouLikeToAdd + " " + item.FullName + " " + teamAdminTexts.AsTeamAdmin + " ?");

                if (r === true) {
                    shell.showProgressIndicator(MiscTexts.Adding);

                    datamanager.insertTeamAdmin(teamId, item.MemberID)
                        .then(function (json) {
                            shell.hideProgressIndicator();

                            adminReporters([]);
                            liveReporters([]);

                            window.scrollTo(0, 0);
                            router.navigateTo(config.hashes.team + '/' + teamId + '/livereporters');
                        })
                        .fail(function (error) {
                            shell.hideProgressIndicator();
                        });
                }
            },

            dismissTeamAction = function (item) {
                var r = confirm("Vill du ta bort detta meddelande?");

                if (r === true) {
                    datamanager.dismissTeamAction(item.TeamActionID, {
                        success: function (model) {
                            initTeamModel('');

                            loadTeamSite();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
            },

            navigateToAddLiveReporter = function () {
                shell.showProgressIndicator(MiscTexts.GettingData);

                datamanager.getPossibleLiveReportersForTeam(teamId, {
                    success: function (json) {
                        possibleLiveReporters(json);

                        shell.hideProgressIndicator();

                        window.scrollTo(0, 0);
                        router.navigateTo(config.hashes.team + '/' + teamId + '/addlivereporter');
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            navigateToAddAdmin = function () {
                shell.showProgressIndicator(MiscTexts.GettingData);

                datamanager.getPossibleTeamAdmins(teamId, {
                    success: function (json) {
                        possibleTeamAdmins(json);

                        shell.hideProgressIndicator();

                        window.scrollTo(0, 0);
                        router.navigateTo(config.hashes.team + '/' + teamId + '/addteamadmin');
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            navigateToInfoItem = function (data, event) {
                // Because info items has nested context menu, we need to prevent the bubbling when the context menu is clicked
                if ($(event.target).hasClass('preventBubble') === false) {
                    router.navigateTo(config.hashes.infoitemdetails + '/' + data.InfoItemID);
                }
            },

            navigateToTeamAction = function (item) {
                switch (item.TeamActionTypeID) {
                    case 37: // Invite people to help you
                        //Clear observables to forece reload of team actions
                        clearObservables();
                        router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                        break;
                    case 39: // Import team members
                        //Clear observables to forece reload of team actions
                        clearObservables();
                        router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                        break;
                    case 40: // Review Team Name
                        //Update status of team action, then navigate
                        datamanager.setTeamActionStatusCompleted(item.TeamActionID, {
                            success: function () {
                                //Clear observables to forece reload of team actions
                                clearObservables();
                            },
                            error: function (error) {
                                //Do nothing
                            }
                        });
                        router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/start');
                        break;
                    case 42:
                        router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/connect');
                        break;
                    case 43:
                        router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                        break;
                    default:
                        alert('Not implemented yet');
                        break;
                }
            },

            addNewGame = function () {
                games([]);

                router.navigateTo(config.hashes.game + '/0/edit/' + teamId);
            },

            writeGameReport = function () { },

            showTeamFeedDetails = function (data) {
                navigationItem = {
                    getHrefString: function () {
                        return config.hashes.teamfeeddetails + '/' + data.TeamID + '/' + data.TeamFeedItemID + '/' + data.TeamFeedItemTypeID;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.teamfeeddetails + '/' + data.TeamID + '/' + data.TeamFeedItemID + '/' + data.TeamFeedItemTypeID);
                    }
                };
                return navigationItem;
            },

            navigateToMagazineGameView = function (selectedGame) {
                var navigationItem;

                if (selectedGame.GameID !== 0) {
                    navigationItem = {
                        getHrefString: function () {
                            //return config.hashes.magazinegameview + '/' + selectedGame.GameID;
                            return config.hashes.magazinegameview + '/' + selectedGame.GameID;
                        },
                        toClick: function () {
                            magazinegameview.setGameHeaderInfo(selectedGame.GameHeaderInfo);
                            //router.navigateTo(config.hashes.magazinegameview + '/' + selectedGame.GameID);
                            router.navigateTo(config.hashes.magazinegameview + '/' + selectedGame.GameID);
                        }
                    };
                }
                else if (selectedGame.MagazineBlurbTypeID === 902) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.myteams;
                        },
                        toClick: function () {
                            //magazinegameview.setGameHeaderInfo(selectedGame.GameHeaderInfo);
                            router.navigateTo(config.hashes.myteams);
                        }
                    };
                }
                else if (selectedGame.MagazineBlurbTypeID === 905) {
                    navigationItem = {
                        getHrefString: function () {
                            return config.hashes.team + '/' + selectedGame.TeamID;
                        },
                        toClick: function () {
                            //magazinegameview.setGameHeaderInfo(selectedGame.GameHeaderInfo);
                            router.navigateTo(config.hashes.team + '/' + selectedGame.TeamID);
                        }
                    };
                }                
                else {
                    navigationItem = {
                        getHrefString: function () {
                            return "";
                        },
                        toClick: function () {
                        }
                    };
                }

                return navigationItem;
            },

            createInfoItem = function () {
                // First parameter is the enum, 4 is Team
                // Second parameter is the ID of the entity, in this case the ClubId
                // Third parameter is used if we are editing an item, in this case we pass 0

                infoitem.activate(4, teamId, 0, null, infoItemCallback);
            },

            editInfoItem = function (data) {
                // First parameter is the enum, 4 is Team
                // Second parameter is the ID of the entity, if we are editing an item we do not need to pass this in
                // Third parameter is used if we are editing an item

                infoitem.activate(data.InfoItemTypeID, 0, data.InfoItemID, null, infoItemCallback);
            },

            deleteInfoItem = function (data) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteInfoItem(data.InfoItemID, data.InfoItemTypeID, {
                        success: function (json) {
                            var existingItem = ko.utils.arrayFirst(posts(), function (line) {
                                return line.InfoItemID === data.InfoItemID;
                            });

                            if (existingItem)
                                posts.remove(existingItem);
                        },
                        error: function (error) {
                            alert('Ett fel upstod');

                            console.log(error);
                        }
                    });
                }
            },

            listInfoItems = function () {
                router.navigateTo(config.hashes.team + '/' + teamId + '/myposts');
            },

            infoItemCallback = function () {
                reloadInfoItems();
            },

            canCreateTeamStaff = function () {
                return appconfig.canCreateTeamStaff();
            },

            canCreatePlayer = function () {
                return appconfig.canCreatePlayer();
            },

            onKeyPressAllowNumeric = function (d, event) {
                return utils.isNumericOrDelete(event);                
            },

            onPastePhoneNumber = function (data, event) {
                var phone = event.originalEvent.clipboardData.getData("text/plain");

                if (phone) {
                    phone = phone.replace(/\D/g, '');

                    if (phone.length > 10)
                        phone = phone.substring(0, 10);

                    $(event.target).val(phone).change();
                }

                phoneSearchHelper(data.Id, phone);

                return false;
            },

            onPhoneKeyUp = function (data, event) {
                if (!utils.isNumericOrDelete(event)) {
                    return;
                }

                phoneSearchHelper(data.Id, data.Value);
            },

            cancelOverlay = function () {
                $('#team-view .overlay').hide();
            },

            phoneSearchHelper = function (countryId, phone) {
                if (phone.length < 7)
                    return;

                datamanager.searchForMember(0, '', phone, '', false, countryId)
                    .then(function (model) {
                        if (model.length > 0) {
                            matchingMember(model[0]);

                            $('#team-view .live-reporter-select').show();
                        }
                    })
                    .fail(function (error) {
                        alert(error.responseText);
                    });
            },

            handleTeamBannerSelected = function (evt) {
                var files = evt.target.files;

                for (var i = 0; i < files.length; i++) {
                    var f = files[i];

                    if (!f.type.match('image.*')) {
                        continue;
                    }

                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var base64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            datamanager.updateTeamBanner(teamId, base64data)
                                .then(function (json) {
                                    toastr.success('Lagbilden har laddats upp');
                                })
                                .fail(function (error) {
                                    alert(error.responseText);
                                });

                            $('.uploadTeamBannerOverlay').hide();
                            $('.teamBannerDiv').css('background-image', 'url(' + 'data:image/jpg;base64,' + base64data + ')');                            
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },           

            init = function () {                
                $(document).on('change', '.teamBannerTeamPageFilePicker', function (evt) {
                    handleTeamBannerSelected(evt);
                    evt.target.value = '';
                });
            };

        init();

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,            
            followButtonText: followButtonText,      
            breadCrumb: breadCrumb, 

            navigateToClub: navigateToClub,            
            navigateToTeamAdmin: navigateToTeamAdmin,
            navigateToFollowTeamUrl: navigateToFollowTeamUrl,
            navigateToEditTeam: navigateToEditTeam,            
            navigateToTeamStart: navigateToTeamStart,
            navigateToTeamFeed: navigateToTeamFeed,
            navigateToTeamInfo: navigateToTeamInfo,
            navigateToTeamGames: navigateToTeamGames,
            navigateToTeamPlayers: navigateToTeamPlayers,
            navigateToTeamStaff: navigateToTeamStaff,
            navigateToTeamLeagues: navigateToTeamLeagues,            
            navigateToTeamAdmins: navigateToTeamAdmins,
            navigateToTeamAdminPage: navigateToTeamAdminPage,
            navigateToTeamLiveReporters: navigateToTeamLiveReporters,
            navigateToTeamPartners: navigateToTeamPartners,            
            navigateToTeamAction: navigateToTeamAction,       
            navigateToTeamPosts: navigateToTeamPosts,
            navigateToAddGame: navigateToAddGame,
            navigateToEditGame: navigateToEditGame,
            navigateToGame: navigateToGame,            
            navigateToAddPlayer: navigateToAddPlayer,
            navigateToAddPlayerGuardian: navigateToAddPlayerGuardian,            
            navigateToPlayer: navigateToPlayer,            
            navigateToFollower: navigateToFollower,
            navigateToTeam: navigateToTeam,            
            navigateToNewTeamStaff: navigateToNewTeamStaff,
            navigateToNewPlayer: navigateToNewPlayer,
            navigateToAddTeamStaff: navigateToAddTeamStaff,
            navigateToStaff: navigateToStaff,
            navigateToLeagueView: navigateToLeagueView,
            navigateToLeague: navigateToLeague,            
            navigateToFollowTeamForUnauthorizedUser: navigateToFollowTeamForUnauthorizedUser,            
            navigateToFollowers: navigateToFollowers,
            navigateToInvite: navigateToInvite,
            navigateToTeamPictures: navigateToTeamPictures,
            navigateToTeamVideos: navigateToTeamVideos,
            navigateToTeamPlay: navigateToTeamPlay,
            navigateToAddInvite: navigateToAddInvite,
            navigateToPicture: navigateToPicture,
            navigateToVideo: navigateToVideo,
            navigateToAddLiveReporter: navigateToAddLiveReporter,
            navigateToAddAdmin: navigateToAddAdmin,            
            navigateToInfoItem: navigateToInfoItem,                        
            navigateToDeepLink: navigateToDeepLink,

            toggleMoreItemList: toggleMoreItemList,
            toggleComingGames: toggleComingGames,
            togglePastGames: togglePastGames,
            toggleComingLeagues: toggleComingLeagues,
            togglePastLeagues: togglePastLeagues,                        

            memberFollowsTeam: memberFollowsTeam,
            memberIsTeamAdministrator: memberIsTeamAdministrator,            
            memberIsSportswikAdmin: memberIsSportswikAdmin,
            memberIsLoggedIn: memberIsLoggedIn,                        
            teamIsSportswikTeam: teamIsSportswikTeam,
            teamIsProfixioTeam: teamIsProfixioTeam,
            partnerFeaturesEnabled: partnerFeaturesEnabled,

            teamHeaderInfo: teamHeaderInfo,
            games: games,
            comingGames: comingGames,
            pastGames: pastGames,
            players: players,
            staff: staff,            
            admins: admins,
            adminReporters: adminReporters,
            liveReporters: liveReporters,
            leagues: leagues,
            pastLeagues: pastLeagues,            
            pictures: pictures,
            videos: videos,      
            highlights: highlights,
            replays: replays,
            liveGames: liveGames,
            plannedGames: plannedGames,

            followers: followers,
            possibleLiveReporters: possibleLiveReporters,
            possibleTeamAdmins: possibleTeamAdmins,
            playerGuardianFollowers: playerGuardianFollowers,
            teamStaffFollowers: teamStaffFollowers,
            playerFollowers: playerFollowers,
            matchingMembers: matchingMembers,
            seasons: seasons,
            selectedSeason: selectedSeason,            
            countries: countries,
            initTeamModel: initTeamModel,            
            initPicsAndVideosModel: initPicsAndVideosModel,
            initTeamPartnersModel: initTeamPartnersModel,
            initPlayPage: initPlayPage,

            followersForTeamModel: followersForTeamModel,
            teamReplaySponsors: teamReplaySponsors,            
            posts: posts,                        
            teamMemberinviteModel: teamMemberinviteModel,
            postsFilterType: postsFilterType,
            teamInfo: teamInfo,
            searchLiveReporter: searchLiveReporter,
            matchingMember: matchingMember,

            gettingGamesPast: gettingGamesPast,
            gettingGamesComing: gettingGamesComing,
            noMoreGamesToGetPast: noMoreGamesToGetPast,
            noMoreGamesToGetComing: noMoreGamesToGetComing,            

            gettingPictures: gettingPictures,
            gettingVideos: gettingVideos,
            gettingHighlights: gettingHighlights,
            gettingReplays: gettingReplays,
            gettingLiveGames: gettingLiveGames,
            gettingPlannedGames: gettingPlannedGames,

            sendInvite: sendInvite,            

            addNewGame: addNewGame,            
            addComment: addComment,
            deleteGame: deleteGame,
            editGame: editGame,
            writeGameReport: writeGameReport,
            blurbsInTeamFeed: blurbsInTeamFeed,
            blurbsWithLiveStreams: blurbsWithLiveStreams,            
            currentMember: currentMember,
            
            showTeamFeedDetails: showTeamFeedDetails,
            navigateToMagazineGameView: navigateToMagazineGameView,            
            
            addLiveReporter: addLiveReporter,     
            addTeamAdmin: addTeamAdmin,
            dismissTeamAction: dismissTeamAction,

            createInfoItem: createInfoItem,
            editInfoItem: editInfoItem,
            deleteInfoItem: deleteInfoItem,
            listInfoItems: listInfoItems,            
            initInfoItem: initInfoItem,            

            numberOfFollowers: numberOfFollowers,
            numberOfPlayers: numberOfPlayers,
            numberOfTeamStaffMembers: numberOfTeamStaffMembers,            

            canCreateTeamStaff: canCreateTeamStaff,
            canCreatePlayer: canCreatePlayer,
            canAddEditAdmin: canAddEditAdmin,
            canAddEditLiveReporter: canAddEditLiveReporter,

            hasSponsors: hasSponsors,

            onPhoneKeyUp: onPhoneKeyUp,
            onPastePhoneNumber: onPastePhoneNumber,
            onKeyPressAllowNumeric: onKeyPressAllowNumeric,
            cancelOverlay: cancelOverlay,

            filterPosts: filterPosts,
            deleteTeam: deleteTeam,
            followTheTeam: followTheTeam,
            deleteLeagueTeam: deleteLeagueTeam,
            deleteFollower: deleteFollower,
            deleteLiveReporter: deleteLiveReporter,
            deleteAdmin: deleteAdmin,            
            acceptFollowerRequest: acceptFollowerRequest,
            denyFollowerRequest: denyFollowerRequest,
            uploadTeamBannerClick: uploadTeamBannerClick,            
            showAdminView: showAdminView,
            getTeamHeaderInfoTest: getTeamHeaderInfoTest
        };
    });;
define('viewmodels/vm.teamadmin',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'viewmodels/vm.shell', 'helpers/sw.utils', 'viewmodels/vm.appconfig', 'models/model', 'models/model.mapper', 'models/viewmodel', 'viewmodels/vm.imagecropper', 'viewmodels/vm.clubselect', 'toastr', 'datamanager', 'underscore'],
    function ($, ko, config, router, messenger, shell, utils, appconfig, model, modelmapper, viewmodel, imagecropper, clubselect, toastr, datamanager, _) {
        var teamId = 0,
            teamHeaderInfo = ko.observable(),
            team = ko.observable(),
            teamAlias = ko.observable(''),
            teamName = ko.observable(''),
            currentPage = ko.observable(),
            staff = ko.observableArray(),
            players = ko.observableArray(),
            clubstaff = ko.observableArray(),
            clubplayers = ko.observableArray(),
            countries = ko.observableArray(),
            seasons = ko.observableArray(),
            genders = ko.observableArray(),
            shoots = ko.observableArray(),
            teamSponsors = ko.observableArray(),
            availableTeams = ko.observableArray(),
            connectedTeams = ko.observableArray(),
            liveStreamPaymentRows = ko.observableArray(),
            liveStreamGamePaymentRows = ko.observableArray(),
            liveStreamTeamPaymentRows = ko.observableArray(),
            payoutSummaryRows = ko.observableArray(),
            replayPartners = ko.observableArray(),
            replayPartnersModel = ko.observable(),

            teamPlayerForEdit = ko.observable(),
            teamStaffForEdit = ko.observable(),
            firstMemberGuardian = ko.observable(),
            secondMemberGuardian = ko.observable(),
            memberGuardianForEdit = ko.observable(),
            guardianMember = ko.observable(),
            teamStaffRoles = ko.observableArray(),
            playerPositions = ko.observableArray(),
            externalSystemName = ko.observable(''),
            importPlayers = ko.observableArray(),
            importTeamStaff = ko.observableArray(),
            memberForInvite = ko.observable(),
            matchingMember = ko.observable(),
            teamMemberForInvite = ko.observable(),
            selectedPlayerGender = ko.observable(1),
            selectedTeamStaffGender = ko.observable(1),
            selectedClubPlayer = ko.observable(),
            selectedClubStaff = ko.observable(),
            selectedMemberForProfilePicture = '',
            breadCrumb = ko.observable(),
            importCompleted = ko.observable(),
            teamSearchString = ko.observable('-'),
            defaultTeamStaffRole = 0,
            defaultPlayerPosition = 0,
            childMemberId = 0,
            importSystemId = 0,
            selectionType = 0,
            pictureUploadTeamRoleID = 0,
            pictureUploadTeamItemID = 0,
            pictureUploadBase64data = '',
            playerNewClubId = -1,
            playerNewClubName = '',
            importFileNameGUID = '',
            importHeaderModel = ko.observable(),
            memberHeaderModel = ko.observable(),
            paymentDossier = ko.observable(),
            initLiveStream = ko.observable(),
            initTeamSponsors = ko.observable(),
            teamPartner = ko.observable(),
            externalDataSourceID = 0,
            isEditPersonMode = false,
            searchTeamStaffParams = ko.observable(),

            activate = function (routeData, callback) {
                routeData.subview = 'start';
                messenger.publish.viewModelActivated();

                activatesubview(routeData);
            },

            activatesubview = function (routeData, callback) {
                if (routeData.Id !== undefined) {
                    teamId = Number(routeData.Id);
                }

                var currentView = routeData.subview;
                currentViewName = 'teamadmin-' + currentView;
                currentPage(currentView);
                breadCrumb('start');

                $('.teamadmin-subview').hide();
                $('#teamadmin-' + currentView).show();

                if (teamHeaderInfo() !== undefined) {
                    if (teamHeaderInfo().TeamID !== teamId) {
                        clearObservables();

                        getTeamHeaderInfo();
                    }
                }
                else {
                    getTeamHeaderInfo();
                }

                switch (currentView) {
                    case 'start':
                        {
                            window.scrollTo(0, 0);
                            breadCrumb('start');

                            datamanager.initTeamAdmin(teamId, {
                                success: function (model) {
                                    team(model.Team);

                                    teamAlias(model.Team.TeamAlias);
                                    teamName(model.Team.TeamName);
                                },
                                error: function (response) {
                                }
                            });
                        }
                        break;
                    case 'members':
                        {
                            breadCrumb('members');

                            if (staff().length === 0 && players().length === 0) {
                                $('#teamadmin-members .beforeSubViewLoaded').show();
                                $('#teamadmin-members .afterSubViewLoaded').hide();

                                datamanager.getTeamMembers(teamId, {
                                    success: function (model) {

                                        memberHeaderModel(model.HeaderModel);
                                        //Set property for import completed
                                        importCompleted(model.ImportCompleted);

                                        var underlayingArray = staff();

                                        for (var i = 0; i < model.TeamStaff.length; i++) {
                                            underlayingArray.push(model.TeamStaff[i]);
                                        }

                                        staff.valueHasMutated();

                                        underlayingArray = players();

                                        for (var j = 0; j < model.Players.length; j++) {
                                            underlayingArray.push(model.Players[j]);
                                        }

                                        players.valueHasMutated();

                                        $('#teamadmin-members .beforeSubViewLoaded').hide();
                                        $('#teamadmin-members .afterSubViewLoaded').show();

                                    },
                                    error: function (response) {
                                    }
                                });
                            } else {
                                $('#teamadmin-members .beforeSubViewLoaded').hide();
                                $('#teamadmin-members .afterSubViewLoaded').show();
                            }
                        }
                        break;
                    case 'partners':
                        {
                            breadCrumb('partners');
                            // TODO:
                        }
                        break;
                    case 'connect':
                        {
                            breadCrumb('connect');

                            initTeamConnect();
                        }
                        break;
                    case 'searchteamstaff':
                        {
                            breadCrumb('members');                            

                            clubstaff([]);

                            if (countries().length === 0 || playerPositions().length === 0 || genders().length === 0 || teamStaffRoles().length === 0) {                                
                                datamanager.initTeamAdminVariables(teamId, {
                                    success: function (json) {
                                        fillVariableData(json);

                                        searchTeamStaffParams({
                                            Name: '',
                                            PersonalIdentityNumber: '',
                                            MobilePhoneNumber: '',
                                            MobileCountryId: appconfig.defaultCountryCodeId()
                                        });
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            }
                        }
                        break;
                    case 'searchplayers':
                        {
                            breadCrumb('members');

                            clubplayers([]);
                            $('#playerSearchPersonalNumber').val('');
                            $('#playerSearchName').val('');

                            if (countries().length === 0 || playerPositions().length === 0 || genders().length === 0 || teamStaffRoles().length === 0) {
                                datamanager.initTeamAdminVariables(teamId, {
                                    success: function (json) {
                                        fillVariableData(json);
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            }
                        }
                        break;
                    case 'addeditteamstaff':
                        {
                            breadCrumb('members');

                            if (countries().length === 0 || playerPositions().length === 0 || genders().length === 0 || teamStaffRoles().length === 0) {
                                datamanager.initTeamAdminVariables(teamId, {
                                    success: function (json) {
                                        fillVariableData(json);
                                        initEditTeamStaff(routeData);
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            } else {
                                initEditTeamStaff(routeData);
                            }
                        }
                        break;
                    case 'addeditplayer':
                        {
                            breadCrumb('members');

                            if (countries().length === 0 || playerPositions().length === 0 || genders().length === 0) {
                                datamanager.initTeamAdminVariables(teamId, {
                                    success: function (json) {
                                        fillVariableData(json);
                                        initEditPlayer(routeData);
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            } else {
                                initEditPlayer(routeData);
                            }
                        }
                        break;
                    case 'addmemberguardians':
                        {
                            breadCrumb('members');

                            if (countries().length === 0) {
                                datamanager.initTeamAdminVariables(teamId, {
                                    success: function (json) {
                                        fillVariableData(json);

                                        initAddMemberGuardians(routeData);
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            } else {
                                initAddMemberGuardians(routeData);
                            }
                        }
                        break;
                    case 'editmemberguardian':
                        {
                            breadCrumb('members');

                            if (countries().length === 0) {
                                datamanager.initTeamAdminVariables(teamId, {
                                    success: function (json) {
                                        fillVariableData(json);

                                        initEditMemberGuardian(routeData);
                                    },
                                    error: function (response) {
                                        alert(response);
                                    }
                                });
                            } else {
                                initEditMemberGuardian(routeData);
                            }
                        }
                        break;
                    case 'invitemember':
                        {
                            breadCrumb('members');

                            if (memberForInvite() === undefined)
                                router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                            else {
                                initMemberInvite(memberForInvite());
                            }
                        }
                        break;
                    case 'stream':
                        {
                            breadCrumb('stream');

                            datamanager.initTeamAdminLiveStream(teamId, {
                                success: function (model) {
                                    initLiveStream(model);
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });

                            if (liveStreamPaymentRows().length === 0) {
                                // Load payments
                                datamanager.getTeamAdminLiveStreamStatistics(teamId, {
                                    success: function (model) {
                                        liveStreamPaymentRows([]);

                                        var underlayingArray = liveStreamPaymentRows();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        liveStreamPaymentRows.valueHasMutated();
                                    },
                                    error: function (error) {
                                        console.log(error);
                                    }
                                });
                            }

                            if (replayPartners().length === 0) {
                                datamanager.initTeamReplayPartners(teamId, {
                                    success: function (model) {
                                        replayPartnersModel(model);

                                        //replayPartners([]);

                                        //var underlayingArray = replayPartners();

                                        //for (var j = 0; j < model.ReplayPartners.length; j++) {
                                        //    underlayingArray.push(model.ReplayPartners[j]);
                                        //}

                                        //replayPartners.valueHasMutated();
                                    },
                                    error: function (error) {
                                        console.log(error);
                                    }
                                });
                            }

                            // liveStreamPaymentRows
                            // Get stats
                        }
                        break;
                    case 'sponsors':
                        {
                            breadCrumb('sponsors');

                            datamanager.initTeamSponsors(teamId, {
                                success: function (model) {
                                    teamSponsors([]);

                                    initTeamSponsors(model);

                                    var underlayingArray = teamSponsors();

                                    for (var i = 0; i < model.TeamSponsors.length; i++) {
                                        underlayingArray.push(model.TeamSponsors[i]);
                                    }

                                    teamSponsors.valueHasMutated();

                                },
                                error: function (error) {

                                }
                            });

                            if (seasons().length === 0) {
                                datamanager.getSeasons({
                                    success: function (model) {
                                        var underlayingArray = seasons();

                                        for (var i = 0; i < model.length; i++) {
                                            underlayingArray.push(model[i]);
                                        }

                                        seasons.valueHasMutated();
                                    },
                                    error: function (error) {

                                    }
                                });
                            }
                        }
                        break;
                    case 'editsponsor':
                        if (teamPartner() === undefined) {
                            router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/sponsors');
                        } else {
                            window.scrollTo(0, 0);

                            if (teamPartner().PartnerTypeID === 4)
                                breadCrumb('sponsors');
                            else if (teamPartner().PartnerTypeID === 5)
                                breadCrumb('stream');
                        }
                        break;
                    case 'dossier':
                        breadCrumb('sponsors');

                        if (paymentDossier() === undefined)
                            router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/sponsors');

                        break;
                    case 'lagetse':
                        {
                            importSystemId = 32;
                            breadCrumb('members');
                        }
                        break;
                    case 'sportadmin':
                        {
                            importSystemId = 31;
                            breadCrumb('members');
                        }
                        break;
                    case 'svenskalag':
                        {
                            importSystemId = 34;
                            breadCrumb('members');
                        }
                        break;
                    case 'myclub':
                        {
                            importSystemId = 33;
                            breadCrumb('members');
                        }
                        break;
                    case 'excel':
                        {
                            importSystemId = 35;
                            breadCrumb('members');
                        }
                        break;
                    case 'swissexcel':
                        {
                            importSystemId = 36;
                            breadCrumb('members');
                        }
                        break;
                }
            },

            fillVariableData = function (json) {
                countries([]);
                genders([]);
                playerPositions([]);
                teamStaffRoles([]);
                shoots([]);

                /* FILL TEAM STAFF ROLES */
                var underlayingArray = teamStaffRoles();

                for (var i = 0; i < json.TeamStaffRoles.length; i++) {
                    underlayingArray.push(json.TeamStaffRoles[i]);

                    if (json.TeamStaffRoles[i].IsDefault)
                        defaultTeamStaffRole = json.TeamStaffRoles[i].TeamStaffRoleID;
                }

                teamStaffRoles.valueHasMutated();

                /* FILL COUNTRIES */
                underlayingArray = countries();

                underlayingArray.push({ 'CountryID': 0, 'Name': '', 'DisplayName': '' });

                for (var j = 0; j < json.Countries.length; j++) {
                    underlayingArray.push(json.Countries[j]);
                }

                countries.valueHasMutated();

                /* FILL GENDERS */
                underlayingArray = genders();

                for (var k = 0; k < json.Genders.length; k++) {
                    underlayingArray.push(json.Genders[k]);
                }

                genders.valueHasMutated();

                /* FILL PLAYER POSITIONS */
                underlayingArray = playerPositions();

                for (var l = 0; l < json.PlayerPositions.length; l++) {
                    underlayingArray.push(json.PlayerPositions[l]);

                    if (json.PlayerPositions[l].IsDefault)
                        defaultPlayerPosition = json.PlayerPositions[l].PlayerPositionID;
                }

                playerPositions.valueHasMutated();

                var emptyState = { 'ShootsID': 0, 'Name': '' };
                var leftShoot = { 'ShootsID': 1, 'Name': teamAdminTexts.ShootsLeft };
                var rightShoot = { 'ShootsID': 2, 'Name': teamAdminTexts.ShootsRight };

                shoots.push(emptyState);
                shoots.push(leftShoot);
                shoots.push(rightShoot);

            },

            removePreloader = function (subviewname) {
                $('#' + subviewname + ' .preloader').hide();
                $('#' + subviewname + ' .afterloaded').show();

                $('#teamadmin-view .main-preloader').hide();
                $('#teamadmin-view .main-afterloaded').show();
            },

            clearObservables = function () {
                staff([]);
                players([]);
                clubstaff([]);
                clubplayers([]);
                importPlayers([]);
                importTeamStaff([]);
                connectedTeams([]);
                availableTeams([]);
                liveStreamPaymentRows([]);
                liveStreamGamePaymentRows([]);
                liveStreamTeamPaymentRows([]);
                payoutSummaryRows([]);
                replayPartners([]);

                team('');
                teamAlias('');
                teamName('');
            },

            initMemberInvite = function (item) {
                var teamRoleID = 0;
                var teamRoleConnectionID = 0;

                if (item.TeamPlayerID) {
                    teamRoleID = 10;
                    teamRoleConnectionID = item.TeamPlayerID;
                }
                else if (item.TeamStaffID) {
                    teamRoleID = 1;
                    teamRoleConnectionID = item.TeamStaffID;
                }
                else if (item.PlayerID) {
                    teamRoleID = 2;
                    teamRoleConnectionID = item.PlayerID;
                }
                else if (item.MemberGuardianID) {
                    teamRoleID = 7;
                    teamRoleConnectionID = item.MemberGuardianID;
                }

                datamanager.getTeamMemberForInvite(item.TeamID, teamRoleConnectionID, teamRoleID, {
                    success: function (model) {
                        countries([]);
                        var underlayingArray = countries();

                        //Add the pages to the page cache
                        for (var i = 0; i < model.Countries.length; i++) {
                            underlayingArray.push(model.Countries[i]);
                        }

                        countries.valueHasMutated();

                        var teamMember = new viewmodel.TeamMemberForInvite()
                            .MemberID(model.MemberID)
                            .Email(model.Email)
                            .FirstName(model.FirstName)
                            .LastName(model.LastName)
                            .MobileCountryCodeID(model.MobileCountryCodeID)
                            .CountryCodePrefix(model.CountryCodePrefix)
                            .MobilePhone(model.MobilePhone)
                            .TeamRoleID(model.TeamRoleID)
                            .TeamRoleConnectionID(model.TeamRoleConnectionID);

                        teamMemberForInvite(teamMember);
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            initTeamConnect = function () {
                shell.showProgressIndicator('Hämtar info om kopplade lag...');
                datamanager.initTeamAdminConnect(teamId, {
                    success: function (json) {
                        connectedTeams([]);
                        availableTeams([]);

                        var underlayingArray = connectedTeams();

                        for (var i = 0; i < json.ConnectedTeams.length; i++) {
                            underlayingArray.push(json.ConnectedTeams[i]);
                        }

                        connectedTeams.valueHasMutated();

                        underlayingArray = availableTeams();

                        for (var j = 0; j < json.AvailableTeams.length; j++) {
                            underlayingArray.push(json.AvailableTeams[j]);
                        }

                        availableTeams.valueHasMutated();

                        shell.hideProgressIndicator();
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();
                        alert(response);
                    }
                });
            },

            initEditPlayer = function (routeData) {
                playerNewClubId = -1;
                playerNewClubName = '';

                // Edit mode
                if (routeData.itemId) {
                    isEditPersonMode = true;

                    datamanager.getTeamPlayerForEditView(routeData.itemId, {
                        success: function (json) {
                            teamPlayerForEdit(json);
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                } else {
                    isEditPersonMode = false;

                    datamanager.initTeamPlayerForEditView(teamId, {
                        success: function (json) {
                            teamPlayerForEdit(json);
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
            },

            initEditTeamStaff = function (routeData) {
                // Edit mode
                if (routeData.itemId) {
                    isEditPersonMode = true;

                    datamanager.getTeamStaffForEditView(routeData.itemId, {
                        success: function (json) {
                            teamStaffForEdit(json);
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                } else {
                    isEditPersonMode = false;

                    datamanager.initTeamStaffForEditView(teamId, {
                        success: function (json) {
                            teamStaffForEdit(json);
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
            },

            initEditMemberGuardian = function (routeData) {
                isEditPersonMode = true;

                datamanager.getMemberGuardianForEditView(routeData.itemId, {
                    success: function (model) {
                        memberGuardianForEdit(model);
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            initAddMemberGuardians = function (routeData) {
                isEditPersonMode = false;

                childMemberId = parseInt(routeData.itemId);

                datamanager.initAddMemberGuardians(teamId, routeData.itemId, {
                    success: function (json) {
                        guardianMember(json.Member);

                        firstMemberGuardian(json.MemberGuardian1);
                        secondMemberGuardian(json.MemberGuardian2);

                        if (firstMemberGuardian().MemberGuardianID > 0) {
                            $('#addFirstMemberGuardian').hide();
                        } else {
                            $('#addFirstMemberGuardian').show();
                        }
                        if (secondMemberGuardian().MemberGuardianID > 0) {
                            $('#addSecondMemberGuardian').hide();
                        } else {
                            $('#addSecondMemberGuardian').show();
                        }
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            sendTeamMemberInvite = function (item) {
                datamanager.searchForMember(item.MemberID, item.CountryCodePrefix, item.MobilePhone, '', false, 0)
                    .then(function (model) {

                        if (model.length === 0) {
                            insertTeamMemberInvite(item);
                        } else {
                            matchingMember(model[0]);

                            $('.memberselect').show();
                        }
                    })
                    .fail(function (error) {
                        alert(error.responseText);
                    });
            },

            insertTeamMemberInvite = function (item) {
                var teamMemberinviteModel = new model.MemberInvite()
                    .MemberID(item.MemberID())
                    .Email(item.Email())
                    .MobilePhone(item.MobilePhone())
                    .CountryCodePrefix(item.CountryCodePrefix())
                    .TeamRoleID(item.TeamRoleID())
                    .TeamID(teamId)
                    .FirstName(item.FirstName)
                    .LastName(item.LastName)
                    .TeamRoleConnectionID(item.TeamRoleConnectionID());

                var modelToSend = modelmapper.memberinvite.toDto(teamMemberinviteModel);

                shell.showProgressIndicator(MiscTexts.Sending);

                datamanager.insertMemberInvite(modelToSend, {
                    success: function (json) {
                        shell.hideProgressIndicator();

                        // If we get 0 as a response, we connected the person to a member, otherwise we sent an invite
                        if (json !== 0) {
                            showToast("Invite sent");
                        } else {
                            clearTeamMembersList();
                        }

                        router.navigateBack();
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();

                        console.log(response);

                        alert(response);
                    }
                });

            },

            getTeamHeaderInfo = function () {
                datamanager.getTeamAdminHeaderInfo(teamId, {
                    success: function (model) {
                        teamHeaderInfo(model);

                        removePreloader();
                    },
                    error: function (response) {
                    }
                });
            },

            showLiveStreamPaymentDetails = function (data) {
                shell.showProgressIndicator(MiscTexts.GettingData);

                if (data.LiveStreamSubscriptionID === 1) {
                    // Game ticket
                    datamanager.getLiveStreamStatisticsPerGame(data.TeamID, {
                        success: function (json) {
                            shell.hideProgressIndicator();
                            liveStreamGamePaymentRows([]);

                            var underlayingArray = liveStreamGamePaymentRows();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            liveStreamGamePaymentRows.valueHasMutated();

                            $('#teamadmin-view .gameDetailsOverview').show();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            console.log(error);
                        }
                    });
                }
                else {
                    datamanager.getLiveStreamStatisticsPerTeam(data.TeamID, {
                        success: function (json) {
                            shell.hideProgressIndicator();
                            liveStreamTeamPaymentRows([]);

                            var underlayingArray = liveStreamTeamPaymentRows();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            liveStreamTeamPaymentRows.valueHasMutated();

                            $('#teamadmin-view .subscriptionDetailsOverview').show();
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            console.log(error);
                        }
                    });
                }
            },

            showLiveStreamPayoutDetails = function (data) {
                shell.showProgressIndicator(MiscTexts.GettingData);

                datamanager.getTeamPayoutSummary(data.TeamID, data.LiveStreamSubscriptionID, {
                    success: function (json) {
                        shell.hideProgressIndicator();
                        payoutSummaryRows([]);

                        if (json.length > 0) {
                            var underlayingArray = payoutSummaryRows();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            payoutSummaryRows.valueHasMutated();

                            $('#teamadmin-view .payoutSummaryOverview').show();
                        }
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            closePayoutSummaryOverlay = function () {
                $('#teamadmin-view .payoutSummaryOverview').hide();
            },

            closeDetailsOverlay = function () {
                $('#teamadmin-view .gameDetailsOverview').hide();
            },

            closeSubscriptionsOverlay = function () {
                $('#teamadmin-view .subscriptionDetailsOverview').hide();
            },

            createNewSponsor = function () {
                datamanager.getTeamPartnerForEditView(teamId, 0, 4, {
                    success: function (model) {
                        teamPartner(model);

                        router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/editsponsor');
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            createReplayPartner = function () {
                datamanager.getTeamPartnerForEditView(teamId, 0, 5, {
                    success: function (model) {
                        teamPartner(model);

                        router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/editsponsor');
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            buyReplayFeature = function () {
                router.navigateTo(config.hashes.teamsubscription + '/' + teamId);
            },

            selectSeason = function (data) {
                teamPartner().SeasonID = data.SeasonID;

                $('#teamPartnerSeasonName').text(data.SeasonName);
            },

            editTeamPartner = function (data) {
                datamanager.getTeamPartnerForEditView(teamId, data.TeamPartnerID, data.PartnerTypeID, {
                    success: function (model) {
                        teamPartner(model);

                        router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/editsponsor');
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            deleteTeamPartner = function (data) {

                
                if (data.CanDelete === false) {
                    alert('För att ta bort denna partner behöver du kontakta supporten');
                    return;
                }

                //if (data.TeamPartnerStatusID > 2) {
                //    alert('För att ta bort denna partner behöver du kontakta supporten');
                //    return;
                //}

                var r = confirm(teamAdminTexts.AreYouSureYouWantToDeleteThisTeamPartner);

                if (r === true) {
                    datamanager.deleteTeamPartner(data.TeamPartnerID, {
                        success: function (json) {
                            datamanager.initTeamSponsors(teamId, {
                                success: function (model) {
                                    teamSponsors([]);

                                    initTeamSponsors(model);

                                    var underlayingArray = teamSponsors();

                                    for (var i = 0; i < model.TeamSponsors.length; i++) {
                                        underlayingArray.push(model.TeamSponsors[i]);
                                    }

                                    teamSponsors.valueHasMutated();

                                },
                                error: function (error) {

                                }
                            });
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            showTeamPartnerPayment = function (data) {
                teamPartnerPaymentDossierHelper(data.TeamPartnerID);
            },

            changeTeamPartnerStatus = function (status, data, event) {
                var confirmText = '';

                if (status === 3)
                    confirmText = 'Vill du ändra status på denna lagsponsor till betald?';
                else if (status === 4)
                    confirmText = 'Vill du ändra status på denna lagsponsor till aktiv?';

                var r = confirm(confirmText);

                if (r === true) {
                    datamanager.updateTeamPartnerStatus(data.TeamPartnerID, status, {
                        success: function (json) {
                            datamanager.initTeamSponsors(teamId, {
                                success: function (model) {
                                    teamSponsors([]);

                                    initTeamSponsors(model);

                                    var underlayingArray = teamSponsors();

                                    for (var i = 0; i < model.TeamSponsors.length; i++) {
                                        underlayingArray.push(model.TeamSponsors[i]);
                                    }

                                    teamSponsors.valueHasMutated();

                                },
                                error: function (error) {

                                }
                            });
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            changeReplayPartnerStatus = function (status, data, event) {
                var confirmText = '';

                if (status === 3)
                    confirmText = 'Vill du ändra status på denna lagsponsor till betald?';
                else if (status === 4)
                    confirmText = 'Vill du ändra status på denna lagsponsor till aktiv?';

                var r = confirm(confirmText);

                if (r === true) {
                    datamanager.updateTeamPartnerStatus(data.TeamPartnerID, status, {
                        success: function (json) {
                            datamanager.initTeamReplayPartners(teamId, {
                                success: function (model) {
                                    replayPartnersModel(model);
                                },
                                error: function (error) {
                                    console.log(error);
                                }
                            });
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            teamPartnerPaymentDossierHelper = function (teamPartnerId) {
                datamanager.getTeamPartnerPaymentDossier(teamPartnerId, {
                    success: function (model) {
                        paymentDossier(model);

                        router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/dossier');
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            saveTeamPartner = function (data) {
                console.log(data);

                var ts = ko.toJS(teamPartner);

                var formInstance = $('#teamAdminSponsorForm').parsley();

                //FieldInstance.removeError('httpError');                

                if (formInstance.validate()) {
                    // Validate http/https manually
                    //if (teamPartner().Homepage.toLowerCase().startsWith("http") === false) {
                    //    FieldInstance.addError('httpError', { message: 'Webbadressen måste börja med http eller https' });
                    //    return;
                    //}

                    if (teamPartner().PictureEntityID === 0 && (!teamPartner().ImageData.PictureBase64 || teamPartner().ImageData.PictureBase64.length === 0)) {
                        alert('You have not selected a logo');
                        return;
                    }

                    shell.showProgressIndicator(MiscTexts.Saving);

                    if (data.RequiresApproval) {
                        datamanager.saveTeamPartner(ts, {
                            success: function (json) {
                                shell.hideProgressIndicator();

                                teamPartnerPaymentDossierHelper(json);
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                console.log(error);
                                alert(error);

                                //var errorText = "";
                                //for (var p in error) {
                                //    errorText += error[p] + '\n';
                                //}

                                //alert(errorText);
                            }
                        });
                    }
                    else {
                        // Currently there is an overloaded method specifically for swiss unihockey
                        datamanager.saveTeamPartnerSwiss(ts, {
                            success: function (json) {
                                shell.hideProgressIndicator();

                                router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/sponsors');
                            },
                            error: function (error) {
                                shell.hideProgressIndicator();

                                console.log(error);
                                alert(error);
                            }
                        });
                    }
                }
            },

            cancelEditTeamPartner = function () {
                navigateBackFromPartner();
            },

            navigateBackFromPartner = function () {
                if (teamPartner().PartnerTypeID === 5)
                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/stream');
                else
                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/sponsors');
            },

            cancelSendPaymentDossier = function () {
                navigateBackFromPartner();
            },

            sendPaymentDossier = function (data) {
                shell.showProgressIndicator(MiscTexts.Sending);

                datamanager.sendTeamPartnerPaymentDossier(data.TeamPartnerID, {
                    success: function (json) {
                        shell.hideProgressIndicator();

                        navigateBackFromPartner();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        alert('Ett fel uppstod');
                    }
                });
            },

            getPaymentDossierPDF = function (data) {
                window.open('/payment/printpaymentdossierpdf?teampartnerid=' + data.TeamPartnerID, '_new');
            },

            uploadProfilePictureClick = function (item) {
                selectedMemberForProfilePicture = item;

                $('.profileFilePicker').focus().trigger('click');
            },

            uploadPartnerLogoClick = function () {
                $('#teamadmin-view .partnerLogoFilePicker').focus().trigger('click');
            },

            uploadTeamBannerClick = function (item) {
                $('.teamBannerFilePicker').focus().trigger('click');
            },

            deleteTeamBanner = function () {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteTeamBanner(teamId, {
                        success: function (model) {
                            $(".teamBannerPicture").hide();

                            $(".teamBannerPicturePlaceholder .imageMask").show();
                            $(".teamBannerPicturePlaceholder").show();

                            $(".teamBannerPlaceHolder").css('background-image', 'none');
                            $(".teamBannerButtonToolbar").hide();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
            },

            navigateToTeamAdminHome = function () {
                return createTeamAdminNavigationItem('start');
            },

            navigateToTeamAdminMembers = function () {
                return createTeamAdminNavigationItem('members');
            },

            navigateToTeamAdminStream = function () {
                return createTeamAdminNavigationItem('stream');
            },

            navigateToConnectTeams = function () {
                return createTeamAdminNavigationItem('connect');
            },

            navigateToTeamAdminPartners = function () {
                return createTeamAdminNavigationItem('partners');
            },

            navigateToTeamAdminSponsors = function () {
                return createTeamAdminNavigationItem('sponsors');
            },

            navigateToLagetImport = function () {
                return createTeamAdminNavigationItem('lagetse');
            },

            navigateToSportAdminImport = function () {
                return createTeamAdminNavigationItem('sportadmin');
            },

            navigateToSvenskaLagImport = function () {
                return createTeamAdminNavigationItem('svenskalag');
            },

            navigateToMyClubImport = function () {
                return createTeamAdminNavigationItem('myclub');
            },

            navigateToExcelImport = function () {
                return createTeamAdminNavigationItem('excel');
            },

            navigateToSwissExcelImport = function () {
                return createTeamAdminNavigationItem('swissexcel');
            },

            navigateToAddEditPlayer = function () {
                return createTeamAdminNavigationItem('addeditplayer');
            },

            navigateToAddEditTeamStaff = function () {
                return createTeamAdminNavigationItem('addeditteamstaff');
            },

            navigateToSearchPlayers = function () {
                return createTeamAdminNavigationItem('searchplayers');
            },

            navigateToSearchTeamStaff = function () {
                return createTeamAdminNavigationItem('searchteamstaff');
            },

            navigateToTeam = function (team) {
                navigationItem = {
                    getHrefString: function () {
                        return '/' + config.hashes.team + '/' + team.TeamID;
                    },
                    toClick: function () {
                        router.navigateTo('/' + config.hashes.team + '/' + team.TeamID);
                    }
                };
                return navigationItem;
            },

            createTeamAdminNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.teamadmin + '/' + teamId + '/' + endPath;
                    },
                    toClick: function () {
                        router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/' + endPath);
                    }
                };
            },

            navigateToAddMemberGuardians = function (item) {
                router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/addmemberguardians/' + item.MemberID);
            },

            navigateToInviteMember = function (item) {
                memberForInvite(item);
                router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/invitemember');
            },

            uploadFileClick = function () {
                $('.importFilePicker').focus().trigger('click');
            },

            getDataFromMyClub = function () {
                $("#myClubImportError").hide();
                shell.showProgressIndicator('Läser in data');

                importPlayers([]);
                importTeamStaff([]);

                var importToken = $('#myClubToken').val();

                if (importToken.length === 0)
                    alert('Du måste ange en kod!');

                datamanager.importMyClubFile(importSystemId, teamId, importToken)
                    .then(function (json) {
                        externalSystemName('MyClub');

                        if (json.Players.length === 0 && json.TeamStaff.length === 0) {

                            shell.hideProgressIndicator();

                            alert('Alla spelare, ledare och målsmän i importfilen finns redan i ert lag!');

                            // If there were no players or teamstaff to import, we route back to members
                            router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                        } else {
                            handleFileResult(json);

                            shell.hideProgressIndicator();

                            // If everything looks ok, redirect to step 2
                            router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/import');
                        }
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        $("#myClubImportError").show();
                        $("#myClubImportError h4").text(error.statusText);
                    });
            },

            finishImport = function () {
                //Find excluded team members
                var excludedTeamMembers = [];
                $('#importTeamStaffTable tr.strikeout').each(function () {

                    var guid = $(this).find('.teamMemberGuid').first().val();
                    excludedTeamMembers.push(guid);
                });

                $('#importPlayerTable tr.strikeout').each(function () {

                    var guid = $(this).find('.teamMemberGuid').first().val();
                    excludedTeamMembers.push(guid);
                });

                shell.showProgressIndicator('Importerar lagmedlemmar');

                datamanager.finishTeamMemberImport(teamId, importFileNameGUID, excludedTeamMembers, externalDataSourceID)
                    .then(function () {
                        shell.hideProgressIndicator();

                        $('.messageOverlay').show();

                        //Clear staff and Player variables 
                        staff([]);
                        players([]);

                        router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });

            },

            handleProfilePictureSelect = function (evt) {
                var files = evt.target.files;

                for (var i = 0; i < files.length; i++) {
                    var f = files[i];

                    if (!f.type.match('image.*')) {
                        continue;
                    }

                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            pictureUploadBase64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            if (selectedMemberForProfilePicture.TeamStaffID) {
                                pictureUploadTeamRoleID = 1;
                                pictureUploadTeamItemID = selectedMemberForProfilePicture.TeamStaffID;
                            } else if (selectedMemberForProfilePicture.TeamPlayerID) {
                                pictureUploadTeamRoleID = 2;
                                pictureUploadTeamItemID = selectedMemberForProfilePicture.TeamPlayerID;
                            }

                            console.log(pictureUploadTeamRoleID + ' ' + pictureUploadTeamItemID);

                            imagecropper.activate(pictureUploadBase64data, 1, 1, true, cropperCallback);
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },

            cropperCallback = function (cropData, croppedData, base64data) {
                shell.showProgressIndicator(MiscTexts.Uploading);

                datamanager.updateTeamMemberProfilePictureCropped(teamId, pictureUploadTeamRoleID, pictureUploadTeamItemID, cropData.x, cropData.y, cropData.width, cropData.height, base64data)
                    .then(function (json) {
                        selectedMemberForProfilePicture = '';

                        var itemRowID = "#memberRow-" + pictureUploadTeamRoleID + "-" + pictureUploadTeamItemID;

                        $(itemRowID + " .addProfilePicture").css('background-image', 'url(' + json.ThumbnailURL + ')');
                        $(itemRowID + " .profilePicture").css('background-image', 'url(' + json.ThumbnailURL + ')');

                        if (pictureUploadTeamRoleID === 1) {
                            $(".editTeamStaffProfilePicture").css('background-image', 'url(' + json.ThumbnailURL + ')');
                        } else if (pictureUploadTeamRoleID === 2) {
                            $(".editPlayerProfilePicture").css('background-image', 'url(' + json.ThumbnailURL + ')');
                        }

                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            cropperPartnerCallback = function (cropData, croppedData, base64data) {
                teamPartner().ImageData.StartX = cropData.x;
                teamPartner().ImageData.StartY = cropData.y;
                teamPartner().ImageData.Width = cropData.width;
                teamPartner().ImageData.Height = cropData.height;

                teamPartner().ImageData.PictureBase64 = base64data;

                $('.imgPreviewContainer .partner-img-preview').css('background-image', 'url(' + croppedData + ')');
                $('.imgPreviewContainer .partner-img-preview').show();
                $('.teamPartnerLogoPlaceHolder').hide();
            },

            handlePartnerLogoSelect = function (evt) {
                var files = evt.target.files;

                for (var i = 0; i < files.length; i++) {
                    var f = files[i];

                    if (!f.type.match('image.*')) {
                        continue;
                    }

                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var partnerLogoBase64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            imagecropper.activate(partnerLogoBase64data, 10, 3, false, cropperPartnerCallback);
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },

            handleTeamBannerPictureSelect = function (evt) {
                var files = evt.target.files;

                for (var i = 0; i < files.length; i++) {
                    var f = files[i];

                    if (!f.type.match('image.*')) {
                        continue;
                    }

                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var base64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            datamanager.updateTeamBanner(teamId, base64data)
                                .then(function (json) {
                                    $('.teamBannerButtonToolbar').show();
                                })
                                .fail(function (error) {
                                    alert(error.responseText);
                                });

                            teamBannerDataSelected(base64data);
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },

            teamBannerDataSelected = function (base64Data) {
                $(".teamBannerPicture").hide();
                $(".teamBannerPicturePlaceholder .imageMask").hide();

                $(".teamBannerPicturePlaceholder").show();

                $(".teamBannerPlaceHolder").css('background-image', 'url(' + 'data:image/jpg;base64,' + base64Data + ')');
            },

            handleFileSelect = function (evt) {
                var files = evt.target.files; // FileList object

                //If we got a file from Myclub, inform about PersonalIdentityNumber
                if (importSystemId === 33) {
                    if (!confirm('Exportfiler från My Club saknar de 4 sista siffrorna i Personnummer, så du behöver lägga in dem själv genom att redigera Excel-filen och klippa/klistra in fullständigt personnummer från medlemslistan på laghemsidan. Tryck OK om du redan fixat detta, annars tryck Avbryt och redigera Excel-filen')) {
                        return;
                    }
                }

                for (var i = 0; i < files.length; i++) {
                    var f = files[i];
                    //if (!f.type.match('image.*')) {
                    //    continue;
                    //}                    

                    shell.showProgressIndicator('Läser in data');

                    importPlayers([]);
                    importTeamStaff([]);

                    var reader = new FileReader();

                    // Closure to capture the file information.
                    reader.onload = (function (theFile) {
                        return function (e) {
                            var base64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            $('#importFileData').val(base64data);

                            switch (importSystemId) {
                                case 32: // Laget.se
                                    {
                                        datamanager.importTeamMemberFile(importSystemId, teamId, base64data)
                                            .then(function (json) {
                                                externalSystemName('Laget.se');

                                                if (json.Players.length === 0 && json.TeamStaff.length === 0) {

                                                    shell.hideProgressIndicator();

                                                    alert('Alla spelare, ledare och målsmän i importfilen finns redan i ert lag!');

                                                    // If there were no players or teamstaff to import, we route back to members
                                                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                                                } else {
                                                    handleFileResult(json);

                                                    shell.hideProgressIndicator();

                                                    // If everything looks ok, redirect to step 2
                                                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/import');
                                                }
                                            })
                                            .fail(function (error) {
                                                shell.hideProgressIndicator();

                                                alert(error.responseText);
                                            });
                                    }
                                    break;
                                case 31: // Sportadmin
                                    {
                                        datamanager.importTeamMemberFile(importSystemId, teamId, base64data)
                                            .then(function (json) {
                                                externalSystemName('Sportadmin');

                                                if (json.Players.length === 0 && json.TeamStaff.length === 0) {

                                                    shell.hideProgressIndicator();

                                                    alert('Alla spelare, ledare och målsmän i importfilen finns redan i ert lag!');

                                                    // If there were no players or teamstaff to import, we route back to members
                                                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                                                } else {
                                                    handleFileResult(json);

                                                    shell.hideProgressIndicator();

                                                    // If everything looks ok, redirect to step 2
                                                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/import');
                                                }

                                            })
                                            .fail(function (error) {
                                                shell.hideProgressIndicator();

                                                alert(error.responseText);
                                            });
                                    }
                                    break;
                                case 34: // Svenska Lag
                                    {
                                        datamanager.importTeamMemberFile(importSystemId, teamId, base64data)
                                            .then(function (json) {
                                                externalSystemName('SvenskaLag');

                                                if (json.Players.length === 0 && json.TeamStaff.length === 0) {

                                                    shell.hideProgressIndicator();

                                                    alert('Alla spelare, ledare och målsmän i importfilen finns redan i ert lag!');

                                                    // If there were no players or teamstaff to import, we route back to members
                                                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                                                } else {
                                                    handleFileResult(json);

                                                    shell.hideProgressIndicator();

                                                    // If everything looks ok, redirect to step 2
                                                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/import');
                                                }

                                            })
                                            .fail(function (error) {
                                                shell.hideProgressIndicator();

                                                alert(error.responseText);
                                            });
                                    }
                                    break;
                                case 33: // MyClub
                                    {
                                        datamanager.importTeamMemberFile(importSystemId, teamId, base64data)
                                            .then(function (json) {
                                                externalSystemName('MyClub');

                                                if (json.Players.length === 0 && json.TeamStaff.length === 0) {

                                                    shell.hideProgressIndicator();

                                                    alert('Alla spelare, ledare och målsmän i importfilen finns redan i ert lag!');

                                                    // If there were no players or teamstaff to import, we route back to members
                                                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                                                } else {
                                                    handleFileResult(json);

                                                    shell.hideProgressIndicator();

                                                    // If everything looks ok, redirect to step 2
                                                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/import');
                                                }
                                            })
                                            .fail(function (error) {
                                                shell.hideProgressIndicator();

                                                alert(error.responseText);
                                            });
                                    }
                                    break;
                                case 35: // Excel
                                    {
                                        datamanager.importTeamMemberFile(importSystemId, teamId, base64data)
                                            .then(function (json) {
                                                externalSystemName('Excel');

                                                if (json.Players.length === 0 && json.TeamStaff.length === 0) {

                                                    shell.hideProgressIndicator();

                                                    alert('Alla spelare, ledare och målsmän i importfilen finns redan i ert lag!');

                                                    // If there were no players or teamstaff to import, we route back to members
                                                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                                                } else {
                                                    handleFileResult(json);

                                                    shell.hideProgressIndicator();

                                                    // If everything looks ok, redirect to step 2
                                                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/import');
                                                }
                                            })
                                            .fail(function (error) {
                                                shell.hideProgressIndicator();

                                                alert(error.responseText);
                                            });


                                    }
                                case 36: // SwissExcel
                                    {
                                        console.log("swissexcel");
                                        datamanager.importTeamMemberFile(importSystemId, teamId, base64data)
                                            .then(function (json) {
                                                externalSystemName('Excel');

                                                if (json.Players.length === 0 && json.TeamStaff.length === 0) {

                                                    shell.hideProgressIndicator();

                                                    alert('Alla spelare, ledare och målsmän i importfilen finns redan i ert lag!');

                                                    // If there were no players or teamstaff to import, we route back to members
                                                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                                                } else {
                                                    handleFileResult(json);

                                                    shell.hideProgressIndicator();

                                                    // If everything looks ok, redirect to step 2
                                                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/import');
                                                }
                                            })
                                            .fail(function (error) {
                                                shell.hideProgressIndicator();

                                                alert(error.responseText);
                                            });
                                    }
                                    break;
                            }

                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },

            cancelFileImport = function () {
                window.history.back();
            },

            inviteAllTeamMembers = function () {
                shell.showProgressIndicator(MiscTexts.Sending);

                datamanager.inviteAllTeamMembers(teamId, {
                    success: function () {
                        shell.hideProgressIndicator();
                        showToast("Inbjudningar skickade");

                    },
                    error: function (response) {
                        shell.hideProgressIndicator();

                        console.log(response);

                        alert(response);
                    }
                });

            },

            handleFileResult = function (json) {
                importHeaderModel(json.HeaderModel);

                //Set parameters to be used when sending to Finish import                
                importFileNameGUID = json.ImportFileNameGUID;
                externalDataSourceID = json.ExternalDataSourceID;

                var underlayingArray = importPlayers();

                for (var i = 0; i < json.Players.length; i++) {
                    underlayingArray.push(json.Players[i]);
                }

                importPlayers.valueHasMutated();

                underlayingArray = importTeamStaff();

                for (var j = 0; j < json.TeamStaff.length; j++) {
                    underlayingArray.push(json.TeamStaff[j]);
                }

                importTeamStaff.valueHasMutated();
            },

            saveTeamStaff = function (data) {
                var formInstance = $('#teamStaffEditForm').parsley();

                var internalNotes = '';
                var picBase64 = '';

                if (data.PersonalIdentityNumber.EditState === 0) {
                    // Custom validation of PersonalIdentityNumber
                    var FieldInstance = $('#teamStaffPersonalIdentityNumber').parsley();
                    var errorName = 'teamStaffPersonalIdentityNumber-custom';

                    FieldInstance.removeError(errorName);

                    if (data.PersonalIdentityNumber.Value.length !== 12) {
                        FieldInstance.addError(errorName, { message: 'Invalid personal identity number', updateClass: true });
                        return;
                    }
                }

                if (formInstance.validate() === false)
                    return;

                var newTeamStaff = new viewmodel.TeamStaffForEditView()
                    .TeamID(data.TeamID)
                    .TeamStaffID(data.TeamStaffID)
                    .GenderID(data.Gender.Value)
                    .FirstName(data.FirstName.Value)
                    .LastName(data.LastName.Value)
                    .Email(data.Email.Value)
                    .MobileCountryCodeID(data.MobilePhone.Id)
                    .MobilePhone(data.MobilePhone.Value)
                    .InternalNotes(internalNotes)
                    .PictureBase64(picBase64)
                    .PersonalIdentityNumber(data.PersonalIdentityNumber.Value)
                    .TeamStaffRoleID(data.TeamStaffRole.Value);

                var ts = ko.toJS(newTeamStaff);

                if (data.MobilePhone.length > 0) {
                    datamanager.searchForMember(data.MemberID, '', data.MobilePhone.Value, '', false, data.MobilePhone.Id)
                        .then(function (json) {
                            if (json.length > 0) {
                                //Set selectiontype to TeamStaff
                                selectionType = 2;

                                matchingMember(json[0]);

                                //Show overlay for member matching
                                if (data.TeamStaffID > 0) {
                                    $('.membertomergeselect').show();
                                } else {
                                    $('#teamStaffMatchingMemberRole').val(defaultTeamStaffRole);
                                    $('.teamstaffselect').show();
                                }


                            } else {
                                saveTeamStaffHelper(ts);
                            }

                        })
                        .fail(function (error) {
                            alert(error.responseText);
                        });
                } else {
                    saveTeamStaffHelper(ts);
                }
            },

            saveTeamStaffHelper = function (ts) {
                shell.showProgressIndicator(MiscTexts.Saving);

                var teamStaffInvite = $('#teamStaffInvite').is(":checked");

                if (ts.TeamStaffID > 0) {
                    datamanager.updateTeamStaff(ts, {
                        success: function () {
                            teamStaffAddedComplete(teamStaffInvite, ts.TeamStaffID, true);
                        },
                        error: function (response) {
                            shell.hideProgressIndicator();

                            alert(response);
                        }
                    });
                } else {
                    datamanager.addNewTeamStaff(ts, {
                        success: function (teamStaffId) {
                            teamStaffAddedComplete(teamStaffInvite, teamStaffId, false);
                        },
                        error: function (response) {
                            shell.hideProgressIndicator();

                            alert(response);
                        }
                    });
                }
            },

            saveTeamPlayer = function (data) {
                var formInstance = $('#playerEditForm').parsley();

                var picBase64 = '';

                if (data.PersonalIdentityNumber.EditState === 0) {
                    // Custom validation of PersonalIdentityNumber
                    var FieldInstance = $('#playerPersonalIdentityNumber').parsley();
                    var errorName = 'playerPersonalIdentityNumber-custom';

                    FieldInstance.removeError(errorName);

                    if (data.PersonalIdentityNumber.Value.length !== 12) {
                        FieldInstance.addError(errorName, { message: 'Invalid personal identity number', updateClass: true });
                        return;
                    }
                }

                if (formInstance.validate() === false)
                    return;

                var editPlayer = new viewmodel.PlayerForEditView()
                    .TeamID(data.TeamID)
                    .TeamPlayerID(data.TeamPlayerID)
                    .GenderID(data.Gender.Value)
                    .FirstName(data.FirstName.Value)
                    .LastName(data.LastName.Value)
                    .Email(data.Email.Value)
                    .MobileCountryCodeID(data.MobilePhone.Id)
                    .MobilePhone(data.MobilePhone.Value)
                    .PictureBase64(picBase64)
                    .PersonalIdentityNumber(data.PersonalIdentityNumber.Value)
                    .PlayerPositionID(data.PlayerPosition.Value)
                    .ShirtNumber(data.ShirtNumber.Value);

                if (data.PlayerFacts) {
                    editPlayer.NationalityCountryID(data.PlayerFacts.NationalityCountry.Value);
                    editPlayer.Shoots(data.PlayerFacts.Shoots.Value);
                    editPlayer.HeightCM(data.PlayerFacts.HeightCM.Value);
                    editPlayer.WeightKG(data.PlayerFacts.WeightKG.Value);                    
                    editPlayer.StickBrand(data.PlayerFacts.StickBrand.Value);
                    editPlayer.ShoeBrand(data.PlayerFacts.ShoeBrand.Value);

                    // If this is >= 0, we did some changes to playerClub
                    if (playerNewClubId >= 0) {
                        editPlayer.OriginClubID(playerNewClubId);
                        editPlayer.OriginClubName(playerNewClubName);
                    } else {
                        editPlayer.OriginClubID(data.PlayerFacts.OriginClub.Value);
                        editPlayer.OriginClubName(data.PlayerFacts.OriginClub.Text);
                    }
                }

                var ep = ko.toJS(editPlayer);

                console.log(ep);
                /*return;*/


                if (data.MobilePhone.Value.length > 0) {
                    datamanager.searchForMember(data.MemberID, '', data.MobilePhone.Value, '', false, data.MobilePhone.Id)
                        .then(function (json) {
                            if (json.length > 0) {
                                //Set selectiontype to player
                                selectionType = 1;

                                matchingMember(json[0]);

                                //Show overlay for member matching
                                if (data.TeamPlayerID > 0) {
                                    $('.membertomergeselect').show();
                                } else {
                                    $('#playerMatchingPlayerPosition').val(defaultPlayerPosition);
                                    $('.playerselect').show();
                                }


                            } else {
                                savePlayerHelper(ep);
                            }

                        })
                        .fail(function (error) {
                            alert(error.responseText);
                        });
                } else {
                    savePlayerHelper(ep);
                }
            },

            savePlayerHelper = function (ep) {
                shell.showProgressIndicator(MiscTexts.Saving);
                var teamPlayerInvite = $('#teamPlayerInvite').is(":checked");

                if (ep.TeamPlayerID > 0) {

                    datamanager.updateTeamPlayer(ep, {
                        success: function () {
                            playerAddedComplete(teamPlayerInvite, ep.TeamPlayerID, true);
                        },
                        error: function (response) {
                            shell.hideProgressIndicator();

                            alert(response);
                        }
                    });
                } else {

                    datamanager.addNewPlayer(ep, {
                        success: function (playerId) {
                            playerAddedComplete(teamPlayerInvite, playerId, false);
                        },
                        error: function (response) {
                            shell.hideProgressIndicator();

                            alert(response);
                        }
                    });
                }
            },

            saveMemberGuardian = function (item) {
                var formInstance = $('#guardianEditForm').parsley();

                if (formInstance.validate() === false)
                    return;

                var updatedMemberGuardian = new viewmodel.MemberGuardianForEditView()
                    .MemberGuardianID(item.MemberGuardianID)
                    .TeamID(teamId)
                    .MemberID(item.MemberID)
                    .FirstName(item.FirstName.Value)
                    .LastName(item.LastName.Value)
                    .Email(item.Email.Value)
                    .MobileCountryCodeID(item.MobilePhone.Id)
                    /*.CountryCodePrefix(item.CountryCodePrefix)*/
                    .MobilePhone(item.MobilePhone.Value)
                    .ChildMemberID(item.ChildMemberID);

                var mg = ko.toJS(updatedMemberGuardian);

                if (item.MobilePhone.Value.length > 0) {
                    datamanager.searchForMember(item.MemberID, '', item.MobilePhone.Value, '', false, item.MobilePhone.Id)
                        .then(function (json) {
                            if (json.length > 0) {
                                matchingMember(json[0]);
                                //Set selectiontype to MemberGuardian
                                selectionType = 5;

                                //Show overlay for member matching
                                if (item.MemberGuardianID > 0) {
                                    $('.membertomergeselect').show();
                                } else {
                                    $('.memberguardianselect').show();
                                }


                            } else {
                                saveMemberGuardianHelper(mg);
                            }

                        })
                        .fail(function (error) {
                            alert(error.responseText);
                        });
                } else {
                    saveMemberGuardianHelper(mg);
                }

            },

            saveMemberGuardianHelper = function (mg) {
                shell.showProgressIndicator(MiscTexts.Saving);
                var sendMemberGuardianInvite = $('#memberGuardianInvite').is(":checked");

                if (mg.MemberGuardianID > 0) {

                    datamanager.updateMemberGuardian(mg, {
                        success: function (memberGuardianId) {

                            if (sendMemberGuardianInvite) {
                                datamanager.sendInvitetoMemberGuardian(mg.MemberGuardianID, {
                                    success: function (model) {
                                        shell.hideProgressIndicator();
                                        showToast(teamAdminTexts.TheGuardianHasBeenUpdated);

                                        // Clear members so that they are reloaded
                                        clearTeamMembersList();

                                        router.navigateBack();
                                    },
                                    error: function (response) {
                                        // If the invite method fails, just fail silently                            
                                        shell.hideProgressIndicator();
                                        showToast(teamAdminTexts.TheGuardianHasBeenUpdated);

                                        // Clear members so that they are reloaded
                                        clearTeamMembersList();

                                        router.navigateBack();
                                    }
                                });
                            } else {
                                shell.hideProgressIndicator();
                                // Clear members so that they are reloaded
                                clearTeamMembersList();

                                showToast(teamAdminTexts.TheGuardianHasBeenUpdated);
                                router.navigateBack();
                            }

                        },
                        error: function (response) {
                            shell.hideProgressIndicator();

                            alert(response);
                        }
                    });
                }
            },

            updateFirstMemberGuardian = function (item) {
                var formInstance = $('#addFirstMemberGuardian').parsley();

                if (formInstance.validate() === false)
                    return;

                insertMemberGuardianHelper(item, 1);
            },

            updateSecondMemberGuardian = function (item) {
                var formInstance = $('#addSecondMemberGuardian').parsley();

                if (formInstance.validate() === false)
                    return;

                insertMemberGuardianHelper(item, 2);
            },

            updateTeamInformation = function (item) {
                var teamSettingFollowersNeedAccept = $('#teamSettingFollowersNeedAccept').is(":checked");
                var teamSettingHideProfilePictures = $('#teamSettingHideProfilePictures').is(":checked");
                var teamSettingPhoto = $('#teamSettingPhoto').is(":checked");

                var teamToUpdate = new viewmodel.TeamForEditView()
                    .TeamID(teamId)
                    .TeamAlias(item.TeamAlias)
                    .TeamName(item.TeamName)
                    .PhotographyForbidden(teamSettingPhoto)
                    .HideExtendedPlayerInformation(teamSettingHideProfilePictures)
                    .FollowersNeedToBeAccepted(teamSettingFollowersNeedAccept)
                    //.EventReportingForbidden(true)
                    //.PlayersAndStaffCanOnlyJoinWithInvite(true)
                    //.OnlyTeamAdminsCanCreateLineUp(false)
                    .ShirtColor(item.ShirtColor)
                    .AlternateShirtColor(item.AlternateShirtColor);

                var mg = ko.toJS(teamToUpdate);

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.updateTeamVM(mg, {
                    success: function (model) {
                        shell.hideProgressIndicator();
                    },
                    error: function (error) {
                        shell.hideProgressIndicator();

                        alert(response.responseText);
                    }
                });
            },

            insertMemberGuardianHelper = function (item, no) {
                console.log('Insert', item);

                var newMemberGuardian = new viewmodel.MemberGuardianForEditView()
                    .TeamID(teamId)
                    .FirstName(item.FirstName.Value)
                    .LastName(item.LastName.Value)
                    .Email(item.Email.Value)
                    .MobileCountryCodeID(item.MobilePhone.Id)
                    /*.CountryCodePrefix(item.CountryCodePrefix)*/
                    .MobilePhone(item.MobilePhone.Value)
                    .ChildMemberID(item.ChildMemberID);

                var mg = ko.toJS(newMemberGuardian);

                if (item.MobilePhone.Value.length > 0) {
                    datamanager.searchForMember(item.MemberID, '', item.MobilePhone.Value, '', false, item.MobilePhone.Id)
                        .then(function (json) {
                            if (json.length > 0) {
                                matchingMember(json[0]);

                                //Set selectiontype to First or Second MemberGuardian
                                if (no === 1) {
                                    selectionType = 3;
                                } else {
                                    selectionType = 4;
                                }

                                //Show overlay for member matching
                                $('.memberguardianselect').show();

                            } else {
                                addMemberGuardianHelper(mg, no);
                            }

                        })
                        .fail(function (error) {
                            alert(error.responseText);
                        });
                } else {
                    addMemberGuardianHelper(mg, no);
                }
            },

            addMemberGuardianHelper = function (mg, no) {
                shell.showProgressIndicator(MiscTexts.Adding);

                datamanager.insertMemberGuardian(mg, {
                    success: function (memberGuardianId) {
                        datamanager.getMemberGuardianForEditView(memberGuardianId, {
                            success: function (model) {
                                /*model.EditMemberInformationIsLocked = true;*/

                                if (no === 1) {
                                    firstMemberGuardian(model);
                                } else if (no === 2) {
                                    secondMemberGuardian(model);
                                }

                                shell.hideProgressIndicator();

                                clearTeamMembersList();
                            },
                            error: function (response) {
                                shell.hideProgressIndicator();

                                alert(response.responseText);
                            }
                        });
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();

                        alert(response);
                    }
                });
            },

            removeImportItem = function (item, event) {
                $(event.target).closest('tr').toggleClass("strikeout");
            },

            fixImportItem = function (item, event) {
                alert('Du kan fixa lagmedlemmar som saknar nödvändiga uppgifter genom att redigera Excel-filen och se till att de har korrekta namn och personnummer.');
            },

            searchTeamStaff = function (data, event) {
                shell.showProgressIndicator(MiscTexts.Searching);

                datamanager.searchClubTeamStaff(teamId, data.Name, data.PersonalIdentityNumber, selectedTeamStaffGender(), data.MobilePhoneNumber, data.MobileCountryId)
                    .then(function (json) {
                        clubstaff([]);

                        var underlayingArray = clubstaff();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        clubstaff.valueHasMutated();
                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        alert(error.responseText);

                        shell.hideProgressIndicator();
                    });
            },

            searchTeamStaffByPhone = function (data, event) {
                if (data.MobilePhoneNumber.length === 0)
                    return;

                shell.showProgressIndicator(MiscTexts.Searching);

                datamanager.searchStaffByPhone(teamId, data.MobilePhoneNumber, data.MobileCountryId)
                    .then(function (json) {
                        clubstaff([]);

                        var underlayingArray = clubstaff();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        clubstaff.valueHasMutated();
                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        alert(error.responseText);

                        shell.hideProgressIndicator();
                    });
            },

            searchPlayers = function () {
                var personalIdentityNumber = $('#playerSearchPersonalNumber').val();
                var name = $('#playerSearchName').val();
                var birthYearFrom = parseInt($('#playerSearchYearFrom').val());
                var birthYearTo = parseInt($('#playerSearchYearTo').val());

                if (!birthYearFrom)
                    birthYearFrom = 0;

                if (!birthYearTo)
                    birthYearTo = 0;

                shell.showProgressIndicator(MiscTexts.Searching);

                datamanager.searchClubPlayers(teamId, name, personalIdentityNumber, selectedPlayerGender(), birthYearFrom, birthYearTo)
                    .then(function (json) {
                        clubplayers([]);

                        var underlayingArray = clubplayers();

                        for (var i = 0; i < json.length; i++) {
                            underlayingArray.push(json[i]);
                        }

                        clubplayers.valueHasMutated();

                        shell.hideProgressIndicator();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            clubTeamStaffClicked = function (item) {
                selectedClubStaff(item);

                $('#teamStaffSearchMemberRole').val(defaultTeamStaffRole);
                $('.clubstaffselect').show();
            },

            clubPlayerClicked = function (item) {
                selectedClubPlayer(item);

                $('#playerSearchPlayerPosition').val(defaultPlayerPosition);
                $('.clubplayerselect').show();
            },

            editPlayer = function (item) {
                router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/addeditplayer/' + item.TeamPlayerID);
            },

            editTeamStaff = function (item) {
                router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/addeditteamstaff/' + item.TeamStaffID);
            },

            editMemberGuardian = function (item) {
                router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/editmemberguardian/' + item.MemberGuardianID);
            },

            deleteTeamStaff = function (item) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteTeamStaff(item.TeamStaffID, {
                        success: function (model) {
                            showToast(teamAdminTexts.TheTeamStaffHasBeenRemoved);

                            staff.remove(function (s) {
                                return s.TeamStaffID === item.TeamStaffID;
                            });
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
            },

            deletePlayer = function (item) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteTeamPlayer(item.TeamPlayerID, {
                        success: function (model) {
                            showToast(teamAdminTexts.ThePlayerHasBeenRemoved);

                            players.remove(function (s) {
                                return s.TeamPlayerID === item.TeamPlayerID;
                            });
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
            },

            deleteMemberGuardian = function (item) {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteMemberGuardian(item.MemberGuardianID, {
                        success: function (model) {
                            showToast(teamAdminTexts.TheGuardianHasBeenRemoved);

                            $('#memberGuardian_' + item.MemberGuardianID).hide();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
            },

            cancelTeamStaffSelect = function () {
                $('.teamstaffselect').hide();

                if (selectionType === 1) {
                    $('#teamStaffPhone').val('');
                    $('#teamStaffPhone').focus();
                }

                if (selectionType === 2) {
                    $('#teamStaffPersonalIdentityNumber').val('');
                    $('#teamStaffPersonalIdentityNumber').focus();
                }
            },

            confirmTeamStaffSelect = function () {
                var teamStaffRoleID = $('#teamStaffMatchingMemberRole').val();
                var memberId = matchingMember().MemberID;

                shell.showProgressIndicator(MiscTexts.Adding);

                datamanager.addExistingMemberAsTeamStaff(memberId, teamId, teamStaffRoleID)
                    .then(function (teamStaffId) {
                        $('.teamstaffselect').hide();

                        teamStaffAddedComplete(false, teamStaffId, false);
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            cancelPlayerSelect = function () {
                $('.playerselect').hide();

                if (selectionType === 1) {
                    $('#playerPhone').val('');
                    $('#playerPhone').focus();
                }

                if (selectionType === 2) {
                    $('#playerPersonalIdentityNumber').val('');
                    $('#playerPersonalIdentityNumber').focus();
                }
            },

            confirmPlayerSelect = function () {
                var memberId = matchingMember().MemberID;

                var playerPositionId = $('#playerMatchingPlayerPosition').val();
                var shirtNumber = $('#playerMatchingShirtNumber').val();

                if (shirtNumber === null)
                    shirtNumber = 0;

                shell.showProgressIndicator(MiscTexts.Adding);

                datamanager.addExistingMemberAsPlayer(memberId, teamId, playerPositionId, shirtNumber)
                    .then(function (playerId) {
                        $('.playerselect').hide();

                        playerAddedComplete(false, playerId, false);
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            confirmMemberGuardianSelect = function () {
                var memberId = matchingMember().MemberID;

                if (selectionType === 5) { // Update 
                    shell.showProgressIndicator(MiscTexts.Updating);

                    var updatedMemberGuardian = new viewmodel.MemberGuardianForEditView()
                        .MemberGuardianID(memberGuardianForEdit().MemberGuardianID)
                        .TeamID(teamId)
                        .MemberID(memberId)
                        .ChildMemberID(memberGuardianForEdit().ChildMemberID);

                    var umg = ko.toJS(updatedMemberGuardian);

                    shell.hideProgressIndicator();

                    datamanager.updateMemberGuardian(umg, {
                        success: function (memberGuardianId) {
                            shell.hideProgressIndicator();
                            $('.memberguardianselect').hide();

                            showToast(teamAdminTexts.TheGuardianHasBeenUpdated);

                            router.navigateBack();
                        },
                        error: function (response) {
                            shell.hideProgressIndicator();

                            alert(response);
                        }
                    });
                } else {
                    var newMemberGuardian = new viewmodel.MemberGuardianForEditView()
                        .TeamID(teamId)
                        .MemberID(memberId)
                        .ChildMemberID(childMemberId);

                    var mg = ko.toJS(newMemberGuardian);

                    shell.showProgressIndicator(MiscTexts.Adding);

                    datamanager.insertMemberGuardian(mg, {
                        success: function (memberGuardianId) {
                            datamanager.getMemberGuardianForEditView(memberGuardianId, {
                                success: function (model) {

                                    //Set Memberinfo is locked
                                    /*model.EditMemberInformationIsLocked = true;*/
                                    //Clear team members list to force refresh 
                                    clearTeamMembersList();

                                    if (selectionType === 3) {
                                        firstMemberGuardian(model);

                                        //disableField('#firstGuardianEmail');
                                        //disableField('#firstGuardianPhone');
                                        //disableField('#firstGuardianFirstName');
                                        //disableField('#firstGuardianLastName');

                                    }
                                    else if (selectionType === 4) {
                                        secondMemberGuardian(model);

                                        //disableField('#secondGuardianEmail');
                                        //disableField('#secondGuardianPhone');
                                        //disableField('#secondGuardianFirstName');
                                        //disableField('#secondGuardianLastName');
                                    }

                                    shell.hideProgressIndicator();
                                    $('.memberguardianselect').hide();
                                },
                                error: function (response) {
                                    alert(response);

                                    shell.hideProgressIndicator();
                                }
                            });
                        },
                        error: function (response) {
                            shell.hideProgressIndicator();

                            alert(error.responseText);
                        }
                    });
                }
            },

            cancelMemberGuardianSelect = function () {
                if (selectionType === 3) {
                    $('#firstGuardianPhone').val('');
                    $('#firstGuardianPhone').focus();
                } else if (selectionType === 4) {
                    $('#secondGuardianPhone').val('');
                    $('#secondGuardianPhone').focus();
                } else if (selectionType === 5) {
                    $('#memberGuardianPhone').val('');
                    $('#memberGuardianPhone').focus();
                }

                $('.memberguardianselect').hide();
            },

            confirmAddTeamStaff = function () {
                shell.showProgressIndicator(MiscTexts.Adding);

                var teamStaffRoleId = $('#teamStaffSearchMemberRole').val();

                datamanager.insertClubStaff(teamId, selectedClubStaff().TeamStaffID, selectedClubStaff().ClubPersonID, teamStaffRoleId, selectedClubStaff().MemberID)
                    .then(function (teamStaffId) {
                        shell.hideProgressIndicator();

                        $('.clubstaffselect').hide();

                        clearTeamMembersList();

                        showToast(teamAdminTexts.TheTeamStaffHasBeenAdded);
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            cancelAddTeamStaff = function () {
                $('.clubstaffselect').hide();
            },

            confirmAddPlayer = function () {
                shell.showProgressIndicator(MiscTexts.Adding);

                var shirtNumber = parseInt($('#playerSearchShirtNumber').val());
                var playerPositionId = $('#playerSearchPlayerPosition').val();

                if (!shirtNumber)
                    shirtNumber = 0;

                datamanager.insertClubPlayer(teamId, selectedClubPlayer().PlayerID, shirtNumber, playerPositionId)
                    .then(function (playerId) {
                        shell.hideProgressIndicator();

                        $('.clubplayerselect').hide();

                        showToast(teamAdminTexts.ThePlayerHasBeenAdded);

                        clearTeamMembersList();
                        searchPlayers();
                    })
                    .fail(function (error) {
                        shell.hideProgressIndicator();

                        alert(error.responseText);
                    });
            },

            cancelAddPlayer = function () {
                $('.clubplayerselect').hide();
            },

            confirmInvite = function () {
                // Should be the same
                insertTeamMemberInvite(teamMemberForInvite());

                //Clear observables and hide the member select view
                matchingMember('');
                $('.memberselect').hide();
            },

            cancelInvite = function () {
                $('.memberselect').hide();
            },

            confirmMemberMerge = function () {
                var currentMemberId = 0;

                switch (selectionType) {
                    case 1:
                        currentMemberId = teamPlayerForEdit().MemberID;
                        break;
                    case 2:
                        currentMemberId = teamStaffForEdit().MemberID;
                        break;
                    case 5:
                        currentMemberId = memberGuardianForEdit().MemberID;
                        break;
                }

                datamanager.mergeAndDeleteTeamMembers(teamId, currentMemberId, matchingMember().MemberID)
                    .then(function (json) {
                        //Clear observables and hide the member select view
                        matchingMember('');
                        $('.membertomergeselect').hide();

                        showToast('Koppling lyckades!');

                        teamPlayerForEdit('');
                        teamStaffForEdit('');
                        memberGuardianForEdit('');

                        clearTeamMembersList();

                        router.navigateBack();
                    })
                    .fail(function (error) {
                        alert(error.responseText);
                    });
            },

            cancelMemberMerge = function () {
                //Clear phone number field
                switch (selectionType) {
                    case 1:
                        $('#playerPhone').val('');
                        $('#playerPhone').focus();
                        break;
                    case 2:
                        $('#teamStaffPhone').val('');
                        $('#teamStaffPhone').focus();
                        break;
                    case 5:
                        $('#memberGuardianPhone').val('');
                        $('#teamStaffPhone').focus();
                        break;
                    default:
                        break;
                }
                $('.membertomergeselect').hide();
            },

            closeMessageOverlay = function () {
                $('.messageOverlay').hide();
            },

            showToast = function (text) {
                if (toastr)
                    toastr.success(text);
                else
                    alert(text);
            },

            selectTeamStaffGender = function (item) {
                selectedTeamStaffGender(item.GenderID);

                switch (item.GenderID) {
                    case 1:
                        $('#teamStaffSearchGenderDropDownTitle').text(MemberTexts.Gender);
                        break;
                    case 2:
                    case 3:
                        $('#teamStaffSearchGenderDropDownTitle').text(item.Name);
                        break;
                }
            },

            selectPlayerGender = function (item) {
                selectedPlayerGender(item.GenderID);

                switch (item.GenderID) {
                    case 1:
                        $('#playerSearchGenderDropDownTitle').text(MemberTexts.Gender);
                        break;
                    case 2:
                    case 3:
                        $('#playerSearchGenderDropDownTitle').text(item.Name);
                        break;
                }
            },

            clearTeamMembersList = function () {
                staff([]);
                players([]);
            },

            teamStaffAddedComplete = function (sendInvite, teamStaffId, editMode) {
                // Clear all input fields
                //$('#teamStaffPersonalIdentityNumber').val('');
                //$('#teamStaffPhone').val('');
                //$('#teamStaffFirstName').val('');
                //$('#teamStaffLastName').val('');
                //$('#teamStaffEmail').val('');

                // Clear members so that they are reloaded
                clearTeamMembersList();

                if (sendInvite) {
                    datamanager.sendInvitetoTeamStaff(teamStaffId, {
                        success: function (model) {
                            teamStaffAddedFinished(editMode);
                        },
                        error: function (response) {
                            // If the invite method fails, just fail silently
                            teamStaffAddedFinished(editMode);
                        }
                    });
                } else {
                    teamStaffAddedFinished(editMode);
                }
            },

            teamStaffAddedFinished = function (editMode) {
                shell.hideProgressIndicator();

                if (editMode) {
                    showToast(teamAdminTexts.TheTeamStaffHasBeenUpdated);

                    // Navigate back to search in case we want to add more team staff
                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                } else {
                    showToast(teamAdminTexts.TheTeamStaffHasBeenAdded);

                    // Navigate back to search in case we want to add more team staff
                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/searchteamstaff');
                }
            },

            playerAddedComplete = function (sendInvite, teamPlayerId, editMode) {
                // Clear all input fields
                //$('#playerPersonalIdentityNumber').val('');
                //$('#playerPhone').val('');
                //$('#playerFirstName').val('');
                //$('#playerLastName').val('');
                //$('#playerEmail').val('');

                // Clear members so that they are reloaded
                staff([]);
                players([]);
                matchingMember('');

                if (sendInvite) {
                    datamanager.sendInvitetoTeamPlayer(teamPlayerId, {
                        success: function (model) {
                            playerAddedFinished(editMode, teamPlayerId);
                        },
                        error: function (response) {
                            // If the invite method fails, just fail silently                            
                            playerAddedFinished(editMode, teamPlayerId);
                        }
                    });
                } else {
                    playerAddedFinished(editMode, teamPlayerId);
                }
            },

            playerAddedFinished = function (editMode, teamPlayerId) {
                shell.hideProgressIndicator();
                if (editMode) {
                    showToast(teamAdminTexts.ThePlayerHasBeenUpdated);

                    // Navigate back to member list from where we edited the player
                    router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/members');
                } else {
                    showToast(teamAdminTexts.ThePlayerHasBeenAdded);

                    datamanager.checkIfTeamPlayerRequireGuardians(teamPlayerId, {
                        success: function (memberId) {
                            if (memberId > 0) {
                                router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/addmemberguardians/' + memberId);
                            }
                            else
                                router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/searchplayers');
                        },
                        error: function (response) {
                            router.navigateTo(config.hashes.teamadmin + '/' + teamId + '/searchplayers');
                        }
                    });
                }
            },

            calculatedTeamName = ko.computed(function () {
                var n = "";

                if (team() !== undefined) {
                    n = teamName();

                    if (teamAlias() && teamAlias().length > 0) {
                        n = teamAlias();
                    }
                }

                return n;
            }),

            filteredClubTeamStaff = ko.computed(function () {
                return ko.utils.arrayFilter(clubstaff(), function (item) {
                    return true;
                });
            }),

            filteredClubPlayers = ko.computed(function () {
                return ko.utils.arrayFilter(clubplayers(), function (item) {
                    return true;

                    //return (selectedPlayerGender() == 1 || item.GenderID == selectedPlayerGender());
                });
            }),

            connectTeam = function (item) {
                var r = confirm("Är du säker att du vill koppla detta lag? Alla matcher, spelare, ledare och följare kommer att flyttas över.");

                if (r === true) {
                    shell.showProgressIndicator('Kopplar, detta kan ta en stund...');

                    datamanager.connectTeam(teamId, item.TeamID, {
                        success: function (newTeamId) {
                            shell.hideProgressIndicator();

                            showToast("Koppling klar!");

                            if (newTeamId !== teamId) {
                                // If we created a new team, redirect to that team
                                router.navigateTo(config.hashes.teamadmin + '/' + newTeamId + '/connect');
                            } else {
                                connectedTeams([]);
                                availableTeams([]);
                                staff([]);
                                players([]);

                                initTeamConnect();
                                window.scrollTo(0, 0);
                            }
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                }
            },

            disconnectTeam = function (item) {
                var r = confirm("Är du säker på att du vill koppla loss detta lag?");

                if (r === true) {
                    shell.showProgressIndicator('Kopplar loss, detta kan ta en stund...');

                    datamanager.disconnectTeam(teamId, item.TeamID, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            showToast("Klart!");

                            connectedTeams([]);
                            availableTeams([]);

                            initTeamConnect();
                            window.scrollTo(0, 0);
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                }
            },

            resetTeam = function (item) {
                var r = confirm("Är du säker på att du vill återställa detta lag?");

                if (r === true) {
                    shell.showProgressIndicator('Återställer, detta kan ta en stund...');

                    datamanager.resetTeam(teamId, {
                        success: function (json) {
                            shell.hideProgressIndicator();

                            showToast("Klart!");

                            connectedTeams([]);
                            availableTeams([]);

                            initTeamConnect();
                            window.scrollTo(0, 0);
                        },
                        error: function (error) {
                            shell.hideProgressIndicator();

                            alert(error);
                        }
                    });
                }
            },

            memberIsSportswikAdmin = ko.computed(function () {
                return shell.currentMember.IsSportswikAdmin;
            }),

            canCreateTeamStaff = function () {
                return appconfig.canCreateTeamStaff();
            },

            canCreatePlayer = function () {
                return appconfig.canCreatePlayer();
            },

            canDeleteTeamStaff = function () {
                return appconfig.canDeleteTeamStaff();
            },

            canDeletePlayer = function () {
                return appconfig.canDeletePlayer();
            },

            onTeamAliasChanged = function (d, e) {
                teamAlias($(e.target).val());

                return true;
            },

            onTeamNameChanged = function (d, e) {
                teamName($(e.target).val());

                return true;
            },

            onKeyPressAllowNumeric = function (d, e) {
                return e.metaKey || e.which <= 0 || e.which === 8 || /[0-9]/.test(String.fromCharCode(e.which));
            },

            onPersonalIdentityNumber = function (data, event) {
                var personalIdentityNumber = $(event.target).val();

                if (personalIdentityNumber.length === 2) {
                    if (!(personalIdentityNumber === "20" || personalIdentityNumber === "19")) {
                        var year = parseInt(personalIdentityNumber);

                        // Everything after 2019 will default to 1919
                        if (year > 19) {
                            $(event.target).val("19" + year);
                        } else {
                            if (year < 10)
                                $(event.target).val("200" + year);
                            else
                                $(event.target).val("20" + year);
                        }
                    }
                }

                if (data.EditState > 0 || data.Required === false)
                    return;

                var isPlayer = event.target.id === 'playerPersonalIdentityNumber';

                if (personalIdentityNumber.length === 12) {
                    datamanager.validatePersonalIdentityNumber(personalIdentityNumber, {
                        success: function (model) {
                            var FieldInstance = $(event.target).parsley();
                            var errorName = event.target.id + '-custom';

                            if (model === false) {
                                FieldInstance.removeError(errorName);
                                FieldInstance.addError(errorName, { message: 'Invalid personal identity number', updateClass: true });
                            } else {
                                FieldInstance.removeError(errorName);

                                datamanager.searchForMember(data.MemberID, '', '', personalIdentityNumber, false, 0)
                                    .then(function (json) {
                                        if (json.length > 0) {
                                            matchingMember(json[0]);

                                            selectionType = 2;

                                            if (isPlayer) {
                                                $('#playerMatchingPlayerPosition').val(defaultPlayerPosition);
                                                $('.playerselect').show();
                                            }
                                            else {
                                                $('#teamStaffMatchingMemberRole').val(defaultTeamStaffRole);
                                                $('.teamstaffselect').show();
                                            }
                                        }
                                    })
                                    .fail(function (error) {
                                        alert(error.responseText);
                                    });
                            }
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
            },

            phoneSearchHelper = function (eventTargetId, countryId, phone) {
                var currentMemberId = 0;
                var editType = 0;

                switch (eventTargetId) {
                    case 'playerPhone':
                        editType = 1;
                        break;
                    case 'teamStaffPhone':
                        editType = 2;
                        break;
                    case 'firstGuardianPhone':
                        editType = 3;
                        break;
                    case 'secondGuardianPhone':
                        editType = 4;
                        break;
                    case 'memberGuardianPhone':
                        editType = 5;
                        break;
                    case 'memberInvitePhone':
                        if (phone.length > 7) {
                            datamanager.searchForMember(teamMemberForInvite().MemberID(), '', phone, '', false, countryId)
                                .then(function (model) {

                                    if (model.length > 0) {
                                        if (model[0].IsError) {
                                            $('#memberInvitePhone').val('');
                                        }

                                        matchingMember(model[0]);

                                        $('.memberselect').show();
                                    }
                                })
                                .fail(function (error) {
                                    alert(error.responseText);
                                });
                        }

                        return;
                }

                if (phone.length > 7) {
                    if (isEditPersonMode) {
                        switch (eventTargetId) {
                            case 'playerPhone':
                                selectionType = 1;
                                currentMemberId = teamPlayerForEdit().MemberID;
                                break;
                            case 'teamStaffPhone':
                                selectionType = 2;
                                currentMemberId = teamStaffForEdit().MemberID;
                                break;
                            case 'firstGuardianPhone':
                                break;
                            case 'secondGuardianPhone':
                                break;
                            case 'memberGuardianPhone':
                                selectionType = 5;
                                currentMemberId = memberGuardianForEdit().MemberID;
                                break;
                        }

                        datamanager.searchForMember(currentMemberId, '', phone, '', false, countryId)
                            .then(function (json) {
                                if (json.length > 0) {
                                    matchingMember(json[0]);
                                    $('.membertomergeselect').show();
                                }
                            })
                            .fail(function (error) {
                                //Clear phone number field
                                switch (selectionType) {
                                    case 1:
                                        $('#playerPhone').val('');
                                        $('#playerPhone').focus();
                                        break;
                                    case 2:
                                        $('#teamStaffPhone').val('');
                                        $('#teamStaffPhone').focus();
                                        break;
                                    case 5:
                                        $('#memberGuardianPhone').val('');
                                        $('#teamStaffPhone').focus();
                                        break;
                                    default:
                                        break;
                                }
                                alert(error.responseText);
                            });

                    } else {
                        datamanager.searchForMember(0, '', phone, '', false, countryId)
                            .then(function (json) {
                                if (json.length > 0) {
                                    selectionType = 1;

                                    matchingMember(json[0]);

                                    switch (editType) {
                                        case 1:
                                            $('#playerMatchingPlayerPosition').val(defaultPlayerPosition);
                                            $('.playerselect').show();
                                            break;
                                        case 2:
                                            $('#teamStaffMatchingMemberRole').val(defaultTeamStaffRole);
                                            $('.teamstaffselect').show();
                                            break;
                                        case 3:
                                            selectionType = 3;
                                            $('.memberguardianselect').show();
                                            break;
                                        case 4:
                                            selectionType = 4;
                                            $('.memberguardianselect').show();
                                            break;
                                        case 5:
                                            selectionType = 5;
                                            $('.memberguardianselect').show();
                                            break;
                                        default:
                                            console.log("TODO: " + editType);
                                            break;
                                    }
                                }
                            })
                            .fail(function (error) {
                                alert(error.responseText);
                            });
                    }
                }
            },

            onPastePhoneNumberOld = function (data, event) {
                if (data.EditMemberInformationIsLocked) {
                    return;
                }

                var phone = event.originalEvent.clipboardData.getData("text/plain");

                if (phone) {
                    phone = phone.replace(/\D/g, '');

                    if (phone.length > 10)
                        phone = phone.substring(0, 10);

                    $(event.target).val(phone).change();
                }

                phoneSearchHelper(event.target.id, data.MobileCountryCodeID, phone);

                return false;
            },

            onPastePhoneNumber = function (data, event) {
                if (data.EditState > 0)
                    return;

                var phone = event.originalEvent.clipboardData.getData("text/plain");

                if (phone) {
                    phone = phone.replace(/\D/g, '');

                    if (phone.length > 10)
                        phone = phone.substring(0, 10);

                    $(event.target).val(phone).change();
                }

                phoneSearchHelper(event.target.id, data.Id, phone);

                return false;
            },

            onPhoneKeyUpOld = function (data, event) {
                if (data.EditMemberInformationIsLocked) {
                    return;
                }

                if (!(event.metaKey || event.which <= 0 || event.which === 8 || /[0-9]/.test(String.fromCharCode(event.which))))
                    return;

                var phone = $(event.target).val();

                phoneSearchHelper(event.target.id, data.MobileCountryCodeID, phone);
            },

            onPhoneKeyUp = function (data, event) {
                if (data.EditState > 0)
                    return; // To make sure we cannot edit other information                

                if (!(event.metaKey || event.which <= 0 || event.which === 8 || /[0-9]/.test(String.fromCharCode(event.which))))
                    return;

                phoneSearchHelper(event.target.id, data.Id, data.Value);
            },

            onPersonalIdentityNumberFocusOut = function (data, event) {
                if (data.EditMemberInformationIsLocked) {
                    return;
                }

                if (data.RequirePersonalIdentityNumber === false)
                    return;

                var personalIdentityNumber = $(event.target).val();

                // Ignore personalIdentityNumber in Innebandy
                if ($(event.target).hasClass("disabled-control") === false && personalIdentityNumber.length < 12) {
                    var FieldInstance = $(event.target).parsley();
                    var errorName = event.target.id + '-custom';

                    FieldInstance.removeError(errorName);
                    FieldInstance.addError(errorName, { message: 'Invalid personal identity number', updateClass: true });
                }
            },

            cleanup = function () {
            },

            selectClubTest = function () {
                clubselect.activate(selectClubCallback);
            },

            selectClubCallback = function (clubId, clubName) {
                playerNewClubId = clubId;
                playerNewClubName = clubName;

                $('#player-origin-club').text(clubName);
            },

            filteredAvailableTeams = ko.computed(function () {
                return ko.utils.arrayFilter(availableTeams(), function (item) {
                    var match = true;

                    if (teamSearchString() !== '-') {
                        match = false;
                        var s = teamSearchString().toLowerCase().replace(" ", "");

                        // Search the team name
                        match = item.TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1;

                        // Search the team alias if it is set
                        if (item.TeamAlias.toLowerCase().replace(" ", "").indexOf(s) !== -1)
                            match = true;

                        //console.log(item);
                        for (var i = 0; i < item.TeamStaffForClubTeamView.length; i++) {
                            // Search TeamStaff for the name
                            if (item.TeamStaffForClubTeamView[i].FullName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }

                        for (var j = 0; j < item.Leagues.length; j++) {
                            // Search Leagues for the TeamName
                            if (item.Leagues[j].TeamName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }

                            // Search Leagues for the LeagueName
                            if (item.Leagues[j].LeagueName.toLowerCase().replace(" ", "").indexOf(s) !== -1) {
                                match = true;
                                break;
                            }
                        }
                    }

                    return match;
                });
            }),

            onFileDropped = function (data, event) {
                event.preventDefault();

                $(event.target).removeClass('dragHover');

                var ev = event.originalEvent;
                var files = ev.target.files || ev.dataTransfer.files;

                for (var i = 0; i < files.length; i++) {
                    console.log(files[i]);
                    // If dropped items aren't files, reject them
                    if (ev.dataTransfer.items[i].kind === 'file') {
                        var f = ev.dataTransfer.items[i].getAsFile();
                        console.log('... file[' + i + '].name = ' + f.name);

                        if (!f.type.match('image.*')) {
                            continue;
                        }

                        var reader = new FileReader();

                        reader.onload = (function (theFile) {
                            return function (e) {
                                var partnerLogoBase64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                                imagecropper.activate(partnerLogoBase64data, 10, 3, false, cropperPartnerCallback);
                            };
                        })(f);

                        reader.readAsDataURL(f);
                    }
                }
            },

            onDragOver = function (data, event) {
                $(event.target).addClass('dragHover');

                event.stopPropagation();
                event.preventDefault();
            },

            onDragLeave = function (data, event) {
                $(event.target).removeClass('dragHover');
            },

            onSearchTeamsKeyDown = function (data, event) {
                var s = $(event.target).val();

                if (s.length === 0)
                    s = '-';

                teamSearchString(s);
            },            

            init = function () {
                $(document).on('change', '.importFilePicker', function (evt) {
                    handleFileSelect(evt);
                    evt.target.value = '';
                });

                $(document).on('change', '.profileFilePicker', function (evt) {
                    handleProfilePictureSelect(evt);
                    evt.target.value = '';
                });

                $(document).on('change', '.teamBannerFilePicker', function (evt) {
                    handleTeamBannerPictureSelect(evt);
                    evt.target.value = '';
                });        

                $(document).on('change', '#teamadmin-view .partnerLogoFilePicker', function (evt) {
                    handlePartnerLogoSelect(evt);
                    evt.target.value = '';
                });   
            };

        init();

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,

            teamId: teamId,
            teamHeaderInfo: teamHeaderInfo,
            team: team,
            staff: staff,
            players: players,
            countries: countries,
            genders: genders,
            seasons: seasons,
            shoots: shoots,
            teamSponsors: teamSponsors,
            teamStaffRoles: teamStaffRoles,
            playerPositions: playerPositions,
            importTeamStaff: importTeamStaff,
            importPlayers: importPlayers,            
            matchingMember: matchingMember,
            liveStreamPaymentRows: liveStreamPaymentRows,
            payoutSummaryRows: payoutSummaryRows,
            replayPartners: replayPartners,
            filteredClubTeamStaff: filteredClubTeamStaff,
            filteredClubPlayers: filteredClubPlayers,
            calculatedTeamName: calculatedTeamName,
            importCompleted: importCompleted,
            connectedTeams: connectedTeams,
            filteredAvailableTeams: filteredAvailableTeams, 
            importHeaderModel: importHeaderModel,
            memberHeaderModel: memberHeaderModel,
            initLiveStream: initLiveStream,
            initTeamSponsors: initTeamSponsors,
            liveStreamGamePaymentRows: liveStreamGamePaymentRows,
            liveStreamTeamPaymentRows: liveStreamTeamPaymentRows,
            teamPartner: teamPartner,
            replayPartnersModel: replayPartnersModel,
            memberIsSportswikAdmin: memberIsSportswikAdmin,            

            onKeyPressAllowNumeric: onKeyPressAllowNumeric,            
            onPersonalIdentityNumber: onPersonalIdentityNumber,
            onSearchTeamsKeyDown: onSearchTeamsKeyDown,
            onPastePhoneNumber: onPastePhoneNumber,
            onPastePhoneNumberOld: onPastePhoneNumberOld,
            onPhoneKeyUp: onPhoneKeyUp,
            onPhoneKeyUpOld: onPhoneKeyUpOld,
            onPersonalIdentityNumberFocusOut: onPersonalIdentityNumberFocusOut,
            onTeamAliasChanged: onTeamAliasChanged,
            onTeamNameChanged: onTeamNameChanged,

            teamPlayerForEdit: teamPlayerForEdit,
            teamStaffForEdit: teamStaffForEdit,
            memberGuardianForEdit: memberGuardianForEdit,
            guardianMember: guardianMember,
            teamMemberForInvite: teamMemberForInvite,
            paymentDossier: paymentDossier,

            firstMemberGuardian: firstMemberGuardian,
            secondMemberGuardian: secondMemberGuardian, 

            navigateToTeamAdminHome: navigateToTeamAdminHome,
            navigateToTeamAdminMembers: navigateToTeamAdminMembers,
            navigateToTeamAdminStream: navigateToTeamAdminStream,
            navigateToConnectTeams: navigateToConnectTeams,
            navigateToTeamAdminPartners: navigateToTeamAdminPartners,
            navigateToTeamAdminSponsors: navigateToTeamAdminSponsors,
            navigateToLagetImport: navigateToLagetImport,
            navigateToSportAdminImport: navigateToSportAdminImport,
            navigateToSvenskaLagImport: navigateToSvenskaLagImport,
            navigateToMyClubImport: navigateToMyClubImport,
            navigateToExcelImport: navigateToExcelImport,
            navigateToSwissExcelImport: navigateToSwissExcelImport,
            navigateToAddEditPlayer: navigateToAddEditPlayer,
            navigateToAddEditTeamStaff: navigateToAddEditTeamStaff,            
            navigateToSearchPlayers: navigateToSearchPlayers,
            navigateToSearchTeamStaff: navigateToSearchTeamStaff,
            navigateToAddMemberGuardians: navigateToAddMemberGuardians,
            navigateToInviteMember: navigateToInviteMember,
            navigateToTeam: navigateToTeam,

            uploadFileClick: uploadFileClick,
            finishImport: finishImport,
            cancelFileImport: cancelFileImport,            
            getDataFromMyClub: getDataFromMyClub,
            saveTeamStaff: saveTeamStaff,
            saveTeamPlayer: saveTeamPlayer,                        
            showLiveStreamPaymentDetails: showLiveStreamPaymentDetails,
            showLiveStreamPayoutDetails: showLiveStreamPayoutDetails,
            closeDetailsOverlay: closeDetailsOverlay,
            closeSubscriptionsOverlay: closeSubscriptionsOverlay,
            closePayoutSummaryOverlay: closePayoutSummaryOverlay,
            createNewSponsor: createNewSponsor,
            createReplayPartner: createReplayPartner,
            buyReplayFeature: buyReplayFeature,
            saveTeamPartner: saveTeamPartner,
            cancelEditTeamPartner: cancelEditTeamPartner,
            cancelSendPaymentDossier: cancelSendPaymentDossier,
            sendPaymentDossier: sendPaymentDossier,
            getPaymentDossierPDF: getPaymentDossierPDF,
            selectSeason: selectSeason,
            editTeamPartner: editTeamPartner,
            deleteTeamPartner: deleteTeamPartner,
            showTeamPartnerPayment: showTeamPartnerPayment,
            changeTeamPartnerStatus: changeTeamPartnerStatus,
            changeReplayPartnerStatus: changeReplayPartnerStatus,

            sendTeamMemberInvite: sendTeamMemberInvite,
            saveMemberGuardian: saveMemberGuardian,
            updateFirstMemberGuardian: updateFirstMemberGuardian,
            updateSecondMemberGuardian: updateSecondMemberGuardian,
            updateTeamInformation: updateTeamInformation,

            clubTeamStaffClicked: clubTeamStaffClicked,
            clubPlayerClicked: clubPlayerClicked,
            removeImportItem: removeImportItem,
            fixImportItem: fixImportItem,
            inviteAllTeamMembers: inviteAllTeamMembers,
            searchTeamStaff: searchTeamStaff,
            searchPlayers: searchPlayers,
            searchTeamStaffByPhone: searchTeamStaffByPhone,
            editPlayer: editPlayer,
            editMemberGuardian: editMemberGuardian,
            editTeamStaff: editTeamStaff,
            deleteTeamStaff: deleteTeamStaff,
            deletePlayer: deletePlayer,
            deleteMemberGuardian: deleteMemberGuardian,
            cancelTeamStaffSelect: cancelTeamStaffSelect,
            confirmTeamStaffSelect: confirmTeamStaffSelect,
            confirmAddPlayer: confirmAddPlayer,
            cancelAddPlayer: cancelAddPlayer,
            confirmInvite: confirmInvite,
            cancelInvite: cancelInvite,
            confirmMemberGuardianSelect: confirmMemberGuardianSelect,
            cancelMemberGuardianSelect: cancelMemberGuardianSelect,
            confirmAddTeamStaff: confirmAddTeamStaff,
            cancelAddTeamStaff: cancelAddTeamStaff,
            selectTeamStaffGender: selectTeamStaffGender,
            confirmPlayerSelect: confirmPlayerSelect,
            confirmMemberMerge: confirmMemberMerge,
            cancelMemberMerge: cancelMemberMerge,
            cancelPlayerSelect: cancelPlayerSelect,
            closeMessageOverlay: closeMessageOverlay,
            selectPlayerGender: selectPlayerGender,
            selectedClubPlayer: selectedClubPlayer,
            selectedClubStaff: selectedClubStaff,
            selectClubTest: selectClubTest,

            searchTeamStaffParams: searchTeamStaffParams,

            uploadProfilePictureClick: uploadProfilePictureClick,
            uploadPartnerLogoClick: uploadPartnerLogoClick,
            uploadTeamBannerClick: uploadTeamBannerClick,
            deleteTeamBanner: deleteTeamBanner,
            connectTeam: connectTeam,
            disconnectTeam: disconnectTeam,
            resetTeam: resetTeam,

            canCreateTeamStaff: canCreateTeamStaff,
            canCreatePlayer: canCreatePlayer,
            canDeleteTeamStaff: canDeleteTeamStaff,
            canDeletePlayer: canDeletePlayer,            

            externalSystemName: externalSystemName,
            currentPage: currentPage,
            breadCrumb: breadCrumb,

            onFileDropped: onFileDropped,
            onDragOver: onDragOver,
            onDragLeave: onDragLeave                       
        };
    });;
define('viewmodels/vm.teamconnect',
    ['jquery', 'ko', 'config', 'router', 'datamanager', 'underscore'],
    function ($, ko, config, router, datamanager, _) {
        var seasons = ko.observableArray(),
            currentTeam = ko.observable(),
            sportid = ko.observable(),
            currentPage = ko.observable(''),
            teamconnectinformation = ko.observable(''),
            teamName = ko.observable(''),
            players = ko.observableArray(),
            staff = ko.observableArray(),
            leagues = ko.observableArray(),
            games = ko.observableArray(),
            selectedTeams = ko.observableArray(),
            connectTeams = ko.observableArray(),
            isFromTeamPage = ko.observable(false),
            teamPlayers = ko.observableArray(),
            teamStaff = ko.observableArray(),
            teamLeagues = ko.observableArray(),

            teamid = 0,

            connectableTeams = ko.observableArray(),

            activate = function (routeData, callback) {
                routeData.subview = 'start';

                $('#teamconnect-view .preloader').show();
                $('#teamconnect-view .afterloaded').hide();

                activatesubview(routeData);

                if (_.isFunction(callback)) { callback(); }
            },

            activatesubview = function (routeData) {
                teamid = routeData.teamId;
                var currentView = routeData.subview;
                $('#teamconnect-' + currentView).show();
                var currentViewName = 'teamconnect-' + currentView;

                currentPage(currentView);

                //if (currentView != 'start' && teamconnectinformation == undefined)
                //{
                //    return;
                //}

                switch (currentView) {
                    case 'start':
                        {
                            if (connectableTeams !== undefined) {

                                if (teamid !== currentTeam()) {
                                    seasons([]);
                                    getClubTeamsForExternalConnect();
                                }
                                else {
                                    $('#teamconnect-view .preloader').hide();
                                    $('#teamconnect-view .afterloaded').show();
                                }
                            }
                            else
                                getClubTeamsForExternalConnect();
                        }
                        break;
                    default:
                        {
                            if (connectableTeams().length === 0)
                                navigateToStart();
                        }
                        break;
                }
            },

            bindFilterText = function () {
                var input = document.getElementById('teamListFilterBox');
                if (input) {
                    input.onkeyup = function () {
                        var filter = input.value.toUpperCase();

                        $('.season-container li').each(function () {
                            var teamname = this.getElementsByClassName('teamname')[0].innerHTML;
                            var teamstaff = this.getElementsByClassName('teamstaff')[0].innerHTML;
                            var league = this.getElementsByClassName('league')[0].innerHTML;

                            if (teamname.toUpperCase().indexOf(filter) >= 0 || teamstaff.toUpperCase().indexOf(filter) >= 0 || league.toUpperCase().indexOf(filter) >= 0 || filter === "")
                                this.style.display = 'list-item';
                            else
                                this.style.display = 'none';
                        });
                    };
                }
            },

            getClubTeamsForExternalConnect = function () {
                datamanager.getClubTeamsForExternalConnect(teamid, {
                    success: function (json) {
                        if (json.ConnectableTeams.length === 0 && !isFromTeamPage()) {
                            navigateToFinishTeamRegistration();

                            return;
                        }

                        currentTeam(json.TeamID);
                        sportid(json.SportID);
                        connectableTeams(json.ConnectableTeams);

                        // Get the unique seasons
                        var unique = {};
                        for (var i in json.ConnectableTeams) {
                            if (typeof unique[json.ConnectableTeams[i].LatestSeason] === "undefined") {
                                seasons.push(json.ConnectableTeams[i].LatestSeason);
                            }
                            unique[json.ConnectableTeams[i].LatestSeason] = 0;
                        }

                        // Sort the seasons
                        //seasons.sort();

                        bindFilterText();
                        $('#teamconnect-view .preloader').hide();
                        $('#teamconnect-view .afterloaded').show();
                    },
                    error: function (json) {

                    }
                });
            },

            filteredTeams = function (season) {
                return ko.utils.arrayFilter(connectableTeams(), function (connectableTeam) {
                    return connectableTeam.LatestSeason.localeCompare(season) === 0;
                });
            },

            filteredPlayers = function (teamID) {
                return ko.utils.arrayFilter(players(), function (player) {
                    return player.TeamID === teamID;
                });
            },

            filteredPlayer = function (playerID) {
                return ko.utils.arrayFilter(players(), function (player) {
                    return player.PlayerID === playerID;
                });
            },

            filteredStaff = function (teamID) {
                return ko.utils.arrayFilter(staff(), function (s) {
                    return s.TeamID === teamID;
                });
            },

            filteredLeagues = function (teamID) {
                return ko.utils.arrayFilter(leagues(), function (league) {
                    return league.TeamID === teamID;
                });
            },

            filteredGames = function (teamID) {
                return ko.utils.arrayFilter(games(), function (game) {
                    return game.HomeTeamID === teamID || game.AwayTeamID === teamID;
                });
            },

            navigateToStart = function () {
                router.navigateTo(config.hashes.teamconnect + '/' + teamid);
            },

            navigateToPlayers = function () {
                router.navigateTo(config.hashes.teamconnect + '/' + teamid + '/players');
            },

            navigateToTeamStaff = function () {
                router.navigateTo(config.hashes.teamconnect + '/' + teamid + '/teamstaff');
            },

            navigateToSeries = function () {
                router.navigateTo(config.hashes.teamconnect + '/' + teamid + '/leagues');
            },

            navigateToGames = function () {
                router.navigateTo(config.hashes.teamconnect + '/' + teamid + '/games');
            },

            navigateToTeam = function () {
                router.navigateTo(config.hashes.team + '/' + teamid + '/leagues');
            },

            navigateToFinishTeamRegistration = function () {
                //Clean up the observables that we have acquired
                cleanupObservables();

                window.location.href = '/activateteam/connecttopersonandfinishteamregistration/?teamID=' + teamid;
            },

            closeTeamInfo = function () {
                $('#teamconnect-view .overlay').hide();
            },

            completeRegistration = function () {
                showProgressIndicator("Kopplar");

                var selectedPlayers = [];
                var selectedExternalPlayers = [];

                $('.player-select').each(function () {
                    if ($(this).prop("checked")) {
                        var playerId = parseInt($(this).val());

                        var p = ko.utils.arrayFirst(players(), function (item) {
                            return item.PlayerID === playerId;
                        });

                        if (p)
                            selectedExternalPlayers.push(p);
                    }
                });

                var selectedStaff = [];

                $('.staff-select').each(function () {
                    if ($(this).prop("checked")) {
                        selectedStaff.push($(this).val());
                    }
                });

                // TEST: commented out
                datamanager.connectSportswikTeamToTeamsExtPlayer(teamid, selectedTeams, selectedPlayers, selectedStaff, selectedExternalPlayers)
                    .then(function (json) {
                        $("#loading").fadeOut();

                        navigateToFinishTeamRegistration();
                    })
                    .fail(function (error) {
                        alert(error.responseText);
                        $("#loading").fadeOut();
                    });



                //datamanager.connectSportswikTeamToTeams(teamid, selectedTeams, selectedPlayers, selectedStaff)
                //    .then(function (json) {
                //        $("#loading").fadeOut();                    

                //        navigateToFinishTeamRegistration();
                //    })
                //    .fail(function (error) {
                //        alert(error.responseText);
                //        $("#loading").fadeOut();
                //    });
            },

            showTeamInfo = function (team, event) {
                event.stopPropagation();

                teamName(team.Name);

                teamPlayers([]);
                teamStaff([]);
                teamLeagues([]);

                $('#teamconnect-view .overlay').show();
                datamanager.initPlayersAdminVC(team.TeamID, {
                    success: function (model) {

                        var underlayingArray = teamPlayers();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        teamPlayers.valueHasMutated();
                    },
                    error: function (response) {
                    }
                });

                datamanager.initTeamStaffAdminVC(team.TeamID, {
                    success: function (model) {

                        var underlayingArray = teamStaff();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        teamStaff.valueHasMutated();
                    },
                    error: function (response) {
                    }
                });

                datamanager.initTeamLeaguesVC(team.TeamID, {
                    success: function (model) {
                        var underlayingArray = teamLeagues();

                        for (var i = 0; i < model.length; i++) {
                            underlayingArray.push(model[i]);
                        }

                        teamLeagues.valueHasMutated();
                    },
                    error: function (response) {
                    }
                });

                return false;
            },

            selectRow = function (data, event) {
                var target;

                if (event.target)
                    target = event.target;
                else if (event.srcElement)
                    target = event.srcElement;

                if (target.nodeType === 3) // defeat Safari bug
                    target = target.parentNode;

                var listElement = $(target).closest("li");
                listElement.toggleClass('active');

                var input = $(listElement).find("input");
                input.prop('checked', !input.prop('checked'));
            },

            selectTeamRow = function (data, event) {
                var target;

                if (event.target)
                    target = event.target;
                else if (event.srcElement)
                    target = event.srcElement;

                if (target.nodeType === 3) // defeat Safari bug
                    target = target.parentNode;

                var listElement = $(target).closest("li");
                listElement.toggleClass('active');

                var input = $(listElement).find("input");
                input.prop('checked', !input.prop('checked'));

                var chk = $(listElement).parent("ul").find("li input:checked");

                if (chk.length > 0) {
                    $('.do-connect').show();
                    $('.skip-connect').hide();
                } else {
                    $('.skip-connect').show();
                    $('.do-connect').hide();
                }
            },

            selectAllRows = function (data, event) {
                var target;

                if (event.target)
                    target = event.target;
                else if (event.srcElement)
                    target = event.srcElement;

                if (target.nodeType === 3) // defeat Safari bug
                    target = target.parentNode;

                var header = $(target).closest(".list-header");
                header.toggleClass('active');
                var selected = header.hasClass('active');

                $(header).next("ul").find("li").each(function () {
                    if (selected) {
                        $(this).addClass('active');

                        $(this).find("input").each(function () {
                            $(this).prop('checked', true);
                        });

                    }
                    else {
                        $(this).removeClass('active');

                        $(this).find("input").each(function () {
                            $(this).prop('checked', false);
                        });
                    }
                });
            },

            toggleTeamPlayers = function () {
                $('#toggleImportTeamPlayers').addClass('active');
                $('#toggleImportTeamStaff').removeClass('active');
                $('#toggleImportTeamCups').removeClass('active');

                $('.teamplayers-tab').show();
                $('.teamstaff-tab').hide();
                $('.teamcups-tab').hide();
            },

            toggleTeamStaff = function () {
                $('#toggleImportTeamPlayers').removeClass('active');
                $('#toggleImportTeamStaff').addClass('active');
                $('#toggleImportTeamCups').removeClass('active');

                $('.teamplayers-tab').hide();
                $('.teamstaff-tab').show();
                $('.teamcups-tab').hide();
            },

            toggleTeamCups = function () {
                $('#toggleImportTeamPlayers').removeClass('active');
                $('#toggleImportTeamStaff').removeClass('active');
                $('#toggleImportTeamCups').addClass('active');

                $('.teamplayers-tab').hide();
                $('.teamstaff-tab').hide();
                $('.teamcups-tab').show();
            },

            getTeamConnectInformation = function () {
                selectedTeams([]);

                $('.season-select').each(function () {
                    if ($(this).prop("checked")) {
                        selectedTeams.push($(this).val());
                    }
                });

                showProgressIndicator(MiscTexts.GettingInformation);

                datamanager.getTeamConnectViewModel(teamid, selectedTeams())
                    .then(function (json) {                        
                        teamconnectinformation(json);
                        connectTeams(json.Teams);
                        players(json.Players);
                        staff(json.TeamStaff);
                        leagues(json.Leagues);
                        games(json.Games);                        

                        $('#teamconnect-view .preloader').hide();
                        $('#teamconnect-view .afterloaded').show();

                        router.navigateTo(config.hashes.teamconnect + '/' + teamid + '/players');
                        $("#loading").fadeOut();
                    })
                    .fail(function (error) {
                        alert(error.responseText);
                        $("#loading").fadeOut();
                    });

                //datamanager.getConnectInformation(teamid, selectedTeams())
                //    .then(function (json) {
                //        teamconnectinformation(json);
                //        connectTeams(json.Teams);
                //        players(json.Players);
                //        staff(json.TeamStaff);
                //        leagues(json.Leagues);
                //        games(json.Games);

                //        $('#teamconnect-view .preloader').hide();
                //        $('#teamconnect-view .afterloaded').show();

                //        router.navigateTo(config.hashes.teamconnect + '/' + teamid + '/players');
                //        $("#loading").fadeOut();
                //    })
                //    .fail(function (error) {
                //        alert(error.responseText);
                //        $("#loading").fadeOut();
                //    });
            },

            showProgressIndicator = function (text) {
                $("#loading").fadeIn();
                $("#loadingSpinnerText").text(text);
            },

            setFromTeam = function (fromTeam) {
                isFromTeamPage(fromTeam);
            },

            getTeamPlayerHeader = function (team) {

                var playerAmount = ko.utils.arrayFilter(players(), function (player) {
                    return player.TeamID === team.TeamID;
                });

                return team.Name + ' - ' + playerAmount.length + ' ';
            },

            getTeamStaffHeader = function (team) {

                var staffAmount = ko.utils.arrayFilter(staff(), function (s) {
                    return s.TeamID === team.TeamID;
                });

                return team.Name + ' - ' + staffAmount.length + ' ';
            },

            getTeamLeaguesHeader = function (team) {

                var leagueAmount = ko.utils.arrayFilter(leagues(), function (league) {
                    return league.TeamID === team.TeamID;
                });

                return team.Name + ' (' + leagueAmount.length + ')';
            },

            getTeamGamesHeader = function (team) {

                var gamesAmount = ko.utils.arrayFilter(games(), function (game) {
                    return game.HomeTeamID === team.TeamID || game.AwayTeamID === team.TeamID;
                });

                return team.Name + ' (' + gamesAmount.length + ')';
            },

            cleanupObservables = function () {
                seasons([]);
                teamconnectinformation('');
                players([]);
                staff([]);
                leagues([]);
                games([]);
                selectedTeams([]);
                connectTeams([]);

                teamPlayers([]);
                teamStaff([]);
                teamLeagues([]);

                connectableTeams([]);
            },

            cleanup = function () {
                $('.teamconnect-subview').hide();
                //isFromTeamPage(false);
                //connectableTeams([]);
                //seasons([]);
            };

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,
            seasons: seasons,
            players: players,
            staff: staff,
            leagues: leagues,
            games: games,
            sportid: sportid,

            filteredTeams: filteredTeams,
            filteredPlayers: filteredPlayers,
            filteredStaff: filteredStaff,
            filteredLeagues: filteredLeagues,
            filteredGames: filteredGames,

            connectableTeams: connectableTeams,

            teamPlayers: teamPlayers,
            teamStaff: teamStaff,
            teamLeagues: teamLeagues,
            teamName: teamName,

            connectTeams: connectTeams,

            navigateToStart: navigateToStart,
            navigateToPlayers: navigateToPlayers,
            navigateToTeamStaff: navigateToTeamStaff,
            navigateToSeries: navigateToSeries,
            navigateToGames: navigateToGames,
            navigateToTeam: navigateToTeam,
            navigateToFinishTeamRegistration: navigateToFinishTeamRegistration,

            closeTeamInfo: closeTeamInfo,
            showTeamInfo: showTeamInfo,

            selectRow: selectRow,
            selectTeamRow: selectTeamRow,
            selectAllRows: selectAllRows,

            setFromTeam: setFromTeam,
            isFromTeamPage: isFromTeamPage,

            getTeamConnectInformation: getTeamConnectInformation,
            getTeamPlayerHeader: getTeamPlayerHeader,
            getTeamStaffHeader: getTeamStaffHeader,
            getTeamLeaguesHeader: getTeamLeaguesHeader,
            getTeamGamesHeader: getTeamGamesHeader,

            toggleTeamPlayers: toggleTeamPlayers,
            toggleTeamStaff: toggleTeamStaff,
            toggleTeamCups: toggleTeamCups,

            completeRegistration: completeRegistration
        };        
    });;
define('viewmodels/vm.teamfeeddetails',
    ['ko', 'config', 'router', 'presenter', 'helpers/sw.imagehelper', 'datamanager', 'models/model', 'models/viewmodel', 'toastr', 'helpers/sw.socialentityhelper', 'models/viewmodel.mapper', 'viewmodels/vm.assetinfo', 'underscore'],
    function (ko, config, router, presenter, swimagehelper, datamanager, model, viewmodel, toastr, socialentityhelper, viewmodelmapper, assetinfo, _) {
        var selectedTeam = ko.observable(),            
            teamFeedDetail = ko.observable(),
            selectedTeamFeedItemID = ko.observable(),
            selectedTeamFeedItemTypeID = ko.observable(),

            activate = function (routeData, callback) {

                window.scrollTo(0, 0);

                selectedTeam(routeData.teamId);
                selectedTeamFeedItemID(routeData.TeamFeedItemID);
                selectedTeamFeedItemTypeID(routeData.TeamFeedItemTypeID);

                initTeamFeedDetail();                

                //Call callback if there is one
                if (_.isFunction(callback)) {
                    callback();
                }
            },

            cleanup = function () {
                teamFeedDetail([]);
                $("#teamfeeddetails-view .socialEntityDetailCommentText").val('');

                viewIsInitialized = false;
            },

            getPictureURL = function (picture, screenEstate) {
                return swimagehelper.getPictureURLWithSize(picture, screenEstate);
            },

            goBackCmd = function () {
                presenter.toggleActivity(false);
                router.navigateBack();
            },

            initTeamFeedDetail = function () {
                datamanager.getTeamFeedItem(selectedTeamFeedItemID(), selectedTeamFeedItemTypeID(), {
                    success: function (json) {
                        detaildata = json;
                        teamFeedDetail(detaildata);
                    },
                    error: function (response) {
                    }
                });
            },

            deletePicture = function (pictureId) {
                var answer = confirm("Delete Picture?");
                if (answer) {
                    datamanager.deletePicture(pictureId, {
                        success: function (json) {
                            teamfeeddetailDeletedMessage(pictureId);
                            goBackCmd();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
                else {
                    toastr.success("Canceled deleting picture!");
                }
            },

            deleteVideo = function (videoId) {
                var answer = confirm("Delete Video?");
                if (answer) {
                    datamanager.deleteVideo(videoId, {
                        success: function (json) {
                            teamfeeddetailDeletedMessage(videoId);
                            goBackCmd();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
                else {
                    toastr.success("Canceled deleting video!");
                }
            },

            deleteDiscussionPost = function (disussionPostId) {
                var answer = confirm("Delete discussion post?");
                if (answer) {
                    datamanager.deleteDiscussionPost(disussionPostId, {
                        success: function (json) {
                            teamfeeddetailDeletedMessage(disussionPostId);
                            router.navigateBack();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
                else {
                    toastr.success("Canceled deleting disussionpost!");
                }
            },

            reportContent = function (TeamFeedItemID, TeamFeedItemTypeID) {
                var answer = confirm("Report content?");
                if (answer) {
                    var reportContentModel = new viewmodel.ReportContent()
                        .ReportTypeID(3)
                        .ReportContentID(TeamFeedItemID)
                        .ReportContentTypeID(TeamFeedItemTypeID)
                        .ReportContentGameID(0)
                        .ReportContentReason('');

                    datamanager.reportContentWithReason(viewmodelmapper.reportcontent.toDto(reportContentModel), {
                        success: function () {
                            toastr.success('Content successfully reported!');
                            goBackCmd();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });


                    // TODO
                    //datamanager.reportContentWithReason(3, TeamFeedItemID, TeamFeedItemTypeID, 0, {
                    //    success: function (json) {
                    //        toastr.success('Content successfully reported!');
                    //        goBackCmd();
                    //    },
                    //    error: function (response) {
                    //        alert(response);
                    //    }
                    //});

                    //datamanager.reportContent(TeamFeedItemID, TeamFeedItemTypeID, {
                    //    success: function (json) {
                    //        toastr.success('Content successfully reported!');
                    //        goBackCmd();
                    //    },
                    //    error: function (response) {
                    //        alert(response);
                    //    }
                    //});
                }
                else {
                    toastr.success("Canceled reporting content!");
                }
            },

            onSocialEntityCommentPostClick = function (data) {

                var commentText = $("#teamfeeddetails-view .socialEntityDetailCommentText").val();

                if (commentText !== '') {

                    var socialEntityComment = new model.SocialEntityComment()
                        .SocialEntityID(data.SocialEntityInfo.SocialEntityID)
                        .Text(commentText);

                    datamanager.insertSocialEntityComment(ko.toJS(socialEntityComment), {
                        success: function (result) {
                            cleanup();
                            initTeamFeedDetail();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }
            },

            onSocialEntityEditClick = function (data) {

                switch (data.TeamFeedItemTypeID) {
                    case 1:
                        { // DiscussionPost
                            router.navigateTo(config.hashes.discussionpost + '/' + selectedTeamFeedItemID());
                        }
                        break;
                    case 2:
                        { // Picture
                            assetinfo.initialize('team', data, function () {
                                router.navigateTo(config.hashes.assetinfo + '/team/' + selectedTeam() + '/' + selectedTeamFeedItemID() + '/' + selectedTeamFeedItemTypeID());
                            });
                        }
                        break;
                    case 3:
                        { // Video
                            assetinfo.initialize('team', data, function () {
                                router.navigateTo(config.hashes.assetinfo + '/team/' + selectedTeam() + '/' + selectedTeamFeedItemID() + '/' + selectedTeamFeedItemTypeID());
                            });
                        }
                        break;
                    default:
                        break;
                }

            },

            onSocialEntityDeleteClick = function (data) {

                switch (data.TeamFeedItemTypeID) {
                    case 1:
                        { // DiscussionPost
                            deleteDiscussionPost(data.TeamFeedItemID);
                        }
                        break;
                    case 2:
                        { // Picture
                            deletePicture(data.TeamFeedItemID);
                        }
                        break;
                    case 3:
                        { // Video
                            deleteVideo(data.TeamFeedItemID);
                        }
                        break;
                    default:
                        break;
                }

            },

            onSocialEntityReportClick = function (data) {
                reportContent(data.TeamFeedItemID, data.TeamFeedItemTypeID);
            },

            onSocialEntityCommentDeleteClick = function (data) {

                if (data.SocialEntityCommentID !== '') {
                    datamanager.deleteSocialEntityComment(data.SocialEntityCommentID, {
                        success: function (result) {
                            cleanup();
                            initTeamFeedDetail();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }

            },

            onSocialEntityCommentReportClick = function (data) {

                if (data.SocialEntityCommentID !== '') {
                    var reportContentModel = new viewmodel.ReportContent()
                        .ReportTypeID(1)
                        .ReportContentID(data.SocialEntityCommentID)
                        .ReportContentTypeID(8)
                        .ReportContentGameID(0)
                        .ReportContentReason('');

                    datamanager.reportContentWithReason(viewmodelmapper.reportcontent.toDto(reportContentModel), {
                        success: function () {
                            cleanup();
                            initTeamFeedDetail();
                        },
                        error: function (response) {
                            return response;
                        }
                    });

                    // TODO:
                    //datamanager.reportContentWithReason(1, data.SocialEntityCommentID, 8, 0, {
                    //    success: function (result) {
                    //        cleanup();
                    //        initTeamFeedDetail();
                    //    },
                    //    error: function (response) {
                    //        return response;
                    //    }
                    //});

                    //datamanager.reportSocialEntityComment(data.SocialEntityCommentID, {
                    //    success: function (result) {
                    //        cleanup();
                    //        initTeamFeedDetail();
                    //    },
                    //    error: function (response) {
                    //        return response;
                    //    }
                    //});
                }
            },

            teamfeeddetailDeletedMessage = function (e) {
                $.event.trigger({
                    type: "teamfeeddetailDeletedMessage",
                    message: e,
                    time: new Date()
                });
            };        

        return {
            activate: activate,
            cleanup: cleanup,
            getPictureURL: getPictureURL,
            teamFeedDetail: teamFeedDetail,
            goBackCmd: goBackCmd,
            socialentityhelper: socialentityhelper,            
            onSocialEntityDeleteClick: onSocialEntityDeleteClick,
            onSocialEntityReportClick: onSocialEntityReportClick,
            onSocialEntityEditClick: onSocialEntityEditClick,
            onSocialEntityCommentPostClick: onSocialEntityCommentPostClick,
            onSocialEntityCommentDeleteClick: onSocialEntityCommentDeleteClick,
            onSocialEntityCommentReportClick: onSocialEntityCommentReportClick,
            socialEntityTexts: socialEntityTexts
        };
    });;
define('viewmodels/vm.teamfeeddetailsinfo',
    ['ko', 'router', 'presenter', 'datamanager', 'underscore'],
    function (ko, router, presenter, datamanager, _) {
        var membersWhoLikes = ko.observableArray(),            

        activate = function (routeData, callback) {

            window.scrollTo(0, 0);

            datamanager.getSocialEntityLikesVC(routeData.socialEntityID, {
                success: function (json) {
                    membersWhoLikes(json);
                },
                error: function (response) {
                    alert(response);
                }
            });

            //Call callback if there is one
            if (_.isFunction(callback)) {
                callback();
            }
        },

        cleanup = function () {
            membersWhoLikes([]);
            viewIsInitialized = false;
        },

        goBackCmd = function () {
            presenter.toggleActivity(false);
            router.navigateBack();
        };

        return {
            activate: activate,
            cleanup: cleanup,
            goBackCmd: goBackCmd,
            membersWhoLikes: membersWhoLikes
        };
    });;
define('viewmodels/vm.teaminvite',
    ['ko', 'underscore', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell'],
    function (ko, _, config, router, messenger, datamanager, magazinegameview, shell) {
        var teamId = 0,
            countries = ko.observableArray(),

            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();

                teamId = routeData.teamID;

                console.log(teamId);

                getCountriesForSelectList();
            },

            getCountriesForSelectList = function () {
                datamanager.getCountriesForDialing({
                    success: function (json) {
                        countries(json);                        

                        console.log(json.length);
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            cleanup = function () {
            };

        return {
            activate: activate,
            cleanup: cleanup,

            countries: countries
        };
    });;
define('viewmodels/vm.teamplayer',
    ['ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'viewmodels/vm.appconfig', 'viewmodels/vm.guardian', 'models/viewmodel', 'models/model', 'models/model.mapper', 'underscore'],
    function (ko, config, router, messenger, datamanager, shell, appconfig, guardian, viewmodel, model, modelmapper, _) {

        var player = ko.observable(),

            playerGuardians = ko.observableArray(),
            teamPlayerProfile = ko.observable(),
            playerProfile = ko.observable(),
            playerLeagueStatistics = ko.observable(),
            playerHighlights = ko.observableArray(),
            teamPlayerForEditView = ko.observable(),
            explanationTextArray = ko.observableArray(),
            currentPage = ko.observable(''),

            teamHeaderInfo = ko.observable(),
            teamMemberTeamRoleID = ko.observable(),
            teamMemberTeamRoleConnectionID = ko.observable(),            
            currentPreRoll = ko.observable(),

            billboardList = [],
            mediaRootTarget = null,
            billboardTimer = null,
            originClubID = ko.observable(),
            originClubName = ko.observable(),
            searchResultClubs = ko.observableArray(),
            showClubEmptyState = ko.observable(false),

            gamePlayerId = 0,
            teamPlayerId = 0,

            activate = function (routeData, callback) {
                routeData.subview = 'profile';

                messenger.publish.viewModelActivated();

                if (_.isFunction(callback)) {
                    callback();
                }

                activatesubview(routeData);
            },

            activatesubview = function (routeData) {
                var currentView = routeData.subview;
                currentPage(currentView);

                $('.teamplayer-subview').hide();
                $('#teamplayer-' + currentView).show();
                $('#playerProfileTopbar-' + currentView).addClass('active');

                if (Number(routeData.gamePlayerId) !== gamePlayerId || Number(routeData.teamPlayerId) !== teamPlayerId) {
                    cleanObservables();                    
                }

                gamePlayerId = Number(routeData.gamePlayerId);
                teamPlayerId = Number(routeData.teamPlayerId);



                //if (teamPlayerProfile() && teamPlayerProfile().PlayerForDetailsView.TeamPlayerID !== Number(routeData.teamPlayerId)) {
                //    teamPlayerProfile('');
                //}

                //if (teamPlayerProfile() === undefined || teamPlayerProfile() === '') {
                //    initTeamPlayerProfile();
                //    initPlayerProfile();
                //}

                if (playerProfile() === undefined || playerProfile() === '') {
                    initPlayerProfile(routeData);
                } else {
                    switch (currentView) {
                        case 'statistics':
                            datamanager.getPlayerLeagueStatistics(playerProfile().PlayerForDetailsView.PlayerID, {
                                success: function (json) {
                                    playerLeagueStatistics(json);

                                    explanationTextArray(
                                        json.ExplanationText.replaceAll('\r\n', ' ').split('. ').map((sentence) => ({
                                            name: sentence.split(': ')[0],
                                            explanation: sentence.split(': ')[1].replace('.', '')
                                        }))
                                    )
                                },
                                error: function (json) {
                                }
                            });

                            break;
                        case 'highlights':
                            if (playerHighlights().length === 0) {
                                shell.showProgressIndicator('Getting data...');

                                datamanager.getPlayerHighlights(playerProfile().PlayerForDetailsView.PlayerID, {
                                    success: function (json) {
                                        playerHighlights([]);

                                        var underlayingArray = playerHighlights();

                                        for (var i = 0; i < json.length; i++) {
                                            underlayingArray.push(json[i]);
                                        }

                                        playerHighlights.valueHasMutated();

                                        shell.hideProgressIndicator();
                                    },
                                    error: function (json) {
                                        shell.hideProgressIndicator();
                                    }
                                });
                            }

                            break;
                        case 'edit':
                            //datamanager.initTeamPlayerForEditView(teamPlayerId, {
                            //    success: function (json) {
                            //        teamPlayerForEditView(json);
                            //        console.log('teamPlayerForEditView', json);

                            //        originClubID(json.PlayerFacts.OriginClub.Value);
                            //        originClubName(json.PlayerFacts.OriginClub.Text);

                            //        $('#teamPlayerSearchClub').val(originClubName());
                            //    },
                            //    error: function (json) {
                            //    }
                            //});

                            break;
                    }
                }
            },

            cleanup = function () {
                $('.teamplayer-subview').hide();
            },

            cleanObservables = function () {
                playerProfile('');

                playerHighlights([]);
                playerGuardians([]);
            },

            canDeletePlayer = function () {
                return appconfig.canDeletePlayer();
            },

            //initTeamPlayerProfile = function () {
            //    datamanager.initTeamPlayerProfile(teamPlayerId, {
            //        success: function (json) {
            //            teamPlayerProfile(json);
            //            teamHeaderInfo(json.TeamHeaderInfo);

            //            console.log('teamPlayerProfile', json);
            //        },
            //        error: function (json) {
            //        }
            //    });
            //},

            initPlayerProfile = function (routeData) {
                datamanager.initPlayerProfile(teamPlayerId, gamePlayerId, {
                    success: function (json) {
                        playerProfile(json);
                        console.log('playerProfile', json);

                        playerGuardians([]);

                        var underlayingArray = playerGuardians();

                        for (var i = 0; i < json.MemberGuardians.length; i++) {
                            underlayingArray.push(json.MemberGuardians[i]);
                        }

                        playerGuardians.valueHasMutated();

                        activatesubview(routeData);
                    },
                    error: function (json) {
                    }
                });
            },

            playVideo = function (data, event) {
                var item = data.Highlight;

                var elem = $(event.target).closest('.gameMediaRoot');

                if (item.SocialEntityID && item.SocialEntityID > 0) {
                    datamanager.insertSocialEntityView(item.SocialEntityID);
                }

                if (item.PartnerFeaturePrerolls.length > 0) {
                    // If we already have a running timer, stop it and clear stuff
                    if (billboardTimer !== null) {
                        clearTimeout(billboardTimer);
                        billboardTimer = null;

                        mediaRootTarget.find('.video-preroll').fadeOut(300);
                        mediaRootTarget.find('.overlay-container').show();
                        mediaRootTarget.find('.swVideoPlayer').hide();
                    }

                    billboardList = [];

                    // Push all the billboards into a temp-list
                    for (var i = 0; i < item.PartnerFeaturePrerolls.length; i++) {
                        billboardList.push(item.PartnerFeaturePrerolls[i]);
                    }

                    // Save reference to root target
                    mediaRootTarget = $(event.target).closest('.gameMediaRoot');
                    mediaRootTarget.find('.video-preroll').fadeIn(300);

                    currentPreRoll(billboardList[0]);

                    if (billboardList[0].PartnerFeatureID > 0) {
                        datamanager.trackPartnerFeatureView(billboardList[0].PartnerFeatureID, billboardList[0].PartnerFeaturePlacementID, 0, 0, 2);
                    }

                    runTimer(billboardList[0].DisplayTime * 1000);
                } else {
                    elem.find('.overlay-container').hide();
                    elem.find('.swVideoPlayer').show();
                    elem.find('.vjs-tech').show();
                    elem.find('.vjs-tech').get(0).play();
                }

                event.preventDefault();
                event.stopPropagation();
            },

            runTimer = function (displayTime) {
                billboardTimer = setTimeout(function () {
                    billboardList.shift();

                    if (billboardList.length === 0) {
                        mediaRootTarget.find('.video-preroll').fadeOut(300);
                        mediaRootTarget.find('.overlay-container').hide();
                        mediaRootTarget.find('.swVideoPlayer').show();
                        mediaRootTarget.find('.vjs-tech').show();
                        billboardTimer = null;

                        var player = mediaRootTarget.find('.vjs-tech').get(0);

                        if (player) {
                            player.play();
                        }
                    } else {
                        currentPreRoll(billboardList[0]);

                        if (billboardList[0].PartnerFeatureID > 0) {
                            datamanager.trackPartnerFeatureView(billboardList[0].PartnerFeatureID, billboardList[0].PartnerFeaturePlacementID, 0, 0, 2);
                        }

                        runTimer(billboardList[0].DisplayTime * 1000);
                    }
                }, displayTime);
            },

            initialize = function (data, callback) {
                if (_.isFunction(callback)) {
                    callback();
                }
            },

            navigateToAddPlayerGuardian = function () {
                router.navigateTo(config.hashes.teamadmin + '/' + teamPlayerProfile().PlayerForDetailsView.TeamID + '/addmemberguardians/' + teamPlayerProfile().PlayerForDetailsView.MemberID);
            },

            navigateToPlayerGuardian = function (playerguardian) {
                if (playerguardian.PlayerGuardianID > 0) {
                    guardian.initialize(teamHeaderInfo(), playerguardian);

                    router.navigateTo(config.hashes.guardian + '/' + playerguardian.PlayerGuardianID);
                } else {
                    guardian.initialize(teamHeaderInfo(), playerguardian);

                    router.navigateTo(config.hashes.guardian);
                }
            },

            removePlayer = function () {
                var r = confirm(MiscTexts.AreYouSure);
                if (r === true) {
                    datamanager.deleteTeamPlayer(teamPlayerId, {
                        success: function (json) {
                            router.navigateBack();
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            acceptRequest = function () {
                datamanager.setPlayerRequestStatus(teamPlayerId, 0, {
                    success: function (json) {
                        router.navigateBack();
                    },
                    error: function (error) {
                        alert(error);
                    }
                });
            },

            denyRequest = function () {
                var r = confirm(MiscTexts.AreYouSure);
                if (r === true) {
                    datamanager.setPlayerRequestStatus(teamPlayerId, 2, {
                        success: function (json) {
                            router.navigateBack();
                        },
                        error: function (error) {
                            alert(error);
                        }
                    });
                }
            },

            onSearchClubInput = function (data, event) {
                var searchString = $(event.target).val();

                if (searchString.length > 2) {
                    datamanager.searchClubs(searchString, {
                        success: function (model) {
                            searchResultClubs([]);

                            var underlayingTeamFeedArray = searchResultClubs();

                            for (var i = 0; i < model.length; i++) {
                                underlayingTeamFeedArray.push(model[i]);
                            }

                            searchResultClubs.valueHasMutated();

                            showClubEmptyState(searchResultClubs().length === 0);
                        },
                        error: function (response, xhr) {
                            console.log(response);
                        }
                    });
                }
                else {
                    showClubEmptyState(false);
                    searchResultClubs([]);
                }
            },

            selectClub = function (item) {
                originClubID(item.EntityID);
                originClubName(item.Title);
                $('#teamPlayerSearchClub').val(item.Title);
                searchResultClubs([]);
            },

            saveProfile = function () {
                console.log("Saving profile info", ko.toJS(teamPlayerForEditView()));

                var playerFacts = new viewmodel.PlayerFactsForEditParameters()
                    .NationalityCountryID(teamPlayerForEditView().PlayerFacts.NationalityCountry.Value)
                    .Shoots(teamPlayerForEditView().PlayerFacts.Shoots.Value)
                    .HeightCM(teamPlayerForEditView().PlayerFacts.HeightCM.Value)
                    .WeightKG(teamPlayerForEditView().PlayerFacts.WeightKG.Value)
                    .OriginClubID(originClubID())
                    .OriginClubName(originClubName())
                    .StickBrand(teamPlayerForEditView().PlayerFacts.StickBrand.Value)
                    .ShoeBrand(teamPlayerForEditView().PlayerFacts.ShoeBrand.Value)

                var teamPlayer = new viewmodel.TeamPlayerForEditParameters()
                    .TeamPlayerID(teamPlayerId)
                    .MobilePhone(teamPlayerForEditView().MobilePhone.Value)
                    .PersonalIdentityNumber(teamPlayerForEditView().PersonalIdentityNumber.Value)
                    .Email(teamPlayerForEditView().Email.Value)
                    .FirstName(teamPlayerForEditView().FirstName.Value)
                    .LastName(teamPlayerForEditView().LastName.Value)
                    .GenderID(parseInt(teamPlayerForEditView().Gender.Value))
                    .ShirtNumber(parseInt(teamPlayerForEditView().ShirtNumber.Value))
                    .PlayerPositionID(parseInt(teamPlayerForEditView().PlayerPosition.Value))
                    .PlayerFacts(playerFacts)

                shell.showProgressIndicator("Sparar...");

                // TODO: This should be refactored to updateTeamPlayer
                datamanager.updateTeamPlayerOld(ko.toJS(teamPlayer), {
                    success: function (json) {
                        shell.hideProgressIndicator();

                        /*initTeamPlayerProfile();*/
                        initPlayerProfile();
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();
                        alert(response);
                    }
                });
            },

            savePrivacySettings = function () {
                var hideProfilePicture = $('#hidePlayerPicture').is(":checked");
                var hideProfileName = $('#hidePlayerName').is(":checked");
                var photographyForbidden = $('#playerPhotographyForbidden').is(":checked");

                var teamPlayerPrivacySettings = new viewmodel.TeamPlayerPrivacyForEdit()
                    .TeamPlayerID(teamPlayerId)
                    .PhotographyForbidden(photographyForbidden)
                    .HideProfilePicture(hideProfilePicture)
                    .HideProfileName(hideProfileName);

                shell.showProgressIndicator(MiscTexts.Saving);

                datamanager.updateTeamPlayerPrivacySettings(ko.toJS(teamPlayerPrivacySettings), {
                    success: function (json) {
                        shell.hideProgressIndicator();
                    },
                    error: function (response) {
                        shell.hideProgressIndicator();
                        alert(response);
                    }
                });
            },

            changeReferencePicture = function () {
                $('.playerReferencePictureFilePicker').focus().trigger('click');
            },

            deleteReferencePicture = function () {
                var r = confirm(MiscTexts.AreYouSure);

                if (r === true) {
                    datamanager.deleteReferencePicture(player().MemberID, {
                        success: function (json) {
                            /*initTeamPlayerProfile(null, false);*/
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
            },

            updateReferencePicture = function () {
                var referencePictureData = '';

                if ($('#playerReferencePicData').val())
                    referencePictureData = $('#playerReferencePicData').val();

                var referencePictureForMember = new viewmodel.ReferencePicture()
                    .MemberID(player().MemberID)
                    .PictureBase64(referencePictureData);

                datamanager.updateReferencePicture(ko.toJS(referencePictureForMember), {
                    success: function (json) {
                        /*initTeamPlayerProfile(null, false);*/
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            handleReferencePicFileSelect = function (evt) {
                var files = evt.target.files; // FileList object

                for (var i = 0, f; f = files[i]; i++) {
                    if (!f.type.match('image.*')) {
                        continue;
                    }

                    var reader = new FileReader();

                    reader.onload = (function (theFile) {
                        return function (e) {
                            var base64data = e.target.result.substr(e.target.result.indexOf("base64,") + 7);

                            $('#playerReferencePicData').val(base64data);

                            updateReferencePicture();
                        };
                    })(f);

                    reader.readAsDataURL(f);
                }
            },

            init = function () {
                $(document).on('change', '.playerReferencePictureFilePicker', function (evt) {
                    handleReferencePicFileSelect(evt);
                });
            },            

            navigateToProfile = function () {
                return createNavigationItem("profile");
            },

            navigateToStatistics = function () {
                return createNavigationItem("statistics");
            },

            navigateToHighlights = function () {
                return createNavigationItem("highlights");
            },

            navigateToEdit = function () {
                return createNavigationItem("edit");
            },

            navigateToStreamPayment = function (data) {
                if (data.Highlight.GameIsPayPerView) {
                    router.navigateTo(config.hashes.stream + '/game/' + data.Highlight.GameID);
                } else {
                    if (data.Highlight.SubscriptionTeamID > 0)
                        router.navigateTo(config.hashes.stream + '/subscription/' + data.Highlight.SubscriptionTeamID);
                    else
                        router.navigateTo(config.hashes.stream + '/subscription');
                }
            },

            createNavigationItem = function (endPath) {
                return {
                    getHrefString: function () {
                        return config.hashes.teamplayer + '/' + teamPlayerId + '/' + gamePlayerId + '/' + endPath;
                    },
                    toClick: function () {
                        window.scrollTo(0, 0);
                        router.navigateTo(config.hashes.teamplayer + '/' + teamPlayerId + '/' + gamePlayerId + '/' + endPath);
                    }
                };
            };

            sendMemberGuardianInvite = function (data) {
                var teamMemberinviteModel = new model.MemberInvite()
                    .MemberID(data.MemberID)
                    .TeamID(data.TeamID)
                    .FirstName(data.FirstName)
                    .LastName(data.LastName)
                    .Email(data.Email)
                    .MobilePhone(data.MobilePhone)
                    .TeamRoleID(7)
                    .TeamRoleConnectionID(data.PlayerGuardianPlayerID);                

                var modelToSend = modelmapper.memberinvite.toDto(teamMemberinviteModel);

                datamanager.insertMemberInvite(modelToSend, {
                    success: function (json) {
                        router.navigateBack();
                        alert('Inbjudan skickad!');
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            showPrivacySettings = ko.computed(function () {
                return shell.currentMember.IsSportswikAdmin || typeof teamPlayerProfile() !== 'undefined' && teamPlayerProfile().ShowPrivacySettings && typeof player() !== 'undefined' && player().Status === 0;
            }),

            showGuardians = ko.computed(function () {
                return shell.currentMember.IsSportswikAdmin || typeof teamPlayerProfile() !== 'undefined' && teamPlayerProfile().IsPlayerAdmin && typeof player() !== 'undefined' && player().Status === 0;
            }),

            memberIsTeamAdministrator = ko.computed(function () {
                return shell.currentMember.IsSportswikAdmin || typeof teamPlayerProfile() !== 'undefined' && teamPlayerProfile().IsPlayerAdmin;
            });

        init();

        return {
            activate: activate,
            activatesubview: activatesubview,
            cleanup: cleanup,
            initialize: initialize,
            player: player,
            playerProfile: playerProfile,
            teamPlayerProfile: teamPlayerProfile,
            playerLeagueStatistics: playerLeagueStatistics,
            explanationTextArray: explanationTextArray,
            playerHighlights: playerHighlights,
            teamPlayerForEditView: teamPlayerForEditView,
            playerGuardians: playerGuardians,
            currentPage: currentPage,
            playVideo: playVideo,

            onSearchClubInput: onSearchClubInput,
            selectClub: selectClub,
            searchResultClubs: searchResultClubs,
            showClubEmptyState: showClubEmptyState,

            memberIsTeamAdministrator: memberIsTeamAdministrator,
            showPrivacySettings: showPrivacySettings,
            showGuardians: showGuardians,
            removePlayer: removePlayer,
            acceptRequest: acceptRequest,
            denyRequest: denyRequest,
            canDeletePlayer: canDeletePlayer,
            
            navigateToAddPlayerGuardian: navigateToAddPlayerGuardian,
            navigateToPlayerGuardian: navigateToPlayerGuardian,            

            navigateToProfile: navigateToProfile,
            navigateToStatistics: navigateToStatistics,
            navigateToHighlights: navigateToHighlights,
            navigateToEdit: navigateToEdit,
            navigateToStreamPayment: navigateToStreamPayment,

            teamHeaderInfo: teamHeaderInfo,

            saveProfile: saveProfile,
            savePrivacySettings: savePrivacySettings,
            changeReferencePicture: changeReferencePicture,
            deleteReferencePicture: deleteReferencePicture,

            teamMemberTeamRoleID: teamMemberTeamRoleID,
            teamMemberTeamRoleConnectionID: teamMemberTeamRoleConnectionID,
            sendMemberGuardianInvite: sendMemberGuardianInvite
        };
    });
;
define('viewmodels/vm.teamsubscription',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'viewmodels/vm.shell', 'underscore'],
    function ($, ko, config, router, messenger, datamanager, shell, _) {

        var teamId = 0,
            subscriptions = ko.observableArray(),
            selectedTeam = ko.observable(),
            streamSubscriptionModel = ko.observable(),

            activate = function (routeData, callback) {
                if (routeData.Id !== undefined) {
                    teamId = routeData.Id;
                }

                datamanager.getTeamSubscriptions(teamId, {
                    success: function (model) {
                        console.log(model);

                        streamSubscriptionModel(model.InitStreamSubscription);
                        selectedTeam(model.SelectedTeam);

                        var underlayingSubscriptionArray = subscriptions();

                        for (var k = 0; k < model.Subscriptions.length; k++) {
                            underlayingSubscriptionArray.push(model.Subscriptions[k]);
                        }

                        subscriptions.valueHasMutated();

                        $('#teamsubscription-view .main-preloader').hide();
                        $('#teamsubscription-view .main-afterloaded').show();
                    },
                    error: function (error) {
                        console.log(error);

                        $('#teamsubscription-view .main-preloader').hide();
                        $('#teamsubscription-view .main-afterloaded').show();
                    }
                });

            },

            cleanup = function () {
                teamId = 0;

                $('#teamsubscription-view .main-preloader').show();
                $('#teamsubscription-view .main-afterloaded').hide();
            },

            createPayment = function (data, event) {
                $('.validation-error').hide();

                var phoneNumber = streamSubscriptionModel().PhoneNumber;
                var subscriptionType = $('#teamsubscription-view input[name=teamSubscriptionType]:checked').val();

                if (!subscriptionType) {
                    $('.validation-error.subscription').show();
                    $('.validation-error.subscription p').text('Du måste välja ett abonnemang');

                    $('html, body').animate({
                        scrollTop: $(".subscriptionTypeBlock").offset().top - 60
                    }, 0);

                    return;
                }

                $(event.target).prop("disabled", true);

                $("#loading").fadeIn();
                $("#loadingSpinnerText").text(MiscTexts.CreatingPayment);

                datamanager.createSwishPayment(teamId, 0, phoneNumber, subscriptionType, 0, '')
                    .then(function (json) {
                        if (json.Status === 1) { // CREATED
                            // Redirect to swish payment page
                            window.location.replace('/stream/payment');
                        }
                        else if (json.Status === 3) { // PAID
                            // Redirect to success page
                            window.location.replace('/stream/success/' + json.PaymentID);
                        }
                        else {
                            $(event.target).prop("disabled", false);

                            $('.validation-error.summary').show();
                            $('.validation-error.summary p').text(json.Message);

                            $("#loading").fadeOut();
                        }
                    })
                    .fail(function (error) {
                        $("#loading").fadeOut();

                        $(event.target).prop("disabled", false);

                        alert(error.responseText);
                    });
            };

        return {
            activate: activate,
            cleanup: cleanup,

            createPayment: createPayment,
            selectedTeam: selectedTeam,
            subscriptions: subscriptions,
            streamSubscriptionModel: streamSubscriptionModel
        };
    });;
define('viewmodels/vm.testadmin',
    ['jquery', 'ko', 'config', 'messenger', 'datamanager', 'underscore'],
    function ($, ko, config, messenger, datamanager, _) {

        var x = ko.observable(),

            activate = function (routeData, callback) {
                messenger.publish.viewModelActivated();
            },

            cleanup = function () {
            };

        return {
            activate: activate,
            cleanup: cleanup        
        };
    });;
define('viewmodels/vm.tips',
    ['jquery', 'ko', 'config', 'router', 'messenger', 'datamanager', 'underscore', 'viewmodels/vm.infoitem'],
    function ($, ko, config, router, messenger, datamanager, _, infoitem) {

        var categories = ko.observableArray(),

            postsFilterType = ko.observable(0),
            memberCanEdit = ko.observable(false),
            initInfoItemTip = ko.observable(),

            activate = function (routeData, callback) {
                datamanager.initTipInfoItems({
                    success: function (model) {
                        initInfoItemTip(model);

                        memberCanEdit(model.MemberCanEdit);

                        categories([]);

                        var underlayingArray = categories();

                        for (var j = 0; j < model.Categories.length; j++) {
                            underlayingArray.push(model.Categories[j]);
                        }

                        categories.valueHasMutated();
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
            },

            createInfoItem = function (data) {
                // First parameter is the enum, 4 is Team
                // Second parameter is the ID of the entity, in this case the ClubId
                // Third parameter is used if we are editing an item, in this case we pass 0
                infoitem.activate(5, data.CategoryID, 0, null, infoItemCallback);
            },

            editInfoItem = function (data) {
                // First parameter is the enum, 4 is Team
                // Second parameter is the ID of the entity, if we are editing an item we do not need to pass this in
                // Third parameter is used if we are editing an item

                infoitem.activate(data.InfoItemTypeID, 0, data.InfoItemID, null, infoItemCallback);
            },

            infoItemCallback = function () {
                reloadInfoItems();
            },

            filterPosts = function (type) {
                if (type === postsFilterType()) {
                    return;
                }

                postsFilterType(type);                
                reloadInfoItems();
            },

            reloadInfoItems = function () {
                if (postsFilterType() === 0) {
                    datamanager.getTipInfoItems({
                        success: function (json) {
                            categories([]);

                            var underlayingArray = categories();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            categories.valueHasMutated();
                        },
                        error: function (error) {

                        }
                    });
                }
                else if (postsFilterType() === 1) {
                    datamanager.getManagedTipInfoItems({
                        success: function (json) {
                            categories([]);

                            var underlayingArray = categories();

                            for (var i = 0; i < json.length; i++) {
                                underlayingArray.push(json[i]);
                            }

                            categories.valueHasMutated();
                        },
                        error: function (error) {

                        }
                    });
                }
            },            

            navigateToInfoItem = function (data) {
                if ($(event.target).hasClass('preventBubble') === false) {
                    router.navigateTo('/' + config.hashes.infoitemdetails + '/' + data.InfoItemID);
                }
            },

            cleanup = function () {
                categories([]);
            };

        return {
            activate: activate,
            cleanup: cleanup,

            categories: categories,

            memberCanEdit: memberCanEdit,

            initInfoItemTip: initInfoItemTip,
            filterPosts: filterPosts,
            postsFilterType: postsFilterType,

            navigateToInfoItem: navigateToInfoItem,

            editInfoItem: editInfoItem,
            createInfoItem: createInfoItem
        };
    });;
define('viewmodels/vm.videodetails',
    ['ko', 'config', 'router', 'presenter', 'datamanager', 'models/model', 'models/viewmodel', 'toastr', 'underscore', 'helpers/sw.socialentityhelper', 'models/viewmodel.mapper'],
    function (ko, config, router, presenter, datamanager, model, viewmodel, toastr, _, socialentityhelper, viewmodelmapper) {
        var videoId = ko.observable(),
            videoInfo = ko.observable(),

            activate = function (routeData, callback) {
                window.scrollTo(0, 0);

                videoId(routeData.Id);

                getVideo();

                //Call callback if there is one
                if (_.isFunction(callback)) {
                    callback();
                }
            },

            cleanup = function () {
                $("#videodetails-view .socialEntityDetailCommentText").val('');
            },

            goBackCmd = function () {
                presenter.toggleActivity(false);
                router.navigateBack();
            },

            getVideo = function () {
                datamanager.getVideoForDetailsView(videoId(), {
                    success: function (json) {
                        videoInfo(json);
                    },
                    error: function (response) {
                        alert(response);
                    }
                });
            },

            reportContent = function (videoId) {
                var answer = confirm("Report content?");
                if (answer) {
                    var reportContentModel = new viewmodel.ReportContent()
                        .ReportTypeID(3)
                        .ReportContentID(videoId)
                        .ReportContentTypeID(3)
                        .ReportContentGameID(0)
                        .ReportContentReason('');

                    datamanager.reportContentWithReason(viewmodelmapper.reportcontent.toDto(reportContentModel), {
                        success: function () {
                            toastr.success('Content successfully reported!');
                            goBackCmd();
                        },
                        error: function (response) {
                            alert(response);
                        }
                    });
                }
                else {
                    toastr.success("Canceled reporting content!");
                }
            },

            onSocialEntityCommentPostClick = function (data) {

                var commentText = $("#videodetails-view .socialEntityDetailCommentText").val();

                if (commentText !== '') {

                    var socialEntityComment = new model.SocialEntityComment()
                        .SocialEntityID(data.SocialEntityInfo.SocialEntityID)
                        .Text(commentText);

                    datamanager.insertSocialEntityComment(ko.toJS(socialEntityComment), {
                        success: function (result) {
                            cleanup();
                            getVideo();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }
            },

            onSocialEntityCommentDeleteClick = function (data) {

                if (data.SocialEntityCommentID !== '') {
                    datamanager.deleteSocialEntityComment(data.SocialEntityCommentID, {
                        success: function (result) {
                            cleanup();
                            getVideo();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }

            },

            onSocialEntityCommentReportClick = function (data) {

                if (data.SocialEntityCommentID !== '') {
                    var reportContentModel = new viewmodel.ReportContent()
                        .ReportTypeID(1)
                        .ReportContentID(data.SocialEntityCommentID)
                        .ReportContentTypeID(8)
                        .ReportContentGameID(0)
                        .ReportContentReason('');

                    datamanager.reportContentWithReason(viewmodelmapper.reportcontent.toDto(reportContentModel), {
                        success: function () {
                            cleanup();
                            getVideo();
                        },
                        error: function (response) {
                            return response;
                        }
                    });
                }
            };

        return {
            activate: activate,
            cleanup: cleanup,
            videoInfo: videoInfo,
            goBackCmd: goBackCmd,
            socialentityhelper: socialentityhelper,            
            onSocialEntityCommentPostClick: onSocialEntityCommentPostClick,
            onSocialEntityCommentDeleteClick: onSocialEntityCommentDeleteClick,
            onSocialEntityCommentReportClick: onSocialEntityCommentReportClick,
            socialEntityTexts: socialEntityTexts
        };
    });;
define('viewmodels/vm.widget',
    ['ko', 'underscore', 'config', 'router', 'messenger', 'datamanager'],
    function (ko, _, config, router, messenger, datamanager) {

        var blurbsInFeed = ko.observableArray(),
            gettingPages = false,
            noMorePagesToGet = false,
            blurbsSuitableForHalfPage = [0, 1, 9, 12, 17, 18, 901, 903, 904, 905],
            isDebug = false,
            hasExampleMagazineBlurb = false,
            gameIds = null,
            lastScrollPosition = 0,
            teamId = 0,
            clubId = 0,            
            widgetId = ko.observable(),

        //Initialize loads data for the view and can be called when the view should be shown, or earlier to pre-load data 
        initialize = function (feedWithBlurbs, callback) {
        },

        //Activate shows the Magazine view and is called from the router
        activate = function (routeData, callback) {
            messenger.publish.viewModelActivated();
            if (routeData.Id !== undefined) {
                widgetId(Number(routeData.Id));
            }

            if (blurbsInFeed().length === 0) // Initialize if don't have any blurbs
            {
                window.scrollTo(0, 0);
                initializeMagazine(widgetId);
            }
            else {
                $('html, body').scrollTo({ top: lastScrollPosition + 'px', left: '0' }, 50);
            }

            $(window).scroll(infiniteScrolling);
        },

        cleanup = function () {
            shouldScrollToLastPosition = true;
            gettingPages = false;

            $(window).unbind('scroll', infiniteScrolling);
            lastScrollPosition = $(window).scrollTop();
        },

        morePages = function () {
            if (!gettingPages && !noMorePagesToGet) {
                $('#infiniteScrollStatusWrapper').show();
                getPagesFromServer();
            }
        },

        infiniteScrolling = function () {
            if ($(window).scrollTop() + $(window).height() > $(document).height() - 300 && blurbsInFeed().length !== 0 && hasExampleMagazineBlurb !== true) {
                // FIXME: Infinite scrolling or not?
                //if (!gettingPages && !noMorePagesToGet) {
                //    $('#infiniteScrollStatusWrapper').show();
                //    getPagesFromServer();
                //}
            }
            else if ($(window).scrollTop() === 0) { // högst upp 
                //kolla om ett nytt anrop till magasinet ger nya grejer, isåfall 
                //if blurbs[0] === nyaBlurbs[0];
                //Visa upp cool "ladda om mig"-grej
            }
        },

        initializeMagazine = function () {
            datamanager.initWidgetMagazineWebVc(widgetId(), {
                success: function (model) {
                    teamId = model.TeamID;
                    clubId = model.ClubID;

                    styleBlurbs(model.MagazineBlurbs);

                    var underlayingArray = blurbsInFeed();

                    //Add the pages to the page cache
                    for (var i = 0; i < model.MagazineBlurbs.length; i++) {
                        if (model.MagazineBlurbs[i].MagazineBlurbTypeID === 0) {
                            hasExampleMagazineBlurb = true;
                            $('#infiniteScrollStatusWrapper').hide();
                        }
                        underlayingArray.push(model.MagazineBlurbs[i]);
                    }

                    blurbsInFeed.valueHasMutated();
                },
                error: function (response, xhr) {
                    gettingPages = false;
                    router.navigateTo(config.hashes.teams);
                }
            });
        },

        styleBlurbs = function (json) {
            for (var i = 0; i < json.length; i++) {
                json[i].isHalfPageLeft = false;
                json[i].isHalfPageRight = false;
            }

            if (!isDebug) {
                for (i = 0; i < json.length - 1; i++) {
                    if (_.contains(blurbsSuitableForHalfPage, json[i].MagazineBlurbTypeID) && _.contains(blurbsSuitableForHalfPage, json[i + 1].MagazineBlurbTypeID)) {
                        json[i].isHalfPageLeft = true;
                        json[i + 1].isHalfPageRight = true;

                        i = i + 1;

                        if (i > json.length - 2) {
                            break;
                        }
                    }
                }
            }
        },

        getPagesFromServer = function () {
            var lastPageInCache, lastGameTime;

            gettingPages = true;

            //Loop through the current pages in the feed                
            var lastThreeBlurbTypes = [];

            if (blurbsInFeed().length !== 0) {
                lastPageInCache = blurbsInFeed()[blurbsInFeed().length - 1];
                gameIds = [];

                for (var i = 0; i < blurbsInFeed().length; i++) {
                    //Exclude all blurbs that does not have a gameID (some 90X like "unpaid season ticket")
                    var _gameID = blurbsInFeed()[i].GameID;
                    if (_.isNumber(_gameID)) gameIds.push(_gameID);
                }

                if (blurbsInFeed().length > 2) {
                    for (i = blurbsInFeed().length - 3; i < blurbsInFeed().length; i++) {
                        lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                    }
                } else if (blurbsInFeed().length > 1) {
                    for (i = 0; i < blurbsInFeed().length; i++) {
                        lastThreeBlurbTypes.push(blurbsInFeed()[i].MagazineBlurbTypeID);
                    }
                } else {
                    lastThreeBlurbTypes.push(blurbsInFeed()[0].MagazineBlurbTypeID);
                }

                lastGameTime = lastPageInCache.GameHeaderInfo.GameTime;
            }
            else {
                blurbsInFeed.removeAll();
                gameIds = null;
                lastGameTime = new Date();
            }

            //Get the next three pages from the server
            datamanager.GetWidgetMagazineBlurbs(teamId, clubId, moment(lastGameTime).format('YYYY-MM-DD HH:mm:ss.SSS'), lastThreeBlurbTypes, gameIds)
                .then(function (json) {
                    styleBlurbs(json);

                    if (json.length === 0) {
                        noMorePagesToGet = true;
                        $('#infiniteScrollStatus').html(leagueTexts.YouHaveReachedTheEndOfYourFeed);
                    }

                    var underlayingArray = blurbsInFeed();

                    //Add the pages to the page cache
                    for (var i = 0; i < json.length; i++) {
                        if (json[i].MagazineBlurbTypeID === 0)
                            hasExampleMagazineBlurb = true;

                        underlayingArray.push(json[i]);
                    }

                    blurbsInFeed.valueHasMutated();
                    gettingPages = false;

                })
                .fail(function (error) {
                    gettingPages = false;
                });
        },
        
        navigateToLeague = function (data) {

        },

        navigateToMagazineGameView = function (selectedGame) {
            var navigationItem;
            
            if (selectedGame.GameID !== 0) {
                navigationItem = {
                    getHrefString: function () {
                        return serverurl + "/" + config.hashes.magazinegameview + '/' + selectedGame.GameID;
                    },
                    toClick: function () {
                        var url = serverurl + '/' + config.hashes.magazinegameview + '/' + selectedGame.GameID;
                        var win = window.open(url, '_blank');
                        win.focus();
                    }
                };
            }

            else {
                navigationItem = {
                    getHrefString: function () {
                        return "";
                    },
                    toClick: function () {
                    }
                };
            }

            return navigationItem;
        };

        return {
            initialize: initialize,
            activate: activate,
            cleanup: cleanup,
            infiniteScrolling: infiniteScrolling,
            morePages: morePages,
            blurbsInFeed: blurbsInFeed,
            translation: MagazineTexts,
            isDebug: isDebug,
            navigateToMagazineGameView: navigateToMagazineGameView,
            navigateToLeague: navigateToLeague
        };
    });;
